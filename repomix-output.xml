This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
.cursor/
  mcp.json
.github/
  copilot-instructions.md
docs/
  modules/
    daire-listesi.md
    module-1.md
    onay-bekleyenler.md
    sakin-ekleme.md
    sakin-listesi-analiz.md
    sakin-listesi-be-gelistirme.md
  page-structure/
    financial-list.view.json
    property-view.json
    request-detail-view.json
    request-list-view.json
  action-menu-portal-pattern.md
  ai-context.md
  api-requirements-resident-detail.md
  api-requirements-units-module.md
  information-architect.md
src/
  app/
    api/
      proxy/
        [...path]/
          route.ts
    buttons/
      page.tsx
    components/
      auth/
        AuthProvider.tsx
        LoginForm.tsx
        ProtectedRoute.tsx
      templates/
        GenericGridView.tsx
        GenericListView.tsx
        GridList.tsx
        ListView.tsx
      ui/
        Accordion.tsx
        Alert.tsx
        ApprovalModal.tsx
        Avatar.tsx
        Badge.tsx
        Breadcrumb.tsx
        BulkActionsBar.tsx
        BulkMessageModal.tsx
        Button.tsx
        Card.tsx
        Checkbox.tsx
        Chip.tsx
        Collapse.tsx
        ConfirmationModal.tsx
        DataList.tsx
        DataTable.tsx
        DatePicker.tsx
        DocumentUploadModal.tsx
        DocumentViewer.tsx
        Drawer.tsx
        EditModal.tsx
        EmptyState.tsx
        ExportDropdown.tsx
        FileUpload.tsx
        FilterPanel.tsx
        FloatingActionButton.tsx
        IconButton.tsx
        Input.tsx
        index.ts
        LoadingButton.tsx
        Modal.tsx
        Navbar.tsx
        Pagination.tsx
        PaymentHistoryModal.tsx
        Portal.tsx
        ProfileDropdown.tsx
        ProgressBar.tsx
        RadioButton.tsx
        ResidentRow.tsx
        SearchBar.tsx
        Select.tsx
        Sidebar.tsx
        Skeleton.tsx
        Spinner.tsx
        StatsCard.tsx
        Stepper.tsx
        Table.tsx
        TablePagination.tsx
        Tabs.tsx
        TextArea.tsx
        Toast.tsx
        Tooltip.tsx
        UserCard.tsx
        ViewToggle.tsx
      Content.tsx
      Header.tsx
      Sidebar.tsx
    dashboard/
      announcements/
        [id]/
          edit/
            page.tsx
          page.tsx
        actions/
          announcement-actions.ts
          bulk-actions.ts
        add/
          page.tsx
        components/
          AnnouncementForm.tsx
          table-columns.tsx
        constants/
          index.ts
        hooks/
          useAnnouncementDetail.ts
          useAnnouncementsData.ts
          useAnnouncementsFilters.ts
          useAnnouncementsStats.ts
        page.tsx
      components/
        CreateTicketModal.tsx
        DashboardHeader.tsx
        FinancialChart.tsx
        MaintenanceRequests.tsx
        OccupancyStatus.tsx
        QuickActions.tsx
        RecentActivities.tsx
        RecentTransactions.tsx
        TodaysAgenda.tsx
        TopMetricsGrid.tsx
      financial/
        [id]/
          components/
            FinancialSummaryCard.tsx
            RelatedTransactionsTable.tsx
            TransactionActions.tsx
            TransactionDetailHeader.tsx
          hooks/
            useTransactionDetail.ts
          page.tsx
        components/
          CreateBillForm.tsx
          CreatePaymentForm.tsx
        create/
          bill/
            page.tsx
          components/
            TransactionTypeSelector.tsx
          payment/
            page.tsx
          page.tsx
        hooks/
          useFinancialList.ts
        page.tsx
      requests/
        [id]/
          edit/
            page.tsx
          page.tsx
        actions/
          bulk-actions.ts
        components/
          detail/
            RequestDetailApartment.tsx
            RequestDetailAssignee.tsx
            RequestDetailComments.tsx
            RequestDetailCost.tsx
            RequestDetailHeader.tsx
            RequestDetailImages.tsx
            RequestDetailInfo.tsx
            RequestDetailStatus.tsx
            RequestDetailTimeline.tsx
          RequestsBulkActionsBar.tsx
          RequestsFilterPanel.tsx
          RequestsFiltersBar.tsx
          RequestsGridView.tsx
          RequestsPageHeader.tsx
          RequestsQuickStats.tsx
          RequestsSummaryStats.tsx
          RequestsTableView.tsx
          TicketActivityLog.tsx
        constants/
          index.ts
        hooks/
          useRequestDetail.ts
          useRequestsActions.ts
          useRequestsList.ts
        resolved/
          page.tsx
        waiting/
          page.tsx
        page.tsx
        RequestDetailModal.tsx
      residents/
        [id]/
          edit/
            page.tsx
          page.tsx
        actions/
          bulk-actions.ts
          export-actions.ts
          resident-actions.ts
        add/
          page.tsx
        components/
          table-columns.tsx
        constants/
          index.ts
        pending/
          page.tsx
        services/
          residents-api.service.ts
        types/
          index.ts
        utils/
          stats.ts
          transformations.ts
        page.tsx
      template/
        page.tsx
      units/
        [id]/
          components/
            BasicInfoSection.tsx
            FinancialSummarySection.tsx
            OwnerInfoSection.tsx
            ResidentsSection.tsx
            TenantInfoSection.tsx
          edit/
            page.tsx
          page.tsx
        add/
          page.tsx
        components/
          UnitsAnalytics.tsx
          UnitsFilters.tsx
          UnitsGridView.tsx
          UnitsQuickStats.tsx
          UnitsTableView.tsx
        empty/
          page.tsx
        maintenance/
          page.tsx
        page.tsx
      page.tsx
    data-display/
      page.tsx
    demo/
      page.tsx
    feedback/
      page.tsx
    layout-demo/
      page.tsx
    login/
      page.tsx
    navigation/
      page.tsx
    qr/
      page.tsx
    settings/
      system-parameters/
        page.tsx
      system-settings/
        page.tsx
      user-management/
        page.tsx
      website-info/
        page.tsx
    user/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  hooks/
    useAuditLogs.ts
    useDashboardMetrics.ts
    useFamilyMembers.ts
    useMaintenanceRequests.ts
    useMyProperties.ts
    usePendingResidents.ts
    usePropertyDetail.ts
    useResidentData.ts
    useResidentDocuments.ts
    useResidentsActions.ts
    useResidentsData.ts
    useResidentsFilters.ts
    useResidentsStats.ts
    useResidentsUI.ts
    useResidentTickets.ts
    useResolvedTickets.ts
    useTicketStats.ts
    useToast.ts
    useUnitDetail.ts
    useUnitsActions.ts
    useUnitsData.ts
    useUnitsFilters.ts
    useWaitingTickets.ts
  lib/
    handleModalAction.ts
    utils.ts
  services/
    api/
      client.ts
    config/
      api.config.ts
    core/
      base.service.ts
      types.ts
    types/
      announcement.types.ts
      auth.types.ts
      billing.types.ts
      family-member.types.ts
      financial-list.types.ts
      property.types.ts
      request-detail.types.ts
      request-list.types.ts
      resident.types.ts
      unit-detail.types.ts
      user.types.ts
    utils/
      logger.ts
      token-manager.ts
    admin-resident.service.ts
    announcement.service.ts
    auth.service.ts
    billing.service.ts
    family-member.service.ts
    file-upload.service.ts
    index.ts
    logging.service.ts
    payment.service.ts
    property.service.ts
    qr-code.service.ts
    README.md
    resident.service.ts
    residents-stats.service.ts
    ticket.service.ts
    units.service.ts
    user.service.ts
.claude-project
.cursorrules
.env.example
.gitignore
.mcp.json
auth-register-endpoint.md
CLAUDE.md
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/copilot-instructions.md">
# GitHub Copilot Instructions for NinetyNineAdmin

## Project Overview
**NinetyNineAdmin** is a web project built with modern TypeScript technologies.

NinetyNineAdmin project created with Pare CLI

## Technology Stack

### Frontend Stack:
- **Next.js 14** - React framework with App Router
- **React 18** - UI library with modern hooks
- **TypeScript** - Type-safe JavaScript
- **Tailwind CSS** - Utility-first CSS framework




## Coding Guidelines

### General Principles:
1. **Type Safety First**: Always use TypeScript types and interfaces
2. **Functional Approach**: Prefer functional components and pure functions
3. **Error Handling**: Implement comprehensive error handling
4. **Performance**: Consider performance implications of suggestions
5. **Consistency**: Follow established patterns in the codebase

### React/Next.js Specific:
- Use App Router conventions (`app/` directory)
- Implement Server Components for data fetching
- Use Client Components only when necessary (`'use client'`)
- Follow React Hooks best practices
- Implement proper loading and error states
- Use Tailwind CSS for styling

### Component Patterns:
```typescript
// Server Component (default)
export default async function UserList() {
  const users = await fetchUsers();
  return <div>{/* JSX */}</div>;
}

// Client Component (interactive)
'use client';
export function UserForm() {
  const [user, setUser] = useState<User>();
  return <form>{/* Interactive JSX */}</form>;
}
```


### File Structure Guidelines:

```
src/
├── app/                 # Next.js App Router
│   ├── (routes)/       # Route groups
│   ├── api/           # API routes
│   └── globals.css    # Global styles
├── components/         # Reusable UI components
├── lib/               # Utilities and configurations
└── types/             # TypeScript type definitions
```


## Code Suggestions Guidelines

When providing code suggestions:

1. **Context Awareness**: Consider the existing project structure and patterns
2. **Type Safety**: Always include proper TypeScript types
3. **Best Practices**: Follow framework-specific best practices
4. **Error Handling**: Include appropriate error handling
5. **Performance**: Consider performance implications
6. **Testing**: Suggest testable code patterns


## Common Patterns to Suggest

### React Hooks:
```typescript
// Custom data fetching hook
const useUser = (id: string) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    fetchUser(id).then(setUser).catch(setError).finally(() => setLoading(false));
  }, [id]);
  
  return { user, loading, error };
};
```


---

This project follows modern development practices. Please suggest code that aligns with these guidelines and the established project structure.
</file>

<file path="docs/modules/daire-listesi.md">
# 🏠 Daire/Villa Listesi - Bilgi Mimarisi

## 🏗️ Sayfa Yapısı

### 1. **Üst Başlık ve Özet Bilgiler**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Konut Listesi (2,500 toplam)              [+ Yeni Konut] [⬇ İndir] │
│ Dolu: 2,348 (%94) | Boş: 127 (%5) | Bakımda: 25 (%1)             │
└─────────────────────────────────────────────────────────────────────┘
```

### 2. **Hızlı İstatistik Kartları**

```
┌───────────────┬───────────────┬───────────────┬───────────────┐
│ 🏢 Apartman   │ 🏡 Villa      │ 🏪 Ticari     │ 🅿️ Otopark     │
│ 2,100 ünite   │ 350 ünite     │ 50 ünite      │ 1,800 alan    │
│ %95 dolu      │ %91 dolu      │ %88 dolu      │ %76 dolu      │
└───────────────┴───────────────┴───────────────┴───────────────┘
```

## 📊 Filtre ve Arama Sistemi

### **Arama Çubuğu**

```
🔍 [Blok, daire no, sakin adı, telefon veya özellik ile ara...]
```

### **Gelişmiş Filtreler**

```
┌─────────────────────────────────────────────────────────────────────┐
│ 🏠 Konut Özellikleri          💰 Finansal Durum                    │
├─────────────────────────────────────────────────────────────────────┤
│ Konut Tipi:                   Borç Durumu:                         │
│ [✓] Daire                     ( ) Tümü                             │
│ [✓] Villa                     (•) Borçlu olanlar                   │
│ [ ] Ticari                    ( ) Temiz hesaplar                   │
│                               ( ) Ödeme planında                    │
│ Büyüklük:                                                          │
│ [ ] 1+1 (45-65 m²)           Borç Aralığı:                        │
│ [✓] 2+1 (75-95 m²)           Min: [_______] Max: [_______] ₺      │
│ [✓] 3+1 (110-145 m²)                                              │
│ [ ] 4+1 (150+ m²)            📍 Konum                             │
│                               Blok: [Tümü ▼]                       │
│ 👥 Doluluk Durumu             Kat: [Tümü ▼]                       │
│ (•) Tümü                      Yön: [Tümü ▼]                       │
│ ( ) Dolu                                                           │
│ ( ) Boş                       🏷️ Özel Durumlar                     │
│ ( ) Bakımda                   [ ] Deniz manzaralı                  │
│                               [ ] Bahçeli                          │
│                               [ ] Asansörlü                        │
│                               [ ] Engelli erişimli                 │
└─────────────────────────────────────────────────────────────────────┘
```

## 📋 Ana Tablo Görünümü

### **Tablo Başlıkları**

```
│ □ │ Konut │ Tip │ m² │ Sakin │ Durum │ Borç │ Son Ödeme │ İşlemler │
```

### **Örnek Satır Detayları**

```
┌─────────────────────────────────────────────────────────────────────┐
│ □  A-12   Daire  125  Ahmet YILMAZ    🟢 Dolu   0 ₺     15.12   ⋮ │
│    2+1    🛏️3    👤4   Malik          ✓ Temiz          ödedi      │
│                                                                     │
│ □  B-24   Villa  350  --              🔵 Boş    --      --      ⋮ │
│    4+1    🛏️5    🌳    Satılık        30 gün                       │
│                                                                     │
│ □  C-05   Daire  95   Mehmet ÖZKAN    🟡 Bakım  2,500 ₺ 01.11   ⋮ │
│    2+1    🛏️2    👤2   Kiracı         Su tesisatı     gecikmiş    │
└─────────────────────────────────────────────────────────────────────┘
```

### **Satır İçi Bilgiler**

- **Konut Kodu**: Blok-Daire kombinasyonu
- **Alt Bilgi**: Oda sayısı, özel özellikler
- **Sakin Bilgisi**: İsim, tip (Malik/Kiracı), aile sayısı
- **Durum Göstergeleri**:
  - 🟢 Dolu ve aktif
  - 🔵 Boş
  - 🟡 Bakımda
  - 🔴 Sorunlu (borç/dava)
- **Finansal Özet**: Güncel borç, son ödeme

## 🎨 Görünüm Modları

### **1. Tablo Görünümü** (Varsayılan)

Yukarıda detaylandırıldığı gibi

### **2. Kart Görünümü**

```
┌─────────────┬─────────────┬─────────────┬─────────────┐
│ A-12        │ A-13        │ A-14        │ A-15        │
│ 🏠 3+1      │ 🏠 2+1      │ 🏠 1+1      │ 🏠 3+1      │
│ 125 m²      │ 95 m²       │ 65 m²       │ 125 m²      │
│             │             │             │             │
│ 👤 A.YILMAZ │ 👤 M.KAYA   │ 🔵 BOŞ      │ 👤 F.DEMIR  │
│ ✅ Ödendi   │ ⚠️ 2,500 ₺  │             │ ✅ Ödendi   │
└─────────────┴─────────────┴─────────────┴─────────────┘
```

### **3. Blok Görünümü**

```
┌─────────────────────────────────────────────────────────┐
│ A BLOK (10 Kat, 40 Daire)          Doluluk: %95       │
├─────────────────────────────────────────────────────────┤
│ Kat 10: [12][11][10][09] - Tümü dolu                  │
│ Kat 9:  [12][11][10][09] - 3 dolu, 1 boş             │
│ Kat 8:  [12][11][10][09] - Tümü dolu                  │
│ ...                                                     │
│                                                         │
│ Özet: 38 Dolu | 2 Boş | 125.000 ₺ toplam borç        │
└─────────────────────────────────────────────────────────┘
```

### **4. Harita Görünümü**

```
┌─────────────────────────────────────────────────────────┐
│                    SİTE HARİTASI                        │
├─────────────────────────────────────────────────────────┤
│   [A BLOK]    [B BLOK]    [C BLOK]                    │
│    (%95)       (%92)       (%98)                      │
│                                                         │
│           [SOSYAL TESİS]                               │
│                                                         │
│   [D BLOK]    [OTOPARK]   [E BLOK]                   │
│    (%90)                   (%88)                      │
│                                                         │
│ [VİLLA BÖLGESİ - 350 ünite]                           │
└─────────────────────────────────────────────────────────┘
```

## 🔧 Hızlı İşlemler

### **Satır Üzeri İşlemler**

```
[👁 Detay] [✏️ Düzenle] [👥 Sakin Ata] [💰 Borç] [📋 Rapor] [⋮]
```

### **Toplu İşlemler**

```
Seçili 15 konut için:
[📧 Toplu Bildirim] [💰 Borç Ata] [📊 Rapor Al] [🏷️ Etiketle]
```

### **Sağ Tık Menüsü**

```
┌─────────────────────────┐
│ Konut Detayları        │
│ Sakin Bilgileri        │
│ ─────────────────      │
│ Borç Ata               │
│ Ödeme Kaydet           │
│ ─────────────────      │
│ Bakıma Al              │
│ Boşalt                 │
│ ─────────────────      │
│ Geçmişi Görüntüle      │
│ Not Ekle               │
└─────────────────────────┘
```

## 📊 Konut Detay Modalı

```
┌─────────────────────────────────────────────────────────────────────┐
│ A Blok, Daire 12 - Detaylar                                  [✕]   │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│ [Genel] [Sakinler] [Finansal] [Bakım] [Belgeler] [Geçmiş]        │
│                                                                     │
│ ───────────────── Konut Bilgileri ─────────────────               │
│ Tip: 3+1 Daire                    Brüt Alan: 145 m²               │
│ Kat: 5                            Net Alan: 125 m²                │
│ Blok: A                           Balkon: 2 adet                  │
│ Oda: 3                            Banyo: 2 adet                   │
│                                                                     │
│ ───────────────── Özellikler ─────────────────                    │
│ ✓ Asansör          ✓ Otopark (2)      ✓ Depo                     │
│ ✓ Güney cephe      ✓ Deniz manzara    ✓ Kapalı mutfak           │
│                                                                     │
│ ───────────────── Sayaç Bilgileri ─────────────────               │
│ Elektrik: 12345678    Su: 87654321    Doğalgaz: 11223344         │
│ Son okuma: 15.12.2024                                             │
│                                                                     │
│ [Düzenle] [Sakin Ata] [Bakıma Al] [Rapor]                        │
└─────────────────────────────────────────────────────────────────────┘
```

## 📈 Analiz Paneli (Sağ Sidebar)

```
┌─────────────────────────────┐
│ 📊 Hızlı Analiz            │
├─────────────────────────────┤
│ Doluluk Oranı              │
│ [████████░░] %94           │
│                            │
│ Konut Tipi Dağılımı        │
│ • 1+1: 420 (%17)          │
│ • 2+1: 840 (%34)          │
│ • 3+1: 840 (%34)          │
│ • 4+1: 250 (%10)          │
│ • Villa: 150 (%5)         │
│                            │
│ Borç Durumu                │
│ • Temiz: 2,100            │
│ • Borçlu: 248             │
│ • Toplam: 4.2M ₺          │
│                            │
│ Son 30 Gün                 │
│ • Yeni dolu: 12           │
│ • Boşalan: 8              │
│ • Bakıma giren: 3         │
└─────────────────────────────┘
```

## 🚀 Performans Özellikleri

### **Yükleme Stratejisi**

- İlk yükleme: 50 kayıt
- Scroll ile lazy loading
- Akıllı önbellekleme
- Virtual scrolling (1000+ kayıt)

### **Filtreleme**

- Client-side anlık filtreleme
- Debounced arama (300ms)
- Filtre kombinasyonlarını kaydetme
- Sık kullanılan filtreler

### **Export Seçenekleri**

- Excel (Detaylı/Özet)
- PDF (Görsel raporlar)
- CSV (Veri analizi)
- Özel rapor şablonları

## 📱 Responsive Tasarım

### **Desktop (1200px+)**

- Tam tablo görünümü
- Yan panel analizler
- Çoklu görünüm modları

### **Tablet (768px-1199px)**

- Sadece temel kolonlar
- Kart görünümü öncelikli
- Touch-friendly işlemler

### **Mobile**

- Sadece arama ve filtre
- Kart listesi
- Swipe aksiyonları

Bu bilgi mimarisi, 2,500 konutun etkin yönetimini sağlayacak, hızlı erişim ve analiz imkanları sunacak şekilde tasarlanmıştır. Kullanıcılar hem detaylı bilgilere ulaşabilecek hem de toplu işlemlerle verimliliği artırabilecektir.
</file>

<file path="docs/modules/module-1.md">
# 🔐 Authentication System Development Prompt

## Project Context

You are tasked with creating a comprehensive authentication system for the 99Club residential management admin panel. This system will serve a large-scale housing project with 2,500 units in Iraq, requiring robust security, multi-language support, and role-based access control.

## Your Task

Design and implement a complete authentication module that includes:

### 1. Core Authentication Features

- Secure login/logout functionality with email and password
- JWT-based authentication with refresh token mechanism
- Two-factor authentication option (SMS/Email OTP)
- "Remember me" functionality lasting 30 days
- Password reset flow with email/SMS verification
- Session management allowing maximum 3 concurrent devices
- Automatic session timeout (configurable between 15 minutes to 24 hours)

### 2. Security Requirements

Implement comprehensive security measures including:

- Brute force protection (lock account after 5 failed attempts for 15 minutes)
- Strong password policy (minimum 8 characters, mixed case, numbers, special characters)
- Password history to prevent reuse of last 5 passwords
- Login anomaly detection for new devices/locations
- Complete audit logging for all authentication events
- Rate limiting (100 requests per minute per IP)
- CSRF protection and XSS prevention
- Optional IP whitelist for super admin accounts

### 3. Role-Based Access Control

Create a flexible permission system with these default roles:

- **Super Admin**: Full system access (maximum 2 users)
- **Admin**: Complete site management capabilities
- **Finance Manager**: Financial operations and reporting only
- **Operator**: Daily operations and basic management
- **Viewer**: Read-only access to all permitted sections

Each role should have granular permissions that can be checked throughout the application.

### 4. Multi-Language Support

The system must support three languages with RTL compatibility:

- Turkish (primary language)
- English
- Arabic (with full RTL layout support)

Language preference should be stored per user and applied immediately upon login.

### 5. User Interface Requirements

Create a professional, modern login interface featuring:

- Split-screen design (form on left, branding/carousel on right)
- Fully responsive design with mobile-first approach
- Clean form validation with inline error messages
- Loading states for all async operations
- Smooth transitions and micro-interactions
- Dark mode support (bonus feature)

### 6. Technical Specifications

- **Frontend**: React with TypeScript
- **State Management**: Redux Toolkit or Zustand
- **Styling**: Tailwind CSS or styled-components
- **Form Handling**: React Hook Form with Yup validation
- **API Communication**: Axios with interceptors
- **Token Storage**: Secure httpOnly cookies for refresh tokens
- **Encryption**: bcrypt for passwords, AES for sensitive data

### 7. API Design

Design RESTful endpoints following best practices:

- Consistent error responses with proper HTTP status codes
- Request/response validation
- Proper CORS configuration
- API versioning strategy
- Rate limiting headers
- Comprehensive API documentation

### 8. Testing Requirements

Implement thorough testing:

- Unit tests for all authentication logic
- Integration tests for API endpoints
- E2E tests for critical user flows
- Security testing for common vulnerabilities
- Performance testing for concurrent users
- Accessibility testing (WCAG 2.1 AA compliance)

### 9. Monitoring and Logging

Set up comprehensive monitoring:

- Failed login attempts tracking
- Unusual activity alerts
- Performance metrics (login time, API response time)
- Error tracking and reporting
- User session analytics
- Security event logging

### 10. Additional Considerations

- Implement social login options (Google, Microsoft) for future expansion
- Design the system to handle 10,000+ concurrent users
- Create detailed documentation for other developers
- Implement graceful degradation for poor network conditions
- Design for offline-first capability where possible
- Consider biometric authentication for mobile admin access

## Expected Deliverables

1. Complete authentication module with all features listed above
2. Comprehensive API documentation
3. Security audit report
4. Performance benchmarks
5. Deployment guide with security best practices
6. User manual for different role types

## Success Criteria

- Zero security vulnerabilities in OWASP top 10
- Login process completes in under 2 seconds
- System handles 1000 concurrent login attempts
- 99.9% uptime for authentication services
- Support for all modern browsers (last 2 versions)
- Mobile responsive on all devices
- WCAG 2.1 AA accessibility compliance

Focus on creating a system that is not only secure and functional but also provides an excellent user experience for administrators managing a large residential complex. The authentication system should inspire confidence and be intuitive enough that non-technical staff can use it effectively.
</file>

<file path="docs/modules/onay-bekleyenler.md">
# ⏳ Onay Bekleyenler - Sayfa Bilgi Mimarisi

## 🏗️ Sayfa Yapısı

### 1. **Üst Başlık ve Özet Bilgiler**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Onay Bekleyen Sakinler (47)                       [🔄 Yenile]      │
│ Son 24 saat: 12 | Bu hafta: 28 | Bu ay: 47                        │
└─────────────────────────────────────────────────────────────────────┘
```

### 2. **Kritik Uyarılar Bölümü**

```
┌─────────────────────────────────────────────────────────────────────┐
│ ⚠️ DİKKAT GEREKTİRENLER                                           │
├─────────────────────────────────────────────────────────────────────┤
│ 🔴 3 başvuru 48 saatten uzun süredir bekliyor                     │
│ 🟡 5 başvuruda eksik belge var                                    │
│ 🔵 2 başvuru mükerrer kayıt uyarısı içeriyor                      │
└─────────────────────────────────────────────────────────────────────┘
```

## 📊 Ana İçerik Alanı

### **Filtre ve Arama**

```
┌─────────────────────────────────────────────────────────────────────┐
│ 🔍 [İsim, TC, telefon veya daire no ile ara...]                   │
│                                                                     │
│ Hızlı Filtreler:                                                   │
│ [Tümü (47)] [Bugün (12)] [Eksik Belge (5)] [Çift Kayıt (2)]      │
│                                                                     │
│ Sıralama: [En Yeni ▼] [En Eski] [Blok Sırası] [Öncelik]          │
└─────────────────────────────────────────────────────────────────────┘
```

### **Onay Bekleyen Kartları**

```
┌─────────────────────────────────────────────────────────────────────┐
│ □ Mehmet ÖZKAN                            🔴 2 gün 14 saat bekliyor│
│ ┌─────────────────┬─────────────────────────────────────────────┐ │
│ │ 📷              │ TC: 12345***901                             │ │
│ │ [Fotoğraf]      │ 📱: 0532 123 45 67                         │ │
│ │                 │ 🏠: B Blok, Daire 24 (Kiracı)              │ │
│ │                 │ Kayıt: 06.01.2025 14:30                    │ │
│ └─────────────────┴─────────────────────────────────────────────┘ │
│                                                                     │
│ ⚠️ Uyarılar:                                                       │
│ • Kira sözleşmesi yüklenmemiş                                     │
│ • Malik onayı bekleniyor (Ali YILMAZ)                            │
│                                                                     │
│ [✓ Onayla] [✕ Reddet] [💬 Not Ekle] [📧 Bilgi İste] [👁 İncele]  │
└─────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────┐
│ □ Fatma KAYA                              🟡 18 saat bekliyor     │
│ ┌─────────────────┬─────────────────────────────────────────────┐ │
│ │ 📷              │ TC: 98765***210                             │ │
│ │ [Fotoğraf]      │ 📱: 0555 987 65 43                         │ │
│ │                 │ 🏠: A Blok, Daire 8 (Malik)                │ │
│ │ ✓               │ Kayıt: 07.01.2025 09:15                    │ │
│ └─────────────────┴─────────────────────────────────────────────┘ │
│                                                                     │
│ ✅ Tüm belgeler tam                                                │
│ 📎 Eklenen: Tapu, Kimlik, İkametgah                              │
│                                                                     │
│ [✓ Onayla] [✕ Reddet] [💬 Not Ekle] [👁 İncele]                  │
└─────────────────────────────────────────────────────────────────────┘
```

## 🔍 Detaylı İnceleme Modalı

```
┌─────────────────────────────────────────────────────────────────────┐
│ Başvuru İnceleme - Mehmet ÖZKAN                             [✕]   │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│ [Kişisel] [Konut] [Belgeler] [Kontroller] [Notlar]               │
│                                                                     │
│ ─────────────────── Kişisel Bilgiler ─────────────────────        │
│ TC Kimlik No: 12345678901 ✓ (MERNİS doğrulandı)                  │
│ Ad Soyad: Mehmet ÖZKAN                                            │
│ Doğum: 15.03.1985 - İstanbul                                     │
│ Tel: 0532 123 45 67 (WhatsApp ✓)                                 │
│ E-posta: mehmet.ozkan@email.com                                   │
│                                                                     │
│ ─────────────────── Konut Bilgileri ─────────────────────         │
│ Talep Edilen: B Blok, Daire 24                                    │
│ Konut Durumu: Dolu (Malik: Ali YILMAZ)                           │
│ Sakin Tipi: Kiracı                                                │
│ Kira Başlangıç: 15.01.2025                                       │
│                                                                     │
│ ─────────────────── Sistem Kontrolleri ─────────────────────      │
│ ✓ TC kimlik geçerli                                               │
│ ✓ Yaş uygun (18+)                                                │
│ ⚠️ Malik onayı bekleniyor                                         │
│ ❌ Kira sözleşmesi eksik                                          │
│ ✓ Mükerrer kayıt yok                                             │
│                                                                     │
│ [✓ Onayla] [✕ Reddet] [⏸ Beklet] [📧 Bilgi İste]                │
└─────────────────────────────────────────────────────────────────────┘
```

## 🎯 Toplu İşlem Özellikleri

### **Toplu Onaylama**

```
┌─────────────────────────────────────────────────────────────────────┐
│ 5 başvuru seçildi                                                  │
│                                                                     │
│ Toplu İşlem:                                                       │
│ [✓ Tümünü Onayla] [✕ Tümünü Reddet] [📧 Toplu Bilgi İste]       │
│                                                                     │
│ ⚠️ Dikkat: 2 başvuruda eksik belge var. Yine de onaylansın mı?   │
└─────────────────────────────────────────────────────────────────────┘
```

## 📋 İşlem Formları

### **Onaylama Formu**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Başvuru Onaylama                                            [✕]   │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│ Mehmet ÖZKAN - B Blok, Daire 24                                   │
│                                                                     │
│ Onay Seçenekleri:                                                 │
│ (•) Tam onay - Tüm haklara sahip                                 │
│ ( ) Şartlı onay - Kısıtlı erişim                                 │
│ ( ) Geçici onay - 30 gün deneme süresi                           │
│                                                                     │
│ Otomatik İşlemler:                                                │
│ [✓] QR kod oluştur ve aktifleştir                                │
│ [✓] Mobil uygulama erişimi ver                                   │
│ [✓] Hoşgeldin mesajı gönder                                      │
│ [✓] Aidat borcu oluştur (Başlangıç: 15.01.2025)                 │
│                                                                     │
│ Onay Notu (Opsiyonel):                                           │
│ [____________________________________________]                    │
│                                                                     │
│ [İptal] [Onayla ve Bilgilendir]                                  │
└─────────────────────────────────────────────────────────────────────┘
```

### **Reddetme Formu**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Başvuru Reddetme                                            [✕]   │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│ Red Nedeni*:                                                       │
│ ( ) Eksik belge                                                   │
│ ( ) Yanlış/sahte bilgi                                           │
│ ( ) Malik onayı alınamadı                                         │
│ ( ) Konut uygun değil                                            │
│ ( ) Diğer: [_________________]                                    │
│                                                                     │
│ Detaylı Açıklama*:                                                │
│ [____________________________________________]                    │
│ [____________________________________________]                    │
│                                                                     │
│ Başvuru Sahibine:                                                │
│ [✓] Red nedenini SMS ile bildir                                  │
│ [✓] Red nedenini e-posta ile bildir                              │
│ [ ] Yeniden başvuru hakkı tanı                                   │
│                                                                     │
│ [İptal] [Reddet ve Bilgilendir]                                  │
└─────────────────────────────────────────────────────────────────────┘
```

### **Bilgi İsteme Formu**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Eksik Bilgi/Belge Talebi                                    [✕]   │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│ Eksik Olan:                                                        │
│ [✓] Kira sözleşmesi                                              │
│ [ ] Kimlik fotokopisi                                            │
│ [ ] İkametgah belgesi                                            │
│ [ ] Maaş bordrosu                                                │
│ [✓] Malik onay yazısı                                            │
│ [ ] Diğer: [_________________]                                    │
│                                                                     │
│ Son Teslim Tarihi: [GG/AA/YYYY]                                  │
│                                                                     │
│ Ek Not:                                                           │
│ [____________________________________________]                    │
│                                                                     │
│ İletişim Kanalı:                                                 │
│ [✓] SMS    [✓] E-posta    [ ] Telefon araması                   │
│                                                                     │
│ [İptal] [Gönder]                                                  │
└─────────────────────────────────────────────────────────────────────┘
```

## 📊 Durum Paneli (Sağ Sidebar)

```
┌─────────────────────────────────────────────┐
│ 📈 Bugünün İstatistikleri                   │
├─────────────────────────────────────────────┤
│ Toplam Başvuru: 12                         │
│ Onaylanan: 7                               │
│ Reddedilen: 2                              │
│ Bekleyen: 3                                │
│                                                │
│ 📊 Haftalık Trend                          │
│ [Grafik Alanı]                             │
│                                                │
│ ⏱️ Ortalama İşlem Süresi                   │
│ 2 saat 45 dakika                           │
│                                                │
│ 👥 İşlem Yapan Yöneticiler                 │
│ • Admin1: 5 onay, 1 red                    │
│ • Admin2: 2 onay, 1 red                    │
└─────────────────────────────────────────────┘
```

## 🔔 Bildirim Sistemi

### **Otomatik Hatırlatmalar**

- 24 saat bekleyen başvurular için sarı uyarı
- 48 saat bekleyen başvurular için kırmızı uyarı
- Eksik belge 3 gün tamamlanmazsa otomatik red

### **Yönetici Bildirimleri**

- Yeni başvuru bildirimi
- Acil onay gerektiren durumlar
- Malik onayı gelen başvurular
- Sistem kontrol uyarıları

## 📱 Responsive Tasarım

### **Desktop**

- Kart bazlı liste görünümü
- Sağda sabit istatistik paneli
- Hover'da hızlı önizleme

### **Tablet**

- Tek kolon kart görünümü
- Swipe ile hızlı onay/red
- Dokunmatik optimizasyon

### **Mobile**

- Kompakt kart tasarımı
- Temel bilgiler ön planda
- Tek dokunuş aramalar

Bu bilgi mimarisi, yöneticilerin bekleyen başvuruları hızlıca değerlendirmelerini, eksikleri takip etmelerini ve toplu işlemlerle verimliliği artırmalarını sağlayacak şekilde tasarlanmıştır.
</file>

<file path="docs/modules/sakin-ekleme.md">
# 👤 Yeni Sakin Ekle - Hızlı Kayıt Bilgi Mimarisi

## 🏗️ Sayfa Yapısı

### 1. **Üst Başlık**

```
┌─────────────────────────────────────────────────────────────────────┐
│ [←] Yeni Sakin - Hızlı Kayıt                      [Kaydet] [İptal] │
│ Temel bilgileri girerek sakini kaydedin, detayları sonra ekleyin  │
└─────────────────────────────────────────────────────────────────────┘
```

## 📋 Hızlı Kayıt Formu

### **Tek Sayfa Form Yapısı**

```
┌─────────────────────────────────────────────────────────────────────┐
│                         ZORUNLU BİLGİLER                            │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│ 👤 Kimlik Bilgileri                                               │
│ ─────────────────────                                             │
│ Kimlik Tipi: (•) TC Kimlik  ( ) Pasaport  ( ) Geçici Kimlik      │
│                                                                     │
│ TC/Kimlik No*: [___________] ✓                                    │
│ Ad*: [_________________]    Soyad*: [_________________]           │
│                                                                     │
│ 📱 İletişim                                                        │
│ ─────────────────────                                             │
│ Cep Telefonu*: [+90] [5XX XXX XX XX]  [✓ WhatsApp]               │
│ E-posta: [_____________________@________]                          │
│                                                                     │
│ 🏠 Konut Atama                                                     │
│ ─────────────────────                                             │
│ Sakin Tipi*: (•) Malik  ( ) Kiracı  ( ) Aile Üyesi               │
│                                                                     │
│ Blok*: [Seçiniz ▼]  Daire No*: [Seçiniz ▼]                      │
│                                                                     │
│ ℹ️ A Blok, Daire 12 - 3+1, 145m² (Boş)                           │
│                                                                     │
│ ⚡ Hızlı Seçenekler                                                │
│ ─────────────────────                                             │
│ [ ] Aidat başlangıç tarihi: Bugün                                 │
│ [ ] Standart aidat tutarını uygula (2,500 ₺)                     │
│ [ ] Mobil uygulama daveti gönder                                  │
│ [ ] QR kod oluştur ve aktifleştir                                 │
│                                                                     │
├─────────────────────────────────────────────────────────────────────┤
│ 💡 İpucu: Sakin kaydedildikten sonra detay sayfasından tüm        │
│ bilgileri ekleyebilir ve düzenleyebilirsiniz.                     │
└─────────────────────────────────────────────────────────────────────┘
```

## 🎯 Form Özellikleri

### **Validasyon**

- TC kimlik algoritma kontrolü
- Telefon format kontrolü (5XXXXXXXXX)
- Çakışma kontrolü (TC ve Daire)
- Zorunlu alan kontrolleri (\*)

### **Otomatik İşlemler**

- TC doğrulama servisi (opsiyonel)
- Konut müsaitlik kontrolü
- Benzer kayıt uyarısı
- Otomatik büyük harf dönüşümü (ad/soyad)

### **Hata Yönetimi**

```
⚠️ Bu TC kimlik numarası ile kayıtlı sakin bulunmaktadır.
   [Mevcut Kaydı Görüntüle] [Yine de Devam Et]

❌ Seçilen daire dolu görünüyor. Lütfen kontrol edin.
   Mevcut Sakin: Mehmet ÖZTÜRK (Malik)
```

## 💾 Kayıt Sonrası Yönlendirme

### **Başarılı Kayıt Sonrası**

```
┌─────────────────────────────────────────────────────────────────────┐
│ ✅ Sakin başarıyla kaydedildi!                                     │
│                                                                     │
│ Ahmet YILMAZ - A Blok, Daire 12                                   │
│ Kayıt No: #2024-1234                                               │
│                                                                     │
│ Şimdi ne yapmak istersiniz?                                        │
│                                                                     │
│ [Detayları Düzenle] [Yeni Sakin Ekle] [Sakin Listesine Dön]      │
└─────────────────────────────────────────────────────────────────────┘
```

## 📄 Sakin Detay Sayfası Yapısı

Hızlı kayıt sonrası yönlendirilen detay sayfası:

### **Üst Bilgi Alanı**

```
┌─────────────────────────────────────────────────────────────────────┐
│ [←] Ahmet YILMAZ                          [✏️ Düzenle] [⋮ Diğer]   │
│ A Blok, Daire 12 • Malik • Aktif                                  │
└─────────────────────────────────────────────────────────────────────┘
```

### **Tab Yapısı**

```
[Genel Bilgiler] [Finansal] [Aile & Araçlar] [Belgeler] [Aktiviteler]
```

### **Tab 1: Genel Bilgiler**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Kişisel Bilgiler                                      [✏️ Düzenle] │
│ ─────────────────────────────────────────────────────             │
│ 📷 [Fotoğraf]  TC No: 12345678901                                 │
│                Ad: Ahmet                                           │
│                Soyad: YILMAZ                                       │
│                Doğum Tarihi: -- [Ekle]                            │
│                Kan Grubu: -- [Ekle]                               │
│                                                                     │
│ İletişim Bilgileri                                   [✏️ Düzenle] │
│ ─────────────────────────────────────────────────────             │
│ 📱 Cep: 0532 123 45 67 (WhatsApp ✓)                              │
│ ✉️ E-posta: --                                       [Ekle]       │
│ 🏠 Adres: --                                         [Ekle]       │
│                                                                     │
│ Konut Bilgileri                                      [✏️ Düzenle] │
│ ─────────────────────────────────────────────────────             │
│ 🏠 A Blok, Daire 12 (3+1, 145m²)                                 │
│ Sakin Tipi: Malik                                                 │
│ Giriş Tarihi: 08.01.2025                                          │
│ Tapu No: --                                          [Ekle]       │
└─────────────────────────────────────────────────────────────────────┘
```

### **Tab 2: Finansal**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Aidat ve Ödemeler                                    [✏️ Düzenle] │
│ ─────────────────────────────────────────────────────             │
│ Aidat Başlangıcı: 08.01.2025                                      │
│ Aylık Aidat: 2,500 ₺ (Standart)                                  │
│ Güncel Borç: 0 ₺                                                  │
│ Üyelik Tipi: Standart                               [Yükselt]     │
│                                                                     │
│ Fatura Bilgileri                                     [✏️ Düzenle] │
│ ─────────────────────────────────────────────────────             │
│ Fatura Tipi: Şahıs                                                │
│ Vergi No: --                                         [Ekle]       │
└─────────────────────────────────────────────────────────────────────┘
```

### **Tab 3: Aile & Araçlar**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Aile Üyeleri (0)                                     [+ Ekle]     │
│ ─────────────────────────────────────────────────────             │
│ Henüz aile üyesi eklenmemiş.                                      │
│                                                                     │
│ Araçlar (0)                                          [+ Ekle]     │
│ ─────────────────────────────────────────────────────             │
│ Henüz araç kaydı eklenmemiş.                                      │
│                                                                     │
│ Özel Durumlar                                        [✏️ Düzenle] │
│ ─────────────────────────────────────────────────────             │
│ [ ] Engelli sakini                                                │
│ [ ] Evcil hayvan sahibi                                          │
│ Acil Durum İrtibat: --                              [Ekle]       │
└─────────────────────────────────────────────────────────────────────┘
```

## 🔧 Düzenleme Modal Örnekleri

### **Hızlı Düzenleme Modal**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Kişisel Bilgileri Düzenle                           [✕]           │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│ Doğum Tarihi: [GG/AA/YYYY]                                        │
│ Doğum Yeri: [_________________]                                   │
│ Kan Grubu: [Seçiniz ▼]                                            │
│ Medeni Durum: [Seçiniz ▼]                                         │
│                                                                     │
│ [İptal] [Kaydet]                                                   │
└─────────────────────────────────────────────────────────────────────┘
```

## 🚀 Avantajlar

### **Hızlı Kayıt**

- 30 saniyede sakin kaydı
- Sadece 5 zorunlu alan
- Anında aktif kayıt
- Minimum validasyon

### **Esnek Düzenleme**

- İstenen zaman detay ekleme
- Alan bazında düzenleme
- Toplu güncelleme imkanı
- Versiyon takibi

### **Kullanıcı Deneyimi**

- Tek sayfa basitlik
- Açık ve net yönlendirmeler
- Contextual yardımlar
- Progressive disclosure

Bu yaklaşım, yöneticilerin acil durumlarda hızlıca sakin kaydı yapmalarını sağlarken, detaylı bilgileri sonradan eklemelerine olanak tanır. Böylece kayıt süreci hızlanır ve kullanıcı deneyimi iyileşir.
</file>

<file path="docs/modules/sakin-listesi-analiz.md">
# Sakin Listesi Modülü - Analiz Raporu

## Dosya Konumu
`src/app/dashboard/residents/page.tsx`

## Mevcut Aksiyonlar

### 1. Üst Seviye Aksiyonlar
- **Yenile** - Listeyi güncelleme
- **İndir** - Veriyi dışa aktarma
- **Yeni Sakin** - Yeni sakin ekleme

### 2. Arama ve Filtreleme
- **Arama** - Ad, soyad, TC/pasaport, telefon, daire no ile arama
- **Gelişmiş Filtre** - Detaylı filtreleme seçenekleri
- **Gruplama** - Veriyi gruplandırma

### 3. Toplu İşlemler
- **Toplu Mail** - Seçili sakinlere mail gönderme
- **SMS Gönder** - Seçili sakinlere SMS gönderme
- **PDF Oluştur** - Seçili verileri PDF'e aktarma
- **Etiket Ata** - Seçili sakinlere etiket atama

### 4. Satır Bazlı İşlemler
- **Görüntüle** (Eye icon)
- **Düzenle** (Edit icon)
- **Mesaj Gönder** (MessageSquare icon)
- **Diğer İşlemler** (MoreVertical icon)
- **Telefon Et** (Phone icon)

### 5. Görünüm Kontrolleri
- **Sayfa başına kayıt sayısı** (25/50/100)
- **Grid görünümü**
- **Liste görünümü**
- **Katmanlı görünüm**

## Eksik Olabilecek Aksiyonlar

1. **Sakin Silme** - Trash2 icon import edilmiş ama kullanılmamış
2. **Dışa Aktarma Formatları** - Excel, CSV seçenekleri
3. **Yazdırma** - Print işlevi
4. **Sakin Durumu Değiştirme** - Aktif/Pasif yapma
5. **Not Ekleme** - Sakinle ilgili not tutma
6. **Belge Yönetimi** - Sakin belgeleri
7. **Ödeme Geçmişi** - Borç detayı görüntüleme
8. **Sakin Geçmişi** - Log/aktivite takibi
9. **QR Kod** - Sakin kartı oluşturma
10. **Toplu Durum Güncelleme** - Seçili sakinlerin durumunu değiştirme

## Reusable Component Önerileri

### Mevcut Kullanılan Componentler
- **ProtectedRoute** - Auth koruması
- **DashboardHeader** - Sayfa başlığı ve breadcrumb
- **Sidebar** - Sol menü
- **Card** - Kart container
- **Button** - Buton komponenti
- **Badge** - Durum/tip gösterimi

### Oluşturulabilecek Reusable Componentler

#### 1. SearchBar Component
```typescript
interface SearchBarProps {
  placeholder: string;
  onSearch: (value: string) => void;
  icon?: React.ComponentType;
}
```

#### 2. StatsCard Component
```typescript
interface StatsCardProps {
  value: number | string;
  label: string;
  percentage?: string;
  color?: string;
}
```

#### 3. BulkActionsBar Component
```typescript
interface BulkActionsBarProps {
  selectedCount: number;
  actions: Array<{
    label: string;
    icon: React.ComponentType;
    onClick: () => void;
  }>;
}
```

#### 4. DataTable Component
```typescript
interface DataTableProps {
  columns: Column[];
  data: any[];
  onRowAction: (action: string, row: any) => void;
  selectable?: boolean;
  pagination?: PaginationProps;
}
```

#### 5. TablePagination Component
```typescript
interface TablePaginationProps {
  currentPage: number;
  totalPages: number;
  totalRecords: number;
  recordsPerPage: number;
  onPageChange: (page: number) => void;
}
```

#### 6. ViewToggle Component
```typescript
interface ViewToggleProps {
  views: ['grid', 'list', 'layers'];
  activeView: string;
  onViewChange: (view: string) => void;
}
```

#### 7. ResidentRow Component
```typescript
interface ResidentRowProps {
  resident: Resident;
  onAction: (action: string) => void;
  selectable?: boolean;
}
```

#### 8. FilterPanel Component
```typescript
interface FilterPanelProps {
  filters: Filter[];
  onApply: (filters: any) => void;
  onReset: () => void;
}
```

## Sayfa Yapısı ve İstatistikler

### Mevcut İstatistikler
- **Toplam Sakin**: 2,348 aktif
- **Malik**: 1,856 (%79)
- **Kiracı**: 492 (%21)
- **Borçlu**: 287 (%12)
- **Gold Üye**: 156 (%7)

### Tablo Kolonları
- Fotoğraf
- Ad Soyad (TC/pasaport ile)
- Konut (Blok - Daire no, daire tipi)
- Tip (Malik/Kiracı)
- Telefon (arama butonu ile)
- Borç (₺ tutarı)
- Durum (Aktif/Beklemede)
- İşlemler (Görüntüle, Düzenle, Mesaj, Diğer)

## Geliştirme Önerileri

1. **Component Ayrıştırma**: Büyük sayfa componentini daha küçük, yeniden kullanılabilir componentlere ayırın
2. **State Management**: Sakin verilerini ve filtreleri yönetmek için uygun state management çözümü
3. **API Integration**: Gerçek veri entegrasyonu için service layer kullanımı
4. **Responsive Design**: Mobil uyumluluğu artırma
5. **Accessibility**: Klavye navigasyonu ve screen reader desteği
6. **Performance**: Büyük veri setleri için virtual scrolling veya infinite scroll
7. **Error Handling**: Hata durumlarında kullanıcı dostu mesajlar

## Tarih
Analiz Tarihi: 2025-07-08
</file>

<file path="docs/modules/sakin-listesi-be-gelistirme.md">
# 👥 Sakinler Modülü - Sakin Listesi Bilgi Mimarisi

## 🏗️ Sayfa Yapısı

### 1. **Üst Başlık Alanı**

```
┌─────────────────────────────────────────────────────────────────────┐
│ Sakinler (2,348 aktif)                    [+ Yeni Sakin] [⬇ İndir] │
│ Son güncelleme: 5 dakika önce            [🔄 Yenile]               │
└─────────────────────────────────────────────────────────────────────┘
```

### 2. **Filtre ve Arama Bölümü**

#### **Hızlı Arama Çubuğu**

```
🔍 [Ad, soyad, TC/pasaport, telefon, daire no ile ara...]
```

#### **Gelişmiş Filtreler**

```
├── Konut Bilgileri
│   ├── Blok Seçimi (Çoklu)
│   ├── Daire Tipi (1+1, 2+1, 3+1, Villa)
│   ├── Kat Numarası
│   └── Konut Durumu (Dolu/Boş)
│
├── Sakin Durumu
│   ├── Tip (Malik/Kiracı/Aile Üyesi)
│   ├── Yaşam Durumu (Aktif/Taşındı/Askıda)
│   ├── Üyelik Tipi (Gold/Silver/Standart)
│   └── Kayıt Tarihi Aralığı
│
├── Finansal Durum
│   ├── Borç Durumu (Borçlu/Temiz/Ödeme Planı)
│   ├── Borç Aralığı (Min-Max)
│   ├── Son Ödeme Tarihi
│   └── Ödeme Yöntemi Tercihi
│
└── Özel Durumlar
    ├── Yaş Grubu (Çocuk/Genç/Yetişkin/Yaşlı)
    ├── Engelli Durumu
    ├── Araç Sahipliği
    └── Evcil Hayvan Sahipliği
```

### 3. **Hızlı İstatistikler Şeridi**

```
┌──────────────┬──────────────┬──────────────┬──────────────┬──────────────┐
│ Toplam Sakin │ Malik        │ Kiracı       │ Borçlu       │ Gold Üye     │
│ 2,348        │ 1,856 (%79)  │ 492 (%21)    │ 287 (%12)    │ 156 (%7)     │
└──────────────┴──────────────┴──────────────┴──────────────┴──────────────┘
```

### 4. **Ana Tablo Yapısı**

#### **Tablo Kolonları**

```
│ □ │ Fotoğraf │ Ad Soyad │ Konut │ Tip │ Telefon │ Borç │ Durum │ İşlemler │
```

#### **Detaylı Kolon Açıklamaları**

1. **Seçim Kutusu**: Toplu işlemler için
2. **Fotoğraf**:

   - Profil fotoğrafı thumbnail
   - Hover'da büyütme
   - Varsayılan avatar

3. **Ad Soyad**:

   - İsim + Soyisim
   - Altında TC/Pasaport No (maskelenmiş)
   - Üyelik rozeti (Gold/Silver)

4. **Konut Bilgisi**:

   - Blok + Daire No
   - Konut tipi ikonu
   - Malik/Kiracı etiketi

5. **Sakin Tipi**:

   - Malik (Yeşil)
   - Kiracı (Mavi)
   - Aile Üyesi (Gri)

6. **İletişim**:

   - Cep telefonu
   - WhatsApp ikonu
   - Arama ikonu

7. **Finansal Durum**:

   - Toplam borç
   - Renk kodlaması
   - Trend ikonu (↑↓)

8. **Durum**:

   - Aktif (Yeşil nokta)
   - Taşındı (Gri nokta)
   - Askıda (Sarı nokta)

9. **Hızlı İşlemler**:
   - Görüntüle (👁)
   - Düzenle (✏️)
   - Mesaj (💬)
   - Diğer (⋮)

### 5. **Satır Genişletme Detayları**

Tabloda satıra tıklandığında açılan ek bilgiler:

```
├── Aile Üyeleri (3 kişi)
├── Araçlar (2 araç - 34 ABC 123)
├── Son 3 Ödeme
├── Açık Talepler (2)
└── Notlar
```

### 6. **Toplu İşlemler Menüsü**

Seçili sakinler için:

```
[📧 Toplu Mail] [💬 SMS Gönder] [📄 PDF Oluştur] [🏷️ Etiket Ata] [🗑️ Sil]
```

### 7. **Sayfalama ve Görünüm Kontrolleri**

```
Göster: [25 ▼] kayıt     [◀ Önceki] Sayfa 1 / 94 [Sonraki ▶]
Görünüm: [▦ Grid] [☰ Liste] [📋 Kompakt]
```

## 📊 Veri Organizasyonu

### **Sıralama Seçenekleri**

- Ad Soyad (A-Z / Z-A)
- Kayıt Tarihi (Yeni-Eski / Eski-Yeni)
- Borç Miktarı (Çok-Az / Az-Çok)
- Blok-Daire No
- Son Aktivite

### **Gruplama Seçenekleri**

- Blok bazında
- Sakin tipi bazında
- Borç durumu bazında
- Üyelik tipi bazında

## 🎨 Görsel Hiyerarşi

### **Renk Kodlaması**

- **Yeşil**: Borcu olmayan, aktif sakinler
- **Sarı**: Ödeme planında olanlar
- **Kırmızı**: Yüksek borçlu (3 ay üzeri)
- **Mavi**: Yeni kayıtlar (30 gün içi)
- **Gri**: Pasif/taşınmış sakinler

### **İkon Sistemi**

- 👤 Malik
- 🏠 Kiracı
- 👨‍👩‍👧‍👦 Aile üyesi
- 🌟 Gold üye
- ⭐ Silver üye
- 🚗 Araç sahibi
- 🐕 Evcil hayvan sahibi
- ♿ Engelli sakini

## 🔄 Dinamik Özellikler

### **Gerçek Zamanlı Güncellemeler**

- Yeni sakin kayıtları
- Borç ödemeleri
- Durum değişiklikleri
- Taşınma bildirimleri

### **Akıllı Öneriler**

- Benzer sakinleri göster
- Aynı blokta yaşayanlar
- Borç hatırlatması gönderilecekler
- Doğum günü yaklaşanlar

## 📱 Responsive Tasarım

### **Desktop (1200px+)**

- Tüm kolonlar görünür
- Yan panel filtreler
- Genişletilmiş satır detayları

### **Tablet (768px-1199px)**

- Temel kolonlar
- Dropdown filtreler
- Swipe ile diğer kolonlar

### **Mobile (Acil Erişim)**

- İsim + Daire + Telefon
- Arama ve temel filtreler
- Kart bazlı görünüm

## ⚡ Performans Hedefleri

- İlk yükleme: < 2 saniye
- Arama sonuçları: < 500ms
- Filtre uygulaması: < 1 saniye
- Sayfa geçişi: < 500ms
- Excel export: < 5 saniye (2500 kayıt)

Bu bilgi mimarisi, yöneticilerin binlerce sakini etkin bir şekilde yönetmelerini, hızlı erişim sağlamalarını ve toplu işlemler yapmalarını kolaylaştıracak şekilde tasarlanmıştır.

---

# 📤 Sakin Listesi Dışa Aktarım (Export) Özelliği

## 1. Mimari Karar: Export İşlemi FE mi, BE mi?

### Backend Export (Önerilen Yaklaşım)
- Büyük veri setlerinde performanslı ve güvenli.
- Hassas veriler client'a taşınmaz.
- Tüm kullanıcılar için tutarlı çıktı.
- Gelişmiş PDF/Excel formatlama imkanı.

### Frontend Export
- Küçük veri setlerinde hızlı prototipleme için uygun.
- Büyük veri setlerinde tarayıcıyı yavaşlatır.
- Gelişmiş formatlama ve güvenlik kısıtlı.

**Karar:**
> Sakin Listesi gibi büyük ve hassas veri içeren modüllerde export işlemi backend'de yapılmalıdır.

## 2. API Endpoint Tasarımı

Export işlemleri için aşağıdaki endpointler önerilir:

```
GET /api/residents/export/pdf
GET /api/residents/export/excel
GET /api/residents/export/csv
GET /api/residents/export/json
```

- **Tüm filtreler, arama ve sıralama parametreleri** query string ile iletilir.
- **Kullanıcı hangi filtreleri seçtiyse, sadece o filtrelere uyan veriler indirilir.**
- Response: İlgili formatta dosya (Content-Disposition: attachment)

## 3. Frontend Entegrasyon

Export butonuna tıklandığında FE'de örnek kullanım:

```typescript
const handleExport = async (format: 'pdf' | 'excel' | 'csv' | 'json') => {
  const params = new URLSearchParams({
    ...filters, // Kullanıcının seçtiği tüm filtreler
    search: searchQuery,
    orderColumn: sortConfig.key,
    orderBy: sortConfig.direction
  });
  const response = await fetch(`/api/residents/export/${format}?${params}`);
  const blob = await response.blob();
  // Download logic
};
```

> **Not:** Export edilen dosya, kullanıcının o anda uyguladığı filtreler, arama ve sıralama ile birebir aynı verileri içermelidir.

## 4. Kullanıcı Deneyimi
- Export işlemi sırasında loading göstergesi.
- Büyük dosyalarda progress bar önerilir.
- Hata durumunda kullanıcıya bildirim.

## 5. Test ve Performans
- 2500+ kayıt için <5 sn hedefi.
- Farklı filtre ve sıralama kombinasyonları test edilmeli.

---
</file>

<file path="docs/action-menu-portal-pattern.md">
# ActionMenu Portal + Dinamik Pozisyonlama Patterni

Bu doküman, NinetyNine Admin Web projesinde ActionMenu (üç nokta menüsü) gibi açılır menülerin ekranın dışına taşmaması ve her zaman görünür olması için kullanılan **Portal + Dinamik Pozisyonlama** yaklaşımını açıklar.

## Amaç
- Açılır menülerin (dropdown, context menu, action menu) parent container'ın overflow veya scroll'una takılmadan, her zaman ekranda tam görünür olması.
- Menü ekranın altına/sağına taşarsa otomatik olarak yukarıya veya sola kayması.
- Tüm ActionMenu componentlerinde tekrar kullanılabilir bir çözüm sunmak.

---

## Kullanılan Yöntemler

1. **Portal Componenti**
   - Menü, React Portal ile doğrudan `<body>`'ye render edilir.
   - Böylece parent'ın overflow/scroll kısıtlamalarından etkilenmez.

2. **Dinamik Pozisyonlama**
   - Menü açıldığında, tetikleyici butonun (`ref`) konumu ölçülür.
   - Menü yüksekliği ve genişliği tahmini olarak belirlenir.
   - Eğer menü ekranın altına taşacaksa yukarıya, sola taşacaksa sola kaydırılır.
   - Pozisyon, `style` ile inline olarak verilir.

3. **Dışarı Tıklayınca Kapatma**
   - Menü açıkken, dışarı tıklanırsa menü kapanır.

4. **Uzun Menüde Scroll**
   - Menüye `max-h-72` veya `max-h-80` ve `overflow-auto` Tailwind sınıfları eklenir.

---

## Portal Componenti (src/app/components/ui/Portal.tsx)
```tsx
import { useEffect, useRef } from "react";
import { createPortal } from "react-dom";

export default function Portal({ children }: { children: React.ReactNode }) {
  const elRef = useRef<HTMLDivElement | null>(null);

  if (!elRef.current) {
    elRef.current = document.createElement("div");
  }

  useEffect(() => {
    const portalRoot = document.body;
    portalRoot.appendChild(elRef.current!);
    return () => {
      portalRoot.removeChild(elRef.current!);
    };
  }, []);

  return createPortal(children, elRef.current);
}
```

---

## ActionMenu Kullanım Örneği

```tsx
import React, { useRef, useState, useEffect } from "react";
import Portal from '@/app/components/ui/Portal';

const ActionMenu = ({ onAction }) => {
  const [isOpen, setIsOpen] = useState(false);
  const buttonRef = useRef<HTMLButtonElement>(null);
  const [menuStyle, setMenuStyle] = useState<React.CSSProperties>({});

  useEffect(() => {
    if (isOpen && buttonRef.current) {
      const rect = buttonRef.current.getBoundingClientRect();
      const menuHeight = 160; // tahmini yükseklik
      const menuWidth = 180;
      const padding = 8;
      let top = rect.bottom + window.scrollY + padding;
      let left = rect.right + window.scrollX - menuWidth;
      if (top + menuHeight > window.innerHeight + window.scrollY) {
        top = rect.top + window.scrollY - menuHeight - padding;
      }
      if (left < 0) {
        left = padding;
      }
      setMenuStyle({
        position: 'absolute',
        top,
        left,
        zIndex: 9999,
        minWidth: menuWidth,
      });
    }
  }, [isOpen]);

  useEffect(() => {
    if (!isOpen) return;
    const handleClick = (e: MouseEvent) => {
      if (buttonRef.current && !buttonRef.current.contains(e.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClick);
    return () => document.removeEventListener('mousedown', handleClick);
  }, [isOpen]);

  return (
    <div className="flex items-center justify-center">
      <button
        ref={buttonRef}
        className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
        onClick={e => {
          e.stopPropagation();
          setIsOpen(v => !v);
        }}
        type="button"
      >
        {/* ...icon... */}
      </button>
      {isOpen && (
        <Portal>
          <div
            style={menuStyle}
            className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 py-1 max-h-72 overflow-auto"
          >
            {/* Menü içeriği */}
            <button onClick={() => { setIsOpen(false); onAction("view"); }} className="...">Detay</button>
            {/* ...diğer butonlar... */}
          </div>
        </Portal>
      )}
    </div>
  );
};
```

---

## Notlar
- Menü yüksekliği ve genişliği, menü içeriğine göre ayarlanabilir.
- Eğer menüde çok fazla buton varsa, `max-h-80` ve `overflow-auto` ile scroll eklenebilir.
- Bu pattern, tüm ActionMenu, Dropdown, ContextMenu gibi açılır menülerde tekrar kullanılabilir.
- Eğer farklı bir pozisyonlama ihtiyacı olursa, pozisyon hesaplama fonksiyonu güncellenebilir.

---

## Kullanıldığı Yerler
- `src/app/dashboard/requests/page.tsx`
- `src/app/dashboard/requests/waiting/page.tsx`
- `src/app/dashboard/requests/resolved/page.tsx`
- `src/app/dashboard/units/page.tsx`
- `src/app/dashboard/residents/page.tsx`

---

## Geliştirme
- Eğer menüde animasyon veya daha gelişmiş pozisyonlama istenirse, Popper.js gibi bir kütüphane de entegre edilebilir.
- Bu pattern, projenin diğer bölümlerinde de referans olarak kullanılabilir.
</file>

<file path="docs/ai-context.md">
# AI Context for NinetyNineAdmin

This document provides comprehensive context for AI assistants working on the NinetyNineAdmin project.

## Project Overview

**Name**: NinetyNineAdmin  
**Type**: web  
**Description**: NinetyNineAdmin project created with Pare CLI

## Architecture

### Frontend Architecture
- **Framework**: Next.js 14 with App Router
- **UI Library**: React 18
- **Styling**: Tailwind CSS
- **Language**: TypeScript
- **State Management**: React hooks + Context API (add Zustand/Redux if needed)





## Development Guidelines

### Code Organization
```
src/
├── app/                    # Next.js App Router
│   ├── (dashboard)/       # Dashboard routes
│   ├── (auth)/           # Authentication routes
│   ├── api/              # API routes
│   ├── globals.css       # Global styles
│   ├── layout.tsx        # Root layout
│   └── page.tsx          # Home page
├── components/            # Reusable UI components
│   ├── ui/               # Base UI components
│   └── forms/            # Form components
├── lib/                  # Utilities and configurations
│   ├── utils.ts          # Utility functions
│   ├── validations.ts    # Zod schemas
│   └── api.ts            # API client
└── types/                # TypeScript definitions
```


### Naming Conventions
- **Components**: PascalCase (e.g., `UserProfile`)
- **Functions/Variables**: camelCase (e.g., `getUserData`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `API_BASE_URL`)
- **Files**: kebab-case (e.g., `user-profile.tsx`)
- **Interfaces/Types**: PascalCase with descriptive names

### TypeScript Best Practices
1. Always define proper interfaces/types
2. Use union types for controlled values
3. Implement generic types for reusable components
4. Avoid `any` type - use `unknown` when necessary
5. Utilize type guards for runtime type checking

### React/Next.js Best Practices
1. Use Server Components by default, Client Components when needed
2. Implement proper loading and error states
3. Use React Suspense for data fetching
4. Follow the composition pattern over inheritance
5. Keep components small and focused on single responsibility


## Common Patterns

### Form Handling
```typescript
import { useState } from 'react';
import { z } from 'zod';

const UserSchema = z.object({
  email: z.string().email(),
  firstName: z.string().min(1),
});

type UserFormData = z.infer<typeof UserSchema>;

export function UserForm() {
  const [formData, setFormData] = useState<UserFormData>();
  const [errors, setErrors] = useState<Record<string, string>>();
  
  const handleSubmit = async (data: UserFormData) => {
    try {
      const validData = UserSchema.parse(data);
      await submitUser(validData);
    } catch (error) {
      // Handle validation errors
    }
  };
}
```

### Data Fetching
```typescript
import { use } from 'react';

// Server Component
export default function UserList() {
  const users = use(fetchUsers());
  
  return (
    <div>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  );
}
```


## Testing Strategy

### Frontend Testing
- **Unit Tests**: Jest + React Testing Library
- **Integration Tests**: Test user workflows
- **E2E Tests**: Playwright (recommended)


## Performance Considerations

### Frontend Performance
- Use Next.js Image optimization
- Implement code splitting with dynamic imports
- Optimize bundle size with tree shaking
- Use React.memo for expensive components


## Security Guidelines

1. **Input Validation**: Validate all user inputs
2. **Authentication**: Implement proper JWT handling
3. **Authorization**: Use role-based access control
4. **Data Sanitization**: Prevent XSS and injection attacks
5. **Environment Variables**: Never commit secrets

---

This context should help AI assistants provide accurate, contextual suggestions that align with the project's architecture and coding standards.
</file>

<file path="docs/api-requirements-units-module.md">
# 🏠 Units Modülü - API Geliştirme Brief Dokümanı

## 📋 Genel Bakış

Bu doküman, **NinetyNine Admin Web Dashboard** Units (Konutlar) modülü için eksik olan API endpoint'lerinin geliştirilmesi amacıyla hazırlanmıştır.

**Mevcut API Durumu:** `/admin/properties` endpoint'leri mevcut ancak analytics, bulk operations ve advanced filtering özellikleri eksik.

**Hedef:** Daire/Villa listesi sayfasının tüm özelliklerinin API desteğini sağlamak.

---

## 🎯 Öncelik Matrisi

### **🔴 Kritik (Hemen) - Sprint 1**

1. İstatistik ve Analytics Endpoint'leri
2. Dashboard Widget'ları için Quick Stats
3. Borç Analiz Endpoint'leri

### **🟡 Önemli (1-2 Sprint) - Sprint 2-3**

4. Gelişmiş Filtreleme Endpoint'leri
5. Bulk Operations
6. Export/Import İşlemleri

### **🟢 Nice-to-Have (Gelecek) - Sprint 4+**

7. Bakım Yönetimi Entegrasyonu
8. Real-time Notifications
9. Advanced Reporting

---

## 🔴 **KRİTİK ENDPOINT'LER (Sprint 1)**

### 1. **İstatistik ve Analytics**

#### **`GET /admin/properties/statistics`**

```json
{
  "method": "GET",
  "url": "/admin/properties/statistics",
  "description": "Konut modülü için genel istatistikleri döner",
  "parameters": {
    "query": {
      "dateRange": "string (optional) - '30d', '90d', '1y'",
      "propertyGroup": "string (optional) - Blok filtrelemesi"
    }
  },
  "response": {
    "statusCode": 200,
    "data": {
      "totalUnits": "number - Toplam konut sayısı",
      "occupancyRate": "number - Doluluk oranı (0-100)",
      "unitsByType": {
        "RESIDENCE": "number",
        "VILLA": "number",
        "COMMERCIAL": "number",
        "OFFICE": "number"
      },
      "unitsByStatus": {
        "AVAILABLE": "number",
        "OCCUPIED": "number",
        "UNDER_MAINTENANCE": "number",
        "RESERVED": "number"
      },
      "occupancyTrend": {
        "currentMonth": "number",
        "previousMonth": "number",
        "changePercentage": "number"
      }
    }
  }
}
```

#### **`GET /admin/properties/occupancy-stats`**

```json
{
  "method": "GET",
  "url": "/admin/properties/occupancy-stats",
  "description": "Son 30 gün doluluk aktivite istatistikleri",
  "parameters": {
    "query": {
      "days": "number (optional, default: 30) - Kaç günlük veri"
    }
  },
  "response": {
    "statusCode": 200,
    "data": {
      "period": "string - Tarih aralığı",
      "newOccupied": "number - Yeni dolan konut sayısı",
      "vacated": "number - Boşalan konut sayısı",
      "maintenanceStarted": "number - Bakıma giren konut sayısı",
      "maintenanceCompleted": "number - Bakım tamamlanan konut sayısı",
      "dailyStats": [
        {
          "date": "string (YYYY-MM-DD)",
          "occupied": "number",
          "vacated": "number",
          "maintenance": "number"
        }
      ]
    }
  }
}
```

#### **`GET /admin/billing/debt-summary`**

```json
{
  "method": "GET",
  "url": "/admin/billing/debt-summary",
  "description": "Borç durum özeti ve analizi",
  "parameters": {
    "query": {
      "propertyGroup": "string (optional) - Blok filtrelemesi"
    }
  },
  "response": {
    "statusCode": 200,
    "data": {
      "totalDebt": "number - Toplam borç miktarı",
      "debtedUnitsCount": "number - Borçlu konut sayısı",
      "cleanUnitsCount": "number - Temiz hesap konut sayısı",
      "averageDebtPerUnit": "number - Konut başına ortalama borç",
      "debtAging": {
        "0-30days": "number - 0-30 gün arası borç miktarı",
        "31-60days": "number",
        "61-90days": "number",
        "90plus": "number - 90+ gün borç miktarı"
      },
      "topDebtors": [
        {
          "propertyId": "string",
          "propertyNumber": "string",
          "debtAmount": "number",
          "daysPastDue": "number"
        }
      ]
    }
  }
}
```

### 2. **Dashboard Widget'ları**

#### **`GET /admin/properties/quick-stats`**

```json
{
  "method": "GET",
  "url": "/admin/properties/quick-stats",
  "description": "Dashboard için hızlı istatistik kartları",
  "response": {
    "statusCode": 200,
    "data": {
      "apartmentUnits": {
        "total": "number",
        "occupied": "number",
        "occupancyRate": "number"
      },
      "villaUnits": {
        "total": "number",
        "occupied": "number",
        "occupancyRate": "number"
      },
      "commercialUnits": {
        "total": "number",
        "occupied": "number",
        "occupancyRate": "number"
      },
      "parkingSpaces": {
        "total": "number",
        "occupied": "number",
        "occupancyRate": "number"
      }
    }
  }
}
```

#### **`GET /admin/properties/recent-activities`**

```json
{
  "method": "GET",
  "url": "/admin/properties/recent-activities",
  "description": "Son aktiviteler (durum değişiklikleri, yeni eklemeler)",
  "parameters": {
    "query": {
      "limit": "number (optional, default: 20)",
      "days": "number (optional, default: 7)"
    }
  },
  "response": {
    "statusCode": 200,
    "data": [
      {
        "id": "string",
        "propertyId": "string",
        "propertyNumber": "string",
        "activityType": "string - 'STATUS_CHANGED', 'OWNER_ASSIGNED', 'TENANT_ASSIGNED', 'CREATED'",
        "description": "string - Aktivite açıklaması",
        "oldValue": "string (optional)",
        "newValue": "string (optional)",
        "performedBy": {
          "id": "string",
          "name": "string"
        },
        "createdAt": "string (ISO date)"
      }
    ]
  }
}
```

---

## 🟡 **ÖNEMLİ ENDPOINT'LER (Sprint 2-3)**

### 3. **Gelişmiş Filtreleme**

#### **`GET /admin/properties/by-block/{blockNumber}`**

```json
{
  "method": "GET",
  "url": "/admin/properties/by-block/{blockNumber}",
  "description": "Belirli blok konutlarını getirir",
  "parameters": {
    "path": {
      "blockNumber": "string - Blok numarası/adı"
    },
    "query": {
      "includeStats": "boolean (optional) - Blok istatistiklerini dahil et"
    }
  },
  "response": {
    "statusCode": 200,
    "data": {
      "blockInfo": {
        "blockNumber": "string",
        "totalUnits": "number",
        "occupiedUnits": "number",
        "totalFloors": "number"
      },
      "properties": "Array<ResponsePropertyDto>",
      "stats": {
        "occupancyByFloor": [
          {
            "floor": "number",
            "total": "number",
            "occupied": "number"
          }
        ]
      }
    }
  }
}
```

#### **`GET /admin/properties/filter-options`**

```json
{
  "method": "GET",
  "url": "/admin/properties/filter-options",
  "description": "Filtreleme için mevcut seçenekleri döner",
  "response": {
    "statusCode": 200,
    "data": {
      "blocks": ["string"] - Mevcut bloklar,
      "floors": {
        "min": "number",
        "max": "number"
      },
      "areaRanges": {
        "min": "number",
        "max": "number"
      },
      "roomCounts": ["string"] - Mevcut oda sayıları,
      "propertyGroups": ["string"]
    }
  }
}
```

### 4. **Bulk Operations**

#### **`POST /admin/properties/bulk-update`**

```json
{
  "method": "POST",
  "url": "/admin/properties/bulk-update",
  "description": "Çoklu konut güncelleme işlemi",
  "requestBody": {
    "propertyIds": ["string"] - Güncellenecek konut ID'leri,
    "updates": {
      "status": "string (optional)",
      "propertyGroup": "string (optional)",
      "ownerId": "string (optional)",
      "tenantId": "string (optional)"
    }
  },
  "response": {
    "statusCode": 200,
    "data": {
      "successCount": "number",
      "failedCount": "number",
      "errors": [
        {
          "propertyId": "string",
          "error": "string"
        }
      ]
    }
  }
}
```

#### **`POST /admin/properties/bulk-assign-tenants`**

```json
{
  "method": "POST",
  "url": "/admin/properties/bulk-assign-tenants",
  "description": "Toplu kiracı atama",
  "requestBody": {
    "assignments": [
      {
        "propertyId": "string",
        "tenantId": "string",
        "startDate": "string (ISO date)",
        "endDate": "string (optional, ISO date)"
      }
    ]
  },
  "response": {
    "statusCode": 200,
    "data": {
      "successCount": "number",
      "failedCount": "number",
      "errors": ["object"]
    }
  }
}
```

### 5. **Export/Import İşlemleri**

#### **`GET /admin/properties/export`**

```json
{
  "method": "GET",
  "url": "/admin/properties/export",
  "description": "Konut listesi export işlemi",
  "parameters": {
    "query": {
      "format": "string - 'excel', 'csv', 'pdf'",
      "filters": "string (optional) - JSON stringified filters",
      "columns": "string (optional) - Dahil edilecek kolonlar"
    }
  },
  "response": {
    "statusCode": 200,
    "headers": {
      "Content-Type": "application/octet-stream",
      "Content-Disposition": "attachment; filename=properties_export.xlsx"
    }
  }
}
```

#### **`POST /admin/properties/import`**

```json
{
  "method": "POST",
  "url": "/admin/properties/import",
  "description": "Toplu konut import işlemi",
  "requestBody": {
    "type": "multipart/form-data",
    "fields": {
      "file": "File - Excel/CSV dosyası",
      "options": {
        "updateExisting": "boolean - Mevcut kayıtları güncelle",
        "skipErrors": "boolean - Hatalı satırları atla"
      }
    }
  },
  "response": {
    "statusCode": 200,
    "data": {
      "totalRows": "number",
      "successCount": "number",
      "errorCount": "number",
      "errors": [
        {
          "row": "number",
          "error": "string",
          "data": "object"
        }
      ]
    }
  }
}
```

---

## 🟢 **GELECEK ENDPOINT'LER (Sprint 4+)**

### 6. **Bakım Yönetimi**

#### **`POST /admin/properties/{id}/maintenance`**

```json
{
  "method": "POST",
  "url": "/admin/properties/{id}/maintenance",
  "description": "Konutu bakıma alma",
  "requestBody": {
    "reason": "string - Bakım sebebi",
    "estimatedDuration": "number - Tahmini süre (gün)",
    "priority": "string - 'LOW', 'MEDIUM', 'HIGH'",
    "description": "string",
    "assignedTo": "string (optional) - Sorumlu kişi ID"
  }
}
```

#### **`DELETE /admin/properties/{id}/maintenance`**

```json
{
  "method": "DELETE",
  "url": "/admin/properties/{id}/maintenance",
  "description": "Konutu bakımdan çıkarma",
  "requestBody": {
    "completionNotes": "string",
    "actualDuration": "number"
  }
}
```

### 7. **Advanced Reporting**

#### **`GET /admin/properties/reports/occupancy-trends`**

```json
{
  "method": "GET",
  "url": "/admin/properties/reports/occupancy-trends",
  "description": "Detaylı doluluk trend raporu",
  "parameters": {
    "query": {
      "startDate": "string (ISO date)",
      "endDate": "string (ISO date)",
      "groupBy": "string - 'daily', 'weekly', 'monthly'"
    }
  }
}
```

---

## 🛠️ **Teknik Gereksinimler**

### **Authentication & Authorization**

- Tüm endpoint'ler `Bearer Token` authentication gerektirir
- Admin yetkisi kontrolü (`@RequirePermissions('admin:properties:read|write')`)
- Rate limiting: 100 request/minute per user

### **Response Format Standardı**

```json
{
  "success": true,
  "statusCode": 200,
  "message": "Success message",
  "data": {},
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 100,
    "totalPages": 10
  },
  "timestamp": "2024-01-15T10:30:00Z"
}
```

### **Error Handling**

```json
{
  "success": false,
  "statusCode": 400,
  "error": "VALIDATION_ERROR",
  "message": "Invalid request parameters",
  "details": [
    {
      "field": "propertyId",
      "message": "Property ID is required"
    }
  ],
  "timestamp": "2024-01-15T10:30:00Z"
}
```

### **Pagination Standard**

- Default: `page=1, limit=10`
- Maximum limit: `100`
- Response format: `{ data: [], pagination: {} }`

### **Caching Strategy**

- Statistics endpoint'leri: `5 minutes TTL`
- Filter options: `1 hour TTL`
- Property list: `1 minute TTL`
- Redis cache kullanımı önerilir

---

## 📊 **Veritabanı Considerations**

### **İndeksler**

```sql
-- Performans için gerekli indeksler
CREATE INDEX idx_properties_status ON properties(status);
CREATE INDEX idx_properties_type ON properties(type);
CREATE INDEX idx_properties_block ON properties(block_number);
CREATE INDEX idx_properties_owner ON properties(owner_id);
CREATE INDEX idx_properties_tenant ON properties(tenant_id);
CREATE INDEX idx_properties_created_at ON properties(created_at);

-- Kompozit indeksler
CREATE INDEX idx_properties_status_type ON properties(status, type);
CREATE INDEX idx_properties_block_floor ON properties(block_number, floor);
```

### **Yeni Tablolar (Gerekirse)**

```sql
-- Property activities tracking
CREATE TABLE property_activities (
  id UUID PRIMARY KEY,
  property_id UUID REFERENCES properties(id),
  activity_type VARCHAR(50) NOT NULL,
  description TEXT,
  old_value JSONB,
  new_value JSONB,
  performed_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- Maintenance records
CREATE TABLE property_maintenance (
  id UUID PRIMARY KEY,
  property_id UUID REFERENCES properties(id),
  reason VARCHAR(255) NOT NULL,
  description TEXT,
  priority VARCHAR(20) DEFAULT 'MEDIUM',
  status VARCHAR(20) DEFAULT 'ACTIVE',
  assigned_to UUID REFERENCES users(id),
  started_at TIMESTAMP DEFAULT NOW(),
  estimated_completion TIMESTAMP,
  completed_at TIMESTAMP,
  completion_notes TEXT
);
```

---

## 🚀 **Implementation Timeline**

### **Sprint 1 (1-2 hafta)**

- [ ] `GET /admin/properties/statistics`
- [ ] `GET /admin/properties/occupancy-stats`
- [ ] `GET /admin/billing/debt-summary`
- [ ] `GET /admin/properties/quick-stats`

### **Sprint 2 (2-3 hafta)**

- [ ] `GET /admin/properties/recent-activities`
- [ ] `GET /admin/properties/by-block/{blockNumber}`
- [ ] `GET /admin/properties/filter-options`
- [ ] `POST /admin/properties/bulk-update`

### **Sprint 3 (2-3 hafta)**

- [ ] `POST /admin/properties/bulk-assign-tenants`
- [ ] `GET /admin/properties/export`
- [ ] `POST /admin/properties/import`

### **Sprint 4+ (Gelecek)**

- [ ] Bakım yönetimi endpoint'leri
- [ ] Advanced reporting
- [ ] Real-time features

---

## 📋 **Testing Requirements**

### **Unit Tests**

- Her endpoint için pozitif/negatif test case'ler
- Input validation testleri
- Authorization testleri

### **Integration Tests**

- Database integration testleri
- External service testleri
- Performance testleri

### **Performance Benchmarks**

- Statistics endpoint'leri: `< 500ms`
- List endpoint'leri: `< 1000ms`
- Export işlemleri: `< 5 seconds` (small datasets)

---

## 📞 **İletişim & Support**

**Frontend Developer:**

- UI integration için koordinasyon
- Response format feedback

**DevOps:**

- Caching setup (Redis)
- Database optimization
- API rate limiting

**QA Team:**

- Test case preparation
- Acceptance criteria validation

---

## 📝 **Notes & Assumptions**

1. **Existing Property Schema:** Mevcut `properties` tablosu şemasının yeterli olduğu varsayılıyor
2. **User Permissions:** Admin/Manager seviyesinde yetki kontrolü
3. **Performance:** 10K+ konut verisi ile test edilmeli
4. **Scalability:** Future microservice migration uyumlu olmalı
5. **Mobile Support:** API response'lar mobile app ile uyumlu olmalı

---

**Son Güncelleme:** 2024-01-15  
**Doküman Versiyonu:** 1.0  
**Hazırlayan:** AI Assistant  
**İncelenmeli:** Backend Lead Developer
</file>

<file path="docs/information-architect.md">
# 99Club Admin Panel - Dashboard Bilgi Mimarisi

## 🏗️ Dashboard Ana Yapısı

### 1. **Üst Navigasyon Barı**

- **Logo & Proje Adı** (Sol üst)
- **Arama Çubuğu** (Global arama: sakinler, daireler, ödemeler)
- **Bildirim İkonu** (Yeni başvurular, kritik uyarılar)
- **Kullanıcı Profili** (Çıkış, ayarlar, profil)
- **Dil Seçimi** (TR/EN/AR)

### 2. **Sol Yan Menü (Sidebar)**

```
📊 Dashboard (Ana Sayfa)
👥 Sakinler
   └─ Sakin Listesi
   └─ Yeni Sakin Ekle
   └─ Onay Bekleyenler
🏠 Konutlar
   └─ Daire/Villa Listesi
   └─ Boş Konutlar
   └─ Bakım Durumu
💰 Finansal İşlemler
   └─ Aidat Takibi
   └─ Ödeme Geçmişi
   └─ Borç Raporları
   └─ Fatura Yönetimi
📢 Duyurular
   └─ Aktif Duyurular
   └─ Yeni Duyuru
   └─ Duyuru Arşivi
🔧 Hizmet Talepleri
   └─ Açık Talepler
   └─ İşlem Bekleyenler
   └─ Tamamlananlar
📈 Raporlar
   └─ Mali Raporlar
   └─ Doluluk Raporları
   └─ Hizmet Raporları
⚙️ Ayarlar
   └─ Site Bilgileri
   └─ Kullanıcı Yönetimi
   └─ Sistem Ayarları
```

### 3. **Dashboard Ana İçerik Alanı**

#### **Özet Kartları (Top Metrics)**

```
┌─────────────┬─────────────┬─────────────┬─────────────┐
│ Toplam      │ Dolu        │ Bu Ay       │ Açık        │
│ Konut       │ Konutlar    │ Tahsilat    │ Talepler    │
│ 2,500       │ 2,350       │ ₺4.2M       │ 47          │
│             │ (%94)       │ ↑ %12       │ ↓ %8        │
└─────────────┴─────────────┴─────────────┴─────────────┘
```

#### **Kritik Bilgi Alanları**

**Sol Kolon (60%)**

- **Aidat Tahsilat Grafiği** (Son 6 ay trendi)
- **Son İşlemler Tablosu**
  - Tarih | İşlem Tipi | Konut No | Tutar | Durum
- **Bakım/Arıza Talepleri**
  - Acil (Kırmızı badge)
  - Normal (Sarı badge)
  - Düşük öncelik (Yeşil badge)

**Sağ Kolon (40%)**

- **Hızlı İşlemler**
  - [+ Yeni Duyuru]
  - [+ Ödeme Kaydı]
  - [+ Sakin Ekle]
  - [+ Talep Oluştur]
- **Doluluk Haritası** (Bloklar bazında görsel)
- **Bugünün Ajandası**
  - Planlı bakımlar
  - Randevular
  - Önemli tarihler
- **Son Aktiviteler Feed**
  - Yeni kayıtlar
  - Sistem logları
  - Kullanıcı işlemleri

### 4. **Alt Bilgi Çubuğu (Footer)**

- Sistem durumu (Online/Offline sakin sayısı)
- Son yedekleme zamanı
- Versiyon bilgisi
- Destek linki

## 📐 Responsive Tasarım Notları

### Desktop (1920px+)

- 3 kolonlu grid yapısı
- Tam genişlikte grafikler
- Detaylı tablolar

### Tablet (768px-1024px)

- 2 kolonlu grid
- Collapse olan yan menü
- Dokunmatik optimizasyon

### Mobile (Yönetici Acil Erişim)

- Tek kolon
- Kritik metriklere öncelik
- Hamburger menü
- Swipe navigasyon

## 🎨 UI Öncelikleri

1. **Renk Kodlaması**

   - Yeşil: Tamamlanan/Ödenen
   - Sarı: Bekleyen/Uyarı
   - Kırmızı: Acil/Gecikmiş
   - Mavi: Bilgi/Normal

2. **Tipografi Hiyerarşisi**

   - H1: Dashboard başlıkları
   - H2: Bölüm başlıkları
   - Body: Veri ve açıklamalar
   - Caption: Tarih, badge, küçük notlar

3. **İnteraktif Elementler**
   - Hover durumları
   - Loading states
   - Empty states
   - Error states

## 🔄 Veri Yenileme Stratejisi

- **Gerçek Zamanlı**: Kritik uyarılar, acil talepler
- **5 Dakika**: Finansal özet, doluluk oranı
- **15 Dakika**: Grafikler, raporlar
- **Manuel**: Detaylı raporlar

Bu bilgi mimarisi, yöneticilerin site operasyonlarını etkin bir şekilde takip etmelerini ve hızlı aksiyonlar almalarını sağlayacak şekilde tasarlanmıştır.
</file>

<file path="src/app/api/proxy/[...path]/route.ts">
import { NextRequest, NextResponse } from 'next/server';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://ninetynineclub-api.onrender.com';

export async function GET(
  request: NextRequest,
  { params }: { params: { path: string[] } }
) {
  return handleProxyRequest(request, params.path, 'GET');
}

export async function POST(
  request: NextRequest,
  { params }: { params: { path: string[] } }
) {
  return handleProxyRequest(request, params.path, 'POST');
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { path: string[] } }
) {
  return handleProxyRequest(request, params.path, 'PUT');
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: { path: string[] } }
) {
  return handleProxyRequest(request, params.path, 'PATCH');
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { path: string[] } }
) {
  return handleProxyRequest(request, params.path, 'DELETE');
}

async function handleProxyRequest(
  request: NextRequest,
  pathSegments: string[],
  method: string
) {
  try {
    // Path'i oluştur
    const path = pathSegments.join('/');
    const targetUrl = `${API_BASE_URL}/${path}`;
    
    // Query parametrelerini al
    const searchParams = request.nextUrl.searchParams;
    const queryString = searchParams.toString();
    const fullUrl = queryString ? `${targetUrl}?${queryString}` : targetUrl;

    // Headers'ı hazırla
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    // Authorization header'ı kopyala
    const authHeader = request.headers.get('Authorization');
    if (authHeader) {
      headers['Authorization'] = authHeader;
    }

    // X-Request-ID header'ı kopyala
    const requestIdHeader = request.headers.get('X-Request-ID');
    if (requestIdHeader) {
      headers['X-Request-ID'] = requestIdHeader;
    }

    // Body'yi al (GET ve DELETE dışında)
    let body: string | undefined;
    if (method !== 'GET' && method !== 'DELETE') {
      try {
        body = await request.text();
      } catch (error) {
        // Body yoksa boş bırak
        body = undefined;
      }
    }

    // API isteğini yap
    const response = await fetch(fullUrl, {
      method,
      headers,
      body: body && body.length > 0 ? body : undefined,
    });

    // Response data'yı al
    const responseData = await response.text();
    
    // Response headers'ını kopyala
    const responseHeaders = new Headers();
    
    // CORS headers'ını ekle
    responseHeaders.set('Access-Control-Allow-Origin', '*');
    responseHeaders.set('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
    responseHeaders.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Request-ID');
    responseHeaders.set('Access-Control-Allow-Credentials', 'true');

    // Content-Type'ı kopyala
    const contentType = response.headers.get('content-type');
    if (contentType) {
      responseHeaders.set('content-type', contentType);
    }

    // Response'u döndür
    return new NextResponse(responseData, {
      status: response.status,
      statusText: response.statusText,
      headers: responseHeaders,
    });

  } catch (error) {
    console.error('Proxy request failed:', error);
    
    return NextResponse.json(
      { 
        error: 'Proxy request failed', 
        message: error instanceof Error ? error.message : 'Unknown error',
        target: `${API_BASE_URL}/${pathSegments.join('/')}`
      },
      { status: 500 }
    );
  }
}

// OPTIONS request handler for CORS
export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,OPTIONS,PATCH,DELETE,POST,PUT',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Request-ID',
      'Access-Control-Allow-Credentials': 'true',
    },
  });
}
</file>

<file path="src/app/buttons/page.tsx">
'use client'

import { useState } from 'react'
import { Button, IconButton, LoadingButton, FloatingActionButton } from '../components/ui'
import {
    Save,
    Edit2,
    Trash2,
    Download,
    Plus,
    Heart,
    Settings,
    Search,
    MessageCircle,
    Mail,
    Phone,
    Copy,
    Share2,
    Star,
    BookOpen,
    Home,
    ArrowRight,
    Check,
    X
} from 'lucide-react'

export default function ButtonsDemo() {
    const [loadingStates, setLoadingStates] = useState({
        save: false,
        download: false,
        upload: false,
        submit: false
    })

    const [progress, setProgress] = useState(0)

    const handleLoadingDemo = (type: string) => {
        setLoadingStates(prev => ({ ...prev, [type]: true }))

        if (type === 'submit') {
            // Progress bar demo
            const interval = setInterval(() => {
                setProgress(prev => {
                    if (prev >= 100) {
                        clearInterval(interval)
                        setLoadingStates(prevState => ({ ...prevState, [type]: false }))
                        return 0
                    }
                    return prev + 10
                })
            }, 200)
        } else {
            // Regular loading demo
            setTimeout(() => {
                setLoadingStates(prev => ({ ...prev, [type]: false }))
            }, 2000)
        }
    }

    return (
        <div className="min-h-screen bg-background-primary py-10">
            <div className="max-w-6xl mx-auto px-6">
                {/* Header Section */}
                <div className="text-center mb-10">
                    <h1 className="text-4xl font-bold text-text-primary font-helvetica mb-4">
                        Buton Component'leri Demo
                    </h1>
                    <div className="w-24 h-1 bg-gradient-gold mx-auto rounded-full mb-6"></div>
                    <p className="text-text-secondary text-lg font-inter max-w-3xl mx-auto">
                        Modern ve etkileşimli buton component'lerinin kapsamlı demo sayfası.
                        Farklı varyantları, boyutları ve durumları test edebilirsiniz.
                    </p>
                </div>

                {/* Regular Buttons Section */}
                <div className="bg-background-card rounded-xl shadow-card border border-primary-gold/20 overflow-hidden mb-8">
                    <div className="bg-gradient-gold p-6">
                        <h2 className="text-2xl font-semibold text-primary-dark-gray font-helvetica">
                            Standart Butonlar
                        </h2>
                        <p className="text-primary-dark-gray/70 mt-2 font-inter">
                            Farklı varyant ve boyutlardaki butonlar
                        </p>
                    </div>

                    <div className="p-8 space-y-8">
                        {/* Variants */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Buton Varyantları
                                </h3>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                                <Button variant="primary" icon={Save}>
                                    Primary Button
                                </Button>
                                <Button variant="secondary" icon={Edit2}>
                                    Secondary Button
                                </Button>
                                <Button variant="danger" icon={Trash2}>
                                    Danger Button
                                </Button>
                                <Button variant="ghost" icon={Download}>
                                    Ghost Button
                                </Button>
                            </div>
                        </div>

                        {/* Sizes */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Buton Boyutları
                                </h3>
                            </div>

                            <div className="flex flex-wrap items-center gap-4">
                                <Button size="sm" variant="primary" icon={Plus}>
                                    Small
                                </Button>
                                <Button size="md" variant="primary" icon={Plus}>
                                    Medium
                                </Button>
                                <Button size="lg" variant="primary" icon={Plus}>
                                    Large
                                </Button>
                                <Button size="xl" variant="primary" icon={Plus}>
                                    Extra Large
                                </Button>
                            </div>
                        </div>

                        {/* Icon Positions */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Icon Pozisyonları
                                </h3>
                            </div>

                            <div className="flex flex-wrap gap-4">
                                <Button icon={ArrowRight} iconPosition="left">
                                    Left Icon
                                </Button>
                                <Button icon={ArrowRight} iconPosition="right">
                                    Right Icon
                                </Button>
                                <Button fullWidth icon={Check}>
                                    Full Width Button
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Icon Buttons Section */}
                <div className="bg-background-card rounded-xl shadow-card border border-primary-gold/20 overflow-hidden mb-8">
                    <div className="bg-gradient-gold p-6">
                        <h2 className="text-2xl font-semibold text-primary-dark-gray font-helvetica">
                            Icon Butonlar
                        </h2>
                        <p className="text-primary-dark-gray/70 mt-2 font-inter">
                            Sadece icon içeren kompakt butonlar
                        </p>
                    </div>

                    <div className="p-8 space-y-8">
                        {/* Icon Button Variants */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Icon Buton Varyantları
                                </h3>
                            </div>

                            <div className="flex flex-wrap gap-4">
                                <IconButton icon={Heart} variant="primary" tooltip="Beğen" />
                                <IconButton icon={Settings} variant="secondary" tooltip="Ayarlar" />
                                <IconButton icon={Trash2} variant="danger" tooltip="Sil" />
                                <IconButton icon={Search} variant="ghost" tooltip="Ara" />
                            </div>
                        </div>

                        {/* Icon Button Sizes */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Icon Buton Boyutları
                                </h3>
                            </div>

                            <div className="flex items-center gap-4">
                                <IconButton icon={Mail} size="sm" variant="primary" tooltip="Küçük" />
                                <IconButton icon={Mail} size="md" variant="primary" tooltip="Orta" />
                                <IconButton icon={Mail} size="lg" variant="primary" tooltip="Büyük" />
                                <IconButton icon={Mail} size="xl" variant="primary" tooltip="Çok Büyük" />
                            </div>
                        </div>

                        {/* Icon Button Shapes */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Icon Buton Şekilleri
                                </h3>
                            </div>

                            <div className="flex items-center gap-4">
                                <IconButton icon={Phone} shape="square" variant="primary" tooltip="Kare" />
                                <IconButton icon={Phone} shape="circle" variant="primary" tooltip="Yuvarlak" />
                                <IconButton icon={Copy} shape="square" variant="secondary" tooltip="Kopyala" />
                                <IconButton icon={Share2} shape="circle" variant="secondary" tooltip="Paylaş" />
                            </div>
                        </div>
                    </div>
                </div>

                {/* Loading Buttons Section */}
                <div className="bg-background-card rounded-xl shadow-card border border-primary-gold/20 overflow-hidden mb-8">
                    <div className="bg-gradient-gold p-6">
                        <h2 className="text-2xl font-semibold text-primary-dark-gray font-helvetica">
                            Loading Butonlar
                        </h2>
                        <p className="text-primary-dark-gray/70 mt-2 font-inter">
                            Yükleme durumu gösteren gelişmiş butonlar
                        </p>
                    </div>

                    <div className="p-8 space-y-8">
                        {/* Loading Button Examples */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Loading Buton Örnekleri
                                </h3>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <LoadingButton
                                    variant="primary"
                                    icon={Save}
                                    isLoading={loadingStates.save}
                                    onClick={() => handleLoadingDemo('save')}
                                    loadingText="Kaydediliyor..."
                                >
                                    Kaydet
                                </LoadingButton>

                                <LoadingButton
                                    variant="secondary"
                                    icon={Download}
                                    isLoading={loadingStates.download}
                                    onClick={() => handleLoadingDemo('download')}
                                    loadingText="İndiriliyor..."
                                >
                                    İndir
                                </LoadingButton>

                                <LoadingButton
                                    variant="danger"
                                    icon={Trash2}
                                    isLoading={loadingStates.upload}
                                    onClick={() => handleLoadingDemo('upload')}
                                    keepOriginalContent
                                >
                                    Yükle
                                </LoadingButton>

                                <LoadingButton
                                    variant="primary"
                                    icon={Check}
                                    isLoading={loadingStates.submit}
                                    onClick={() => handleLoadingDemo('submit')}
                                    progress={progress}
                                    loadingText="Gönderiliyor..."
                                >
                                    Gönder
                                </LoadingButton>
                            </div>
                        </div>

                        {/* Loading States Demo */}
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    Loading Durumları
                                </h3>
                            </div>

                            <div className="bg-background-secondary rounded-lg p-6 border border-primary-gold/20">
                                <p className="text-text-secondary text-sm mb-4">
                                    Bu butonlara tıklayarak loading durumlarını test edebilirsiniz.
                                    "Gönder" butonu progress bar ile birlikte çalışır.
                                </p>
                                <div className="flex flex-wrap gap-2">
                                    <span className="px-3 py-1 bg-primary-gold/20 text-text-accent rounded-full text-sm">
                                        Normal Loading
                                    </span>
                                    <span className="px-3 py-1 bg-primary-gold/20 text-text-accent rounded-full text-sm">
                                        Keep Original Content
                                    </span>
                                    <span className="px-3 py-1 bg-primary-gold/20 text-text-accent rounded-full text-sm">
                                        Progress Bar
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Floating Action Button Section */}
                <div className="bg-background-card rounded-xl shadow-card border border-primary-gold/20 overflow-hidden mb-8">
                    <div className="bg-gradient-gold p-6">
                        <h2 className="text-2xl font-semibold text-primary-dark-gray font-helvetica">
                            Floating Action Button
                        </h2>
                        <p className="text-primary-dark-gray/70 mt-2 font-inter">
                            Sabit pozisyonda duran yüzen butonlar
                        </p>
                    </div>

                    <div className="p-8 space-y-8">
                        <div className="space-y-6">
                            <div className="flex items-center space-x-3 mb-4">
                                <div className="w-2 h-6 bg-primary-gold rounded-full"></div>
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    FAB Özellikleri
                                </h3>
                            </div>

                            <div className="bg-background-secondary rounded-lg p-6 border border-primary-gold/20">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div>
                                        <h4 className="text-text-primary font-semibold mb-3">Varyantlar</h4>
                                        <ul className="space-y-2 text-text-secondary text-sm">
                                            <li>• Primary - Ana aksiyon butonu</li>
                                            <li>• Secondary - İkincil aksiyon butonu</li>
                                            <li>• Danger - Tehlikeli aksiyon butonu</li>
                                        </ul>
                                    </div>
                                    <div>
                                        <h4 className="text-text-primary font-semibold mb-3">Pozisyonlar</h4>
                                        <ul className="space-y-2 text-text-secondary text-sm">
                                            <li>• bottom-right (varsayılan)</li>
                                            <li>• bottom-left, top-right, top-left</li>
                                            <li>• bottom-center, top-center</li>
                                        </ul>
                                    </div>
                                </div>

                                <div className="mt-6 p-4 bg-background-primary rounded-lg">
                                    <p className="text-text-accent text-sm">
                                        <strong>Not:</strong> Floating Action Button'lar sayfanın sağ alt köşesinde görüntülenir.
                                        Aşağıya kaydırarak onları görebilirsiniz.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Footer */}
                <div className="text-center mt-12">
                    <p className="text-text-secondary font-inter">
                        Bu demo sayfası, NinetyNineAdmin projesinin buton component'lerini göstermektedir
                    </p>
                    <div className="flex justify-center items-center space-x-2 mt-4">
                        <div className="w-2 h-2 bg-primary-gold rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/60 rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/30 rounded-full"></div>
                    </div>
                </div>
            </div>

            {/* Floating Action Buttons - Live Examples */}
            <FloatingActionButton
                icon={Plus}
                tooltip="Yeni Ekle"
                position="bottom-right"
                onClick={() => alert('Yeni ekleme butonu tıklandı!')}
            />

            <FloatingActionButton
                icon={MessageCircle}
                variant="secondary"
                position="bottom-left"
                tooltip="Mesaj Gönder"
                badge="3"
                onClick={() => alert('Mesaj butonu tıklandı!')}
            />

            <FloatingActionButton
                icon={BookOpen}
                variant="primary"
                position="top-right"
                extended
                label="Dokümantasyon"
                onClick={() => alert('Dokümantasyon butonu tıklandı!')}
            />
        </div>
    )
}
</file>

<file path="src/app/components/auth/AuthProvider.tsx">
'use client';

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { authService } from '@/services/auth.service';
import { User } from '@/services/types/user.types';
import { AuthTokens, AuthState } from '@/services/types/auth.types';

interface AuthContextType {
    // State
    user: User | null;
    tokens: AuthTokens | null;
    isAuthenticated: boolean;
    isLoading: boolean;
    error: string | null;

    // Actions
    login: (email: string, password: string) => Promise<void>;
    logout: () => Promise<void>;
    refreshTokens: () => Promise<void>;
    clearError: () => void;

    // Permissions
    hasPermission: (resource: string, action: string) => Promise<boolean>;
    hasRole: (roleName: string) => boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
    children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
    const [user, setUser] = useState<User | null>(null);
    const [tokens, setTokens] = useState<AuthTokens | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Check authentication status on mount
    useEffect(() => {
        checkAuthStatus();
    }, []);

    const checkAuthStatus = async () => {
        setIsLoading(true);
        try {
            if (authService.isAuthenticated()) {
                // Try to get current user
                const currentUser = await authService.getCurrentUser();
                setUser(currentUser);

                // Set tokens from storage
                const accessToken = authService.getAccessToken();
                const refreshToken = authService.getRefreshToken();

                if (accessToken && refreshToken) {
                    setTokens({
                        accessToken,
                        refreshToken,
                        tokenType: 'bearer',
                        expiresIn: 3600
                    });
                }
            }
        } catch (error) {
            console.error('Auth check failed:', error);
            // Clear invalid tokens
            await logout();
        } finally {
            setIsLoading(false);
        }
    };

    const login = async (email: string, password: string) => {
        setIsLoading(true);
        setError(null);

        try {
            const response = await authService.login({ email, password });

            // Set tokens
            setTokens({
                accessToken: response.accessToken,
                refreshToken: response.refreshToken,
                tokenType: response.tokenType,
                expiresIn: response.expiresIn
            });

            // Get user data
            const currentUser = await authService.getCurrentUser();
            setUser(currentUser);

        } catch (error: any) {
            const message = error?.response?.data?.message || error?.message || 'Giriş yapılamadı';
            setError(message);
            throw error;
        } finally {
            setIsLoading(false);
        }
    };

    const logout = async () => {
        setIsLoading(true);
        try {
            await authService.logout();
        } catch (error) {
            console.error('Logout error:', error);
        } finally {
            // Clear state regardless of logout result
            setUser(null);
            setTokens(null);
            setError(null);
            setIsLoading(false);
        }
    };

    const refreshTokens = async () => {
        try {
            const response = await authService.refreshTokens();

            setTokens({
                accessToken: response.accessToken,
                refreshToken: response.refreshToken,
                tokenType: response.tokenType,
                expiresIn: response.expiresIn
            });
        } catch (error) {
            console.error('Token refresh failed:', error);
            await logout();
            throw error;
        }
    };

    const clearError = () => {
        setError(null);
    };

    const hasPermission = async (resource: string, action: string): Promise<boolean> => {
        try {
            return await authService.hasPermission({ resource, action });
        } catch (error) {
            console.error('Permission check failed:', error);
            return false;
        }
    };

    const hasRole = (roleName: string): boolean => {
        return user?.role?.name?.toLowerCase() === roleName.toLowerCase();
    };

    const value: AuthContextType = {
        // State
        user,
        tokens,
        isAuthenticated: !!user && !!tokens,
        isLoading,
        error,

        // Actions
        login,
        logout,
        refreshTokens,
        clearError,

        // Permissions
        hasPermission,
        hasRole,
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
}

// Custom hook to use auth context
export function useAuth() {
    const context = useContext(AuthContext);

    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }

    return context;
}

// HOC for protected components
export function withAuth<P extends object>(Component: React.ComponentType<P>) {
    return function AuthenticatedComponent(props: P) {
        const { isAuthenticated, isLoading } = useAuth();

        if (isLoading) {
            return (
                <div className="flex items-center justify-center min-h-screen">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                </div>
            );
        }

        if (!isAuthenticated) {
            return (
                <div className="flex items-center justify-center min-h-screen">
                    <div className="text-center">
                        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                            Erişim Reddedildi
                        </h2>
                        <p className="text-gray-600 dark:text-gray-300">
                            Bu sayfaya erişmek için giriş yapmanız gerekiyor.
                        </p>
                    </div>
                </div>
            );
        }

        return <Component {...props} />;
    };
}
</file>

<file path="src/app/components/auth/LoginForm.tsx">
'use client';

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Eye, EyeOff, Mail, Lock, Shield, ArrowRight, CheckCircle } from 'lucide-react';
import Button from '@/app/components/ui/Button';
import Input from '@/app/components/ui/Input';
import Checkbox from '@/app/components/ui/Checkbox';
import Card from '@/app/components/ui/Card';
import Spinner from '@/app/components/ui/Spinner';
import { useAuth } from './AuthProvider';

interface LoginFormProps {
    onSuccess?: () => void;
    onError?: (error: string) => void;
}

interface LoginFormData {
    email: string;
    password: string;
    rememberMe?: boolean;
}

export function LoginForm({ onSuccess, onError }: LoginFormProps) {
    const [isLoading, setIsLoading] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const [errorMessage, setErrorMessage] = useState<string | null>(null);
    const { login: contextLogin } = useAuth();

    const {
        register,
        handleSubmit,
        formState: { errors, isValid },
        reset,
        setError
    } = useForm<LoginFormData>({
        mode: 'onChange',
        defaultValues: {
            email: '',
            password: '',
            rememberMe: false
        }
    });

    const onSubmit = async (data: LoginFormData) => {
        setIsLoading(true);
        setErrorMessage(null);

        try {
            const email = data.email.trim();
            const password = data.password;

            if (contextLogin) {
                await contextLogin(email, password);
            }

            reset();
            onSuccess?.();

        } catch (error: any) {
            console.error('Login error:', error);

            let message = 'Giriş yapılamadı. Lütfen bilgilerinizi kontrol edin.';

            if (error?.response?.status === 401) {
                message = 'E-posta veya şifre hatalı.';
            } else if (error?.response?.status === 403) {
                message = 'Hesabınız engellendi. Lütfen yöneticinizle iletişime geçin.';
            } else if (error?.response?.status === 429) {
                message = 'Çok fazla deneme. Lütfen bir süre bekleyip tekrar deneyin.';
            } else if (error?.response?.status >= 500) {
                message = 'Sunucu hatası. Lütfen daha sonra tekrar deneyin.';
            } else if (error?.response?.data?.message) {
                message = error.response.data.message;
            } else if (error?.message) {
                message = error.message;
            }

            if (error?.response?.status === 401) {
                setError('email', {
                    type: 'manual',
                    message: 'E-posta veya şifre hatalı'
                });
                setError('password', {
                    type: 'manual',
                    message: 'E-posta veya şifre hatalı'
                });
            }

            setErrorMessage(message);
            onError?.(message);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-background-primary flex">
            {/* Left Side - Branding */}
            <div className="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-background-secondary to-background-card relative overflow-hidden">
                {/* Background Pattern */}
                <div className="absolute inset-0 opacity-10">
                    <div className="absolute top-0 left-0 w-full h-full bg-gradient-gold"></div>
                    <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-primary-gold rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
                    <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-primary-gold-light rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse delay-1000"></div>
                </div>

                {/* Content */}
                <div className="relative z-10 flex flex-col justify-center px-12 py-16">
                    {/* Logo */}
                    <div className="mb-12">
                        <div className="inline-flex items-center space-x-3">
                            <div className="w-12 h-12 bg-gradient-gold rounded-xl flex items-center justify-center shadow-lg">
                                <Shield className="w-6 h-6 text-primary-dark-gray" />
                            </div>
                            <div>
                                <h1 className="text-2xl font-bold text-text-primary font-helvetica">99Club</h1>
                                <p className="text-xs text-text-accent font-inter">Admin Panel</p>
                            </div>
                        </div>
                    </div>

                    {/* Hero Content */}
                    <div className="space-y-6">
                        <h2 className="text-4xl font-bold text-text-primary font-helvetica leading-tight">
                            Konut Yönetim<br />
                            <span className="text-transparent bg-clip-text bg-gradient-gold">
                                Sistemi
                            </span>
                        </h2>

                        <p className="text-lg text-text-secondary font-inter leading-relaxed max-w-md">
                            Modern konut yönetimi için güçlü araçlar ve kapsamlı çözümler
                        </p>

                        {/* Features */}
                        <div className="space-y-4 pt-6">
                            {[
                                'Güvenli giriş sistemi',
                                'Gerçek zamanlı veriler',
                                'Mobil uyumlu tasarım'
                            ].map((feature, index) => (
                                <div key={index} className="flex items-center space-x-3">
                                    <CheckCircle className="w-5 h-5 text-primary-gold flex-shrink-0" />
                                    <span className="text-text-secondary font-inter">{feature}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>

            {/* Right Side - Login Form */}
            <div className="w-full lg:w-1/2 flex items-center justify-center px-6 py-12">
                <div className="w-full max-w-md bg-gradient-to-br from-background-secondary to-background-card rounded-lg">
                    {/* Mobile Logo */}
                    <div className="lg:hidden mb-8 text-center">
                        <div className="inline-flex items-center space-x-3 mb-6">
                            <div className="w-12 h-12 bg-gradient-gold rounded-xl flex items-center justify-center shadow-lg">
                                <Shield className="w-6 h-6 text-primary-dark-gray" />
                            </div>
                            <div>
                                <h1 className="text-xl font-bold text-text-primary font-helvetica">99Club</h1>
                                <p className="text-xs text-text-accent font-inter">Admin Panel</p>
                            </div>
                        </div>
                    </div>

                    <Card
                        variant="bordered"
                        padding="xl"
                        className="border-primary-gold/20 bg-background-card/50 backdrop-blur-sm"
                    >
                        {/* Form Header */}
                        <div className="text-center mb-8">
                            <h2 className="text-2xl font-bold text-text-primary font-helvetica mb-2">
                                Hesabınıza Giriş Yapın
                            </h2>
                            <p className="text-text-secondary font-inter">
                                Yönetim paneline erişmek için bilgilerinizi girin
                            </p>
                        </div>

                        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                            {/* Email Input */}
                            <div className="space-y-2">
                                <Input
                                    label="E-posta Adresi"
                                    type="email"
                                    placeholder="admin@99club.com"
                                    autoComplete="email"
                                    icon={Mail}
                                    variant="outlined"
                                    isRequired
                                    {...register('email', {
                                        required: 'E-posta adresi gereklidir',
                                        pattern: {
                                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                                            message: 'Geçerli bir e-posta adresi girin'
                                        }
                                    })}
                                    error={errors.email?.message}
                                    disabled={isLoading}
                                />
                            </div>

                            {/* Password Input */}
                            <div className="space-y-2">
                                <div className="relative">
                                    <Input
                                        label="Şifre"
                                        type={showPassword ? 'text' : 'password'}
                                        placeholder="Şifrenizi girin"
                                        autoComplete="current-password"
                                        icon={Lock}
                                        variant="outlined"
                                        isRequired
                                        {...register('password', {
                                            required: 'Şifre gereklidir',
                                            minLength: {
                                                value: 6,
                                                message: 'Şifre en az 6 karakter olmalıdır'
                                            }
                                        })}
                                        error={errors.password?.message}
                                        disabled={isLoading}
                                    />
                                    <button
                                        type="button"
                                        onClick={() => setShowPassword(!showPassword)}
                                        className="absolute right-3 top-9 text-text-secondary hover:text-text-accent transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50 rounded-md p-1"
                                        disabled={isLoading}
                                    >
                                        {showPassword ? (
                                            <EyeOff className="w-4 h-4" />
                                        ) : (
                                            <Eye className="w-4 h-4" />
                                        )}
                                    </button>
                                </div>
                            </div>

                            {/* Options Row */}
                            <div className="flex items-center justify-between">
                                <Checkbox
                                    {...register('rememberMe')}
                                    label="Beni hatırla"
                                    checkboxSize="sm"
                                    disabled={isLoading}
                                />

                                <button
                                    type="button"
                                    className="text-sm text-text-accent hover:text-primary-gold transition-colors font-inter"
                                    onClick={() => {
                                        alert('Şifre sıfırlama özelliği henüz hazır değil');
                                    }}
                                    disabled={isLoading}
                                >
                                    Şifremi unuttum
                                </button>
                            </div>

                            {/* Error Message */}
                            {errorMessage && (
                                <div className="p-4 rounded-lg bg-primary-red/10 border border-primary-red/30">
                                    <div className="flex items-start space-x-3">
                                        <div className="w-2 h-2 bg-primary-red rounded-full flex-shrink-0 mt-2" />
                                        <div>
                                            <p className="text-sm text-primary-red font-medium font-inter">Hata</p>
                                            <p className="text-sm text-primary-red/80 font-inter mt-1">{errorMessage}</p>
                                        </div>
                                    </div>
                                </div>
                            )}

                            {/* Submit Button */}
                            <Button
                                type="submit"
                                variant="primary"
                                size="lg"
                                fullWidth
                                disabled={!isValid || isLoading}
                                isLoading={isLoading}
                                icon={ArrowRight}
                                iconPosition="right"
                                className="mt-6"
                            >
                                {isLoading ? 'Giriş yapılıyor...' : 'Giriş Yap'}
                            </Button>
                        </form>

                        {/* Footer */}
                        <div className="mt-8 pt-6 border-t border-primary-gold/20">
                            <div className="flex items-center justify-center space-x-2 text-center">
                                <div className="w-2 h-2 bg-gradient-gold rounded-full animate-pulse" />
                                <p className="text-xs text-text-secondary font-inter">
                                    API-99CLUB entegrasyonu aktif • Güvenli bağlantı
                                </p>
                            </div>
                        </div>
                    </Card>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/app/components/auth/ProtectedRoute.tsx">
'use client';

import React, { ReactNode, useEffect, useState } from 'react';
import { useAuth } from './AuthProvider';
import Spinner from '@/app/components/ui/Spinner';

interface ProtectedRouteProps {
    children: ReactNode;
    requiredPermissions?: Array<{
        resource: string;
        action: string;
    }>;
    requiredRoles?: string[];
    requireAll?: boolean; // true: must have ALL permissions, false: must have ANY permission
    fallback?: ReactNode;
    loadingFallback?: ReactNode;
}

export function ProtectedRoute({
    children,
    requiredPermissions = [],
    requiredRoles = [],
    requireAll = true,
    fallback,
    loadingFallback
}: ProtectedRouteProps) {
    const { isAuthenticated, isLoading, user, hasPermission, hasRole } = useAuth();
    const [hasAccess, setHasAccess] = useState<boolean | null>(null);
    const [isCheckingPermissions, setIsCheckingPermissions] = useState(false);

    useEffect(() => {
        if (!isAuthenticated || isLoading) {
            setHasAccess(null);
            return;
        }

        checkAccess();
    }, [isAuthenticated, isLoading, user, requiredPermissions, requiredRoles]);

    const checkAccess = async () => {
        setIsCheckingPermissions(true);

        try {
            // Check roles first (synchronous)
            if (requiredRoles.length > 0) {
                const roleCheck = requireAll
                    ? requiredRoles.every(role => hasRole(role))
                    : requiredRoles.some(role => hasRole(role));

                if (!roleCheck) {
                    setHasAccess(false);
                    return;
                }
            }

            // Check permissions (asynchronous)
            if (requiredPermissions.length > 0) {
                if (requireAll) {
                    // Must have ALL permissions
                    const permissionChecks = await Promise.all(
                        requiredPermissions.map(perm => hasPermission(perm.resource, perm.action))
                    );
                    const hasAllPermissions = permissionChecks.every(Boolean);
                    setHasAccess(hasAllPermissions);
                } else {
                    // Must have ANY permission
                    const permissionChecks = await Promise.all(
                        requiredPermissions.map(perm => hasPermission(perm.resource, perm.action))
                    );
                    const hasAnyPermission = permissionChecks.some(Boolean);
                    setHasAccess(hasAnyPermission);
                }
            } else {
                // No specific permissions required, just authentication
                setHasAccess(true);
            }
        } catch (error) {
            console.error('Permission check failed:', error);
            setHasAccess(false);
        } finally {
            setIsCheckingPermissions(false);
        }
    };

    // Loading states
    if (isLoading || isCheckingPermissions) {
        return loadingFallback || (
            <div className="flex items-center justify-center min-h-screen">
                <div className="text-center">
                    <Spinner size="lg" className="mb-4" />
                    <p className="text-gray-600 dark:text-gray-300">Yükleniyor...</p>
                </div>
            </div>
        );
    }

    // Not authenticated
    if (!isAuthenticated) {
        return fallback || (
            <div className="flex items-center justify-center min-h-screen">
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 max-w-md w-full mx-4">
                    <div className="text-center">
                        <div className="mb-4">
                            <svg
                                className="mx-auto h-12 w-12 text-red-500"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5C2.962 17.333 3.924 19 5.464 19z"
                                />
                            </svg>
                        </div>
                        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                            Giriş Gerekli
                        </h2>
                        <p className="text-gray-600 dark:text-gray-300 mb-4">
                            Bu sayfaya erişmek için giriş yapmanız gerekiyor.
                        </p>
                        <button
                            onClick={() => window.location.href = '/login'}
                            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
                        >
                            Giriş Yap
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // No access (insufficient permissions)
    if (hasAccess === false) {
        return fallback || (
            <div className="flex items-center justify-center min-h-screen">
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 max-w-md w-full mx-4">
                    <div className="text-center">
                        <div className="mb-4">
                            <svg
                                className="mx-auto h-12 w-12 text-orange-500"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L5.636 5.636"
                                />
                            </svg>
                        </div>
                        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                            Erişim Engellendi
                        </h2>
                        <p className="text-gray-600 dark:text-gray-300 mb-2">
                            Bu sayfaya erişmek için gerekli yetkilere sahip değilsiniz.
                        </p>
                        <div className="text-sm text-gray-500 dark:text-gray-400 mb-4">
                            Rol: <span className="font-medium">{user?.role?.name || 'Belirsiz'}</span>
                        </div>
                        <button
                            onClick={() => window.history.back()}
                            className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md transition-colors"
                        >
                            Geri Dön
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // Has access
    return <>{children}</>;
}

// Utility components for common role checks
export function AdminOnly({ children, fallback }: { children: ReactNode; fallback?: ReactNode }) {
    return (
        <ProtectedRoute
            requiredRoles={['Super Admin', 'Admin']}
            requireAll={false}
            fallback={fallback}
        >
            {children}
        </ProtectedRoute>
    );
}

export function FinanceOnly({ children, fallback }: { children: ReactNode; fallback?: ReactNode }) {
    return (
        <ProtectedRoute
            requiredRoles={['Super Admin', 'Admin', 'Finance Manager']}
            requireAll={false}
            fallback={fallback}
        >
            {children}
        </ProtectedRoute>
    );
}

export function OperatorOnly({ children, fallback }: { children: ReactNode; fallback?: ReactNode }) {
    return (
        <ProtectedRoute
            requiredRoles={['Super Admin', 'Admin', 'Operator']}
            requireAll={false}
            fallback={fallback}
        >
            {children}
        </ProtectedRoute>
    );
}

// Permission check utility component
export function PermissionGate({
    resource,
    action,
    children,
    fallback
}: {
    resource: string;
    action: string;
    children: ReactNode;
    fallback?: ReactNode;
}) {
    return (
        <ProtectedRoute
            requiredPermissions={[{ resource, action }]}
            fallback={fallback}
        >
            {children}
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/components/templates/GenericGridView.tsx">
import React from 'react';
import type { LucideIcon } from 'lucide-react';

// UI components interface for dependency injection
export interface GenericGridViewUI {
  Card: React.ComponentType<any>;
  Button: React.ComponentType<any>;
  Checkbox: React.ComponentType<any>;
  TablePagination: React.ComponentType<any>;
  Badge: React.ComponentType<any>;
  EmptyState: React.ComponentType<any>;
  Skeleton: React.ComponentType<any>;
  BulkActionsBar: React.ComponentType<any>;
}

export interface GenericGridViewProps<T> {
  data: T[];
  loading: boolean;
  error?: string | null;
  onSelectionChange?: (selectedIds: Array<string | number>) => void;
  bulkActions?: Array<{
    id: string;
    label: string;
    icon: LucideIcon;
    onClick: (items: T[]) => void;
    variant?: 'default' | 'danger' | 'success' | 'warning';
    disabled?: boolean;
    loading?: boolean;
  }>;
  onAction?: (action: string, item: T) => void;
  selectedItems?: Array<string | number>;
  pagination?: {
    currentPage: number;
    totalPages: number;
    totalRecords: number;
    recordsPerPage: number;
    onPageChange: (page: number) => void;
    onRecordsPerPageChange: (recordsPerPage: number) => void;
  };
  emptyStateMessage?: string;
  ui: GenericGridViewUI;
  ActionMenu?: React.ComponentType<{ row: T }>;
  renderCard: (item: T, selectedItems: Array<string | number>, onSelect: (id: string | number) => void, ui: GenericGridViewUI, ActionMenu?: React.ComponentType<{ row: T }>) => React.ReactNode;
  getItemId: (item: T) => string | number;
  selectable?: boolean;
  showBulkActions?: boolean;
  showPagination?: boolean;
  showSelectAll?: boolean;
  loadingCardCount?: number;
  gridCols?: string;
}

function GenericGridView<T>({
  data,
  loading,
  error,
  onSelectionChange,
  bulkActions = [],
  onAction,
  selectedItems = [],
  pagination,
  emptyStateMessage = 'Kayıt bulunamadı.',
  ui,
  ActionMenu,
  renderCard,
  getItemId,
  selectable = true,
  showBulkActions = true,
  showPagination = true,
  showSelectAll = true,
  loadingCardCount = 6,
  gridCols = 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
}: GenericGridViewProps<T>) {
  // Selection handlers
  const handleSelect = (itemId: string | number) => {
    if (loading || !onSelectionChange) return;
    const newSelection = selectedItems.includes(itemId)
      ? selectedItems.filter(id => id !== itemId)
      : [...selectedItems, itemId];
    onSelectionChange(newSelection);
  };

  const handleSelectAll = () => {
    if (loading || !onSelectionChange) return;
    const allIds = data.map(item => getItemId(item));
    onSelectionChange(selectedItems.length === data.length ? [] : allIds);
  };

  // Bulk actions adapter
  const convertedBulkActions = bulkActions.map(action => ({
    ...action,
    onClick: () => action.onClick(data.filter(item => selectedItems.includes(getItemId(item))))
  }));

  // Loading state
  if (loading) {
    return (
      <div className="space-y-4">
        {showSelectAll && selectable && (
          <div className="flex items-center mb-2">
            <div className="w-5 h-5 bg-gray-200 dark:bg-gray-700 rounded mr-2 animate-pulse" />
            <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse" />
          </div>
        )}
        <div className={`grid ${gridCols} gap-6`}>
          {Array.from({ length: loadingCardCount }).map((_, i) => (
            <ui.Skeleton key={i} className="h-56 rounded-2xl" />
          ))}
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <ui.EmptyState
        title="Hata"
        description={error}
        variant="error"
      />
    );
  }

  // Empty state
  if (!loading && data.length === 0) {
    return (
      <ui.EmptyState
        title="Kayıt Bulunamadı"
        description={emptyStateMessage}
      />
    );
  }

  // Selection state calculations
  const isAllSelected = data.length > 0 && selectedItems.length === data.length;
  const isIndeterminate = selectedItems.length > 0 && selectedItems.length < data.length;

  return (
    <div className="space-y-6">
      {/* Bulk Actions Bar */}
      {showBulkActions && selectable && selectedItems.length > 0 && (
        <ui.BulkActionsBar
          selectedCount={selectedItems.length}
          actions={convertedBulkActions}
          onClearSelection={() => onSelectionChange?.([])}
        />
      )}

      {/* Select All Checkbox */}
      {showSelectAll && selectable && (
        <div className="flex items-center mb-2 gap-2">
          <div className="flex items-center justify-center">
            <ui.Checkbox
              checked={isAllSelected}
              indeterminate={isIndeterminate}
              onChange={handleSelectAll}
              disabled={loading || data.length === 0}
              className="focus:ring-2 focus:ring-primary-gold/30"
            />
          </div>
          <span className="text-sm text-text-light-secondary dark:text-text-secondary select-none leading-none">
            Tümünü Seç
          </span>
        </div>
      )}

      {/* Grid Layout */}
      <div className={`grid ${gridCols} gap-6`}>
        {data.map((item) => 
          renderCard(item, selectedItems, handleSelect, ui, ActionMenu)
        )}
      </div>

      {/* Pagination */}
      {showPagination && pagination && (
        <div className="mt-6">
          <ui.TablePagination
            currentPage={pagination.currentPage}
            totalPages={pagination.totalPages}
            totalRecords={pagination.totalRecords}
            recordsPerPage={pagination.recordsPerPage}
            onPageChange={pagination.onPageChange}
            onRecordsPerPageChange={pagination.onRecordsPerPageChange}
            showRecordsPerPage={true}
          />
        </div>
      )}
    </div>
  );
}

export default GenericGridView;
</file>

<file path="src/app/components/templates/GenericListView.tsx">
import React from 'react';
import DataTable from '@/app/components/ui/DataTable';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';

export interface GenericListViewProps<T> {
  data: T[];
  loading: boolean;
  error?: string | null;
  onSelectionChange?: (selected: T[]) => void;
  bulkActions?: any[];
  columns: any[];
  sortConfig?: { key: string; direction: 'asc' | 'desc' };
  onSortChange?: (key: string, direction: 'asc' | 'desc') => void;
  pagination?: {
    currentPage: number;
    totalPages: number;
    totalRecords: number;
    recordsPerPage: number;
    onPageChange: (page: number) => void;
    onRecordsPerPageChange: (records: number) => void;
  };
  emptyStateMessage?: string;
  ActionMenuComponent?: React.ComponentType<{ row: T }>;
  selectable?: boolean;
  showPagination?: boolean;
  loadingRowCount?: number;
}

function GenericListView<T>({
  data,
  loading,
  error,
  onSelectionChange,
  bulkActions = [],
  columns,
  sortConfig,
  onSortChange,
  pagination,
  emptyStateMessage = 'Kayıt bulunamadı.',
  ActionMenuComponent,
  selectable = true,
  showPagination = true,
  loadingRowCount = 6,
}: GenericListViewProps<T>) {
  // Loading state
  if (loading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: loadingRowCount }).map((_, i) => (
          <Skeleton key={i} className="h-16 w-full" />
        ))}
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <EmptyState
        title="Hata"
        description={error}
        
      />
    );
  }

  // Empty state
  if (!loading && data.length === 0) {
    return (
      <EmptyState
        title="Kayıt Bulunamadı"
        description={emptyStateMessage}
      />
    );
  }

  return (
    <DataTable
      columns={columns}
      data={data}
      loading={loading}
      selectable={selectable}
      onSelectionChange={onSelectionChange}
      bulkActions={bulkActions}
      rowActions={[]}
      sortConfig={sortConfig}
      onSortChange={onSortChange}
      pagination={showPagination ? pagination : undefined}
      emptyStateMessage={emptyStateMessage}
      ActionMenuComponent={ActionMenuComponent}
    />
  );
}

export default GenericListView;
</file>

<file path="src/app/components/templates/GridList.tsx">
import React from 'react';
import type { LucideIcon } from 'lucide-react';

// UI bileşenleri dışarıdan alınır (Dependency Injection)
export interface ResidentGridTemplateUI {
  Card: React.ComponentType<any>;
  Button: React.ComponentType<any>;
  Checkbox: React.ComponentType<any>;
  TablePagination: React.ComponentType<any>;
  Badge: React.ComponentType<any>;
  EmptyState: React.ComponentType<any>;
  Skeleton: React.ComponentType<any>;
  BulkActionsBar: React.ComponentType<any>;
}

export interface ResidentGridTemplateProps {
  residents: any[];
  loading: boolean;
  onSelectionChange: (selectedIds: Array<string | number>) => void;
  bulkActions: Array<{
    id: string;
    label: string;
    icon: LucideIcon;
    onClick: (residents: any[]) => void;
    variant?: 'default' | 'danger' | 'success' | 'warning';
    disabled?: boolean;
    loading?: boolean;
  }>;
  onAction: (action: string, resident: any) => void;
  selectedResidents: Array<string | number>;
  pagination: {
    currentPage: number;
    totalPages: number;
    totalRecords: number;
    recordsPerPage: number;
    onPageChange: (page: number) => void;
    onRecordsPerPageChange: (recordsPerPage: number) => void;
  };
  emptyStateMessage?: string;
  ui: ResidentGridTemplateUI;
  ActionMenu?: React.ComponentType<{ row: any }>;
  getStatusColor?: (status: any) => string;
  renderCardActions?: (resident: any) => React.ReactNode;
}

export interface ActionMenuProps {
  resident: any;
  onAction: (action: string, resident: any) => void;
}

// Default ActionMenu (isteğe bağlı override edilebilir)
export const DefaultActionMenu: React.FC<ActionMenuProps> = ({ resident, onAction }) => {
  // ... (Kullanıcı kendi ActionMenu'sunu geçebilir, burada sade bir örnek bırakıyoruz)
  return (
    <button onClick={() => onAction('view', resident)} className="text-primary-gold">Görüntüle</button>
  );
};

// Yardımcı fonksiyonlar (isteğe bağlı override edilebilir)
const defaultGetStatusColor = (status: any) => 'secondary';
const defaultGetTypeColor = (type: any) => 'secondary';

// ActionMenu prop'unu hem eski hem yeni tipte destekle
function isRowPropComponent(
  comp: React.ComponentType<any>
): comp is React.ComponentType<{ row: any }> {
  // Sadece row prop'u varsa yeni tiptir
  // (Bu kontrol, typescript için, runtime'da bir etkisi yok)
  return true;
}

export const ResidentGridTemplate: React.FC<ResidentGridTemplateProps> = ({
  residents,
  loading,
  onSelectionChange,
  bulkActions,
  onAction,
  selectedResidents,
  pagination,
  emptyStateMessage = 'Kayıt bulunamadı.',
  ui,
  ActionMenu = DefaultActionMenu,
  getStatusColor = defaultGetStatusColor,
  renderCardActions,
}) => {
  // Checkbox seçimleri
  const handleSelect = (residentId: string | number) => {
    if (loading) return;
    const newSelection = selectedResidents.includes(residentId)
      ? selectedResidents.filter(id => id !== residentId)
      : [...selectedResidents, residentId];
    onSelectionChange(newSelection);
  };
  const handleSelectAll = () => {
    if (loading) return;
    const allIds = residents.map(resident => resident.id);
    onSelectionChange(selectedResidents.length === residents.length ? [] : allIds);
  };

  // Bulk actions uyarlama
  const convertedBulkActions = bulkActions.map(action => ({
    ...action,
    onClick: () => action.onClick(residents.filter(r => selectedResidents.includes(r.id)))
  }));

  // Yükleniyor durumu
  if (loading) {
    return (
      <div className="space-y-4">
        {/* Tümünü Seç checkbox skeleton */}
        <div className="flex items-center mb-2">
          <div className="w-5 h-5 bg-gray-200 dark:bg-gray-700 rounded mr-2 animate-pulse" />
          <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse" />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <ui.Skeleton key={i} className="h-56 rounded-2xl" />
          ))}
        </div>
      </div>
    );
  }

  // Boş durum
  if (!loading && residents.length === 0) {
    return <ui.EmptyState title="Kayıt Bulunamadı" description={emptyStateMessage} />;
  }

  // Tümünü seç checkbox indeterminate durumu
  const isAllSelected = residents.length > 0 && selectedResidents.length === residents.length;
  const isIndeterminate = selectedResidents.length > 0 && selectedResidents.length < residents.length;

  return (
    <div className="space-y-6">
      {/* Bulk Actions Bar */}
      {selectedResidents.length > 0 && (
        <ui.BulkActionsBar
          selectedCount={selectedResidents.length}
          actions={convertedBulkActions}
          onClearSelection={() => onSelectionChange([])}
        />
      )}
      {/* Tümünü Seç Checkbox */}
      <div className="flex items-center mb-2 gap-2">
        <div className="flex items-center justify-center">
          <ui.Checkbox
            checked={isAllSelected}
            indeterminate={isIndeterminate}
            onChange={handleSelectAll}
            disabled={loading || residents.length === 0}
            className="focus:ring-2 focus:ring-primary-gold/30"
          />
        </div>
        <span className="text-sm text-text-light-secondary dark:text-text-secondary select-none leading-none">
          Tümünü Seç
        </span>
      </div>
      {/* Grid Layout */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {residents.map((resident) => (
          <ui.Card
            key={resident.id}
            className="p-6 rounded-2xl shadow-md bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 transition-transform hover:scale-[1.01] hover:shadow-lg group"
          >
            {/* Üst Alan: Checkbox + İsim + Menü */}
            <div className="flex items-start justify-between gap-2">
              <div className="flex items-center gap-4">
                <ui.Checkbox
                  checked={selectedResidents.includes(resident.id)}
                  onChange={() => handleSelect(resident.id)}
                  className="focus:ring-2 focus:ring-primary-gold/30"
                  disabled={loading}
                />
                <div>
                  <h3 className="text-xl font-semibold text-on-dark tracking-tight">
                    {resident.firstName} {resident.lastName}
                  </h3>
                  <p className="text-sm text-text-light-secondary dark:text-text-secondary font-medium mt-1">
                    {resident.address?.apartment}
                  </p>
                  {/* Üyelik Türü Badge - üst satıra taşındı */}
                  {(() => {
                    const membershipTier = resident.membershipTier || 'Standart';
                    if (membershipTier === 'Altın') {
                      return (
                        <ui.Badge
                          variant="soft"
                          color="gold"
                          className="min-w-[88px] text-center justify-center text-xs px-3 py-1 rounded-full font-medium mt-2"
                        >
                          {membershipTier}
                        </ui.Badge>
                      );
                    } else if (membershipTier === 'Gümüş') {
                      return (
                        <ui.Badge
                          variant="soft"
                          color="secondary"
                          className="min-w-[88px] text-center justify-center text-xs px-3 py-1 rounded-full font-medium mt-2"
                        >
                          {membershipTier}
                        </ui.Badge>
                      );
                    } else {
                      return (
                        <ui.Badge className="min-w-[88px] text-center justify-center text-xs px-3 py-1 rounded-full font-medium mt-2">
                          {membershipTier}
                        </ui.Badge>
                      );
                    }
                  })()}
                </div>
              </div>
              {/* ActionMenu: Hem eski hem yeni tip desteklenir */}
              {ActionMenu ? (
                isRowPropComponent(ActionMenu)
                  ? <ActionMenu row={resident} />
                  : <ActionMenu resident={resident} onAction={onAction} />
              ) : null}
            </div>
            {/* Orta Alan: Durum ve Tip Badge'leri */}
            <div className="mt-4 flex flex-wrap gap-2 items-center">
              <ui.Badge variant="soft" color={getStatusColor(resident.status)} className="text-xs px-3 py-1 rounded-full font-medium flex items-center gap-1">
                <span
                  className="w-2 h-2 rounded-full inline-block border border-gray-300 dark:border-gray-700 mr-1"
                  style={{
                    backgroundColor:
                      getStatusColor(resident.status) === 'primary' ? '#22C55E' :
                      getStatusColor(resident.status) === 'gold' ? '#AC8D6A' :
                      getStatusColor(resident.status) === 'red' ? '#E53E3E' :
                      getStatusColor(resident.status) === 'accent' ? '#718096' :
                      '#A8A29E', // secondary (warm gray)
                  }}
                  title={resident.status?.label}
                />
                {resident.status?.label}
              </ui.Badge>
              {/* VerificationStatus Badge */}
              {resident.verificationStatus && (
                <ui.Badge
                  variant="outline"
                  color={
                    resident.verificationStatus.color === 'green' ? 'primary' :
                    resident.verificationStatus.color === 'yellow' ? 'gold' :
                    resident.verificationStatus.color === 'red' ? 'red' :
                    'secondary'
                  }
                  className="text-xs px-3 py-1 rounded-full font-medium flex items-center gap-1"
                >
                  {resident.verificationStatus.label}
                </ui.Badge>
              )}
              <ui.Badge
                variant="soft"
                className={
                  `text-xs px-3 py-1 rounded-full font-medium text-black ` +
                  (resident.residentType?.label === "Malik"
                    ? "bg-green-100"
                    : resident.residentType?.label === "Kiracı"
                    ? "bg-blue-100"
                    : "")
                }
              >
                {resident.residentType?.label}
              </ui.Badge>
              {/* Üyelik Türü Badge kaldırıldı */}
            </div>
            {/* İletişim Bilgileri */}
            <div className="mt-4 flex flex-col gap-1 text-sm text-text-light-secondary dark:text-text-secondary">
              {resident.contact?.phone && (
                <div className="flex items-center gap-2">
                  {/* Telefon ikonu dışarıdan alınabilir */}
                  <span>{resident.contact.phone}</span>
                </div>
              )}
              {resident.contact?.email && (
                <div className="flex items-center gap-2">
                  <span>{resident.contact.email}</span>
                </div>
              )}
            </div>
            {/* Alt Alan: Aksiyon Butonları */}
            {renderCardActions
              ? renderCardActions(resident)
              : (
                <div className="mt-6 flex gap-3">
                  {resident.contact?.phone && (
                    <ui.Button
                      variant="primary"
                      size="sm"
                      onClick={() => onAction('call', resident)}
                      className="rounded-lg font-medium shadow-sm hover:bg-primary-gold/10 dark:hover:bg-primary-gold/20 focus:ring-2 focus:ring-primary-gold/30"
                    >
                      Ara
                    </ui.Button>
                  )}
                  <ui.Button
                    variant="secondary"
                    size="sm"
                    onClick={() => onAction('message', resident)}
                    className="rounded-lg font-medium shadow-sm hover:bg-primary-gold/10 dark:hover:bg-primary-gold/20 focus:ring-2 focus:ring-primary-gold/30"
                  >
                    Mesaj
                  </ui.Button>
                </div>
              )}
          </ui.Card>
        ))}
      </div>
      {/* Pagination */}
      <div className="mt-6">
        <ui.TablePagination
          currentPage={pagination.currentPage}
          totalPages={pagination.totalPages}
          totalRecords={pagination.totalRecords}
          recordsPerPage={pagination.recordsPerPage}
          onPageChange={pagination.onPageChange}
          onRecordsPerPageChange={pagination.onRecordsPerPageChange}
          showRecordsPerPage={true}
        />
      </div>
    </div>
  );
};

export default ResidentGridTemplate;
</file>

<file path="src/app/components/templates/ListView.tsx">
import React from 'react';
import DataTable from '@/app/components/ui/DataTable';

export interface ListViewProps<T> {
  data: T[];
  loading: boolean;
  onSelectionChange: (selected: T[]) => void;
  bulkActions: any[]; // Kullanıcı kendi tipini geçebilir
  columns: any[]; // Kullanıcı kendi tipini geçebilir
  sortConfig?: { key: string; direction: 'asc' | 'desc' };
  onSortChange?: (key: string, direction: 'asc' | 'desc') => void;
  pagination?: {
    currentPage: number;
    totalPages: number;
    totalRecords: number;
    recordsPerPage: number;
    onPageChange: (page: number) => void;
    onRecordsPerPageChange: (records: number) => void;
  };
  emptyStateMessage?: string;
  ActionMenuComponent?: React.ComponentType<{ row: T }>;
}

function ListView<T>({
  data,
  loading,
  onSelectionChange,
  bulkActions,
  columns,
  sortConfig,
  onSortChange,
  pagination,
  emptyStateMessage,
  ActionMenuComponent,
}: ListViewProps<T>) {
  return (
    <DataTable
      columns={columns}
      data={data}
      loading={loading}
      selectable={true}
      onSelectionChange={onSelectionChange}
      bulkActions={bulkActions}
      rowActions={[]}
      sortConfig={sortConfig}
      onSortChange={onSortChange}
      pagination={pagination}
      emptyStateMessage={emptyStateMessage}
      ActionMenuComponent={ActionMenuComponent}
    />
  );
}

export default ListView;
</file>

<file path="src/app/components/ui/Accordion.tsx">
'use client'

import { forwardRef, HTMLAttributes, ReactNode, useState, useEffect } from 'react'
import { ChevronDown, LucideIcon } from 'lucide-react'

interface AccordionItem {
    id: string
    title: string
    content: ReactNode
    icon?: LucideIcon
    disabled?: boolean
    badge?: string | number
    subtitle?: string
}

interface AccordionProps extends HTMLAttributes<HTMLDivElement> {
    items: AccordionItem[]
    defaultValue?: string | string[]
    value?: string | string[]
    onValueChange?: (value: string | string[]) => void
    type?: 'single' | 'multiple'
    variant?: 'default' | 'bordered' | 'filled' | 'minimal'
    size?: 'sm' | 'md' | 'lg'
    collapsible?: boolean // For single type - allow closing all
    animated?: boolean
    keepMounted?: boolean
}

const Accordion = forwardRef<HTMLDivElement, AccordionProps>(
    ({
        items,
        defaultValue,
        value,
        onValueChange,
        type = 'single',
        variant = 'default',
        size = 'md',
        collapsible = true,
        animated = true,
        keepMounted = false,
        className = '',
        ...props
    }, ref) => {
        const [openItems, setOpenItems] = useState<string[]>(() => {
            if (value) {
                return Array.isArray(value) ? value : [value]
            }
            if (defaultValue) {
                return Array.isArray(defaultValue) ? defaultValue : [defaultValue]
            }
            return []
        })

        useEffect(() => {
            if (value !== undefined) {
                setOpenItems(Array.isArray(value) ? value : [value])
            }
        }, [value])

        const handleItemToggle = (itemId: string) => {
            const item = items.find(item => item.id === itemId)
            if (item && item.disabled) return

            let newOpenItems: string[]

            if (type === 'single') {
                if (openItems.includes(itemId)) {
                    newOpenItems = collapsible ? [] : [itemId]
                } else {
                    newOpenItems = [itemId]
                }
            } else {
                if (openItems.includes(itemId)) {
                    newOpenItems = openItems.filter(id => id !== itemId)
                } else {
                    newOpenItems = [...openItems, itemId]
                }
            }

            setOpenItems(newOpenItems)
            onValueChange?.(type === 'single' ? newOpenItems[0] || '' : newOpenItems)
        }

        const sizeClasses = {
            sm: 'text-sm',
            md: 'text-base',
            lg: 'text-lg'
        }

        const variantClasses = {
            default: {
                container: 'border border-primary-gold/20 rounded-lg overflow-hidden',
                item: 'border-b border-primary-gold/20 last:border-b-0',
                trigger: 'bg-background-card hover:bg-background-secondary',
                content: 'bg-background-card'
            },
            bordered: {
                container: 'space-y-2',
                item: 'border border-primary-gold/20 rounded-lg overflow-hidden',
                trigger: 'bg-background-card hover:bg-background-secondary',
                content: 'bg-background-card'
            },
            filled: {
                container: 'space-y-2',
                item: 'bg-background-card rounded-lg overflow-hidden',
                trigger: 'bg-background-secondary hover:bg-primary-gold/10',
                content: 'bg-background-card'
            },
            minimal: {
                container: 'space-y-1',
                item: 'border-b border-primary-gold/10 last:border-b-0',
                trigger: 'hover:bg-primary-gold/5',
                content: 'bg-transparent'
            }
        }

        const paddingClasses = {
            sm: 'px-3 py-2',
            md: 'px-4 py-3',
            lg: 'px-6 py-4'
        }

        const isItemOpen = (itemId: string) => openItems.includes(itemId)

        return (
            <div
                ref={ref}
                className={`${variantClasses[variant].container} ${className}`}
                {...props}
            >
                {items.map((item) => {
                    const isOpen = isItemOpen(item.id)
                    const Icon = item.icon

                    return (
                        <div
                            key={item.id}
                            className={`${variantClasses[variant].item}`}
                        >
                            {/* Trigger */}
                            <button
                                onClick={() => handleItemToggle(item.id)}
                                disabled={item.disabled}
                                className={`
                  w-full text-left transition-all duration-200 font-helvetica
                  ${paddingClasses[size]}
                  ${variantClasses[variant].trigger}
                  ${item.disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
                  focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-inset
                  flex items-center justify-between
                `}
                                aria-expanded={isOpen}
                                aria-controls={`accordion-content-${item.id}`}
                            >
                                <div className="flex items-center space-x-3 flex-1">
                                    {Icon && (
                                        <div className="p-1.5 bg-primary-gold/20 rounded-md flex-shrink-0">
                                            <Icon className={`text-primary-gold ${size === 'sm' ? 'w-4 h-4' : size === 'md' ? 'w-4 h-4' : 'w-5 h-5'
                                                }`} />
                                        </div>
                                    )}
                                    <div className="flex-1">
                                        <div className="flex items-center space-x-2">
                                            <span className={`font-semibold text-text-primary ${sizeClasses[size]}`}>
                                                {item.title}
                                            </span>
                                            {item.badge && (
                                                <span className="px-2 py-0.5 text-xs bg-primary-gold/20 text-primary-gold rounded-full">
                                                    {item.badge}
                                                </span>
                                            )}
                                        </div>
                                        {item.subtitle && (
                                            <p className="text-sm text-text-secondary mt-1 font-inter">
                                                {item.subtitle}
                                            </p>
                                        )}
                                    </div>
                                </div>

                                <ChevronDown
                                    className={`w-5 h-5 text-text-secondary transition-transform duration-200 flex-shrink-0 ml-2 ${isOpen ? 'rotate-180' : ''
                                        }`}
                                />
                            </button>

                            {/* Content */}
                            <div
                                id={`accordion-content-${item.id}`}
                                className={`
                  ${variantClasses[variant].content}
                  overflow-hidden transition-all duration-200 ease-in-out
                  ${animated ? (isOpen ? 'max-h-96' : 'max-h-0') : (isOpen ? 'block' : 'hidden')}
                `}
                                aria-hidden={!isOpen}
                            >
                                {(isOpen || keepMounted) && (
                                    <div className={`${paddingClasses[size]} pt-0 ${isOpen ? 'block' : 'hidden'}`}>
                                        {item.content}
                                    </div>
                                )}
                            </div>
                        </div>
                    )
                })}
            </div>
        )
    }
)

Accordion.displayName = 'Accordion'

export default Accordion

// Alt component'ler
export const AccordionItem = ({
    children,
    className = '',
    ...props
}: HTMLAttributes<HTMLDivElement>) => (
    <div className={`border-b border-primary-gold/20 last:border-b-0 ${className}`} {...props}>
        {children}
    </div>
)

export const AccordionTrigger = ({
    children,
    className = '',
    isOpen = false,
    disabled = false,
    ...props
}: HTMLAttributes<HTMLButtonElement> & { isOpen?: boolean; disabled?: boolean }) => (
    <button
        className={`
      w-full text-left px-4 py-3 transition-all duration-200 font-helvetica
      bg-background-card hover:bg-background-secondary
      ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
      focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-inset
      flex items-center justify-between
      ${className}
    `}
        disabled={disabled}
        aria-expanded={isOpen}
        {...props}
    >
        <span className="font-semibold text-text-primary">{children}</span>
        <ChevronDown
            className={`w-5 h-5 text-text-secondary transition-transform duration-200 ${isOpen ? 'rotate-180' : ''
                }`}
        />
    </button>
)

export const AccordionContent = ({
    children,
    className = '',
    isOpen = false,
    ...props
}: HTMLAttributes<HTMLDivElement> & { isOpen?: boolean }) => (
    <div
        className={`
      bg-background-card overflow-hidden transition-all duration-200 ease-in-out
      ${isOpen ? 'max-h-96' : 'max-h-0'}
      ${className}
    `}
        {...props}
    >
        {isOpen && (
            <div className="px-4 py-3">
                {children}
            </div>
        )}
    </div>
)
</file>

<file path="src/app/components/ui/Alert.tsx">
import React from 'react';
import { X, CheckCircle, AlertCircle, Info, AlertTriangle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface AlertProps {
    type?: 'success' | 'error' | 'warning' | 'info';
    variant?: 'default' | 'outline' | 'solid';
    title?: string;
    children: React.ReactNode;
    closable?: boolean;
    onClose?: () => void;
    size?: 'sm' | 'md' | 'lg';
    className?: string;
}

const Alert: React.FC<AlertProps> = ({
    type = 'info',
    variant = 'default',
    title,
    children,
    closable = false,
    onClose,
    size = 'md',
    className,
}) => {
    const typeConfig = {
        success: {
            icon: CheckCircle,
            colors: {
                default: 'bg-green-600/10 border-green-600/20 text-green-300',
                outline: 'border-green-600/40 text-green-300 bg-transparent',
                solid: 'bg-green-600 text-white border-green-600',
            },
            iconColor: 'text-green-400',
            titleColor: 'text-green-300',
        },
        error: {
            icon: AlertCircle,
            colors: {
                default: 'bg-primary-red/10 border-primary-red/20 text-primary-red',
                outline: 'border-primary-red/40 text-primary-red bg-transparent',
                solid: 'bg-primary-red text-white border-primary-red',
            },
            iconColor: 'text-primary-red',
            titleColor: 'text-primary-red',
        },
        warning: {
            icon: AlertTriangle,
            colors: {
                default: 'bg-yellow-600/10 border-yellow-600/20 text-yellow-300',
                outline: 'border-yellow-600/40 text-yellow-300 bg-transparent',
                solid: 'bg-yellow-600 text-white border-yellow-600',
            },
            iconColor: 'text-yellow-400',
            titleColor: 'text-yellow-300',
        },
        info: {
            icon: Info,
            colors: {
                default: 'bg-primary-gold/10 border-primary-gold/20 text-primary-gold',
                outline: 'border-primary-gold/40 text-primary-gold bg-transparent',
                solid: 'bg-primary-gold text-background-primary border-primary-gold',
            },
            iconColor: 'text-primary-gold',
            titleColor: 'text-primary-gold',
        },
    };

    const sizeClasses = {
        sm: 'p-3 text-sm',
        md: 'p-4 text-base',
        lg: 'p-6 text-lg',
    };

    const iconSizes = {
        sm: 'h-4 w-4',
        md: 'h-5 w-5',
        lg: 'h-6 w-6',
    };

    const config = typeConfig[type];
    const IconComponent = config.icon;

    return (
        <div
            role="alert"
            className={cn(
                'border rounded-lg',
                config.colors[variant],
                sizeClasses[size],
                className
            )}
        >
            <div className="flex items-start gap-3">
                <IconComponent className={cn('mt-0.5 flex-shrink-0', config.iconColor, iconSizes[size])} />

                <div className="flex-1 min-w-0">
                    {title && (
                        <h4 className={cn('font-semibold mb-1',
                            variant === 'solid' ? 'text-white' : config.titleColor
                        )}>
                            {title}
                        </h4>
                    )}
                    <div className={cn(
                        variant === 'solid' ? 'text-white' : ''
                    )}>
                        {children}
                    </div>
                </div>

                {closable && (
                    <button
                        onClick={onClose}
                        className={cn(
                            'flex-shrink-0 p-1 rounded-full transition-colors',
                            variant === 'solid'
                                ? 'hover:bg-white/20 text-white'
                                : 'hover:bg-background-secondary/50 text-text-secondary'
                        )}
                    >
                        <X className={iconSizes[size]} />
                    </button>
                )}
            </div>
        </div>
    );
};

export default Alert;
</file>

<file path="src/app/components/ui/Avatar.tsx">
import React from 'react';
import { User } from 'lucide-react';
import { cn } from '@/lib/utils';

interface AvatarProps {
    src?: string;
    alt?: string;
    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
    fallback?: string;
    shape?: 'circle' | 'square' | 'rounded';
    status?: 'online' | 'offline' | 'away' | 'busy';
    showStatus?: boolean;
    border?: boolean;
    className?: string;
    onClick?: () => void;
}

const Avatar: React.FC<AvatarProps> = ({
    src,
    alt,
    size = 'md',
    fallback,
    shape = 'circle',
    status,
    showStatus = false,
    border = false,
    className,
    onClick,
}) => {
    const sizeClasses = {
        xs: 'w-6 h-6 text-xs',
        sm: 'w-8 h-8 text-sm',
        md: 'w-10 h-10 text-base',
        lg: 'w-12 h-12 text-lg',
        xl: 'w-16 h-16 text-xl',
        '2xl': 'w-20 h-20 text-2xl',
    };

    const shapeClasses = {
        circle: 'rounded-full',
        square: 'rounded-none',
        rounded: 'rounded-lg',
    };

    const statusClasses = {
        online: 'bg-green-500',
        offline: 'bg-gray-500',
        away: 'bg-yellow-500',
        busy: 'bg-primary-red',
    };

    const statusSizeClasses = {
        xs: 'w-2 h-2',
        sm: 'w-2.5 h-2.5',
        md: 'w-3 h-3',
        lg: 'w-3.5 h-3.5',
        xl: 'w-4 h-4',
        '2xl': 'w-5 h-5',
    };

    const containerClasses = cn(
        'relative inline-flex items-center justify-center flex-shrink-0 font-medium overflow-hidden bg-background-secondary text-text-primary transition-colors',
        sizeClasses[size],
        shapeClasses[shape],
        border && 'border-2 border-primary-dark-gray/20',
        onClick && 'cursor-pointer hover:bg-background-secondary/80',
        className
    );

    const renderFallback = () => {
        if (fallback) {
            return (
                <span className="uppercase font-semibold">
                    {fallback.slice(0, 2)}
                </span>
            );
        }
        return <User className="w-1/2 h-1/2" />;
    };

    const renderStatusIndicator = () => {
        if (!showStatus || !status) return null;

        return (
            <div
                className={cn(
                    'absolute bottom-0 right-0 rounded-full border-2 border-background-primary',
                    statusClasses[status],
                    statusSizeClasses[size]
                )}
            />
        );
    };

    return (
        <div className={containerClasses} onClick={onClick}>
            {src ? (
                <img
                    src={src}
                    alt={alt || 'Avatar'}
                    className="w-full h-full object-cover"
                    onError={(e) => {
                        e.currentTarget.style.display = 'none';
                    }}
                />
            ) : (
                renderFallback()
            )}
            {renderStatusIndicator()}
        </div>
    );
};

// Avatar Group Component
interface AvatarGroupProps {
    avatars: Array<{
        src?: string;
        alt?: string;
        fallback?: string;
    }>;
    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
    max?: number;
    spacing?: 'none' | 'sm' | 'md' | 'lg';
    shape?: 'circle' | 'square' | 'rounded';
    showCount?: boolean;
    className?: string;
}

export const AvatarGroup: React.FC<AvatarGroupProps> = ({
    avatars,
    size = 'md',
    max = 5,
    spacing = 'sm',
    shape = 'circle',
    showCount = true,
    className,
}) => {
    const displayAvatars = avatars.slice(0, max);
    const remainingCount = avatars.length - max;

    const spacingClasses = {
        none: 'space-x-0',
        sm: 'space-x-1',
        md: 'space-x-2',
        lg: 'space-x-3',
    };

    return (
        <div className={cn('flex items-center', spacingClasses[spacing], className)}>
            {displayAvatars.map((avatar, index) => (
                <Avatar
                    key={index}
                    src={avatar.src}
                    alt={avatar.alt}
                    fallback={avatar.fallback}
                    size={size}
                    shape={shape}
                    border
                    className={index > 0 ? '-ml-2' : ''}
                />
            ))}
            {showCount && remainingCount > 0 && (
                <Avatar
                    size={size}
                    shape={shape}
                    fallback={`+${remainingCount}`}
                    border
                    className="bg-primary-gold text-background-primary -ml-2"
                />
            )}
        </div>
    );
};

// Predefined Avatar Patterns
export const AvatarPatterns = {
    // User avatar with online status
    Online: (props: Partial<AvatarProps>) => (
        <Avatar
            status="online"
            showStatus
            {...props}
        />
    ),

    // Admin avatar with special styling
    Admin: (props: Partial<AvatarProps>) => (
        <Avatar
            border
            className="ring-2 ring-primary-gold"
            {...props}
        />
    ),

    // Team avatar group
    Team: (avatars: AvatarGroupProps['avatars'], props?: Partial<AvatarGroupProps>) => (
        <AvatarGroup
            avatars={avatars}
            max={4}
            spacing="sm"
            {...props}
        />
    ),

    // Large profile avatar
    Profile: (props: Partial<AvatarProps>) => (
        <Avatar
            size="2xl"
            shape="circle"
            border
            {...props}
        />
    ),

    // Small notification avatar
    Notification: (props: Partial<AvatarProps>) => (
        <Avatar
            size="sm"
            shape="circle"
            {...props}
        />
    ),
};

export default Avatar;
</file>

<file path="src/app/components/ui/Breadcrumb.tsx">
import React from 'react';
import { ChevronRight, Home } from 'lucide-react';
import { cn } from '@/lib/utils';

interface BreadcrumbItem {
    label: string;
    href?: string;
    icon?: React.ReactNode;
    active?: boolean;
    onClick?: () => void;
}

interface BreadcrumbProps {
    items: BreadcrumbItem[];
    separator?: React.ReactNode;
    showHome?: boolean;
    maxItems?: number;
    size?: 'sm' | 'md' | 'lg';
    className?: string;
}

const Breadcrumb: React.FC<BreadcrumbProps> = ({
    items,
    separator = <ChevronRight size={16} />,
    showHome = true,
    maxItems,
    size = 'md',
    className,
}) => {
    // Add home item if showHome is true and first item is not home
    const breadcrumbItems = showHome && items.length > 0 && items[0].label !== 'Ana Sayfa'
        ? [{ label: 'Ana Sayfa', href: '/', icon: <Home size={16} /> }, ...items]
        : items;

    // Handle maxItems truncation
    const displayItems = maxItems && breadcrumbItems.length > maxItems
        ? [
            ...breadcrumbItems.slice(0, 1),
            { label: '...', href: undefined, icon: undefined },
            ...breadcrumbItems.slice(-(maxItems - 2))
        ]
        : breadcrumbItems;

    const sizeClasses = {
        sm: 'text-sm',
        md: 'text-base',
        lg: 'text-lg',
    };

    return (
        <nav className={cn('flex items-center space-x-2', sizeClasses[size], className)}>
            {displayItems.map((item, index) => (
                <React.Fragment key={index}>
                    <BreadcrumbItem
                        item={item}
                        isLast={index === displayItems.length - 1}
                        size={size}
                    />
                    {index < displayItems.length - 1 && (
                        <span className="text-text-secondary flex-shrink-0">
                            {separator}
                        </span>
                    )}
                </React.Fragment>
            ))}
        </nav>
    );
};

// Individual Breadcrumb Item Component
const BreadcrumbItem: React.FC<{
    item: BreadcrumbItem;
    isLast: boolean;
    size: 'sm' | 'md' | 'lg';
}> = ({ item, isLast, size }) => {
    const handleClick = (e: React.MouseEvent) => {
        if (item.onClick) {
            e.preventDefault();
            item.onClick();
        }
    };

    const baseClasses = cn(
        'flex items-center space-x-1 transition-colors',
        size === 'sm' && 'text-sm',
        size === 'md' && 'text-base',
        size === 'lg' && 'text-lg',
    );

    const linkClasses = cn(
        baseClasses,
        'hover:text-primary-gold cursor-pointer',
        isLast || item.active
            ? 'text-text-primary font-medium'
            : 'text-text-secondary'
    );

    const textClasses = cn(
        baseClasses,
        isLast || item.active
            ? 'text-text-primary font-medium'
            : 'text-text-secondary'
    );

    // Handle ellipsis
    if (item.label === '...') {
        return (
            <span className="text-text-secondary px-2">
                {item.label}
            </span>
        );
    }

    // Render as link if href or onClick is provided
    if (item.href || item.onClick) {
        return (
            <a
                href={item.href}
                onClick={handleClick}
                className={linkClasses}
                aria-current={isLast ? 'page' : undefined}
            >
                {item.icon && (
                    <span className="flex-shrink-0">
                        {item.icon}
                    </span>
                )}
                <span className="truncate">{item.label}</span>
            </a>
        );
    }

    // Render as text
    return (
        <span className={textClasses} aria-current={isLast ? 'page' : undefined}>
            {item.icon && (
                <span className="flex-shrink-0">
                    {item.icon}
                </span>
            )}
            <span className="truncate">{item.label}</span>
        </span>
    );
};

// Predefined Breadcrumb Patterns
export const BreadcrumbPatterns = {
    // Simple page breadcrumb
    Simple: (currentPage: string, props?: Partial<BreadcrumbProps>) => (
        <Breadcrumb
            items={[
                { label: currentPage, active: true }
            ]}
            {...props}
        />
    ),

    // Two-level breadcrumb
    TwoLevel: (section: string, page: string, props?: Partial<BreadcrumbProps>) => (
        <Breadcrumb
            items={[
                { label: section, href: `/${section.toLowerCase()}` },
                { label: page, active: true }
            ]}
            {...props}
        />
    ),

    // Three-level breadcrumb
    ThreeLevel: (section: string, subsection: string, page: string, props?: Partial<BreadcrumbProps>) => (
        <Breadcrumb
            items={[
                { label: section, href: `/${section.toLowerCase()}` },
                { label: subsection, href: `/${section.toLowerCase()}/${subsection.toLowerCase()}` },
                { label: page, active: true }
            ]}
            {...props}
        />
    ),

    // Dashboard breadcrumb
    Dashboard: (path: string[], props?: Partial<BreadcrumbProps>) => (
        <Breadcrumb
            items={path.map((item, index) => ({
                label: item,
                href: index < path.length - 1 ? `/${path.slice(0, index + 1).join('/')}` : undefined,
                active: index === path.length - 1,
            }))}
            {...props}
        />
    ),
};

export default Breadcrumb;
</file>

<file path="src/app/components/ui/BulkActionsBar.tsx">
import React, { useState } from 'react';
import { LucideIcon, ChevronDown, X } from 'lucide-react';
import { cn } from '@/lib/utils';
import Button from './Button';
import Card from './Card';

interface BulkAction {
    id: string;
    label: string;
    icon: LucideIcon;
    onClick: () => void;
    variant?: 'default' | 'danger' | 'success' | 'warning';
    disabled?: boolean;
    loading?: boolean;
}

interface BulkActionsBarProps {
    selectedCount: number;
    actions: BulkAction[];
    onClearSelection?: () => void;
    maxVisibleActions?: number;
    className?: string;
    size?: 'sm' | 'md' | 'lg';
    variant?: 'default' | 'minimal' | 'bordered';
    showClearButton?: boolean;
    itemName?: string;
    itemNamePlural?: string;
    position?: 'top' | 'bottom' | 'sticky';
}

const BulkActionsBar: React.FC<BulkActionsBarProps> = ({
    selectedCount,
    actions,
    onClearSelection,
    maxVisibleActions = 4,
    className,
    size = 'md',
    variant = 'default',
    showClearButton = true,
    itemName = 'öğe',
    itemNamePlural = 'öğe',
    position,
}) => {
    const [showMoreActions, setShowMoreActions] = useState(false);

    if (selectedCount === 0) {
        return null;
    }

    const sizeClasses = {
        sm: 'p-3 gap-3',
        md: 'p-4 gap-4',
        lg: 'p-5 gap-5',
    };

    const textSizes = {
        sm: 'text-xs',
        md: 'text-sm',
        lg: 'text-base',
    };

    const variantClasses = {
        default: 'bg-background-card border border-primary-gold/30 shadow-md',
        minimal: 'bg-transparent border-0 shadow-none',
        bordered: 'bg-background-card border-2 border-primary-gold/50 shadow-lg',
    };

    const positionClasses = {
        top: 'mb-6',
        bottom: 'mt-6',
        sticky: 'sticky top-0 z-10 mb-6',
    };

    const getItemName = () => {
        return selectedCount === 1 ? itemName : itemNamePlural;
    };

    const getButtonVariant = (action: BulkAction) => {
        switch (action.variant) {
            case 'danger':
                return 'danger';
            case 'success':
                return 'primary';
            case 'warning':
                return 'secondary';
            default:
                return 'ghost';
        }
    };

    const visibleActions = actions.slice(0, maxVisibleActions);
    const hiddenActions = actions.slice(maxVisibleActions);

    return (
        <Card
            className={cn(
                'transition-all duration-200',
                variantClasses[variant],
                sizeClasses[size],
                position ? positionClasses[position] : undefined,
                className
            )}
        >
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                {/* Selection Info */}
                <div className="flex items-center gap-4">
                    {/* Selected Count */}
                    <div className="flex items-center gap-2">
                        <span className={cn(
                            'text-text-light-secondary dark:text-text-secondary',
                            textSizes[size]
                        )}>
                            Seçili:
                        </span>
                        <span className={cn(
                            'font-medium text-primary-gold',
                            textSizes[size]
                        )}>
                            {selectedCount.toLocaleString('tr-TR')} {getItemName()}
                        </span>
                    </div>

                    {/* Clear Selection Button */}
                    {showClearButton && onClearSelection && (
                        <Button
                            variant="ghost"
                            size="sm"
                            icon={X}
                            onClick={onClearSelection}
                            className="text-text-light-muted dark:text-text-muted hover:text-primary-red"
                        >
                            Seçimi Temizle
                        </Button>
                    )}
                </div>

                {/* Actions */}
                <div className="flex items-center gap-2 flex-wrap">
                    {/* Visible Actions */}
                    {visibleActions.map((action) => (
                        <Button
                            key={action.id}
                            variant={getButtonVariant(action)}
                            size="sm"
                            icon={action.icon}
                            onClick={action.onClick}
                            disabled={action.disabled}
                            isLoading={action.loading}
                        >
                            {action.label}
                        </Button>
                    ))}

                    {/* More Actions Dropdown */}
                    {hiddenActions.length > 0 && (
                        <div className="relative">
                            <Button
                                variant="ghost"
                                size="sm"
                                icon={ChevronDown}
                                onClick={() => setShowMoreActions(!showMoreActions)}
                                className="pr-3"
                            >
                                Daha Fazla
                            </Button>

                            {showMoreActions && (
                                <div className="absolute top-full right-0 mt-2 bg-background-card border border-primary-gold/30 rounded-lg shadow-lg z-20 min-w-48">
                                    <div className="p-2">
                                        {hiddenActions.map((action) => (
                                            <button
                                                key={action.id}
                                                onClick={() => {
                                                    action.onClick();
                                                    setShowMoreActions(false);
                                                }}
                                                disabled={action.disabled}
                                                className={cn(
                                                    'w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md transition-colors',
                                                    'text-text-on-light dark:text-text-on-dark hover:bg-background-soft',
                                                    'disabled:opacity-50 disabled:cursor-not-allowed',
                                                    action.variant === 'danger' && 'text-primary-red hover:bg-primary-red/10',
                                                    action.variant === 'success' && 'text-semantic-success-600 hover:bg-semantic-success-100 dark:hover:bg-semantic-success-900/20',
                                                    action.variant === 'warning' && 'text-semantic-warning-600 hover:bg-semantic-warning-100 dark:hover:bg-semantic-warning-900/20'
                                                )}
                                            >
                                                <action.icon size={16} />
                                                <span>{action.label}</span>
                                                {action.loading && (
                                                    <div className="ml-auto">
                                                        <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent" />
                                                    </div>
                                                )}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>

            {/* Click outside to close dropdown */}
            {showMoreActions && (
                <div
                    className="fixed inset-0 z-10"
                    onClick={() => setShowMoreActions(false)}
                />
            )}
        </Card>
    );
};

export default BulkActionsBar;
</file>

<file path="src/app/components/ui/Button.tsx">
import { forwardRef, ButtonHTMLAttributes } from 'react'
import { LucideIcon } from 'lucide-react'

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
    variant?: 'primary' | 'secondary' | 'danger' | 'ghost'
    size?: 'sm' | 'md' | 'lg' | 'xl'
    icon?: LucideIcon
    iconPosition?: 'left' | 'right'
    isLoading?: boolean
    fullWidth?: boolean
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
    ({
        variant = 'primary',
        size = 'md',
        icon: Icon,
        iconPosition = 'left',
        isLoading = false,
        fullWidth = false,
        children,
        className = '',
        disabled,
        ...props
    }, ref) => {
        const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background-primary disabled:opacity-50 disabled:cursor-not-allowed font-helvetica'

        const sizeClasses = {
            sm: 'px-3 py-1.5 text-xs gap-1.5',
            md: 'px-4 py-2 text-sm gap-2',
            lg: 'px-6 py-3 text-base gap-2',
            xl: 'px-8 py-4 text-lg gap-3'
        }

        const variantClasses = {
            primary: 'bg-gradient-gold text-primary-dark-gray hover:opacity-90 focus:ring-primary-gold/50 shadow-md hover:shadow-lg',
            secondary: 'bg-background-card border border-primary-gold/30 text-text-primary hover:bg-background-secondary hover:border-primary-gold/50 focus:ring-primary-gold/50',
            danger: 'bg-primary-red text-text-primary hover:bg-primary-red/90 focus:ring-primary-red/50 shadow-md hover:shadow-lg',
            ghost: 'text-text-accent hover:bg-primary-gold/10 hover:text-primary-gold focus:ring-primary-gold/50'
        }

        const iconSizes = {
            sm: 'w-4 h-4',
            md: 'w-5 h-5',
            lg: 'w-6 h-6',
            xl: 'w-7 h-7'
        }

        const widthClass = fullWidth ? 'w-full' : ''

        return (
            <button
                ref={ref}
                disabled={disabled || isLoading}
                className={`
          ${baseClasses}
          ${sizeClasses[size]}
          ${variantClasses[variant]}
          ${widthClass}
          ${className}
        `}
                {...props}
            >
                {isLoading ? (
                    <>
                        <div className={`animate-spin rounded-full border-2 border-current border-t-transparent ${iconSizes[size]}`} />
                        {children && <span>Yükleniyor...</span>}
                    </>
                ) : (
                    <>
                        {Icon && iconPosition === 'left' && (
                            <Icon className={iconSizes[size]} />
                        )}
                        {children}
                        {Icon && iconPosition === 'right' && (
                            <Icon className={iconSizes[size]} />
                        )}
                    </>
                )}
            </button>
        )
    }
)

Button.displayName = 'Button'

export default Button
</file>

<file path="src/app/components/ui/Card.tsx">
import { forwardRef, HTMLAttributes, ReactNode } from 'react'
import { LucideIcon } from 'lucide-react'

interface CardProps extends HTMLAttributes<HTMLDivElement> {
    variant?: 'default' | 'bordered' | 'elevated' | 'glass'
    padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl'
    rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full'
    shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl'
    hover?: boolean
    clickable?: boolean
    disabled?: boolean
    header?: ReactNode
    footer?: ReactNode
    icon?: LucideIcon
    title?: string
    subtitle?: string
    headerAction?: ReactNode
}

const Card = forwardRef<HTMLDivElement, CardProps>(
    ({
        variant = 'default',
        padding = 'md',
        rounded = 'lg',
        shadow = 'md',
        hover = false,
        clickable = false,
        disabled = false,
        header,
        footer,
        icon: Icon,
        title,
        subtitle,
        headerAction,
        children,
        className = '',
        ...props
    }, ref) => {
        const baseClasses = 'transition-all duration-200 font-helvetica'

        const variantClasses = {
            default: 'bg-background-card border border-primary-gold/20',
            bordered: 'bg-background-card border-2 border-primary-gold/30',
            elevated: 'bg-background-card border border-primary-gold/20',
            glass: 'bg-background-card/80 backdrop-blur-sm border border-primary-gold/30'
        }

        const paddingClasses = {
            none: 'p-0',
            sm: 'p-3',
            md: 'p-4',
            lg: 'p-6',
            xl: 'p-8'
        }

        const roundedClasses = {
            none: 'rounded-none',
            sm: 'rounded-sm',
            md: 'rounded-md',
            lg: 'rounded-lg',
            xl: 'rounded-xl',
            full: 'rounded-full'
        }

        const shadowClasses = {
            none: 'shadow-none',
            sm: 'shadow-sm',
            md: 'shadow-card',
            lg: 'shadow-lg',
            xl: 'shadow-xl'
        }

        const hoverClasses = hover ? 'hover:shadow-lg hover:border-primary-gold/40 hover:-translate-y-1' : ''
        const clickableClasses = clickable ? 'cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-offset-2 focus:ring-offset-background-primary' : ''
        const disabledClasses = disabled ? 'opacity-50 cursor-not-allowed' : ''

        const renderHeader = () => {
            if (!header && !title && !Icon) return null

            return (
                <div className={`flex items-start justify-between ${padding !== 'none' ? 'pb-4 border-b border-primary-gold/20' : ''}`}>
                    <div className="flex items-center space-x-3">
                        {Icon && (
                            <div className="p-2 bg-primary-gold/20 rounded-lg">
                                <Icon className="w-5 h-5 text-primary-gold" />
                            </div>
                        )}
                        <div>
                            {title && (
                                <h3 className="text-lg font-semibold text-text-primary font-helvetica">
                                    {title}
                                </h3>
                            )}
                            {subtitle && (
                                <p className="text-sm text-text-secondary font-inter">
                                    {subtitle}
                                </p>
                            )}
                        </div>
                    </div>
                    {headerAction && (
                        <div className="flex-shrink-0">
                            {headerAction}
                        </div>
                    )}
                </div>
            )
        }

        const renderFooter = () => {
            if (!footer) return null

            return (
                <div className={`pt-4 border-t border-primary-gold/20 ${padding !== 'none' ? 'mt-4' : ''}`}>
                    {footer}
                </div>
            )
        }

        const cardContent = (
            <>
                {header && <div className={padding !== 'none' ? 'mb-4' : ''}>{header}</div>}
                {renderHeader()}
                {children && (
                    <div className={`${(header || title || Icon) && padding !== 'none' ? 'pt-4' : ''}`}>
                        {children}
                    </div>
                )}
                {renderFooter()}
            </>
        )

        return (
            <div
                ref={ref}
                className={`
          ${baseClasses}
          ${variantClasses[variant]}
          ${paddingClasses[padding]}
          ${roundedClasses[rounded]}
          ${shadowClasses[shadow]}
          ${hoverClasses}
          ${clickableClasses}
          ${disabledClasses}
          ${className}
        `}
                {...props}
            >
                {cardContent}
            </div>
        )
    }
)

Card.displayName = 'Card'

export default Card

// Alt component'ler
export const CardHeader = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`pb-4 border-b border-primary-gold/20 ${className}`} {...props}>
        {children}
    </div>
)

export const CardBody = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`py-4 ${className}`} {...props}>
        {children}
    </div>
)

export const CardFooter = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`pt-4 border-t border-primary-gold/20 ${className}`} {...props}>
        {children}
    </div>
)

export const CardTitle = ({ children, className = '', ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h3 className={`text-lg font-semibold text-text-primary font-helvetica ${className}`} {...props}>
        {children}
    </h3>
)

export const CardSubtitle = ({ children, className = '', ...props }: HTMLAttributes<HTMLParagraphElement>) => (
    <p className={`text-sm text-text-secondary font-inter ${className}`} {...props}>
        {children}
    </p>
)
</file>

<file path="src/app/components/ui/Checkbox.tsx">
import { forwardRef, InputHTMLAttributes, ReactNode } from 'react'
import { Check } from 'lucide-react'

interface CheckboxProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {
    label?: ReactNode
    error?: string
    helperText?: string
    indeterminate?: boolean
    checkboxSize?: 'sm' | 'md' | 'lg'
}

const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(
    ({
        label,
        error,
        helperText,
        indeterminate = false,
        checkboxSize = 'md',
        className = '',
        ...props
    }, ref) => {
        const sizeClasses = {
            sm: 'w-4 h-4',
            md: 'w-5 h-5',
            lg: 'w-6 h-6'
        }

        const iconSizes = {
            sm: 'w-3 h-3',
            md: 'w-3.5 h-3.5',
            lg: 'w-4 h-4'
        }

        const baseClasses = 'rounded border-2 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-offset-1 focus:ring-offset-background-primary'
        const normalClasses = 'border-primary-gold/30 hover:border-primary-gold/50'
        const checkedClasses = 'bg-primary-gold border-primary-gold'
        const errorClasses = error ? 'border-primary-red focus:ring-primary-red/50' : ''

        return (
            <div className="space-y-1">
                <div className="flex items-start space-x-3">
                    <div className="relative flex-shrink-0" style={{ lineHeight: 0 }}>
                        <input
                            ref={ref}
                            type="checkbox"
                            className={`
      ${baseClasses}
      ${sizeClasses[checkboxSize]}
      ${error ? errorClasses : normalClasses}
      ${props.checked ? checkedClasses : ''}
      ${className}
      appearance-none cursor-pointer
    `}
                            {...props}
                        />

                        {(props.checked || indeterminate) && (
                            <div className="absolute inset-0 flex items-center justify-center pointer-events-none text-primary-dark-gray leading-none">
                                {indeterminate ? (
                                    <div className="w-2 h-2 bg-primary-dark-gray rounded-full" />
                                ) : (
                                    <Check
                                        className={`${iconSizes[checkboxSize]} stroke-[2.5px]`}
                                        style={{ display: 'block' }} // Bu ekleme önemli
                                    />
                                )}
                            </div>
                        )}
                    </div>

                    {label && (
                        <label className="text-sm font-medium text-text-primary cursor-pointer font-inter" htmlFor={props.id}>
                            {label}
                        </label>
                    )}
                </div>

                {error && (
                    <p className="text-sm text-primary-red ml-8 font-inter">{error}</p>
                )}

                {helperText && !error && (
                    <p className="text-sm text-text-secondary ml-8 font-inter">{helperText}</p>
                )}
            </div>
        )
    }
)

Checkbox.displayName = 'Checkbox'

export default Checkbox
</file>

<file path="src/app/components/ui/Chip.tsx">
import React from 'react';
import { X } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ChipProps {
    children: React.ReactNode;
    variant?: 'default' | 'outline' | 'solid';
    color?: 'primary' | 'gold' | 'red' | 'secondary' | 'accent';
    size?: 'sm' | 'md' | 'lg';
    avatar?: string;
    removable?: boolean;
    disabled?: boolean;
    onClick?: () => void;
    onRemove?: () => void;
    className?: string;
}

const Chip: React.FC<ChipProps> = ({
    children,
    variant = 'default',
    color = 'secondary',
    size = 'md',
    avatar,
    removable = false,
    disabled = false,
    onClick,
    onRemove,
    className,
}) => {
    const sizeClasses = {
        sm: {
            container: 'h-6 px-2 text-xs',
            avatar: 'h-4 w-4',
            icon: 'h-3 w-3',
        },
        md: {
            container: 'h-8 px-3 text-sm',
            avatar: 'h-6 w-6',
            icon: 'h-4 w-4',
        },
        lg: {
            container: 'h-10 px-4 text-base',
            avatar: 'h-8 w-8',
            icon: 'h-5 w-5',
        },
    };

    const colorClasses = {
        default: {
            primary: 'bg-background-primary/20 text-text-primary hover:bg-background-primary/30',
            gold: 'bg-primary-gold/20 text-text-accent hover:bg-primary-gold/30',
            red: 'bg-primary-red/20 text-primary-red hover:bg-primary-red/30',
            secondary: 'bg-background-secondary text-text-primary hover:bg-background-secondary/80',
            accent: 'bg-primary-gold-light text-text-accent hover:bg-primary-gold-light/80',
        },
        outline: {
            primary: 'border border-background-primary text-text-primary bg-transparent hover:bg-background-primary/10',
            gold: 'border border-primary-gold text-text-accent bg-transparent hover:bg-primary-gold/10',
            red: 'border border-primary-red text-primary-red bg-transparent hover:bg-primary-red/10',
            secondary: 'border border-primary-dark-gray text-text-secondary bg-transparent hover:bg-background-secondary/30',
            accent: 'border border-text-accent text-text-accent bg-transparent hover:bg-primary-gold-light/30',
        },
        solid: {
            primary: 'bg-background-primary text-text-primary hover:bg-background-primary/90',
            gold: 'bg-primary-gold text-background-primary hover:bg-primary-gold/90',
            red: 'bg-primary-red text-text-primary hover:bg-primary-red/90',
            secondary: 'bg-background-secondary text-text-primary hover:bg-background-secondary/80',
            accent: 'bg-text-accent text-background-primary hover:bg-text-accent/90',
        },
    };

    const handleRemove = (e: React.MouseEvent) => {
        e.stopPropagation();
        onRemove?.();
    };

    return (
        <div
            className={cn(
                'inline-flex items-center gap-1 rounded-full font-medium transition-colors',
                sizeClasses[size].container,
                colorClasses[variant][color],
                onClick && !disabled && 'cursor-pointer',
                disabled && 'opacity-50 cursor-not-allowed',
                className
            )}
            onClick={!disabled ? onClick : undefined}
        >
            {/* Avatar */}
            {avatar && (
                <img
                    src={avatar}
                    alt=""
                    className={cn(
                        'rounded-full object-cover flex-shrink-0',
                        sizeClasses[size].avatar
                    )}
                />
            )}

            {/* Content */}
            <span className="truncate">{children}</span>

            {/* Remove Button */}
            {removable && !disabled && (
                <button
                    onClick={handleRemove}
                    className={cn(
                        'flex-shrink-0 rounded-full p-0.5 hover:bg-black/10 transition-colors',
                        variant === 'solid' && 'hover:bg-white/20'
                    )}
                >
                    <X className={sizeClasses[size].icon} />
                </button>
            )}
        </div>
    );
};

export default Chip;
</file>

<file path="src/app/components/ui/Collapse.tsx">
'use client'

import { forwardRef, HTMLAttributes, ReactNode, useState, useEffect, useRef } from 'react'
import { ChevronDown, ChevronUp, ChevronLeft, ChevronRight, LucideIcon } from 'lucide-react'

interface CollapseProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onToggle'> {
    isOpen?: boolean
    defaultOpen?: boolean
    onToggle?: (isOpen: boolean) => void
    trigger?: ReactNode
    title?: string
    subtitle?: string
    icon?: LucideIcon
    variant?: 'default' | 'bordered' | 'filled' | 'minimal'
    size?: 'sm' | 'md' | 'lg'
    direction?: 'down' | 'up' | 'left' | 'right'
    animated?: boolean
    disabled?: boolean
    collapsible?: boolean
    showIcon?: boolean
    iconPosition?: 'left' | 'right'
    headerAction?: ReactNode
    ghost?: boolean
}

const Collapse = forwardRef<HTMLDivElement, CollapseProps>(
    ({
        isOpen: controlledOpen,
        defaultOpen = false,
        onToggle,
        trigger,
        title,
        subtitle,
        icon: Icon,
        variant = 'default',
        size = 'md',
        direction = 'down',
        animated = true,
        disabled = false,
        collapsible = true,
        showIcon = true,
        iconPosition = 'right',
        headerAction,
        ghost = false,
        children,
        className = '',
        ...props
    }, ref) => {
        const [internalOpen, setInternalOpen] = useState(defaultOpen)
        const contentRef = useRef<HTMLDivElement>(null)

        const isControlled = controlledOpen !== undefined
        const isOpen = isControlled ? controlledOpen : internalOpen

        useEffect(() => {
            if (!isControlled && defaultOpen !== undefined) {
                setInternalOpen(defaultOpen)
            }
        }, [defaultOpen, isControlled])

        const handleToggle = () => {
            if (disabled || !collapsible) return

            const newOpen = !isOpen
            if (!isControlled) {
                setInternalOpen(newOpen)
            }
            onToggle?.(newOpen)
        }

        const getChevronIcon = () => {
            switch (direction) {
                case 'up':
                    return isOpen ? ChevronDown : ChevronUp
                case 'left':
                    return isOpen ? ChevronRight : ChevronLeft
                case 'right':
                    return isOpen ? ChevronLeft : ChevronRight
                default:
                    return isOpen ? ChevronUp : ChevronDown
            }
        }

        const ChevronIcon = getChevronIcon()

        const sizeClasses = {
            sm: 'text-sm',
            md: 'text-base',
            lg: 'text-lg'
        }

        const paddingClasses = {
            sm: 'px-3 py-2',
            md: 'px-4 py-3',
            lg: 'px-6 py-4'
        }

        const variantClasses = {
            default: {
                container: 'border border-primary-gold/20 rounded-lg overflow-hidden',
                trigger: 'bg-background-card hover:bg-background-secondary',
                content: 'bg-background-card border-t border-primary-gold/20'
            },
            bordered: {
                container: 'border border-primary-gold/20 rounded-lg overflow-hidden',
                trigger: 'bg-background-card hover:bg-background-secondary',
                content: 'bg-background-card border-t border-primary-gold/20'
            },
            filled: {
                container: 'bg-background-card rounded-lg overflow-hidden',
                trigger: 'bg-background-secondary hover:bg-primary-gold/10',
                content: 'bg-background-card border-t border-primary-gold/20'
            },
            minimal: {
                container: 'border-b border-primary-gold/10',
                trigger: 'hover:bg-primary-gold/5',
                content: 'bg-transparent'
            }
        }

        const renderTrigger = () => {
            if (trigger) {
                return (
                    <div
                        onClick={handleToggle}
                        className={`
              ${collapsible ? 'cursor-pointer' : 'cursor-default'}
              ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
            `}
                    >
                        {trigger}
                    </div>
                )
            }

            if (title || Icon) {
                return (
                    <button
                        onClick={handleToggle}
                        disabled={disabled || !collapsible}
                        className={`
              w-full text-left transition-all duration-200 font-helvetica
              ${paddingClasses[size]}
              ${ghost ? 'bg-transparent hover:bg-primary-gold/5' : variantClasses[variant].trigger}
              ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
              focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-inset
              flex items-center justify-between
            `}
                        aria-expanded={isOpen}
                        aria-controls={`collapse-content-${Math.random().toString(36).substr(2, 9)}`}
                    >
                        <div className="flex items-center space-x-3 flex-1">
                            {Icon && iconPosition === 'left' && (
                                <div className="p-1.5 bg-primary-gold/20 rounded-md flex-shrink-0">
                                    <Icon className={`text-primary-gold ${size === 'sm' ? 'w-4 h-4' : size === 'md' ? 'w-4 h-4' : 'w-5 h-5'
                                        }`} />
                                </div>
                            )}
                            <div className="flex-1">
                                <span className={`font-semibold text-text-primary ${sizeClasses[size]}`}>
                                    {title}
                                </span>
                                {subtitle && (
                                    <p className="text-sm text-text-secondary mt-1 font-inter">
                                        {subtitle}
                                    </p>
                                )}
                            </div>
                            {Icon && iconPosition === 'right' && (
                                <div className="p-1.5 bg-primary-gold/20 rounded-md flex-shrink-0">
                                    <Icon className={`text-primary-gold ${size === 'sm' ? 'w-4 h-4' : size === 'md' ? 'w-4 h-4' : 'w-5 h-5'
                                        }`} />
                                </div>
                            )}
                        </div>

                        <div className="flex items-center space-x-2">
                            {headerAction && (
                                <div className="flex-shrink-0">
                                    {headerAction}
                                </div>
                            )}
                            {showIcon && collapsible && (
                                <ChevronIcon
                                    className={`w-5 h-5 text-text-secondary transition-transform duration-200 flex-shrink-0 ${direction === 'left' || direction === 'right' ? '' : 'rotate-0'
                                        }`}
                                />
                            )}
                        </div>
                    </button>
                )
            }

            return null
        }

        return (
            <div
                ref={ref}
                className={`${ghost ? '' : variantClasses[variant].container} ${className}`}
                {...props}
            >
                {renderTrigger()}

                {/* Content */}
                <div
                    className={`
            ${ghost ? 'bg-transparent' : variantClasses[variant].content}
            overflow-hidden transition-all duration-200 ease-in-out
            ${animated ? (isOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0') : (isOpen ? 'block' : 'hidden')}
          `}
                    aria-hidden={!isOpen}
                >
                    {(isOpen || !animated) && (
                        <div className={`${ghost ? 'py-2' : paddingClasses[size]} ${isOpen ? 'block' : 'hidden'}`}>
                            {children}
                        </div>
                    )}
                </div>
            </div>
        )
    }
)

Collapse.displayName = 'Collapse'

export default Collapse

// Alt component'ler
export const CollapseTrigger = ({
    children,
    className = '',
    isOpen = false,
    disabled = false,
    ...props
}: HTMLAttributes<HTMLButtonElement> & { isOpen?: boolean; disabled?: boolean }) => (
    <button
        className={`
      w-full text-left px-4 py-3 transition-all duration-200 font-helvetica
      bg-background-card hover:bg-background-secondary
      ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
      focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-inset
      flex items-center justify-between
      ${className}
    `}
        disabled={disabled}
        aria-expanded={isOpen}
        {...props}
    >
        <span className="font-semibold text-text-primary">{children}</span>
        <ChevronDown
            className={`w-5 h-5 text-text-secondary transition-transform duration-200 ${isOpen ? 'rotate-180' : ''
                }`}
        />
    </button>
)

export const CollapseContent = ({
    children,
    className = '',
    isOpen = false,
    ...props
}: HTMLAttributes<HTMLDivElement> & { isOpen?: boolean }) => (
    <div
        className={`
      bg-background-card overflow-hidden transition-all duration-200 ease-in-out border-t border-primary-gold/20
      ${isOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}
      ${className}
    `}
        {...props}
    >
        {isOpen && (
            <div className="px-4 py-3">
                {children}
            </div>
        )}
    </div>
)
</file>

<file path="src/app/components/ui/ConfirmationModal.tsx">
'use client';

import React from 'react';
import Modal from './Modal';
import Button from './Button';
import { AlertTriangle, Trash2 } from 'lucide-react';

interface ConfirmationModalProps {
    isOpen: boolean;
    onClose: () => void;
    onConfirm: () => void;
    title?: string;
    description?: string;
    confirmText?: string;
    cancelText?: string;
    variant?: 'danger' | 'warning' | 'info';
    loading?: boolean;
    itemName?: string;
    itemType?: string;
}

const ConfirmationModal: React.FC<ConfirmationModalProps> = ({
    isOpen,
    onClose,
    onConfirm,
    title = 'İşlemi Onayla',
    description = 'Bu işlemi gerçekleştirmek istediğinizden emin misiniz?',
    confirmText = 'Onayla',
    cancelText = 'İptal',
    variant = 'danger',
    loading = false,
    itemName,
    itemType = 'öğe',
}) => {
    const getVariantConfig = () => {
        switch (variant) {
            case 'danger':
                return {
                    icon: Trash2,
                    iconBg: 'bg-primary-red/20',
                    iconColor: 'text-primary-red',
                    confirmVariant: 'danger' as const,
                    title: title || 'Silme İşlemi',
                    description: description || `${itemName ? `"${itemName}"` : 'Bu ' + itemType} kalıcı olarak silinecektir. Bu işlem geri alınamaz.`,
                    confirmText: confirmText || 'Sil',
                };
            case 'warning':
                return {
                    icon: AlertTriangle,
                    iconBg: 'bg-semantic-warning-100',
                    iconColor: 'text-semantic-warning-600',
                    confirmVariant: 'secondary' as const,
                    title: title || 'Uyarı',
                    description: description,
                    confirmText: confirmText || 'Devam Et',
                };
            case 'info':
                return {
                    icon: AlertTriangle,
                    iconBg: 'bg-primary-blue/20',
                    iconColor: 'text-primary-blue',
                    confirmVariant: 'primary' as const,
                    title: title || 'Bilgi',
                    description: description,
                    confirmText: confirmText || 'Tamam',
                };
            default:
                return {
                    icon: AlertTriangle,
                    iconBg: 'bg-primary-red/20',
                    iconColor: 'text-primary-red',
                    confirmVariant: 'danger' as const,
                    title: title || 'İşlemi Onayla',
                    description: description,
                    confirmText: confirmText || 'Onayla',
                };
        }
    };

    const config = getVariantConfig();

    const handleConfirm = () => {
        if (!loading) {
            onConfirm();
        }
    };

    const handleCancel = () => {
        if (!loading) {
            onClose();
        }
    };

    return (
        <Modal
            isOpen={isOpen}
            onClose={onClose}
            size="sm"
            variant="default"
            closable={!loading}
            closeOnOverlayClick={!loading}
            closeOnEscape={!loading}
        >
            <div className="text-center">
                {/* Icon */}
                <div className="mx-auto flex items-center justify-center w-16 h-16 rounded-full mb-4">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center ${config.iconBg}`}>
                        <config.icon className={`w-6 h-6 ${config.iconColor}`} />
                    </div>
                </div>

                {/* Title */}
                <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                    {config.title}
                </h3>

                {/* Description */}
                <p className="text-sm text-text-light-secondary dark:text-text-secondary mb-6 leading-relaxed">
                    {config.description}
                </p>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3 sm:gap-2 justify-center">
                    <Button
                        variant="ghost"
                        size="md"
                        onClick={handleCancel}
                        disabled={loading}
                        className="order-2 sm:order-1"
                    >
                        {cancelText}
                    </Button>
                    <Button
                        variant={config.confirmVariant}
                        size="md"
                        onClick={handleConfirm}
                        isLoading={loading}
                        disabled={loading}
                        className="order-1 sm:order-2"
                    >
                        {config.confirmText}
                    </Button>
                </div>
            </div>
        </Modal>
    );
};

export default ConfirmationModal;
</file>

<file path="src/app/components/ui/DataList.tsx">
import React from 'react';
import { ChevronRight } from 'lucide-react';
import { cn } from '@/lib/utils';

interface DataListItem {
    id: string | number;
    title: string;
    subtitle?: string;
    description?: string;
    avatar?: string;
    badge?: string;
    badgeColor?: 'primary' | 'gold' | 'red' | 'secondary' | 'accent';
    meta?: React.ReactNode;
    actions?: React.ReactNode;
}

interface DataListProps {
    items: DataListItem[];
    clickable?: boolean;
    showAvatar?: boolean;
    showArrow?: boolean;
    divider?: boolean;
    size?: 'sm' | 'md' | 'lg';
    loading?: boolean;
    onItemClick?: (item: DataListItem) => void;
    className?: string;
}

const DataList: React.FC<DataListProps> = ({
    items,
    clickable = false,
    showAvatar = true,
    showArrow = false,
    divider = true,
    size = 'md',
    loading = false,
    onItemClick,
    className,
}) => {
    const sizeClasses = {
        sm: 'p-3',
        md: 'p-4',
        lg: 'p-6',
    };

    const avatarSize = {
        sm: 'h-8 w-8',
        md: 'h-10 w-10',
        lg: 'h-12 w-12',
    };

    const badgeColors = {
        primary: 'bg-background-primary text-text-primary',
        gold: 'bg-primary-gold text-background-primary',
        red: 'bg-primary-red text-text-primary',
        secondary: 'bg-background-secondary text-text-primary',
        accent: 'bg-primary-gold-light text-text-accent',
    };

    if (loading) {
        return (
            <div className={cn('bg-background-card rounded-lg shadow-card', className)}>
                <div className="flex items-center justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-gold"></div>
                    <span className="ml-2 text-text-secondary">Yükleniyor...</span>
                </div>
            </div>
        );
    }

    if (items.length === 0) {
        return (
            <div className={cn('bg-background-card rounded-lg shadow-card', className)}>
                <div className="flex items-center justify-center py-8">
                    <span className="text-text-secondary">Veri bulunamadı</span>
                </div>
            </div>
        );
    }

    return (
        <div className={cn('bg-background-card rounded-lg shadow-card overflow-hidden', className)}>
            {items.map((item, index) => (
                <div
                    key={item.id}
                    className={cn(
                        'flex items-center',
                        sizeClasses[size],
                        divider && index < items.length - 1 && 'border-b border-primary-dark-gray/10',
                        clickable && 'hover:bg-background-secondary/30 cursor-pointer transition-colors'
                    )}
                    onClick={() => clickable && onItemClick?.(item)}
                >
                    {/* Avatar */}
                    {showAvatar && (
                        <div className={cn('flex-shrink-0 mr-3', avatarSize[size])}>
                            {item.avatar ? (
                                <img
                                    src={item.avatar}
                                    alt={item.title}
                                    className={cn('rounded-full object-cover', avatarSize[size])}
                                />
                            ) : (
                                <div className={cn('rounded-full bg-primary-gold/20 flex items-center justify-center', avatarSize[size])}>
                                    <span className="text-text-accent font-semibold">
                                        {item.title.charAt(0).toUpperCase()}
                                    </span>
                                </div>
                            )}
                        </div>
                    )}

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between">
                            <div className="flex-1 min-w-0">
                                <h3 className="text-sm font-semibold text-text-primary truncate">
                                    {item.title}
                                </h3>
                                {item.subtitle && (
                                    <p className="text-sm text-text-secondary truncate">
                                        {item.subtitle}
                                    </p>
                                )}
                                {item.description && (
                                    <p className="text-xs text-text-secondary/70 mt-1">
                                        {item.description}
                                    </p>
                                )}
                            </div>

                            {/* Badge */}
                            {item.badge && (
                                <span
                                    className={cn(
                                        'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ml-2',
                                        badgeColors[item.badgeColor || 'secondary']
                                    )}
                                >
                                    {item.badge}
                                </span>
                            )}
                        </div>

                        {/* Meta */}
                        {item.meta && (
                            <div className="mt-2 text-xs text-text-secondary/70">
                                {item.meta}
                            </div>
                        )}
                    </div>

                    {/* Actions */}
                    {item.actions && (
                        <div className="ml-3 flex-shrink-0">
                            {item.actions}
                        </div>
                    )}

                    {/* Arrow */}
                    {showArrow && (
                        <ChevronRight className="ml-3 h-5 w-5 text-text-secondary" />
                    )}
                </div>
            ))}
        </div>
    );
};

export default DataList;
</file>

<file path="src/app/components/ui/DatePicker.tsx">
import { forwardRef, InputHTMLAttributes } from 'react'
import { Calendar } from 'lucide-react'

interface DatePickerProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {
    label?: string
    error?: string
    helperText?: string
    variant?: 'default' | 'filled' | 'outlined'
    isRequired?: boolean
    minDate?: string
    maxDate?: string
    showIcon?: boolean
}

const DatePicker = forwardRef<HTMLInputElement, DatePickerProps>(
    ({
        label,
        error,
        helperText,
        variant = 'default',
        isRequired = false,
        minDate,
        maxDate,
        showIcon = true,
        className = '',
        ...props
    }, ref) => {
        const baseClasses = 'w-full px-3 py-2 text-sm rounded-lg border transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50'

        const variantClasses = {
            default: 'border-primary-gold/30 bg-background-secondary text-text-primary hover:border-primary-gold/50 focus:border-primary-gold',
            filled: 'border-primary-gold/20 bg-background-card text-text-primary hover:bg-background-secondary focus:bg-background-secondary focus:border-primary-gold',
            outlined: 'border-primary-gold/40 bg-transparent text-text-primary hover:border-primary-gold/60 focus:border-primary-gold'
        }

        const errorClasses = error ? 'border-primary-red focus:ring-primary-red/50 focus:border-primary-red' : ''

        return (
            <div className="space-y-1">
                {label && (
                    <label className="block text-sm font-medium text-text-primary font-inter">
                        {label}
                        {isRequired && <span className="text-primary-red ml-1">*</span>}
                    </label>
                )}

                <div className="relative">
                    {showIcon && (
                        <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary w-5 h-5 pointer-events-none" />
                    )}

                    <input
                        ref={ref}
                        type="date"
                        min={minDate}
                        max={maxDate}
                        className={`
              ${baseClasses}
              ${variantClasses[variant]}
              ${errorClasses}
              ${showIcon ? 'pl-10' : ''}
              ${className}
              [color-scheme:dark]
            `}
                        {...props}
                    />
                </div>

                {error && (
                    <p className="text-sm text-primary-red font-inter">{error}</p>
                )}

                {helperText && !error && (
                    <p className="text-sm text-text-secondary font-inter">{helperText}</p>
                )}
            </div>
        )
    }
)

DatePicker.displayName = 'DatePicker'

export default DatePicker
</file>

<file path="src/app/components/ui/Drawer.tsx">
'use client'
import { forwardRef, HTMLAttributes, ReactNode, useEffect, useRef } from 'react'
import { X, LucideIcon } from 'lucide-react'

interface DrawerProps extends HTMLAttributes<HTMLDivElement> {
    isOpen: boolean
    onClose: () => void
    title?: string
    subtitle?: string
    icon?: LucideIcon
    position?: 'left' | 'right' | 'top' | 'bottom'
    size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
    variant?: 'default' | 'glass' | 'dark'
    closable?: boolean
    closeOnOverlayClick?: boolean
    closeOnEscape?: boolean
    header?: ReactNode
    footer?: ReactNode
    headerAction?: ReactNode
    showCloseButton?: boolean
    overlay?: boolean
    push?: boolean // Push mode - sayfayı iter
}

const Drawer = forwardRef<HTMLDivElement, DrawerProps>(
    ({
        isOpen,
        onClose,
        title,
        subtitle,
        icon: Icon,
        position = 'right',
        size = 'md',
        variant = 'default',
        closable = true,
        closeOnOverlayClick = true,
        closeOnEscape = true,
        header,
        footer,
        headerAction,
        showCloseButton = true,
        overlay = true,
        push = false,
        children,
        className = '',
        ...props
    }, ref) => {
        const drawerRef = useRef<HTMLDivElement>(null)

        // Escape key handler
        useEffect(() => {
            const handleEscape = (event: KeyboardEvent) => {
                if (event.key === 'Escape' && closeOnEscape && closable) {
                    onClose()
                }
            }

            if (isOpen) {
                document.addEventListener('keydown', handleEscape)
                if (!push) {
                    document.body.style.overflow = 'hidden'
                }
            }

            return () => {
                document.removeEventListener('keydown', handleEscape)
                if (!push) {
                    document.body.style.overflow = 'unset'
                }
            }
        }, [isOpen, onClose, closeOnEscape, closable, push])

        // Focus management
        useEffect(() => {
            if (isOpen && drawerRef.current) {
                drawerRef.current.focus()
            }
        }, [isOpen])

        const sizeClasses = {
            left: {
                sm: 'w-64',
                md: 'w-80',
                lg: 'w-96',
                xl: 'w-1/3',
                full: 'w-full'
            },
            right: {
                sm: 'w-64',
                md: 'w-80',
                lg: 'w-96',
                xl: 'w-1/3',
                full: 'w-full'
            },
            top: {
                sm: 'h-48',
                md: 'h-64',
                lg: 'h-80',
                xl: 'h-96',
                full: 'h-full'
            },
            bottom: {
                sm: 'h-48',
                md: 'h-64',
                lg: 'h-80',
                xl: 'h-96',
                full: 'h-full'
            }
        }

        const positionClasses = {
            left: 'left-0 top-0 h-full',
            right: 'right-0 top-0 h-full',
            top: 'top-0 left-0 w-full',
            bottom: 'bottom-0 left-0 w-full'
        }

        const transformClasses = {
            left: isOpen ? 'translate-x-0' : '-translate-x-full',
            right: isOpen ? 'translate-x-0' : 'translate-x-full',
            top: isOpen ? 'translate-y-0' : '-translate-y-full',
            bottom: isOpen ? 'translate-y-0' : 'translate-y-full'
        }

        const variantClasses = {
            default: 'bg-background-card border-primary-gold/20',
            glass: 'bg-background-card/90 backdrop-blur-sm border-primary-gold/30',
            dark: 'bg-background-primary border-primary-gold/20'
        }

        const borderClasses = {
            left: 'border-r',
            right: 'border-l',
            top: 'border-b',
            bottom: 'border-t'
        }

        const handleOverlayClick = (event: React.MouseEvent) => {
            if (event.target === event.currentTarget && closeOnOverlayClick && closable) {
                onClose()
            }
        }

        const handleClose = () => {
            if (closable) {
                onClose()
            }
        }

        const renderHeader = () => {
            if (!header && !title && !Icon) return null

            return (
                <div className="flex items-start justify-between p-6 border-b border-primary-gold/20">
                    <div className="flex items-center space-x-3">
                        {Icon && (
                            <div className="p-2 bg-primary-gold/20 rounded-lg flex-shrink-0">
                                <Icon className="w-5 h-5 text-primary-gold" />
                            </div>
                        )}
                        <div>
                            {title && (
                                <h2 className="text-xl font-semibold text-text-primary font-helvetica">
                                    {title}
                                </h2>
                            )}
                            {subtitle && (
                                <p className="text-sm text-text-secondary font-inter mt-1">
                                    {subtitle}
                                </p>
                            )}
                        </div>
                    </div>
                    <div className="flex items-center space-x-2">
                        {headerAction && (
                            <div className="flex-shrink-0">
                                {headerAction}
                            </div>
                        )}
                        {showCloseButton && closable && (
                            <button
                                onClick={handleClose}
                                className="p-2 text-text-secondary hover:text-text-primary hover:bg-primary-gold/10 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-gold/50"
                                aria-label="Drawer'ı kapat"
                            >
                                <X className="w-5 h-5" />
                            </button>
                        )}
                    </div>
                </div>
            )
        }

        const renderFooter = () => {
            if (!footer) return null

            return (
                <div className="p-6 border-t border-primary-gold/20">
                    {footer}
                </div>
            )
        }

        if (!isOpen && !push) return null

        return (
            <div className={`fixed inset-0 z-40 ${push ? 'relative' : ''}`}>
                {/* Overlay */}
                {overlay && !push && (
                    <div
                        className={`fixed inset-0 bg-black/60 backdrop-blur-sm transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'
                            }`}
                        onClick={handleOverlayClick}
                        aria-hidden="true"
                    />
                )}

                {/* Drawer */}
                <div
                    ref={drawerRef}
                    className={`
            ${push ? 'relative' : 'fixed'}
            ${positionClasses[position]}
            ${sizeClasses[position][size]}
            ${variantClasses[variant]}
            ${borderClasses[position]}
            ${transformClasses[position]}
            shadow-xl transform transition-all duration-300 ease-in-out
            ${className}
          `}
                    tabIndex={-1}
                    role="dialog"
                    aria-modal="true"
                    aria-labelledby={title ? 'drawer-title' : undefined}
                    {...props}
                >
                    {/* Header */}
                    {header && <div>{header}</div>}
                    {renderHeader()}

                    {/* Body */}
                    <div className="flex-1 overflow-y-auto">
                        {children && (
                            <div className="p-6">
                                {children}
                            </div>
                        )}
                    </div>

                    {/* Footer */}
                    {renderFooter()}
                </div>
            </div>
        )
    }
)

Drawer.displayName = 'Drawer'

export default Drawer

// Alt component'ler
export const DrawerHeader = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`p-6 border-b border-primary-gold/20 ${className}`} {...props}>
        {children}
    </div>
)

export const DrawerBody = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`p-6 flex-1 overflow-y-auto ${className}`} {...props}>
        {children}
    </div>
)

export const DrawerFooter = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`p-6 border-t border-primary-gold/20 ${className}`} {...props}>
        {children}
    </div>
)

export const DrawerTitle = ({ children, className = '', ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h2 id="drawer-title" className={`text-xl font-semibold text-text-primary font-helvetica ${className}`} {...props}>
        {children}
    </h2>
)

export const DrawerSubtitle = ({ children, className = '', ...props }: HTMLAttributes<HTMLParagraphElement>) => (
    <p className={`text-sm text-text-secondary font-inter ${className}`} {...props}>
        {children}
    </p>
)
</file>

<file path="src/app/components/ui/EmptyState.tsx">
import React from 'react';
import { InboxIcon, SearchIcon, FileTextIcon, Users2Icon, PackageIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface EmptyStateProps {
    icon?: 'inbox' | 'search' | 'file' | 'users' | 'package' | React.ReactNode;
    title: string;
    description?: string;
    action?: React.ReactNode;
    size?: 'sm' | 'md' | 'lg';
    className?: string;
}

const EmptyState: React.FC<EmptyStateProps> = ({
    icon = 'inbox',
    title,
    description,
    action,
    size = 'md',
    className,
}) => {
    const sizeClasses = {
        sm: {
            container: 'py-8',
            icon: 'h-12 w-12',
            title: 'text-base',
            description: 'text-sm',
        },
        md: {
            container: 'py-12',
            icon: 'h-16 w-16',
            title: 'text-lg',
            description: 'text-base',
        },
        lg: {
            container: 'py-16',
            icon: 'h-20 w-20',
            title: 'text-xl',
            description: 'text-lg',
        },
    };

    const iconMap: Record<'inbox' | 'search' | 'file' | 'users' | 'package', React.ComponentType<{ className?: string }>> = {
        inbox: InboxIcon,
        search: SearchIcon,
        file: FileTextIcon,
        users: Users2Icon,
        package: PackageIcon,
    };

    const renderIcon = () => {
        if (React.isValidElement(icon)) {
            return icon;
        }

        if (typeof icon === 'string' && icon in iconMap) {
            const IconComponent = iconMap[icon as keyof typeof iconMap];
            return (
                <IconComponent
                    className={cn('text-primary-gray-blue', sizeClasses[size].icon)}
                />
            );
        }

        return (
            <InboxIcon
                className={cn('text-primary-gray-blue', sizeClasses[size].icon)}
            />
        );
    };

    return (
        <div className={cn('text-center', sizeClasses[size].container, className)}>
            <div className="flex justify-center mb-4">
                {renderIcon()}
            </div>

            <h3 className={cn('font-semibold text-text-primary mb-2', sizeClasses[size].title)}>
                {title}
            </h3>

            {description && (
                <p className={cn('text-text-secondary mb-6', sizeClasses[size].description)}>
                    {description}
                </p>
            )}

            {action && (
                <div className="flex justify-center">
                    {action}
                </div>
            )}
        </div>
    );
};

export default EmptyState;
</file>

<file path="src/app/components/ui/ExportDropdown.tsx">
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Download, FileText, FileSpreadsheet, FileType2, Code, CheckCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ExportOption {
    id: string;
    label: string;
    icon: React.ComponentType<{ className?: string }>;
    description?: string;
    format: 'pdf' | 'excel' | 'csv' | 'json';
    onClick: () => void;
}

interface ExportDropdownProps {
    onExportPDF?: () => void;
    onExportExcel: () => void;
    onExportCSV: () => void;
    onExportJSON?: () => void;
    disabled?: boolean;
    className?: string;
    size?: 'sm' | 'md' | 'lg';
    variant?: 'primary' | 'secondary' | 'ghost';
}

const ExportDropdown: React.FC<ExportDropdownProps> = ({
    onExportPDF,
    onExportExcel,
    onExportCSV,
    onExportJSON,
    disabled = false,
    className = '',
    size = 'md',
    variant = 'secondary'
}) => {
    const [isOpen, setIsOpen] = useState(false);
    const [loadingOption, setLoadingOption] = useState<string | null>(null);
    const dropdownRef = useRef<HTMLDivElement>(null);

    const exportOptions: ExportOption[] = [
        ...(onExportPDF
            ? [{
                id: 'pdf',
                label: 'PDF İndir',
                icon: FileText,
                description: 'Sakin listesini PDF formatında indir',
                format: 'pdf' as const,
                onClick: async () => {
                    setLoadingOption('pdf');
                    await onExportPDF();
                    setLoadingOption(null);
                    setIsOpen(false);
                }
            }]
            : []),
        {
            id: 'excel',
            label: 'Excel İndir',
            icon: FileSpreadsheet,
            description: 'Sakin listesini Excel formatında indir',
            format: 'excel' as const,
            onClick: async () => {
                setLoadingOption('excel');
                await onExportExcel();
                setLoadingOption(null);
                setIsOpen(false);
            }
        },
        {
            id: 'csv',
            label: 'CSV İndir',
            icon: FileType2,
            description: 'Sakin listesini CSV formatında indir',
            format: 'csv' as const,
            onClick: async () => {
                setLoadingOption('csv');
                await onExportCSV();
                setLoadingOption(null);
                setIsOpen(false);
            }
        },
        ...(onExportJSON
            ? [{
                id: 'json',
                label: 'JSON İndir',
                icon: Code,
                description: 'Sakin listesini JSON formatında indir',
                format: 'json' as const,
                onClick: async () => {
                    setLoadingOption('json');
                    await onExportJSON();
                    setLoadingOption(null);
                    setIsOpen(false);
                }
            }]
            : []),
    ];

    // Size classes
    const sizeClasses = {
        sm: 'px-3 py-1.5 text-sm',
        md: 'px-4 py-2 text-sm',
        lg: 'px-5 py-2.5 text-base'
    };

    // Variant classes
    const variantClasses = {
        primary: 'bg-primary-gold text-primary-dark-gray hover:bg-primary-gold/90',
        secondary: 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700',
        ghost: 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
    };

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };

        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isOpen]);

    // Close dropdown on ESC key
    useEffect(() => {
        const handleEscape = (event: KeyboardEvent) => {
            if (event.key === 'Escape') {
                setIsOpen(false);
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
        }

        return () => {
            document.removeEventListener('keydown', handleEscape);
        };
    }, [isOpen]);

    return (
        <div className="relative inline-block" ref={dropdownRef}>
            {/* Trigger Button */}
            <button
                onClick={() => setIsOpen(!isOpen)}
                disabled={disabled}
                className={cn(
                    'inline-flex items-center gap-2 font-medium rounded-lg transition-colors duration-200 border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold disabled:opacity-50 disabled:cursor-not-allowed',
                    sizeClasses[size],
                    variantClasses[variant],
                    className
                )}
            >
                <Download className="w-4 h-4" />
                İndir
                <svg
                    className={cn(
                        'w-4 h-4 transition-transform duration-200',
                        isOpen ? 'transform rotate-180' : ''
                    )}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
            </button>

            {/* Dropdown Menu */}
            {isOpen && (
                <div className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50">
                    <div className="py-2">
                        {exportOptions.map((option) => {
                            const Icon = option.icon;
                            const isLoading = loadingOption === option.id;

                            return (
                                <button
                                    key={option.id}
                                    onClick={option.onClick}
                                    disabled={isLoading}
                                    className="w-full px-4 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 flex items-center gap-3 group disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    <div className="flex-shrink-0">
                                        {isLoading ? (
                                            <div className="w-5 h-5 border-2 border-primary-gold border-t-transparent rounded-full animate-spin" />
                                        ) : (
                                            <Icon className="w-5 h-5 text-gray-500 group-hover:text-primary-gold transition-colors duration-200" />
                                        )}
                                    </div>
                                    <div className="flex-1 min-w-0">
                                        <div className="text-sm font-medium text-text-on-light dark:text-text-on-dark group-hover:text-primary-gold transition-colors duration-200">
                                            {option.label}
                                        </div>
                                        {option.description && (
                                            <div className="text-xs text-text-light-muted dark:text-text-muted mt-0.5">
                                                {option.description}
                                            </div>
                                        )}
                                    </div>
                                </button>
                            );
                        })}
                    </div>

                    {/* Footer */}
                    <div className="px-4 py-2 border-t border-gray-200 dark:border-gray-700">
                        <div className="flex items-center gap-2 text-xs text-text-light-muted dark:text-text-muted">
                            <CheckCircle className="w-3 h-3" />
                            <span>Filtreli veriler dahil edilir</span>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ExportDropdown;
</file>

<file path="src/app/components/ui/FloatingActionButton.tsx">
import { forwardRef, ButtonHTMLAttributes } from 'react'
import { LucideIcon, Plus } from 'lucide-react'

interface FloatingActionButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
    icon?: LucideIcon
    variant?: 'primary' | 'secondary' | 'danger'
    size?: 'sm' | 'md' | 'lg' | 'xl'
    position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'bottom-center' | 'top-center'
    offset?: 'sm' | 'md' | 'lg' | 'xl'
    tooltip?: string
    isLoading?: boolean
    badge?: string | number
    extended?: boolean // Extended FAB with text
    label?: string
}

const FloatingActionButton = forwardRef<HTMLButtonElement, FloatingActionButtonProps>(
    ({
        icon: Icon = Plus,
        variant = 'primary',
        size = 'md',
        position = 'bottom-right',
        offset = 'md',
        tooltip,
        isLoading = false,
        badge,
        extended = false,
        label,
        className = '',
        disabled,
        children,
        ...props
    }, ref) => {
        const baseClasses = 'fixed inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background-primary disabled:opacity-50 disabled:cursor-not-allowed font-helvetica shadow-lg hover:shadow-xl z-50 group'

        const sizeClasses = {
            sm: extended ? 'h-10 px-4 text-xs gap-2' : 'w-10 h-10 text-xs',
            md: extended ? 'h-12 px-6 text-sm gap-2' : 'w-12 h-12 text-sm',
            lg: extended ? 'h-14 px-8 text-base gap-3' : 'w-14 h-14 text-base',
            xl: extended ? 'h-16 px-10 text-lg gap-3' : 'w-16 h-16 text-lg'
        }

        const shapeClasses = extended ? 'rounded-full' : 'rounded-full'

        const positionClasses = {
            'bottom-right': 'bottom-6 right-6',
            'bottom-left': 'bottom-6 left-6',
            'top-right': 'top-6 right-6',
            'top-left': 'top-6 left-6',
            'bottom-center': 'bottom-6 left-1/2 transform -translate-x-1/2',
            'top-center': 'top-6 left-1/2 transform -translate-x-1/2'
        }

        const offsetClasses = {
            sm: position.includes('bottom') ? 'bottom-4' : position.includes('top') ? 'top-4' : '',
            md: position.includes('bottom') ? 'bottom-6' : position.includes('top') ? 'top-6' : '',
            lg: position.includes('bottom') ? 'bottom-8' : position.includes('top') ? 'top-8' : '',
            xl: position.includes('bottom') ? 'bottom-12' : position.includes('top') ? 'top-12' : ''
        }

        const variantClasses = {
            primary: 'bg-gradient-gold text-primary-dark-gray hover:opacity-90 focus:ring-primary-gold/50',
            secondary: 'bg-background-card border border-primary-gold/30 text-text-primary hover:bg-background-secondary hover:border-primary-gold/50 focus:ring-primary-gold/50',
            danger: 'bg-primary-red text-text-primary hover:bg-primary-red/90 focus:ring-primary-red/50'
        }

        const iconSizes = {
            sm: 'w-4 h-4',
            md: 'w-5 h-5',
            lg: 'w-6 h-6',
            xl: 'w-7 h-7'
        }

        const customPositionClass = positionClasses[position].replace(
            position.includes('bottom') ? /bottom-\d+/ : /top-\d+/,
            offsetClasses[offset]
        )

        return (
            <button
                ref={ref}
                disabled={disabled || isLoading}
                className={`
          ${baseClasses}
          ${sizeClasses[size]}
          ${shapeClasses}
          ${variantClasses[variant]}
          ${customPositionClass}
          ${className}
        `}
                title={tooltip}
                {...props}
            >
                {/* Badge */}
                {badge && (
                    <div className="absolute -top-2 -right-2 bg-primary-red text-white text-xs rounded-full min-w-5 h-5 flex items-center justify-center px-1 shadow-md">
                        {badge}
                    </div>
                )}

                {/* Content */}
                {isLoading ? (
                    <div className={`animate-spin rounded-full border-2 border-current border-t-transparent ${iconSizes[size]}`} />
                ) : (
                    <>
                        <Icon className={iconSizes[size]} />
                        {extended && (label || children) && (
                            <span className="whitespace-nowrap">
                                {label || children}
                            </span>
                        )}
                    </>
                )}

                {/* Tooltip */}
                {tooltip && !extended && (
                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-background-primary text-text-primary text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap border border-primary-gold/20">
                        {tooltip}
                        <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-background-primary"></div>
                    </div>
                )}
            </button>
        )
    }
)

FloatingActionButton.displayName = 'FloatingActionButton'

export default FloatingActionButton
</file>

<file path="src/app/components/ui/IconButton.tsx">
import { forwardRef, ButtonHTMLAttributes } from 'react'
import { LucideIcon } from 'lucide-react'

interface IconButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
    icon: LucideIcon
    variant?: 'primary' | 'secondary' | 'danger' | 'ghost'
    size?: 'sm' | 'md' | 'lg' | 'xl'
    shape?: 'square' | 'circle'
    tooltip?: string
    isLoading?: boolean
}

const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(
    ({
        icon: Icon,
        variant = 'secondary',
        size = 'md',
        shape = 'square',
        tooltip,
        isLoading = false,
        className = '',
        disabled,
        ...props
    }, ref) => {
        const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background-primary disabled:opacity-50 disabled:cursor-not-allowed relative'

        const sizeClasses = {
            sm: 'w-8 h-8 text-xs',
            md: 'w-10 h-10 text-sm',
            lg: 'w-12 h-12 text-base',
            xl: 'w-14 h-14 text-lg'
        }

        const shapeClasses = {
            square: 'rounded-lg',
            circle: 'rounded-full'
        }

        const variantClasses = {
            primary: 'bg-gradient-gold text-primary-dark-gray hover:opacity-90 focus:ring-primary-gold/50 shadow-md hover:shadow-lg',
            secondary: 'bg-background-card border border-primary-gold/30 text-text-primary hover:bg-background-secondary hover:border-primary-gold/50 focus:ring-primary-gold/50',
            danger: 'bg-primary-red text-text-primary hover:bg-primary-red/90 focus:ring-primary-red/50 shadow-md hover:shadow-lg',
            ghost: 'text-text-accent hover:bg-primary-gold/10 hover:text-primary-gold focus:ring-primary-gold/50'
        }

        const iconSizes = {
            sm: 'w-3 h-3',
            md: 'w-4 h-4',
            lg: 'w-5 h-5',
            xl: 'w-6 h-6'
        }

        return (
            <button
                ref={ref}
                disabled={disabled || isLoading}
                className={`
          ${baseClasses}
          ${sizeClasses[size]}
          ${shapeClasses[shape]}
          ${variantClasses[variant]}
          ${className}
          group
        `}
                title={tooltip}
                {...props}
            >
                {isLoading ? (
                    <div className={`animate-spin rounded-full border-2 border-current border-t-transparent ${iconSizes[size]}`} />
                ) : (
                    <Icon className={iconSizes[size]} />
                )}

                {/* Tooltip */}
                {tooltip && (
                    <div className="absolute -top-10 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-background-primary text-text-primary text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50 border border-primary-gold/20">
                        {tooltip}
                        <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-background-primary"></div>
                    </div>
                )}
            </button>
        )
    }
)

IconButton.displayName = 'IconButton'

export default IconButton
</file>

<file path="src/app/components/ui/LoadingButton.tsx">
import { forwardRef, ButtonHTMLAttributes } from 'react'
import { LucideIcon, Loader2 } from 'lucide-react'

interface LoadingButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
    variant?: 'primary' | 'secondary' | 'danger' | 'ghost'
    size?: 'sm' | 'md' | 'lg' | 'xl'
    icon?: LucideIcon
    iconPosition?: 'left' | 'right'
    isLoading?: boolean
    loadingText?: string
    loadingIcon?: LucideIcon
    progress?: number // 0-100 arası değer
    fullWidth?: boolean
    keepOriginalContent?: boolean // Loading sırasında orijinal içeriği göster
}

const LoadingButton = forwardRef<HTMLButtonElement, LoadingButtonProps>(
    ({
        variant = 'primary',
        size = 'md',
        icon: Icon,
        iconPosition = 'left',
        isLoading = false,
        loadingText = 'Yükleniyor...',
        loadingIcon: LoadingIcon = Loader2,
        progress,
        fullWidth = false,
        keepOriginalContent = false,
        children,
        className = '',
        disabled,
        ...props
    }, ref) => {
        const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background-primary disabled:opacity-50 disabled:cursor-not-allowed font-helvetica relative overflow-hidden'

        const sizeClasses = {
            sm: 'px-3 py-1.5 text-xs gap-1.5',
            md: 'px-4 py-2 text-sm gap-2',
            lg: 'px-6 py-3 text-base gap-2',
            xl: 'px-8 py-4 text-lg gap-3'
        }

        const variantClasses = {
            primary: 'bg-gradient-gold text-primary-dark-gray hover:opacity-90 focus:ring-primary-gold/50 shadow-md hover:shadow-lg',
            secondary: 'bg-background-card border border-primary-gold/30 text-text-primary hover:bg-background-secondary hover:border-primary-gold/50 focus:ring-primary-gold/50',
            danger: 'bg-primary-red text-text-primary hover:bg-primary-red/90 focus:ring-primary-red/50 shadow-md hover:shadow-lg',
            ghost: 'text-text-accent hover:bg-primary-gold/10 hover:text-primary-gold focus:ring-primary-gold/50'
        }

        const iconSizes = {
            sm: 'w-3 h-3',
            md: 'w-4 h-4',
            lg: 'w-5 h-5',
            xl: 'w-6 h-6'
        }

        const widthClass = fullWidth ? 'w-full' : ''

        const renderContent = () => {
            if (isLoading && !keepOriginalContent) {
                return (
                    <>
                        <LoadingIcon className={`animate-spin ${iconSizes[size]}`} />
                        <span>{loadingText}</span>
                    </>
                )
            }

            if (isLoading && keepOriginalContent) {
                return (
                    <>
                        <LoadingIcon className={`animate-spin ${iconSizes[size]}`} />
                        {Icon && iconPosition === 'left' && !isLoading && (
                            <Icon className={iconSizes[size]} />
                        )}
                        {children}
                        {Icon && iconPosition === 'right' && !isLoading && (
                            <Icon className={iconSizes[size]} />
                        )}
                    </>
                )
            }

            return (
                <>
                    {Icon && iconPosition === 'left' && (
                        <Icon className={iconSizes[size]} />
                    )}
                    {children}
                    {Icon && iconPosition === 'right' && (
                        <Icon className={iconSizes[size]} />
                    )}
                </>
            )
        }

        return (
            <button
                ref={ref}
                disabled={disabled || isLoading}
                className={`
          ${baseClasses}
          ${sizeClasses[size]}
          ${variantClasses[variant]}
          ${widthClass}
          ${className}
        `}
                {...props}
            >
                {/* Progress Bar */}
                {progress !== undefined && isLoading && (
                    <div className="absolute inset-0 bg-primary-gold/20 rounded-lg overflow-hidden">
                        <div
                            className="h-full bg-primary-gold/40 transition-all duration-300 ease-out"
                            style={{ width: `${Math.max(0, Math.min(100, progress))}%` }}
                        />
                    </div>
                )}

                {/* Content */}
                <div className={`relative z-10 flex items-center ${sizeClasses[size].split(' ')[2]}`}>
                    {renderContent()}
                </div>

                {/* Loading Overlay */}
                {isLoading && (
                    <div className="absolute inset-0 bg-current opacity-10 rounded-lg" />
                )}
            </button>
        )
    }
)

LoadingButton.displayName = 'LoadingButton'

export default LoadingButton
</file>

<file path="src/app/components/ui/Modal.tsx">
'use client'
import { forwardRef, HTMLAttributes, ReactNode, useEffect, useRef } from 'react'
import { X, LucideIcon } from 'lucide-react'

interface ModalProps extends HTMLAttributes<HTMLDivElement> {
    isOpen: boolean
    onClose: () => void
    title?: string
    subtitle?: string
    icon?: LucideIcon
    size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
    variant?: 'default' | 'glass' | 'dark'
    closable?: boolean
    closeOnOverlayClick?: boolean
    closeOnEscape?: boolean
    header?: ReactNode
    footer?: ReactNode
    headerAction?: ReactNode
    showCloseButton?: boolean
    centered?: boolean
    scrollable?: boolean
    maxHeight?: string
}

const Modal = forwardRef<HTMLDivElement, ModalProps>(
    ({
        isOpen,
        onClose,
        title,
        subtitle,
        icon: Icon,
        size = 'md',
        variant = 'default',
        closable = true,
        closeOnOverlayClick = true,
        closeOnEscape = true,
        header,
        footer,
        headerAction,
        showCloseButton = true,
        centered = true,
        scrollable = true,
        maxHeight = 'calc(100vh - 2rem)',
        children,
        className = '',
        ...props
    }, ref) => {
        const modalRef = useRef<HTMLDivElement>(null)

        // Escape key handler
        useEffect(() => {
            const handleEscape = (event: KeyboardEvent) => {
                if (event.key === 'Escape' && closeOnEscape && closable) {
                    onClose()
                }
            }

            if (isOpen) {
                document.addEventListener('keydown', handleEscape)
                document.body.style.overflow = 'hidden'
            }

            return () => {
                document.removeEventListener('keydown', handleEscape)
                document.body.style.overflow = 'unset'
            }
        }, [isOpen, onClose, closeOnEscape, closable])

        // Focus management
        useEffect(() => {
            if (isOpen && modalRef.current) {
                modalRef.current.focus()
            }
        }, [isOpen])

        const sizeClasses = {
            sm: 'max-w-sm',
            md: 'max-w-md',
            lg: 'max-w-lg',
            xl: 'max-w-xl',
            full: 'max-w-none mx-4'
        }

        const variantClasses = {
            default: 'bg-background-card border border-primary-gold/20',
            glass: 'bg-background-card/90 backdrop-blur-sm border border-primary-gold/30',
            dark: 'bg-background-primary border border-primary-gold/20'
        }

        const handleOverlayClick = (event: React.MouseEvent) => {
            if (event.target === event.currentTarget && closeOnOverlayClick && closable) {
                onClose()
            }
        }

        const handleClose = () => {
            if (closable) {
                onClose()
            }
        }

        const renderHeader = () => {
            if (!header && !title && !Icon) return null

            return (
                <div className="flex items-start justify-between p-6 border-b border-primary-gold/20">
                    <div className="flex items-center space-x-3">
                        {Icon && (
                            <div className="p-2 bg-primary-gold/20 rounded-lg flex-shrink-0">
                                <Icon className="w-5 h-5 text-primary-gold" />
                            </div>
                        )}
                        <div>
                            {title && (
                                <h2 className="text-xl font-semibold text-text-primary font-helvetica">
                                    {title}
                                </h2>
                            )}
                            {subtitle && (
                                <p className="text-sm text-text-secondary font-inter mt-1">
                                    {subtitle}
                                </p>
                            )}
                        </div>
                    </div>
                    <div className="flex items-center space-x-2">
                        {headerAction && (
                            <div className="flex-shrink-0">
                                {headerAction}
                            </div>
                        )}
                        {showCloseButton && closable && (
                            <button
                                onClick={handleClose}
                                className="p-2 text-text-secondary hover:text-text-primary hover:bg-primary-gold/10 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-gold/50"
                                aria-label="Modal'ı kapat"
                            >
                                <X className="w-5 h-5" />
                            </button>
                        )}
                    </div>
                </div>
            )
        }

        const renderFooter = () => {
            if (!footer) return null

            return (
                <div className="p-6 border-t border-primary-gold/20">
                    {footer}
                </div>
            )
        }

        if (!isOpen) return null

        return (
            <div className="fixed inset-0 z-50 flex items-center justify-center">
                {/* Overlay */}
                <div
                    className="fixed inset-0 bg-black/60 backdrop-blur-sm transition-opacity duration-300"
                    onClick={handleOverlayClick}
                    aria-hidden="true"
                />

                {/* Modal */}
                <div
                    ref={modalRef}
                    className={`
            relative w-full mx-4 rounded-xl shadow-xl transform transition-all duration-300 scale-100
            ${sizeClasses[size]}
            ${variantClasses[variant]}
            ${centered ? 'my-8' : ''}
            ${className}
          `}
                    style={{ maxHeight }}
                    tabIndex={-1}
                    role="dialog"
                    aria-modal="true"
                    aria-labelledby={title ? 'modal-title' : undefined}
                    {...props}
                >
                    {/* Header */}
                    {header && <div>{header}</div>}
                    {renderHeader()}

                    {/* Body */}
                    <div className={`${scrollable ? 'overflow-y-auto' : ''} ${!header && !title && !Icon ? 'pt-6' : ''}`}>
                        {children && (
                            <div className="p-6">
                                {children}
                            </div>
                        )}
                    </div>

                    {/* Footer */}
                    {renderFooter()}
                </div>
            </div>
        )
    }
)

Modal.displayName = 'Modal'

export default Modal

// Alt component'ler
export const ModalHeader = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`p-6 border-b border-primary-gold/20 ${className}`} {...props}>
        {children}
    </div>
)

export const ModalBody = ({ children, className = '', scrollable = true, ...props }: HTMLAttributes<HTMLDivElement> & { scrollable?: boolean }) => (
    <div className={`p-6 ${scrollable ? 'overflow-y-auto' : ''} ${className}`} {...props}>
        {children}
    </div>
)

export const ModalFooter = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`p-6 border-t border-primary-gold/20 ${className}`} {...props}>
        {children}
    </div>
)

export const ModalTitle = ({ children, className = '', ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h2 id="modal-title" className={`text-xl font-semibold text-text-primary font-helvetica ${className}`} {...props}>
        {children}
    </h2>
)

export const ModalSubtitle = ({ children, className = '', ...props }: HTMLAttributes<HTMLParagraphElement>) => (
    <p className={`text-sm text-text-secondary font-inter ${className}`} {...props}>
        {children}
    </p>
)
</file>

<file path="src/app/components/ui/Navbar.tsx">
'use client'
import React, { useState } from 'react';
import { Menu, X, Search, Bell, User, ChevronDown, LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface NavItem {
    label: string;
    href?: string;
    icon?: React.ReactNode;
    badge?: number;
    children?: NavItem[];
    onClick?: () => void;
}

interface NavbarProps {
    brand?: {
        logo?: string;
        name: string;
        href?: string;
    };
    items?: NavItem[];
    actions?: React.ReactNode;
    user?: {
        name: string;
        email?: string;
        avatar?: string;
    };
    searchable?: boolean;
    fixed?: boolean;
    transparent?: boolean;
    onMenuClick?: () => void;
    className?: string;
}

const Navbar: React.FC<NavbarProps> = ({
    brand,
    items = [],
    actions,
    user,
    searchable = false,
    fixed = false,
    transparent = false,
    onMenuClick,
    className,
}) => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
    const [searchValue, setSearchValue] = useState('');

    const toggleMenu = () => {
        setIsMenuOpen(!isMenuOpen);
        onMenuClick?.();
    };

    const toggleUserMenu = () => {
        setIsUserMenuOpen(!isUserMenuOpen);
    };

    return (
        <nav
            className={cn(
                'w-full z-40 transition-all duration-200',
                fixed && 'fixed top-0 left-0 right-0',
                transparent
                    ? 'bg-transparent backdrop-blur-md border-b border-primary-dark-gray/20'
                    : 'bg-background-card border-b border-primary-dark-gray/20',
                className
            )}
        >
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex items-center justify-between h-16">
                    {/* Left side - Brand & Menu */}
                    <div className="flex items-center space-x-4">
                        {/* Mobile menu button */}
                        <button
                            onClick={toggleMenu}
                            className="lg:hidden p-2 rounded-lg text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors"
                        >
                            {isMenuOpen ? <X size={20} /> : <Menu size={20} />}
                        </button>

                        {/* Brand */}
                        {brand && (
                            <div className="flex items-center space-x-3">
                                {brand.logo && (
                                    <img
                                        src={brand.logo}
                                        alt={brand.name}
                                        className="h-8 w-8 object-contain"
                                    />
                                )}
                                <span className="text-xl font-bold text-text-primary">
                                    {brand.name}
                                </span>
                            </div>
                        )}

                        {/* Desktop Navigation */}
                        <div className="hidden lg:flex items-center space-x-1">
                            {items.map((item, index) => (
                                <NavbarItem key={index} item={item} />
                            ))}
                        </div>
                    </div>

                    {/* Center - Search */}
                    {searchable && (
                        <div className="hidden md:block flex-1 max-w-md mx-8">
                            <div className="relative">
                                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary h-4 w-4" />
                                <input
                                    type="text"
                                    placeholder="Ara..."
                                    value={searchValue}
                                    onChange={(e) => setSearchValue(e.target.value)}
                                    className="w-full pl-10 pr-4 py-2 bg-background-secondary border border-primary-dark-gray/20 rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:border-primary-gold focus:ring-1 focus:ring-primary-gold"
                                />
                            </div>
                        </div>
                    )}

                    {/* Right side - Actions & User */}
                    <div className="flex items-center space-x-3">
                        {/* Custom actions */}
                        {actions}

                        {/* Notifications */}
                        <button className="relative p-2 text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 rounded-lg transition-colors">
                            <Bell size={20} />
                            <span className="absolute -top-1 -right-1 h-5 w-5 bg-primary-red text-white text-xs rounded-full flex items-center justify-center">
                                3
                            </span>
                        </button>

                        {/* User Menu */}
                        {user && (
                            <div className="relative">
                                <button
                                    onClick={toggleUserMenu}
                                    className="flex items-center space-x-2 p-2 rounded-lg text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors"
                                >
                                    {user.avatar ? (
                                        <img
                                            src={user.avatar}
                                            alt={user.name}
                                            className="h-8 w-8 rounded-full object-cover"
                                        />
                                    ) : (
                                        <div className="h-8 w-8 bg-primary-gold rounded-full flex items-center justify-center">
                                            <span className="text-background-primary text-sm font-semibold">
                                                {user.name.charAt(0).toUpperCase()}
                                            </span>
                                        </div>
                                    )}
                                    <span className="hidden md:block text-sm font-medium">
                                        {user.name}
                                    </span>
                                    <ChevronDown size={16} />
                                </button>

                                {/* User Dropdown */}
                                {isUserMenuOpen && (
                                    <div className="absolute right-0 top-full mt-2 w-64 bg-background-card border border-primary-dark-gray/20 rounded-lg shadow-lg py-2">
                                        <div className="px-4 py-3 border-b border-primary-dark-gray/20">
                                            <p className="text-sm font-medium text-text-primary">{user.name}</p>
                                            {user.email && (
                                                <p className="text-sm text-text-secondary">{user.email}</p>
                                            )}
                                        </div>
                                        <div className="py-2">
                                            <button className="w-full px-4 py-2 text-left text-sm text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors flex items-center space-x-2">
                                                <User size={16} />
                                                <span>Profil</span>
                                            </button>
                                            <button className="w-full px-4 py-2 text-left text-sm text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors flex items-center space-x-2">
                                                <LogOut size={16} />
                                                <span>Çıkış Yap</span>
                                            </button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                </div>

                {/* Mobile Menu */}
                {isMenuOpen && (
                    <div className="lg:hidden border-t border-primary-dark-gray/20 pt-4 pb-4">
                        {searchable && (
                            <div className="mb-4">
                                <div className="relative">
                                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary h-4 w-4" />
                                    <input
                                        type="text"
                                        placeholder="Ara..."
                                        value={searchValue}
                                        onChange={(e) => setSearchValue(e.target.value)}
                                        className="w-full pl-10 pr-4 py-2 bg-background-secondary border border-primary-dark-gray/20 rounded-lg text-text-primary placeholder-text-secondary focus:outline-none focus:border-primary-gold focus:ring-1 focus:ring-primary-gold"
                                    />
                                </div>
                            </div>
                        )}
                        <div className="space-y-2">
                            {items.map((item, index) => (
                                <MobileNavItem key={index} item={item} />
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </nav>
    );
};

// Desktop Nav Item Component
const NavbarItem: React.FC<{ item: NavItem }> = ({ item }) => {
    const [isOpen, setIsOpen] = useState(false);

    if (item.children && item.children.length > 0) {
        return (
            <div className="relative group">
                <button
                    onMouseEnter={() => setIsOpen(true)}
                    onMouseLeave={() => setIsOpen(false)}
                    className="flex items-center space-x-1 px-3 py-2 rounded-lg text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors"
                >
                    {item.icon}
                    <span className="text-sm font-medium">{item.label}</span>
                    <ChevronDown size={16} />
                </button>

                {isOpen && (
                    <div
                        className="absolute top-full left-0 mt-1 w-48 bg-background-card border border-primary-dark-gray/20 rounded-lg shadow-lg py-2 z-50"
                        onMouseEnter={() => setIsOpen(true)}
                        onMouseLeave={() => setIsOpen(false)}
                    >
                        {item.children.map((child, index) => (
                            <button
                                key={index}
                                onClick={child.onClick}
                                className="w-full px-4 py-2 text-left text-sm text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors flex items-center space-x-2"
                            >
                                {child.icon}
                                <span>{child.label}</span>
                                {child.badge && (
                                    <span className="ml-auto bg-primary-gold text-background-primary text-xs px-2 py-1 rounded-full">
                                        {child.badge}
                                    </span>
                                )}
                            </button>
                        ))}
                    </div>
                )}
            </div>
        );
    }

    return (
        <button
            onClick={item.onClick}
            className="flex items-center space-x-1 px-3 py-2 rounded-lg text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors"
        >
            {item.icon}
            <span className="text-sm font-medium">{item.label}</span>
            {item.badge && (
                <span className="bg-primary-gold text-background-primary text-xs px-2 py-1 rounded-full">
                    {item.badge}
                </span>
            )}
        </button>
    );
};

// Mobile Nav Item Component
const MobileNavItem: React.FC<{ item: NavItem }> = ({ item }) => {
    const [isOpen, setIsOpen] = useState(false);

    if (item.children && item.children.length > 0) {
        return (
            <div>
                <button
                    onClick={() => setIsOpen(!isOpen)}
                    className="w-full flex items-center justify-between px-3 py-2 rounded-lg text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors"
                >
                    <div className="flex items-center space-x-2">
                        {item.icon}
                        <span className="text-sm font-medium">{item.label}</span>
                    </div>
                    <ChevronDown
                        size={16}
                        className={cn('transition-transform', isOpen && 'rotate-180')}
                    />
                </button>

                {isOpen && (
                    <div className="ml-4 mt-2 space-y-1">
                        {item.children.map((child, index) => (
                            <button
                                key={index}
                                onClick={child.onClick}
                                className="w-full flex items-center space-x-2 px-3 py-2 rounded-lg text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors"
                            >
                                {child.icon}
                                <span className="text-sm">{child.label}</span>
                                {child.badge && (
                                    <span className="ml-auto bg-primary-gold text-background-primary text-xs px-2 py-1 rounded-full">
                                        {child.badge}
                                    </span>
                                )}
                            </button>
                        ))}
                    </div>
                )}
            </div>
        );
    }

    return (
        <button
            onClick={item.onClick}
            className="w-full flex items-center space-x-2 px-3 py-2 rounded-lg text-text-secondary hover:text-text-primary hover:bg-background-secondary/50 transition-colors"
        >
            {item.icon}
            <span className="text-sm font-medium">{item.label}</span>
            {item.badge && (
                <span className="ml-auto bg-primary-gold text-background-primary text-xs px-2 py-1 rounded-full">
                    {item.badge}
                </span>
            )}
        </button>
    );
};

export default Navbar;
</file>

<file path="src/app/components/ui/Pagination.tsx">
import React from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { cn } from '@/lib/utils';

interface PaginationProps {
    currentPage: number;
    totalPages: number;
    onPageChange: (page: number) => void;
    showFirstLast?: boolean;
    showPrevNext?: boolean;
    maxVisiblePages?: number;
    size?: 'sm' | 'md' | 'lg';
    className?: string;
}

const Pagination: React.FC<PaginationProps> = ({
    currentPage,
    totalPages,
    onPageChange,
    showFirstLast = true,
    showPrevNext = true,
    maxVisiblePages = 5,
    size = 'md',
    className,
}) => {
    const sizeClasses = {
        sm: 'h-8 px-2 text-xs',
        md: 'h-10 px-3 text-sm',
        lg: 'h-12 px-4 text-base',
    };

    const iconSize = {
        sm: 14,
        md: 16,
        lg: 20,
    };

    // Sayfa numaralarını hesaplama
    const getVisiblePages = () => {
        const pages = [];
        const start = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        const end = Math.min(totalPages, start + maxVisiblePages - 1);

        for (let i = start; i <= end; i++) {
            pages.push(i);
        }

        return pages;
    };

    const visiblePages = getVisiblePages();
    const isFirstPage = currentPage === 1;
    const isLastPage = currentPage === totalPages;

    return (
        <div className={cn('flex items-center justify-center space-x-1', className)}>
            {/* İlk sayfa */}
            {showFirstLast && !isFirstPage && (
                <button
                    onClick={() => onPageChange(1)}
                    className={cn(
                        'flex items-center justify-center border border-primary-dark-gray/20 rounded-lg bg-background-card text-text-primary hover:bg-background-secondary transition-colors',
                        sizeClasses[size]
                    )}
                >
                    İlk
                </button>
            )}

            {/* Önceki sayfa */}
            {showPrevNext && !isFirstPage && (
                <button
                    onClick={() => onPageChange(currentPage - 1)}
                    className={cn(
                        'flex items-center justify-center border border-primary-dark-gray/20 rounded-lg bg-background-card text-text-primary hover:bg-background-secondary transition-colors',
                        sizeClasses[size]
                    )}
                >
                    <ChevronLeft size={iconSize[size]} />
                </button>
            )}

            {/* Sayfa numaraları */}
            {visiblePages.map((page) => (
                <button
                    key={page}
                    onClick={() => onPageChange(page)}
                    className={cn(
                        'flex items-center justify-center border rounded-lg transition-colors font-medium',
                        page === currentPage
                            ? 'bg-primary-gold text-background-primary border-primary-gold hover:bg-primary-gold/90'
                            : 'bg-background-card text-text-primary border-primary-dark-gray/20 hover:bg-background-secondary',
                        sizeClasses[size]
                    )}
                >
                    {page}
                </button>
            ))}

            {/* Sonraki sayfa */}
            {showPrevNext && !isLastPage && (
                <button
                    onClick={() => onPageChange(currentPage + 1)}
                    className={cn(
                        'flex items-center justify-center border border-primary-dark-gray/20 rounded-lg bg-background-card text-text-primary hover:bg-background-secondary transition-colors',
                        sizeClasses[size]
                    )}
                >
                    <ChevronRight size={iconSize[size]} />
                </button>
            )}

            {/* Son sayfa */}
            {showFirstLast && !isLastPage && (
                <button
                    onClick={() => onPageChange(totalPages)}
                    className={cn(
                        'flex items-center justify-center border border-primary-dark-gray/20 rounded-lg bg-background-card text-text-primary hover:bg-background-secondary transition-colors',
                        sizeClasses[size]
                    )}
                >
                    Son
                </button>
            )}
        </div>
    );
};

export default Pagination;
</file>

<file path="src/app/components/ui/PaymentHistoryModal.tsx">
import React from 'react';
import Modal from './Modal';
import { Bill } from '@/services/billing.service';
import { CreditCard } from 'lucide-react';

interface PaymentHistoryModalProps {
  isOpen: boolean;
  onClose: () => void;
  bills: Bill[];
  residentName: string;
  loading?: boolean;
  error?: string | null;
}

const statusColor = (status: string) => {
  switch (status) {
    case 'PAID':
      return 'text-semantic-success-600';
    case 'OVERDUE':
      return 'text-primary-red';
    case 'PENDING':
      return 'text-semantic-warning-600';
    case 'CANCELLED':
      return 'text-gray-400';
    default:
      return 'text-text-light-secondary';
  }
};

const PaymentHistoryModal: React.FC<PaymentHistoryModalProps> = ({
  isOpen,
  onClose,
  bills,
  residentName,
  loading = false,
  error = null,
}) => {
  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={`${residentName} - Ödeme Geçmişi`}
      icon={CreditCard}
      size="lg"
      variant="default"
      scrollable={true}
      maxHeight="calc(100vh - 4rem)"
    >
      {loading ? (
        <div className="py-8 text-center text-text-light-secondary">Yükleniyor...</div>
      ) : error ? (
        <div className="py-8 text-center text-primary-red">{error}</div>
      ) : bills.length === 0 ? (
        <div className="py-8 text-center text-text-light-secondary">Ödeme geçmişi bulunamadı.</div>
      ) : (
        <div className="divide-y divide-gray-200 dark:divide-gray-700 max-h-[60vh] overflow-y-auto">
          {bills.map((bill) => (
            <div key={bill.id} className="flex flex-col md:flex-row md:items-center justify-between py-4 gap-2 mr-4">
              <div className="flex-1 min-w-0">
                <div className="font-medium text-text-on-light dark:text-text-on-dark">{bill.title}</div>
                <div className="text-xs text-text-light-muted dark:text-text-muted mt-1 flex flex-wrap gap-2">
                  <span>Oluşturulma: {bill.createdAt ? new Date(bill.createdAt).toLocaleDateString('tr-TR', { year: 'numeric', month: '2-digit', day: '2-digit' }) : '-'}</span>
                  <span>Vade: {bill.dueDate ? new Date(bill.dueDate).toLocaleDateString('tr-TR', { year: 'numeric', month: '2-digit', day: '2-digit' }) : '-'}</span>
                  <span>Tip: {bill.billType}</span>
                  <span className={`font-medium ${statusColor(bill.status)}`}>{bill.status === 'PAID' ? 'Ödendi' : bill.status === 'OVERDUE' ? 'Gecikmiş' : bill.status === 'PENDING' ? 'Bekliyor' : bill.status === 'CANCELLED' ? 'İptal Edildi' : bill.status}</span>
                </div>
                {bill.description && (
                  <div className="text-xs text-text-light-muted dark:text-text-muted mt-1">{bill.description}</div>
                )}
              </div>
              <div className="flex flex-col items-end min-w-[100px]">
                <span className="font-semibold text-lg text-primary-gold">₺{Number(bill.amount).toLocaleString('tr-TR')}</span>
              </div>
            </div>
          ))}
        </div>
      )}
    </Modal>
  );
};

export default PaymentHistoryModal;
</file>

<file path="src/app/components/ui/Portal.tsx">
import { useEffect, useRef } from "react";
import { createPortal } from "react-dom";

export default function Portal({ children }: { children: React.ReactNode }) {
  const elRef = useRef<HTMLDivElement | null>(null);

  if (!elRef.current) {
    elRef.current = document.createElement("div");
  }

  useEffect(() => {
    const portalRoot = document.body;
    portalRoot.appendChild(elRef.current!);
    return () => {
      portalRoot.removeChild(elRef.current!);
    };
  }, []);

  return createPortal(children, elRef.current);
}
</file>

<file path="src/app/components/ui/ProfileDropdown.tsx">
'use client'
import React, { useState, useRef, useEffect } from 'react';
import {
    User,
    Settings,
    LogOut,
    Bell,
    Heart,
    HelpCircle,
    CreditCard,
    Shield,
    Moon,
    Sun,
    Globe,
    ChevronRight,
    ChevronDown
} from 'lucide-react';
import { cn } from '@/lib/utils';
import Avatar from './Avatar';
import Badge from './Badge';

interface ProfileDropdownItem {
    id: string;
    label: string;
    icon?: React.ReactNode;
    href?: string;
    onClick?: () => void;
    badge?: string | number;
    variant?: 'default' | 'danger' | 'success' | 'warning';
    disabled?: boolean;
    children?: ProfileDropdownItem[];
    divider?: boolean;
}

interface ProfileDropdownProps {
    user: {
        name: string;
        email?: string;
        avatar?: string;
        role?: string;
        status?: 'online' | 'offline' | 'away' | 'busy';
    };
    items?: ProfileDropdownItem[];
    position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';
    trigger?: 'click' | 'hover';
    showUserInfo?: boolean;
    showStatus?: boolean;
    compact?: boolean;
    className?: string;
    onClose?: () => void;
}

const ProfileDropdown: React.FC<ProfileDropdownProps> = ({
    user,
    items = [],
    position = 'bottom-right',
    trigger = 'click',
    showUserInfo = true,
    showStatus = true,
    compact = false,
    className,
    onClose,
}) => {
    const [isOpen, setIsOpen] = useState(false);
    const [openSubmenu, setOpenSubmenu] = useState<string | null>(null);
    const dropdownRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as Node;
            if (dropdownRef.current && target && !dropdownRef.current.contains(target)) {
                setIsOpen(false);
                setOpenSubmenu(null);
                onClose?.();
            }
        };

        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isOpen, onClose]);

    const handleToggle = () => {
        setIsOpen(!isOpen);
    };

    const handleMouseEnter = () => {
        if (trigger === 'hover') {
            setIsOpen(true);
        }
    };

    const handleMouseLeave = () => {
        if (trigger === 'hover') {
            setIsOpen(false);
            setOpenSubmenu(null);
        }
    };

    const positionClasses = {
        'bottom-right': 'top-full right-0 mt-2',
        'bottom-left': 'top-full left-0 mt-2',
        'top-right': 'bottom-full right-0 mb-2',
        'top-left': 'bottom-full left-0 mb-2',
    };

    const renderTrigger = () => {
        if (compact) {
            return (
                <button
                    onClick={handleToggle}
                    onMouseEnter={handleMouseEnter}
                    className="flex items-center space-x-2 p-2 rounded-lg bg-background-light-card/80 dark:bg-background-card/80 border border-gray-200 dark:border-gray-700 hover:border-primary-gold/60 hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg transition-all duration-200"
                >
                    <Avatar
                        src={user.avatar}
                        fallback={user.name}
                        size="sm"
                        status={user.status}
                        showStatus={showStatus}
                    />
                    <ChevronDown size={16} className={cn('transition-transform text-text-light-secondary dark:text-text-secondary', isOpen && 'rotate-180')} />
                </button>
            );
        }

        return (
            <button
                onClick={handleToggle}
                onMouseEnter={handleMouseEnter}
                className="flex items-center space-x-3 p-3 rounded-xl bg-background-light-card/90 dark:bg-background-card/90 backdrop-blur-sm border border-gray-200 dark:border-gray-700 hover:border-primary-gold/60 dark:hover:border-primary-gold/60 hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg transition-all duration-200 shadow-sm hover:shadow-md"
            >
                <Avatar
                    src={user.avatar}
                    fallback={user.name}
                    size="md"
                    status={user.status}
                    showStatus={showStatus}
                />
                <div className="hidden md:block text-left">
                    <div className="text-sm font-semibold text-text-on-light dark:text-text-on-dark">{user.name}</div>
                    {user.role && (
                        <div className="text-xs text-primary-gold dark:text-primary-gold font-medium">{user.role}</div>
                    )}
                </div>
                <ChevronDown size={16} className={cn('transition-transform text-text-light-secondary dark:text-text-secondary', isOpen && 'rotate-180')} />
            </button>
        );
    };

    const renderItem = (item: ProfileDropdownItem, depth = 0) => {
        const hasChildren = item.children && item.children.length > 0;
        const isSubmenuOpen = openSubmenu === item.id;

        const handleClick = (e: React.MouseEvent) => {
            if (hasChildren) {
                e.preventDefault();
                setOpenSubmenu(isSubmenuOpen ? null : item.id);
            } else {
                item.onClick?.();
                setIsOpen(false);
                setOpenSubmenu(null);
            }
        };

        const variantClasses = {
            default: 'text-text-light-secondary dark:text-text-secondary hover:text-text-on-light dark:hover:text-text-on-dark hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg',
            danger: 'text-primary-red dark:text-primary-red hover:text-primary-red-dark dark:hover:text-red-300 hover:bg-primary-red-light/70 dark:hover:bg-red-900/20',
            success: 'text-semantic-success-600 dark:text-semantic-success-500 hover:text-semantic-success-700 dark:hover:text-semantic-success-400 hover:bg-semantic-success-50/70 dark:hover:bg-semantic-success-900/20',
            warning: 'text-semantic-warning-600 dark:text-semantic-warning-500 hover:text-semantic-warning-700 dark:hover:text-semantic-warning-400 hover:bg-semantic-warning-50/70 dark:hover:bg-semantic-warning-900/20',
        };

        return (
            <div key={item.id}>
                {item.divider && (
                    <div className="my-3 border-t border-gray-200 dark:border-gray-700" />
                )}

                <button
                    onClick={handleClick}
                    disabled={item.disabled}
                    className={cn(
                        'w-full flex items-center justify-between px-4 py-3 mx-2 rounded-xl text-sm font-medium transition-all duration-200',
                        depth > 0 && 'ml-6',
                        item.disabled && 'opacity-50 cursor-not-allowed',
                        variantClasses[item.variant || 'default']
                    )}
                >
                    <div className="flex items-center space-x-3">
                        {item.icon && (
                            <span className="flex-shrink-0">
                                {item.icon}
                            </span>
                        )}
                        <span>{item.label}</span>
                    </div>

                    <div className="flex items-center space-x-2">
                        {item.badge && (
                            <Badge
                                variant="soft"
                                size="sm"
                                color={item.variant === 'danger' ? 'red' : 'primary'}
                            >
                                {item.badge}
                            </Badge>
                        )}
                        {hasChildren && <ChevronRight size={16} />}
                    </div>
                </button>

                {hasChildren && isSubmenuOpen && (
                    <div className="mt-1 space-y-1">
                        {item.children!.map((child) => renderItem(child, depth + 1))}
                    </div>
                )}
            </div>
        );
    };

    return (
        <div
            ref={dropdownRef}
            className={cn('relative', className)}
            onMouseLeave={handleMouseLeave}
        >
            {renderTrigger()}

            {isOpen && (
                <div
                    className={cn(
                        'absolute z-50 w-80 bg-background-light-card/95 dark:bg-background-card/95 backdrop-blur-md border border-gray-200 dark:border-gray-700 rounded-2xl shadow-2xl py-3',
                        positionClasses[position]
                    )}
                >
                    {showUserInfo && (
                        <div className="px-4 py-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-primary-gold-light/30 to-primary-gold/20 dark:from-primary-gold/10 dark:to-primary-gold/5 rounded-t-2xl">
                            <div className="flex items-center space-x-4">
                                <Avatar
                                    src={user.avatar}
                                    fallback={user.name}
                                    size="lg"
                                    status={user.status}
                                    showStatus={showStatus}
                                />
                                <div className="flex-1">
                                    <div className="font-semibold text-text-on-light dark:text-text-on-dark text-base">{user.name}</div>
                                    {user.email && (
                                        <div className="text-sm text-text-light-secondary dark:text-text-secondary">{user.email}</div>
                                    )}
                                    {user.role && (
                                        <div className="inline-block mt-1 px-2 py-1 text-xs font-medium text-text-on-gold dark:text-text-on-gold bg-primary-gold-light/60 dark:bg-primary-gold/20 rounded-lg">
                                            {user.role}
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}

                    <div className="py-3">
                        {items.map((item) => renderItem(item))}
                    </div>
                </div>
            )}
        </div>
    );
};

// Predefined ProfileDropdown Patterns
export const ProfileDropdownPatterns = {
    // Standard user dropdown
    Standard: (user: ProfileDropdownProps['user'], props?: Partial<ProfileDropdownProps>) => (
        <ProfileDropdown
            user={user}
            items={[
                {
                    id: 'profile',
                    label: 'Profil',
                    icon: <User size={16} />,
                    onClick: () => console.log('Profile clicked'),
                },
                {
                    id: 'settings',
                    label: 'Ayarlar',
                    icon: <Settings size={16} />,
                    onClick: () => console.log('Settings clicked'),
                },
                {
                    id: 'notifications',
                    label: 'Bildirimler',
                    icon: <Bell size={16} />,
                    badge: 3,
                    onClick: () => console.log('Notifications clicked'),
                },
                {
                    id: 'help',
                    label: 'Yardım',
                    icon: <HelpCircle size={16} />,
                    onClick: () => console.log('Help clicked'),
                },
                {
                    id: 'logout',
                    label: 'Çıkış Yap',
                    icon: <LogOut size={16} />,
                    variant: 'danger',
                    divider: true,
                    onClick: () => console.log('Logout clicked'),
                },
            ]}
            {...props}
        />
    ),

    // Admin dropdown with more options
    Admin: (user: ProfileDropdownProps['user'], props?: Partial<ProfileDropdownProps>) => (
        <ProfileDropdown
            user={user}
            items={[
                {
                    id: 'profile',
                    label: 'Profil',
                    icon: <User size={16} />,
                    onClick: () => console.log('Profile clicked'),
                },
                {
                    id: 'admin',
                    label: 'Yönetim',
                    icon: <Shield size={16} />,
                    children: [
                        {
                            id: 'users',
                            label: 'Kullanıcılar',
                            onClick: () => console.log('Users clicked'),
                        },
                        {
                            id: 'roles',
                            label: 'Roller',
                            onClick: () => console.log('Roles clicked'),
                        },
                        {
                            id: 'permissions',
                            label: 'İzinler',
                            onClick: () => console.log('Permissions clicked'),
                        },
                    ],
                },
                {
                    id: 'settings',
                    label: 'Ayarlar',
                    icon: <Settings size={16} />,
                    children: [
                        {
                            id: 'account',
                            label: 'Hesap',
                            onClick: () => console.log('Account clicked'),
                        },
                        {
                            id: 'billing',
                            label: 'Faturalandırma',
                            icon: <CreditCard size={16} />,
                            onClick: () => console.log('Billing clicked'),
                        },
                        {
                            id: 'preferences',
                            label: 'Tercihler',
                            onClick: () => console.log('Preferences clicked'),
                        },
                    ],
                },
                {
                    id: 'help',
                    label: 'Yardım',
                    icon: <HelpCircle size={16} />,
                    onClick: () => console.log('Help clicked'),
                },
                {
                    id: 'logout',
                    label: 'Çıkış Yap',
                    icon: <LogOut size={16} />,
                    variant: 'danger',
                    divider: true,
                    onClick: () => console.log('Logout clicked'),
                },
            ]}
            {...props}
        />
    ),

    // Compact dropdown for mobile
    Compact: (user: ProfileDropdownProps['user'], props?: Partial<ProfileDropdownProps>) => (
        <ProfileDropdown
            user={user}
            compact
            items={[
                {
                    id: 'profile',
                    label: 'Profil',
                    icon: <User size={16} />,
                    onClick: () => console.log('Profile clicked'),
                },
                {
                    id: 'settings',
                    label: 'Ayarlar',
                    icon: <Settings size={16} />,
                    onClick: () => console.log('Settings clicked'),
                },
                {
                    id: 'logout',
                    label: 'Çıkış Yap',
                    icon: <LogOut size={16} />,
                    variant: 'danger',
                    divider: true,
                    onClick: () => console.log('Logout clicked'),
                },
            ]}
            {...props}
        />
    ),

    // Simple dropdown
    Simple: (user: ProfileDropdownProps['user'], props?: Partial<ProfileDropdownProps>) => (
        <ProfileDropdown
            user={user}
            showUserInfo={false}
            items={[
                {
                    id: 'profile',
                    label: 'Profil',
                    onClick: () => console.log('Profile clicked'),
                },
                {
                    id: 'settings',
                    label: 'Ayarlar',
                    onClick: () => console.log('Settings clicked'),
                },
                {
                    id: 'logout',
                    label: 'Çıkış Yap',
                    variant: 'danger',
                    onClick: () => console.log('Logout clicked'),
                },
            ]}
            {...props}
        />
    ),
};

export default ProfileDropdown;
</file>

<file path="src/app/components/ui/ProgressBar.tsx">
import React from 'react';
import { cn } from '@/lib/utils';

interface ProgressBarProps {
    value: number;
    max?: number;
    size?: 'sm' | 'md' | 'lg';
    color?: 'gold' | 'primary' | 'red' | 'secondary' | 'accent';
    showValue?: boolean;
    showPercentage?: boolean;
    label?: string;
    striped?: boolean;
    animated?: boolean;
    className?: string;
}

const ProgressBar: React.FC<ProgressBarProps> = ({
    value,
    max = 100,
    size = 'md',
    color = 'gold',
    showValue = false,
    showPercentage = false,
    label,
    striped = false,
    animated = false,
    className,
}) => {
    const percentage = Math.min(Math.max((value / max) * 100, 0), 100);

    const sizeClasses = {
        sm: 'h-2',
        md: 'h-3',
        lg: 'h-4',
    };

    const colorClasses = {
        gold: 'bg-primary-gold',
        primary: 'bg-background-primary',
        red: 'bg-primary-red',
        secondary: 'bg-background-secondary',
        accent: 'bg-text-accent',
    };

    const stripedClasses = {
        gold: 'bg-gradient-to-r from-primary-gold to-primary-gold-light',
        primary: 'bg-gradient-to-r from-background-primary to-primary-dark-gray',
        red: 'bg-gradient-to-r from-primary-red to-red-400',
        secondary: 'bg-gradient-to-r from-background-secondary to-primary-dark-gray',
        accent: 'bg-gradient-to-r from-text-accent to-primary-gold-light',
    };

    return (
        <div className={cn('w-full', className)}>
            {/* Label */}
            {label && (
                <div className="flex justify-between items-center mb-1">
                    <span className="text-sm font-medium text-text-primary">{label}</span>
                    {(showValue || showPercentage) && (
                        <span className="text-sm text-text-secondary">
                            {showValue && `${value}/${max}`}
                            {showValue && showPercentage && ' - '}
                            {showPercentage && `${percentage.toFixed(1)}%`}
                        </span>
                    )}
                </div>
            )}

            {/* Progress Bar */}
            <div
                className={cn(
                    'w-full bg-background-secondary/50 rounded-full overflow-hidden',
                    sizeClasses[size]
                )}
            >
                <div
                    className={cn(
                        'h-full transition-all duration-500 ease-out',
                        striped ? stripedClasses[color] : colorClasses[color],
                        striped && 'bg-stripes',
                        animated && 'animate-pulse'
                    )}
                    style={{ width: `${percentage}%` }}
                />
            </div>

            {/* Value/Percentage below bar */}
            {!label && (showValue || showPercentage) && (
                <div className="flex justify-between items-center mt-1">
                    <span className="text-xs text-text-secondary">
                        {showValue && `${value}/${max}`}
                        {showValue && showPercentage && ' - '}
                        {showPercentage && `${percentage.toFixed(1)}%`}
                    </span>
                </div>
            )}
        </div>
    );
};

export default ProgressBar;
</file>

<file path="src/app/components/ui/RadioButton.tsx">
import { forwardRef, InputHTMLAttributes } from 'react'

interface RadioOption {
    value: string
    label: string
    disabled?: boolean
}

interface RadioButtonProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {
    label?: string
    error?: string
    helperText?: string
    options: RadioOption[]
    radioSize?: 'sm' | 'md' | 'lg'
    direction?: 'horizontal' | 'vertical'
}

const RadioButton = forwardRef<HTMLInputElement, RadioButtonProps>(
    ({
        label,
        error,
        helperText,
        options,
        radioSize = 'md',
        direction = 'vertical',
        className = '',
        ...props
    }, ref) => {
        const sizeClasses = {
            sm: 'w-4 h-4',
            md: 'w-5 h-5',
            lg: 'w-6 h-6'
        }

        // Border ve focus efektleri kaldırıldı
        const baseClasses = 'rounded-full transition-colors';
        const normalClasses = '';
        const checkedClasses = 'bg-primary-gold';
        const errorClasses = error ? 'bg-primary-red' : '';

        const containerClasses = direction === 'horizontal' ? 'flex flex-wrap gap-6' : 'space-y-3';

        return (
            <div className="space-y-2">
                {label && (
                    <label className="block text-sm font-medium text-text-primary font-inter">
                        {label}
                    </label>
                )}

                <div className={containerClasses}>
                    {options.map((option, index) => (
                        <div key={option.value} className="flex items-center gap-2 min-h-6">
                            <label
                                htmlFor={`${props.name}-${option.value}`}
                                className={`text-sm font-medium cursor-pointer font-inter flex items-center ${option.disabled ? 'text-text-secondary opacity-50' : 'text-text-primary'}`}
                                style={{ lineHeight: 1.5 }}
                            >
                                <span className="relative flex items-center justify-center">
                                    <input
                                        ref={index === 0 ? ref : undefined}
                                        id={`${props.name}-${option.value}`}
                                        type="radio"
                                        value={option.value}
                                        disabled={option.disabled}
                                        className={`
                        ${baseClasses}
                        ${sizeClasses[radioSize]}
                        ${error ? errorClasses : normalClasses}
                        ${props.value === option.value ? checkedClasses : ''}
                        ${className}
                        cursor-pointer
                        ${option.disabled ? 'opacity-50 cursor-not-allowed' : ''}
                        peer
                    `}
                                        checked={props.value === option.value}
                                        onChange={props.onChange}
                                        name={props.name}
                                    />
                                    {/* Custom dot for checked state, premium gold */}
                                    <span
                                        className={`pointer-events-none absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full transition-all duration-150
                        ${props.value === option.value ?
                                                radioSize === 'lg' ? 'w-3 h-3' : radioSize === 'sm' ? 'w-1.5 h-1.5' : 'w-2 h-2'
                                                : 'w-0 h-0'}
                        ${props.value === option.value ? 'bg-primary-dark-gray' : ''}
                    `}
                                        style={{
                                            backgroundColor: props.value === option.value ? '#ac8d6a' : 'transparent'
                                        }}
                                    />
                                </span>
                                <span className="ml-2 select-none flex items-center" style={{ minHeight: '1.5rem' }}>{option.label}</span>
                            </label>
                        </div>
                    ))}
                </div>

                {error && (
                    <p className="text-sm text-primary-red font-inter">{error}</p>
                )}

                {helperText && !error && (
                    <p className="text-sm text-text-secondary font-inter">{helperText}</p>
                )}
            </div>
        )
    }
)

RadioButton.displayName = 'RadioButton'

export default RadioButton
</file>

<file path="src/app/components/ui/ResidentRow.tsx">
import React from 'react';
import { Eye, Edit, MessageSquare, Phone, MoreVertical, User, Home, CreditCard, Calendar, AlertCircle, CheckCircle, Clock } from 'lucide-react';
import { cn } from '@/lib/utils';
import Badge from './Badge';
import Button from './Button';

interface ResidentAddress {
    building: string;
    apartment: string;
    floor?: string;
    roomType: string;
}

interface ResidentContact {
    phone: string;
    email?: string;
    secondaryPhone?: string;
    formattedPhone?: string;
}

interface ResidentFinancial {
    balance: number;
    totalDebt: number;
    lastPaymentDate?: string;
}

export interface ResidentStatus {
    type: 'active' | 'pending' | 'inactive' | 'suspended';
    label: string;
    color: 'green' | 'yellow' | 'red' | 'gray' | 'blue';
}

interface ResidentType {
    type: 'owner' | 'tenant' | 'guest';
    label: string;
    color: 'blue' | 'green' | 'purple';
}

interface MembershipTier {
    type: string;
    label: string;
    color: string;
}

interface VerificationStatus {
    type: string;
    label: string;
    color: string;
}

export interface Resident {
    id: string | number;
    firstName: string;
    lastName: string;
    fullName: string;
    nationalId?: string;
    profileImage?: string;
    avatar?: string;
    residentType: ResidentType;
    address: ResidentAddress;
    contact: ResidentContact;
    financial: ResidentFinancial;
    status: ResidentStatus;
    registrationDate: string;
    lastActivity?: string;
    notes?: string;
    tags?: string[];
    isGoldMember?: boolean;
    membershipTier?: string;
    verificationStatus?: { label: string; color: string };
}

interface ResidentRowProps {
    resident: Resident;
    onAction: (action: string, resident: Resident) => void;
    selectable?: boolean;
    selected?: boolean;
    onSelect?: (resident: Resident) => void;
    showDetails?: boolean;
    className?: string;
    size?: 'sm' | 'md' | 'lg';
}

const ResidentRow: React.FC<ResidentRowProps> = ({
    resident,
    onAction,
    selectable = false,
    selected = false,
    onSelect,
    showDetails = true,
    className,
    size = 'md',
}) => {
    const sizeClasses = {
        sm: 'p-2 text-xs',
        md: 'p-4 text-sm',
        lg: 'p-6 text-base',
    };

    const avatarSizes = {
        sm: 'w-8 h-8',
        md: 'w-10 h-10',
        lg: 'w-12 h-12',
    };

    const getStatusColor = (status: ResidentStatus) => {
        switch (status.color) {
            case 'green':
                return 'success';
            case 'yellow':
                return 'warning';
            case 'red':
                return 'danger';
            default:
                return 'secondary';
        }
    };

    const getTypeColor = (type: ResidentType) => {
        switch (type.color) {
            case 'blue':
                return 'primary';
            case 'green':
                return 'success';
            case 'purple':
                return 'accent';
            default:
                return 'secondary';
        }
    };

    const getStatusIcon = (status: ResidentStatus) => {
        switch (status.type) {
            case 'active':
                return <CheckCircle size={12} className="text-semantic-success-600" />;
            case 'pending':
                return <Clock size={12} className="text-semantic-warning-600" />;
            case 'inactive':
            case 'suspended':
                return <AlertCircle size={12} className="text-primary-red" />;
            default:
                return null;
        }
    };

    const formatCurrency = (amount: number) => {
        return new Intl.NumberFormat('tr-TR', {
            style: 'currency',
            currency: 'TRY',
        }).format(amount);
    };

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString('tr-TR');
    };

    const maskNationalId = (nationalId?: string) => {
        if (!nationalId) return '';
        return `****${nationalId.slice(-3)}`;
    };

    const getInitials = (firstName: string, lastName: string) => {
        return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
    };

    const handleActionClick = (action: string, e: React.MouseEvent) => {
        e.stopPropagation();
        onAction(action, resident);
    };

    const handleRowClick = () => {
        if (selectable && onSelect) {
            onSelect(resident);
        }
    };

    const hasDebt = resident.financial.totalDebt > 0;

    return (
        <tr
            className={cn(
                'border-t border-gray-200 dark:border-gray-700 transition-colors',
                'hover:bg-background-light-soft dark:hover:bg-background-soft',
                selected && 'bg-primary-gold/10',
                selectable && 'cursor-pointer',
                className
            )}
            onClick={handleRowClick}
        >
            {/* Selection checkbox */}
            {selectable && (
                <td className={sizeClasses[size]}>
                    <input
                        type="checkbox"
                        checked={selected}
                        onChange={(e) => {
                            e.stopPropagation();
                            onSelect?.(resident);
                        }}
                        className="rounded border-gray-300 text-primary-gold focus:ring-primary-gold/50"
                    />
                </td>
            )}

            {/* Profile Photo */}
            <td className={sizeClasses[size]}>
                <div className="flex items-center justify-center">
                    {resident.profileImage ? (
                        <img
                            src={resident.profileImage}
                            alt={resident.fullName}
                            className={cn(
                                'rounded-full object-cover',
                                avatarSizes[size]
                            )}
                        />
                    ) : (
                        <div className={cn(
                            'rounded-full flex items-center justify-center font-medium text-white',
                            avatarSizes[size],
                            resident.isGoldMember ? 'bg-primary-gold' : 'bg-primary-gray-blue'
                        )}>
                            {getInitials(resident.firstName, resident.lastName)}
                        </div>
                    )}
                </div>
            </td>

            {/* Name and Personal Info */}
            <td className={sizeClasses[size]}>
                <div className="space-y-1">
                    <div className="flex items-center gap-2">
                        <p className="font-medium text-text-on-light dark:text-text-on-dark">
                            {resident.fullName}
                        </p>
                        {resident.isGoldMember && (
                            <Badge variant="solid" color="gold" size="sm">
                                Gold
                            </Badge>
                        )}
                    </div>
                    {showDetails && (
                        <div className="flex items-center gap-2">
                            <User size={12} className="text-text-light-muted dark:text-text-muted" />
                            <p className="text-text-light-muted dark:text-text-muted">
                                TC: {maskNationalId(resident.nationalId)}
                            </p>
                        </div>
                    )}
                </div>
            </td>

            {/* Address */}
            <td className={sizeClasses[size]}>
                <div className="space-y-1">
                    <div className="flex items-center gap-2">
                        <Home size={12} className="text-text-light-muted dark:text-text-muted" />
                        <p className="font-medium text-text-on-light dark:text-text-on-dark">
                            {resident.address.building} - {resident.address.apartment}
                        </p>
                    </div>
                    {showDetails && (
                        <p className="text-text-light-secondary dark:text-text-secondary">
                            {resident.address.roomType}
                        </p>
                    )}
                </div>
            </td>

            {/* Type */}
            <td className={sizeClasses[size]}>
                <Badge
                    variant="soft"
                    color={getTypeColor(resident.residentType) as any}
                    size="sm"
                >
                    {resident.residentType.label}
                </Badge>
            </td>

            {/* Contact */}
            <td className={sizeClasses[size]}>
                <div className="flex items-center gap-2">
                    <span className="text-text-on-light dark:text-text-on-dark">
                        {resident.contact.phone}
                    </span>
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={Phone}
                        onClick={(e) => handleActionClick('call', e)}
                        className="h-6 w-6 p-1"
                        title="Ara"
                    />
                </div>
            </td>

            {/* Financial */}
            <td className={sizeClasses[size]}>
                <div className="space-y-1">
                    <div className="flex items-center gap-2">
                        <CreditCard size={12} className="text-text-light-muted dark:text-text-muted" />
                        <span className={cn(
                            'font-medium',
                            hasDebt ? 'text-primary-red' : 'text-semantic-success-600'
                        )}>
                            {formatCurrency(resident.financial.totalDebt)}
                        </span>
                    </div>
                    {showDetails && resident.financial.lastPaymentDate && (
                        <p className="text-text-light-secondary dark:text-text-secondary">
                            Son: {formatDate(resident.financial.lastPaymentDate)}
                        </p>
                    )}
                </div>
            </td>

            {/* Status */}
            <td className={sizeClasses[size]}>
                <div className="flex items-center gap-2">
                    {getStatusIcon(resident.status)}
                    <Badge
                        variant="soft"
                        color={getStatusColor(resident.status) as any}
                        size="sm"
                    >
                        {resident.status.label}
                    </Badge>
                </div>
            </td>

            {/* Actions */}
            <td className={sizeClasses[size]}>
                <div className="flex items-center gap-1">
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={Eye}
                        onClick={(e) => handleActionClick('view', e)}
                        className="h-8 w-8 p-1"
                        title="Görüntüle"
                    />
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={Edit}
                        onClick={(e) => handleActionClick('edit', e)}
                        className="h-8 w-8 p-1"
                        title="Düzenle"
                    />
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={MessageSquare}
                        onClick={(e) => handleActionClick('message', e)}
                        className="h-8 w-8 p-1"
                        title="Mesaj Gönder"
                    />
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={MoreVertical}
                        onClick={(e) => handleActionClick('more', e)}
                        className="h-8 w-8 p-1"
                        title="Daha Fazla"
                    />
                </div>
            </td>
        </tr>
    );
};

export default ResidentRow;
</file>

<file path="src/app/components/ui/Skeleton.tsx">
import React from 'react';
import { cn } from '@/lib/utils';

interface SkeletonProps {
    variant?: 'text' | 'circular' | 'rectangular' | 'rounded';
    width?: string | number;
    height?: string | number;
    lines?: number;
    className?: string;
    animated?: boolean;
}

const Skeleton: React.FC<SkeletonProps> = ({
    variant = 'text',
    width,
    height,
    lines = 1,
    className,
    animated = true,
}) => {
    const baseClasses = cn(
        'bg-gradient-to-r from-background-secondary/50 to-background-secondary/30 border border-primary-dark-gray/10',
        animated && 'animate-pulse',
        className
    );

    const getVariantClasses = () => {
        switch (variant) {
            case 'text':
                return 'rounded h-4';
            case 'circular':
                return 'rounded-full';
            case 'rectangular':
                return 'rounded-none';
            case 'rounded':
                return 'rounded-lg';
            default:
                return 'rounded h-4';
        }
    };

    const getStyles = () => {
        const styles: React.CSSProperties = {};

        if (width) {
            styles.width = typeof width === 'number' ? `${width}px` : width;
        }

        if (height) {
            styles.height = typeof height === 'number' ? `${height}px` : height;
        }

        return styles;
    };

    // For text variant with multiple lines
    if (variant === 'text' && lines > 1) {
        return (
            <div className={cn('space-y-2', className)}>
                {Array.from({ length: lines }, (_, index) => (
                    <div
                        key={index}
                        className={cn(
                            baseClasses,
                            getVariantClasses(),
                            // Last line is typically shorter
                            index === lines - 1 && 'w-3/4'
                        )}
                        style={getStyles()}
                    />
                ))}
            </div>
        );
    }

    return (
        <div
            className={cn(baseClasses, getVariantClasses())}
            style={getStyles()}
        />
    );
};

// Predefined skeleton patterns
interface SkeletonPatternProps {
    className?: string;
    animated?: boolean;
}

export const SkeletonAvatar: React.FC<SkeletonPatternProps> = ({ className, animated = true }) => (
    <Skeleton
        variant="circular"
        width={40}
        height={40}
        animated={animated}
        className={className}
    />
);

export const SkeletonCard: React.FC<SkeletonPatternProps> = ({ className, animated = true }) => (
    <div className={cn('p-4 space-y-3', className)}>
        <Skeleton
            variant="rectangular"
            height={200}
            animated={animated}
            className="w-full"
        />
        <div className="space-y-2">
            <Skeleton
                variant="text"
                height={16}
                animated={animated}
                className="w-3/4"
            />
            <Skeleton
                variant="text"
                height={16}
                animated={animated}
                className="w-1/2"
            />
        </div>
    </div>
);

export const SkeletonList: React.FC<SkeletonPatternProps & { items?: number }> = ({
    className,
    animated = true,
    items = 3
}) => (
    <div className={cn('space-y-4', className)}>
        {Array.from({ length: items }, (_, index) => (
            <div key={index} className="flex items-center space-x-4">
                <SkeletonAvatar animated={animated} />
                <div className="flex-1 space-y-2">
                    <Skeleton
                        variant="text"
                        height={16}
                        animated={animated}
                        className="w-1/3"
                    />
                    <Skeleton
                        variant="text"
                        height={14}
                        animated={animated}
                        className="w-2/3"
                    />
                </div>
            </div>
        ))}
    </div>
);

export const SkeletonTable: React.FC<SkeletonPatternProps & { rows?: number; columns?: number }> = ({
    className,
    animated = true,
    rows = 5,
    columns = 4
}) => (
    <div className={cn('space-y-3', className)}>
        {/* Header */}
        <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}>
            {Array.from({ length: columns }, (_, index) => (
                <Skeleton
                    key={index}
                    variant="text"
                    height={16}
                    animated={animated}
                    className="w-20"
                />
            ))}
        </div>

        {/* Rows */}
        {Array.from({ length: rows }, (_, rowIndex) => (
            <div key={rowIndex} className="grid gap-4" style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}>
                {Array.from({ length: columns }, (_, colIndex) => (
                    <Skeleton
                        key={colIndex}
                        variant="text"
                        height={14}
                        animated={animated}
                        className="w-full"
                    />
                ))}
            </div>
        ))}
    </div>
);

export const SkeletonText: React.FC<SkeletonPatternProps & { lines?: number }> = ({
    className,
    animated = true,
    lines = 3
}) => (
    <Skeleton
        variant="text"
        lines={lines}
        animated={animated}
        className={className}
    />
);

export default Skeleton;
</file>

<file path="src/app/components/ui/Spinner.tsx">
import React from 'react';
import { cn } from '@/lib/utils';

interface SpinnerProps {
    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    color?: 'primary' | 'gold' | 'red' | 'white' | 'secondary';
    variant?: 'default' | 'dots' | 'bars' | 'pulse' | 'ring';
    className?: string;
}

const Spinner: React.FC<SpinnerProps> = ({
    size = 'md',
    color = 'primary',
    variant = 'default',
    className,
}) => {
    const sizeClasses = {
        xs: 'w-3 h-3',
        sm: 'w-4 h-4',
        md: 'w-6 h-6',
        lg: 'w-8 h-8',
        xl: 'w-12 h-12',
    };

    const colorClasses = {
        primary: 'border-background-primary',
        gold: 'border-primary-gold',
        red: 'border-primary-red',
        white: 'border-white',
        secondary: 'border-text-secondary',
    };

    const dotSizes = {
        xs: 'w-1.5 h-1.5',
        sm: 'w-2 h-2',
        md: 'w-3 h-3',
        lg: 'w-4 h-4',
        xl: 'w-6 h-6',
    };

    const barSizes = {
        xs: 'w-0.5 h-3',
        sm: 'w-1 h-4',
        md: 'w-1 h-6',
        lg: 'w-1.5 h-8',
        xl: 'w-2 h-12',
    };

    if (variant === 'dots') {
        return (
            <div className={cn('flex items-center space-x-1', className)}>
                {[0, 1, 2].map((i) => (
                    <div
                        key={i}
                        className={cn(
                            'rounded-full animate-bounce',
                            dotSizes[size],
                            colorClasses[color].replace('border-', 'bg-')
                        )}
                        style={{
                            animationDelay: `${i * 0.1}s`,
                        }}
                    />
                ))}
            </div>
        );
    }

    if (variant === 'bars') {
        return (
            <div className={cn('flex items-center space-x-1', className)}>
                {[0, 1, 2, 3].map((i) => (
                    <div
                        key={i}
                        className={cn(
                            'rounded-sm animate-pulse',
                            barSizes[size],
                            colorClasses[color].replace('border-', 'bg-')
                        )}
                        style={{
                            animationDelay: `${i * 0.15}s`,
                        }}
                    />
                ))}
            </div>
        );
    }

    if (variant === 'pulse') {
        return (
            <div
                className={cn(
                    'rounded-full animate-ping',
                    sizeClasses[size],
                    colorClasses[color].replace('border-', 'bg-'),
                    className
                )}
            />
        );
    }

    if (variant === 'ring') {
        return (
            <div
                className={cn(
                    'rounded-full border-2 border-solid animate-spin',
                    sizeClasses[size],
                    colorClasses[color],
                    'border-t-transparent',
                    className
                )}
            />
        );
    }

    // Default variant
    return (
        <div
            className={cn(
                'rounded-full border-2 border-solid animate-spin',
                sizeClasses[size],
                colorClasses[color],
                'border-t-transparent border-r-transparent',
                className
            )}
        />
    );
};

// Predefined spinner patterns
interface SpinnerPatternProps {
    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    color?: 'primary' | 'gold' | 'red' | 'white' | 'secondary';
    className?: string;
}

export const SpinnerOverlay: React.FC<SpinnerPatternProps & { children?: React.ReactNode }> = ({
    size = 'lg',
    color = 'gold',
    className,
    children,
}) => (
    <div className={cn('relative', className)}>
        {children}
        <div className="absolute inset-0 flex items-center justify-center bg-background-primary/80 backdrop-blur-sm">
            <Spinner size={size} color={color} />
        </div>
    </div>
);

export const SpinnerButton: React.FC<SpinnerPatternProps & { text?: string }> = ({
    size = 'sm',
    color = 'white',
    text = 'Yükleniyor...',
    className,
}) => (
    <div className={cn('flex items-center space-x-2', className)}>
        <Spinner size={size} color={color} />
        <span className="text-sm text-text-primary">{text}</span>
    </div>
);

export const SpinnerCard: React.FC<SpinnerPatternProps & {
    title?: string;
    description?: string;
}> = ({
    size = 'lg',
    color = 'gold',
    title = 'Yükleniyor...',
    description = 'Lütfen bekleyiniz',
    className,
}) => (
        <div className={cn('flex flex-col items-center text-center p-8 space-y-4', className)}>
            <Spinner size={size} color={color} />
            <div className="space-y-2">
                <h3 className="text-lg font-semibold text-text-primary">{title}</h3>
                <p className="text-sm text-text-secondary">{description}</p>
            </div>
        </div>
    );

export const SpinnerInline: React.FC<SpinnerPatternProps & { text?: string }> = ({
    size = 'xs',
    color = 'gold',
    text,
    className,
}) => (
    <div className={cn('inline-flex items-center space-x-2', className)}>
        <Spinner size={size} color={color} />
        {text && <span className="text-sm text-text-secondary">{text}</span>}
    </div>
);

export default Spinner;
</file>

<file path="src/app/components/ui/Stepper.tsx">
import React from 'react';
import { Check, Circle, X } from 'lucide-react';
import { cn } from '@/lib/utils';

interface StepperStep {
    id: string;
    title: string;
    description?: string;
    icon?: React.ReactNode;
    status?: 'pending' | 'active' | 'completed' | 'error';
    optional?: boolean;
    disabled?: boolean;
    onClick?: () => void;
}

interface StepperProps {
    steps: StepperStep[];
    currentStep?: number;
    orientation?: 'horizontal' | 'vertical';
    size?: 'sm' | 'md' | 'lg';
    variant?: 'default' | 'minimal' | 'numbered' | 'icon';
    showConnector?: boolean;
    clickable?: boolean;
    className?: string;
}

const Stepper: React.FC<StepperProps> = ({
    steps,
    currentStep = 0,
    orientation = 'horizontal',
    size = 'md',
    variant = 'default',
    showConnector = true,
    clickable = false,
    className,
}) => {
    const containerClasses = cn(
        'flex',
        orientation === 'horizontal' ? 'flex-row' : 'flex-col',
        className
    );

    return (
        <div className={containerClasses}>
            {steps.map((step, index) => {
                const stepStatus = step.status || (
                    index < currentStep ? 'completed' :
                        index === currentStep ? 'active' : 'pending'
                );

                return (
                    <React.Fragment key={step.id}>
                        <StepperItem
                            step={step}
                            index={index}
                            status={stepStatus}
                            orientation={orientation}
                            size={size}
                            variant={variant}
                            clickable={clickable}
                            isLast={index === steps.length - 1}
                        />

                        {showConnector && index < steps.length - 1 && (
                            <StepConnector
                                orientation={orientation}
                                size={size}
                                completed={stepStatus === 'completed'}
                            />
                        )}
                    </React.Fragment>
                );
            })}
        </div>
    );
};

// Individual Step Item Component
const StepperItem: React.FC<{
    step: StepperStep;
    index: number;
    status: 'pending' | 'active' | 'completed' | 'error';
    orientation: 'horizontal' | 'vertical';
    size: 'sm' | 'md' | 'lg';
    variant: 'default' | 'minimal' | 'numbered' | 'icon';
    clickable: boolean;
    isLast: boolean;
}> = ({ step, index, status, orientation, size, variant, clickable, isLast }) => {
    const handleClick = () => {
        if (clickable && !step.disabled && step.onClick) {
            step.onClick();
        }
    };

    const sizeClasses = {
        sm: {
            circle: 'w-6 h-6',
            text: 'text-sm',
            icon: 'w-3 h-3',
        },
        md: {
            circle: 'w-8 h-8',
            text: 'text-base',
            icon: 'w-4 h-4',
        },
        lg: {
            circle: 'w-10 h-10',
            text: 'text-lg',
            icon: 'w-5 h-5',
        },
    };

    const containerClasses = cn(
        'flex items-center',
        orientation === 'vertical' && 'flex-col',
        clickable && !step.disabled && 'cursor-pointer',
        step.disabled && 'opacity-50 cursor-not-allowed',
    );

    const circleClasses = cn(
        'rounded-full flex items-center justify-center font-medium border-2 transition-all',
        sizeClasses[size].circle,
        status === 'pending' && 'border-primary-dark-gray bg-background-secondary text-text-secondary',
        status === 'active' && 'border-primary-gold bg-primary-gold text-background-primary',
        status === 'completed' && 'border-primary-gold bg-primary-gold text-background-primary',
        status === 'error' && 'border-primary-red bg-primary-red text-white',
    );

    const textClasses = cn(
        'transition-colors',
        sizeClasses[size].text,
        orientation === 'horizontal' ? 'ml-2' : 'mt-2 text-center',
        status === 'pending' && 'text-text-secondary',
        status === 'active' && 'text-text-primary font-medium',
        status === 'completed' && 'text-text-primary',
        status === 'error' && 'text-primary-red',
    );

    const renderStepIcon = () => {
        if (variant === 'icon' && step.icon) {
            return <span className={sizeClasses[size].icon}>{step.icon}</span>;
        }

        if (variant === 'numbered') {
            return <span className="text-xs font-bold">{index + 1}</span>;
        }

        switch (status) {
            case 'completed':
                return <Check className={sizeClasses[size].icon} />;
            case 'error':
                return <X className={sizeClasses[size].icon} />;
            case 'active':
                return variant === 'minimal' ?
                    <Circle className={cn(sizeClasses[size].icon, 'fill-current')} /> :
                    <span className="text-xs font-bold">{index + 1}</span>;
            default:
                return variant === 'minimal' ?
                    <Circle className={sizeClasses[size].icon} /> :
                    <span className="text-xs font-bold">{index + 1}</span>;
        }
    };

    return (
        <div
            className={containerClasses}
            onClick={handleClick}
            role={clickable ? 'button' : undefined}
            tabIndex={clickable && !step.disabled ? 0 : undefined}
        >
            <div className={circleClasses}>
                {renderStepIcon()}
            </div>

            <div className={textClasses}>
                <div className="font-medium">{step.title}</div>
                {step.description && (
                    <div className="text-sm text-text-secondary mt-1">
                        {step.description}
                    </div>
                )}
                {step.optional && (
                    <div className="text-xs text-text-secondary mt-1">
                        (İsteğe bağlı)
                    </div>
                )}
            </div>
        </div>
    );
};

// Step Connector Component
const StepConnector: React.FC<{
    orientation: 'horizontal' | 'vertical';
    size: 'sm' | 'md' | 'lg';
    completed: boolean;
}> = ({ orientation, size, completed }) => {
    const sizeClasses = {
        sm: orientation === 'horizontal' ? 'h-0.5 w-8' : 'w-0.5 h-8',
        md: orientation === 'horizontal' ? 'h-0.5 w-12' : 'w-0.5 h-12',
        lg: orientation === 'horizontal' ? 'h-0.5 w-16' : 'w-0.5 h-16',
    };

    return (
        <div
            className={cn(
                'transition-colors',
                sizeClasses[size],
                completed ? 'bg-primary-gold' : 'bg-primary-dark-gray',
                orientation === 'horizontal' ? 'mx-2' : 'my-2 mx-auto',
            )}
        />
    );
};

// Predefined Stepper Patterns
export const StepperPatterns = {
    // Simple 3-step process
    Simple: (currentStep: number, props?: Partial<StepperProps>) => (
        <Stepper
            steps={[
                {
                    id: 'step1',
                    title: 'Başlangıç',
                    description: 'İlk adım',
                },
                {
                    id: 'step2',
                    title: 'İşlem',
                    description: 'Ana işlem',
                },
                {
                    id: 'step3',
                    title: 'Tamamlandı',
                    description: 'Son adım',
                },
            ]}
            currentStep={currentStep}
            {...props}
        />
    ),

    // Registration process
    Registration: (currentStep: number, props?: Partial<StepperProps>) => (
        <Stepper
            steps={[
                {
                    id: 'info',
                    title: 'Kişisel Bilgiler',
                    description: 'Ad, soyad ve iletişim bilgileri',
                },
                {
                    id: 'account',
                    title: 'Hesap Bilgileri',
                    description: 'Kullanıcı adı ve şifre',
                },
                {
                    id: 'verification',
                    title: 'Doğrulama',
                    description: 'E-posta doğrulama',
                },
                {
                    id: 'complete',
                    title: 'Tamamlandı',
                    description: 'Kayıt başarılı',
                },
            ]}
            currentStep={currentStep}
            {...props}
        />
    ),

    // Order process
    Order: (currentStep: number, props?: Partial<StepperProps>) => (
        <Stepper
            steps={[
                {
                    id: 'cart',
                    title: 'Sepet',
                    description: 'Ürün seçimi',
                },
                {
                    id: 'shipping',
                    title: 'Teslimat',
                    description: 'Adres bilgileri',
                },
                {
                    id: 'payment',
                    title: 'Ödeme',
                    description: 'Ödeme yöntemi',
                },
                {
                    id: 'confirmation',
                    title: 'Onay',
                    description: 'Sipariş onayı',
                },
            ]}
            currentStep={currentStep}
            {...props}
        />
    ),

    // Vertical minimal stepper
    Minimal: (currentStep: number, props?: Partial<StepperProps>) => (
        <Stepper
            steps={[
                {
                    id: 'step1',
                    title: 'Adım 1',
                },
                {
                    id: 'step2',
                    title: 'Adım 2',
                },
                {
                    id: 'step3',
                    title: 'Adım 3',
                },
            ]}
            currentStep={currentStep}
            variant="minimal"
            orientation="vertical"
            {...props}
        />
    ),
};

export default Stepper;
</file>

<file path="src/app/components/ui/Table.tsx">
"use client";

import React from 'react';
import { cn } from '@/lib/utils';

interface TableColumn {
    key: string;
    label: string;
    sortable?: boolean;
    align?: 'left' | 'center' | 'right';
    width?: string;
    render?: (value: any, row: any) => React.ReactNode;
}

interface TableProps {
    columns: TableColumn[];
    data: any[];
    striped?: boolean;
    hoverable?: boolean;
    bordered?: boolean;
    size?: 'sm' | 'md' | 'lg';
    loading?: boolean;
    onRowClick?: (row: any) => void;
    className?: string;
}

const Table: React.FC<TableProps> = ({
    columns,
    data,
    striped = false,
    hoverable = true,
    bordered = true,
    size = 'md',
    loading = false,
    onRowClick,
    className,
}) => {
    const sizeClasses = {
        sm: 'text-xs',
        md: 'text-sm',
        lg: 'text-base',
    };

    const cellPadding = {
        sm: 'px-3 py-2',
        md: 'px-4 py-3',
        lg: 'px-6 py-4',
    };

    return (
        <div className={cn('overflow-x-auto', className)}>
            <table className={cn(
                'min-w-full bg-background-card',
                bordered && 'border border-primary-dark-gray/20',
                sizeClasses[size]
            )}>
                <thead className="bg-background-secondary">
                    <tr>
                        {columns.map((column) => (
                            <th
                                key={column.key}
                                className={cn(
                                    'font-semibold text-text-primary border-b border-primary-dark-gray/20',
                                    cellPadding[size],
                                    column.align === 'center' && 'text-center',
                                    column.align === 'right' && 'text-right',
                                    column.align === 'left' && 'text-left'
                                )}
                                style={{ width: column.width }}
                            >
                                {column.label}
                            </th>
                        ))}
                    </tr>
                </thead>
                <tbody>
                    {loading ? (
                        <tr>
                            <td colSpan={columns.length} className={cn('text-center text-text-secondary', cellPadding[size])}>
                                <div className="flex items-center justify-center space-x-2">
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-gold"></div>
                                    <span>Yükleniyor...</span>
                                </div>
                            </td>
                        </tr>
                    ) : data.length === 0 ? (
                        <tr>
                            <td colSpan={columns.length} className={cn('text-center text-text-secondary', cellPadding[size])}>
                                Veri bulunamadı
                            </td>
                        </tr>
                    ) : (
                        data.map((row, index) => (
                            <tr
                                key={index}
                                className={cn(
                                    'border-b border-primary-dark-gray/10',
                                    striped && index % 2 === 1 && 'bg-background-secondary/30',
                                    hoverable && 'hover:bg-background-secondary/50 transition-colors',
                                    onRowClick && 'cursor-pointer'
                                )}
                                onClick={() => onRowClick?.(row)}
                            >
                                {columns.map((column) => (
                                    <td
                                        key={column.key}
                                        className={cn(
                                            'text-text-primary',
                                            cellPadding[size],
                                            column.align === 'center' && 'text-center',
                                            column.align === 'right' && 'text-right',
                                            column.align === 'left' && 'text-left'
                                        )}
                                    >
                                        {column.render ? column.render(row[column.key], row) : row[column.key]}
                                    </td>
                                ))}
                            </tr>
                        ))
                    )}
                </tbody>
            </table>
        </div>
    );
};

export default Table;
</file>

<file path="src/app/components/ui/Tabs.tsx">
'use client'
import { forwardRef, HTMLAttributes, ReactNode, useState, useEffect } from 'react'
import { LucideIcon } from 'lucide-react'

interface TabItem {
    id: string
    label: string
    icon?: LucideIcon
    disabled?: boolean
    badge?: string | number
    content?: ReactNode
}

interface TabsProps extends HTMLAttributes<HTMLDivElement> {
    items: TabItem[]
    defaultValue?: string
    value?: string
    onValueChange?: (value: string) => void
    variant?: 'default' | 'pills' | 'underline' | 'cards'
    size?: 'sm' | 'md' | 'lg'
    orientation?: 'horizontal' | 'vertical'
    fullWidth?: boolean
    centered?: boolean
    scrollable?: boolean
    keepMounted?: boolean // Keep all tab content mounted
}

const Tabs = forwardRef<HTMLDivElement, TabsProps>(
    ({
        items,
        defaultValue,
        value,
        onValueChange,
        variant = 'default',
        size = 'md',
        orientation = 'horizontal',
        fullWidth = false,
        centered = false,
        scrollable = true,
        keepMounted = false,
        className = '',
        ...props
    }, ref) => {
        const [activeTab, setActiveTab] = useState<string>(() => {
            if (value) return value
            if (defaultValue) return defaultValue
            return items.find(item => !item.disabled)?.id || items[0]?.id || ''
        })

        useEffect(() => {
            if (value !== undefined) {
                setActiveTab(value)
            }
        }, [value])

        const handleTabChange = (tabId: string) => {
            const tab = items.find(item => item.id === tabId)
            if (tab && !tab.disabled) {
                setActiveTab(tabId)
                onValueChange?.(tabId)
            }
        }

        const sizeClasses = {
            sm: 'text-sm px-3 py-1.5',
            md: 'text-sm px-4 py-2',
            lg: 'text-base px-5 py-3'
        }

        const variantClasses = {
            default: {
                tab: 'border-b-2 border-transparent hover:border-primary-gold/50 hover:text-text-primary',
                activeTab: 'border-primary-gold text-primary-gold font-semibold',
                container: 'border-b border-primary-gold/20'
            },
            pills: {
                tab: 'rounded-lg hover:bg-primary-gold/10 hover:text-text-primary',
                activeTab: 'bg-primary-gold text-primary-dark-gray font-semibold',
                container: ''
            },
            underline: {
                tab: 'border-b-2 border-transparent hover:border-primary-gold/50 hover:text-text-primary',
                activeTab: 'border-primary-gold text-primary-gold font-semibold',
                container: 'border-b border-primary-gold/20'
            },
            cards: {
                tab: 'border border-transparent rounded-t-lg hover:bg-primary-gold/10 hover:text-text-primary',
                activeTab: 'border-primary-gold/30 bg-background-card text-text-primary font-semibold border-b-background-card',
                container: 'border-b border-primary-gold/20'
            }
        }

        const orientationClasses = {
            horizontal: {
                container: 'flex-col',
                tabList: `flex ${scrollable ? 'overflow-x-auto' : ''} ${centered ? 'justify-center' : ''} ${fullWidth ? 'w-full' : ''}`,
                tab: fullWidth ? 'flex-1' : '',
                content: 'mt-4'
            },
            vertical: {
                container: 'flex-row',
                tabList: `flex flex-col ${scrollable ? 'overflow-y-auto' : ''} space-y-1 min-w-max`,
                tab: 'justify-start',
                content: 'ml-4 flex-1'
            }
        }

        const renderTabContent = () => {
            if (keepMounted) {
                return items.map(item => (
                    <div
                        key={item.id}
                        className={`${activeTab === item.id ? 'block' : 'hidden'}`}
                        role="tabpanel"
                        aria-labelledby={`tab-${item.id}`}
                    >
                        {item.content}
                    </div>
                ))
            }

            const activeItem = items.find(item => item.id === activeTab)
            return activeItem?.content ? (
                <div role="tabpanel" aria-labelledby={`tab-${activeTab}`}>
                    {activeItem.content}
                </div>
            ) : null
        }

        return (
            <div
                ref={ref}
                className={`flex ${orientationClasses[orientation].container} ${className}`}
                {...props}
            >
                {/* Tab List */}
                <div
                    className={`${orientationClasses[orientation].tabList} ${variantClasses[variant].container}`}
                    role="tablist"
                >
                    {items.map((item) => {
                        const isActive = activeTab === item.id
                        const Icon = item.icon

                        return (
                            <button
                                key={item.id}
                                id={`tab-${item.id}`}
                                role="tab"
                                aria-selected={isActive}
                                aria-controls={`tabpanel-${item.id}`}
                                disabled={item.disabled}
                                onClick={() => handleTabChange(item.id)}
                                className={`
                  ${sizeClasses[size]}
                  ${orientationClasses[orientation].tab}
                  ${variantClasses[variant].tab}
                  ${isActive ? variantClasses[variant].activeTab : ''}
                  ${item.disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
                  transition-all duration-200 font-helvetica
                  text-text-secondary
                  focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-offset-1
                  inline-flex items-center justify-center space-x-2
                  relative
                `}
                            >
                                {Icon && (
                                    <Icon className={`
                    ${size === 'sm' ? 'w-4 h-4' : size === 'md' ? 'w-4 h-4' : 'w-5 h-5'}
                  `} />
                                )}
                                <span>{item.label}</span>
                                {item.badge && (
                                    <span className="ml-2 px-2 py-0.5 text-xs bg-primary-gold/20 text-primary-gold rounded-full">
                                        {item.badge}
                                    </span>
                                )}
                            </button>
                        )
                    })}
                </div>

                {/* Tab Content */}
                <div className={`${orientationClasses[orientation].content}`}>
                    {renderTabContent()}
                </div>
            </div>
        )
    }
)

Tabs.displayName = 'Tabs'

export default Tabs

// Alt component'ler
export const TabList = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`flex ${className}`} role="tablist" {...props}>
        {children}
    </div>
)

export const Tab = ({
    children,
    className = '',
    isActive = false,
    disabled = false,
    ...props
}: HTMLAttributes<HTMLButtonElement> & { isActive?: boolean; disabled?: boolean }) => (
    <button
        role="tab"
        aria-selected={isActive}
        disabled={disabled}
        className={`
      px-4 py-2 text-sm font-medium transition-all duration-200 font-helvetica
      ${isActive
                ? 'text-primary-gold border-b-2 border-primary-gold font-semibold'
                : 'text-text-secondary hover:text-text-primary border-b-2 border-transparent hover:border-primary-gold/50'
            }
      ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
      focus:outline-none focus:ring-2 focus:ring-primary-gold/50 focus:ring-offset-1
      ${className}
    `}
        {...props}
    >
        {children}
    </button>
)

export const TabPanel = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`mt-4 ${className}`} role="tabpanel" {...props}>
        {children}
    </div>
)

export const TabPanels = ({ children, className = '', ...props }: HTMLAttributes<HTMLDivElement>) => (
    <div className={`mt-4 ${className}`} {...props}>
        {children}
    </div>
)
</file>

<file path="src/app/components/ui/Toast.tsx">
'use client'
import React, { useEffect, useState } from 'react';
import { X, CheckCircle, AlertCircle, Info, AlertTriangle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ToastProps {
    id?: string;
    type?: 'success' | 'error' | 'warning' | 'info';
    title?: string;
    message: string;
    duration?: number;
    position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
    closable?: boolean;
    onClose?: () => void;
    className?: string;
}

const Toast: React.FC<ToastProps> = ({
    id,
    type = 'info',
    title,
    message,
    duration = 5000,
    position = 'top-right',
    closable = true,
    onClose,
    className,
}) => {
    const [isVisible, setIsVisible] = useState(true);
    const [isAnimating, setIsAnimating] = useState(false);

    useEffect(() => {
        if (duration > 0) {
            const timer = setTimeout(() => {
                handleClose();
            }, duration);

            return () => clearTimeout(timer);
        }
    }, [duration]);

    const handleClose = () => {
        setIsAnimating(true);
        setTimeout(() => {
            setIsVisible(false);
            onClose?.();
        }, 200);
    };

    const typeConfig = {
        success: {
            icon: CheckCircle,
            bgColor: 'bg-green-600/20',
            borderColor: 'border-green-600/40',
            iconColor: 'text-green-400',
            titleColor: 'text-green-300',
        },
        error: {
            icon: AlertCircle,
            bgColor: 'bg-primary-red/20',
            borderColor: 'border-primary-red/40',
            iconColor: 'text-primary-red',
            titleColor: 'text-primary-red',
        },
        warning: {
            icon: AlertTriangle,
            bgColor: 'bg-yellow-600/20',
            borderColor: 'border-yellow-600/40',
            iconColor: 'text-yellow-400',
            titleColor: 'text-yellow-300',
        },
        info: {
            icon: Info,
            bgColor: 'bg-primary-gold/20',
            borderColor: 'border-primary-gold/40',
            iconColor: 'text-primary-gold',
            titleColor: 'text-primary-gold',
        },
    };

    const positionClasses = {
        'top-right': 'top-4 right-4',
        'top-left': 'top-4 left-4',
        'bottom-right': 'bottom-4 right-4',
        'bottom-left': 'bottom-4 left-4',
        'top-center': 'top-4 left-1/2 transform -translate-x-1/2',
        'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2',
    };

    const animationClasses = {
        'top-right': isAnimating ? 'animate-slideOutRight' : 'animate-slideInRight',
        'top-left': isAnimating ? 'animate-slideOutLeft' : 'animate-slideInLeft',
        'bottom-right': isAnimating ? 'animate-slideOutRight' : 'animate-slideInRight',
        'bottom-left': isAnimating ? 'animate-slideOutLeft' : 'animate-slideInLeft',
        'top-center': isAnimating ? 'animate-slideOutUp' : 'animate-slideInDown',
        'bottom-center': isAnimating ? 'animate-slideOutDown' : 'animate-slideInUp',
    };

    const config = typeConfig[type];
    const IconComponent = config.icon;

    if (!isVisible) return null;

    return (
        <div
            className={cn(
                'fixed z-50 min-w-80 max-w-md p-4 rounded-lg shadow-lg border backdrop-blur-sm',
                config.bgColor,
                config.borderColor,
                positionClasses[position],
                animationClasses[position],
                className
            )}
        >
            <div className="flex items-start gap-3">
                <IconComponent className={cn('h-5 w-5 mt-0.5 flex-shrink-0', config.iconColor)} />

                <div className="flex-1 min-w-0">
                    {title && (
                        <h4 className={cn('font-semibold text-sm mb-1', config.titleColor)}>
                            {title}
                        </h4>
                    )}
                    <p className="text-sm text-text-primary">
                        {message}
                    </p>
                </div>

                {closable && (
                    <button
                        onClick={handleClose}
                        className="flex-shrink-0 p-1 rounded-full hover:bg-background-secondary/50 transition-colors"
                    >
                        <X className="h-4 w-4 text-text-secondary" />
                    </button>
                )}
            </div>

            {/* Progress bar */}
            {duration > 0 && (
                <div className="mt-3 h-1 bg-background-secondary/30 rounded-full overflow-hidden">
                    <div
                        className={cn('h-full rounded-full', config.iconColor.replace('text-', 'bg-'))}
                        style={{
                            animation: `toast-progress ${duration}ms linear forwards`
                        }}
                    />
                </div>
            )}
        </div>
    );
};

// Toast Container component
interface ToastContainerProps {
    toasts: (ToastProps & { id: string })[];
    onRemove: (id: string) => void;
}

export const ToastContainer: React.FC<ToastContainerProps> = ({ toasts, onRemove }) => {
    return (
        <>
            {toasts.map((toast) => (
                <Toast
                    key={toast.id}
                    {...toast}
                    onClose={() => onRemove(toast.id)}
                />
            ))}
        </>
    );
};

export default Toast;
</file>

<file path="src/app/components/ui/Tooltip.tsx">
'use client'
import React, { useState, useRef, useEffect } from 'react';
import { cn } from '@/lib/utils';

interface TooltipProps {
    content: string;
    children: React.ReactNode;
    position?: 'top' | 'bottom' | 'left' | 'right';
    size?: 'sm' | 'md' | 'lg';
    delay?: number;
    disabled?: boolean;
    className?: string;
    contentClassName?: string;
}

const Tooltip: React.FC<TooltipProps> = ({
    content,
    children,
    position = 'top',
    size = 'md',
    delay = 300,
    disabled = false,
    className,
    contentClassName,
}) => {
    const [isVisible, setIsVisible] = useState(false);
    const [showTooltip, setShowTooltip] = useState(false);
    const timeoutRef = useRef<NodeJS.Timeout | null>(null);
    const tooltipRef = useRef<HTMLDivElement>(null);

    const sizeClasses = {
        sm: 'px-2 py-1 text-xs',
        md: 'px-3 py-2 text-sm',
        lg: 'px-4 py-3 text-base',
    };

    const arrowClasses = {
        top: 'bottom-[-4px] left-1/2 transform -translate-x-1/2 border-l-4 border-r-4 border-t-4 border-l-transparent border-r-transparent border-t-background-secondary',
        bottom: 'top-[-4px] left-1/2 transform -translate-x-1/2 border-l-4 border-r-4 border-b-4 border-l-transparent border-r-transparent border-b-background-secondary',
        left: 'right-[-4px] top-1/2 transform -translate-y-1/2 border-t-4 border-b-4 border-l-4 border-t-transparent border-b-transparent border-l-background-secondary',
        right: 'left-[-4px] top-1/2 transform -translate-y-1/2 border-t-4 border-b-4 border-r-4 border-t-transparent border-b-transparent border-r-background-secondary',
    };

    const positionClasses = {
        top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',
        bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',
        left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',
        right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',
    };

    const handleMouseEnter = () => {
        if (disabled) return;

        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }

        timeoutRef.current = setTimeout(() => {
            setIsVisible(true);
            setTimeout(() => setShowTooltip(true), 10);
        }, delay);
    };

    const handleMouseLeave = () => {
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }

        setShowTooltip(false);
        setTimeout(() => setIsVisible(false), 150);
    };

    useEffect(() => {
        return () => {
            if (timeoutRef.current) {
                clearTimeout(timeoutRef.current);
            }
        };
    }, []);

    if (!content || disabled) {
        return <>{children}</>;
    }

    return (
        <div
            className={cn('relative inline-block', className)}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
        >
            {children}

            {isVisible && (
                <div
                    ref={tooltipRef}
                    className={cn(
                        'absolute z-50 whitespace-nowrap rounded-lg bg-background-secondary border border-primary-dark-gray/20 text-text-primary shadow-lg transition-all duration-150',
                        positionClasses[position],
                        sizeClasses[size],
                        showTooltip ? 'opacity-100 scale-100' : 'opacity-0 scale-95',
                        contentClassName
                    )}
                >
                    {content}

                    {/* Arrow */}
                    <div
                        className={cn(
                            'absolute w-0 h-0',
                            arrowClasses[position]
                        )}
                    />
                </div>
            )}
        </div>
    );
};

export default Tooltip;
</file>

<file path="src/app/components/ui/UserCard.tsx">
import React from 'react';
import {
    Mail,
    Phone,
    MapPin,
    Calendar,
    User,
    MessageCircle,
    UserPlus,
    Settings,
    MoreHorizontal
} from 'lucide-react';
import { cn } from '@/lib/utils';
import Avatar from './Avatar';
import Badge from './Badge';
import Button from './Button';

interface UserCardProps {
    user: {
        id: string;
        name: string;
        email?: string;
        phone?: string;
        avatar?: string;
        role?: string;
        department?: string;
        location?: string;
        joinDate?: string;
        status?: 'online' | 'offline' | 'away' | 'busy';
        bio?: string;
        stats?: {
            projects?: number;
            tasks?: number;
            followers?: number;
            following?: number;
        };
        badges?: Array<{
            label: string;
            variant?: 'default' | 'outline' | 'solid' | 'soft';
            color?: 'primary' | 'gold' | 'red' | 'green' | 'blue';
        }>;
    };
    variant?: 'default' | 'compact' | 'detailed' | 'minimal';
    size?: 'sm' | 'md' | 'lg';
    interactive?: boolean;
    showActions?: boolean;
    actions?: React.ReactNode;
    onMessage?: () => void;
    onConnect?: () => void;
    onProfile?: () => void;
    className?: string;
}

const UserCard: React.FC<UserCardProps> = ({
    user,
    variant = 'default',
    size = 'md',
    interactive = true,
    showActions = true,
    actions,
    onMessage,
    onConnect,
    onProfile,
    className,
}) => {
    const sizeClasses = {
        sm: 'p-4',
        md: 'p-6',
        lg: 'p-8',
    };

    const avatarSizes = {
        sm: 'md' as const,
        md: 'lg' as const,
        lg: 'xl' as const,
    };

    const cardClasses = cn(
        'bg-background-card border border-primary-dark-gray/20 rounded-lg transition-all duration-200',
        sizeClasses[size],
        interactive && 'hover:shadow-lg hover:border-primary-gold/30',
        className
    );

    const renderActions = () => {
        if (actions) return actions;

        if (!showActions) return null;

        return (
            <div className="flex gap-2">
                {onMessage && (
                    <Button
                        variant="ghost"
                        size="sm"
                        onClick={onMessage}
                        className="flex-1"
                    >
                        <MessageCircle size={16} className="mr-1" />
                        Mesaj
                    </Button>
                )}
                {onConnect && (
                    <Button
                        variant="ghost"
                        size="sm"
                        onClick={onConnect}
                        className="flex-1"
                    >
                        <UserPlus size={16} className="mr-1" />
                        Bağlan
                    </Button>
                )}
                {onProfile && (
                    <Button
                        variant="ghost"
                        size="sm"
                        onClick={onProfile}
                    >
                        <Settings size={16} />
                    </Button>
                )}
            </div>
        );
    };

    const renderStats = () => {
        if (!user.stats) return null;

        const stats = Object.entries(user.stats).filter(([_, value]) => value !== undefined);

        if (stats.length === 0) return null;

        return (
            <div className="flex justify-around py-3 border-t border-primary-dark-gray/20">
                {stats.map(([key, value]) => (
                    <div key={key} className="text-center">
                        <div className="text-lg font-semibold text-text-primary">{value}</div>
                        <div className="text-sm text-text-secondary capitalize">{key}</div>
                    </div>
                ))}
            </div>
        );
    };

    const renderBadges = () => {
        if (!user.badges || user.badges.length === 0) return null;

        return (
            <div className="flex flex-wrap gap-2 mt-2">
                {user.badges.map((badge, index) => (
                    <Badge
                        key={index}
                        variant={badge.variant || 'soft'}
                        color={badge.color === 'green' ? 'primary' : badge.color === 'blue' ? 'secondary' : badge.color || 'primary'}
                        size="sm"
                    >
                        {badge.label}
                    </Badge>
                ))}
            </div>
        );
    };

    if (variant === 'minimal') {
        return (
            <div className={cardClasses}>
                <div className="flex items-center space-x-3">
                    <Avatar
                        src={user.avatar}
                        fallback={user.name}
                        size={avatarSizes[size]}
                        status={user.status}
                        showStatus
                    />
                    <div className="flex-1 min-w-0">
                        <div className="font-medium text-text-primary truncate">{user.name}</div>
                        {user.role && (
                            <div className="text-sm text-text-secondary truncate">{user.role}</div>
                        )}
                    </div>
                    {showActions && (
                        <Button variant="ghost" size="sm">
                            <MoreHorizontal size={16} />
                        </Button>
                    )}
                </div>
            </div>
        );
    }

    if (variant === 'compact') {
        return (
            <div className={cardClasses}>
                <div className="flex items-start space-x-4">
                    <Avatar
                        src={user.avatar}
                        fallback={user.name}
                        size={avatarSizes[size]}
                        status={user.status}
                        showStatus
                    />
                    <div className="flex-1 min-w-0">
                        <div className="font-semibold text-text-primary">{user.name}</div>
                        {user.role && (
                            <div className="text-sm text-text-secondary">{user.role}</div>
                        )}
                        {user.email && (
                            <div className="text-sm text-text-secondary flex items-center mt-1">
                                <Mail size={14} className="mr-1" />
                                {user.email}
                            </div>
                        )}
                        {renderBadges()}
                    </div>
                </div>
                {showActions && (
                    <div className="mt-4">
                        {renderActions()}
                    </div>
                )}
            </div>
        );
    }

    if (variant === 'detailed') {
        return (
            <div className={cardClasses}>
                <div className="text-center">
                    <Avatar
                        src={user.avatar}
                        fallback={user.name}
                        size="2xl"
                        status={user.status}
                        showStatus
                        className="mx-auto mb-4"
                    />
                    <div className="mb-4">
                        <h3 className="text-xl font-semibold text-text-primary">{user.name}</h3>
                        {user.role && (
                            <p className="text-text-secondary">{user.role}</p>
                        )}
                        {user.department && (
                            <p className="text-sm text-text-secondary">{user.department}</p>
                        )}
                    </div>

                    {user.bio && (
                        <p className="text-sm text-text-secondary mb-4 text-center">{user.bio}</p>
                    )}

                    <div className="space-y-2 mb-4">
                        {user.email && (
                            <div className="flex items-center justify-center text-sm text-text-secondary">
                                <Mail size={14} className="mr-2" />
                                {user.email}
                            </div>
                        )}
                        {user.phone && (
                            <div className="flex items-center justify-center text-sm text-text-secondary">
                                <Phone size={14} className="mr-2" />
                                {user.phone}
                            </div>
                        )}
                        {user.location && (
                            <div className="flex items-center justify-center text-sm text-text-secondary">
                                <MapPin size={14} className="mr-2" />
                                {user.location}
                            </div>
                        )}
                        {user.joinDate && (
                            <div className="flex items-center justify-center text-sm text-text-secondary">
                                <Calendar size={14} className="mr-2" />
                                {user.joinDate}
                            </div>
                        )}
                    </div>

                    {renderBadges()}
                    {renderStats()}

                    {showActions && (
                        <div className="mt-4">
                            {renderActions()}
                        </div>
                    )}
                </div>
            </div>
        );
    }

    // Default variant
    return (
        <div className={cardClasses}>
            <div className="flex items-start space-x-4">
                <Avatar
                    src={user.avatar}
                    fallback={user.name}
                    size={avatarSizes[size]}
                    status={user.status}
                    showStatus
                />
                <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between mb-1">
                        <h3 className="font-semibold text-text-primary truncate">{user.name}</h3>
                        {user.status && (
                            <Badge
                                variant="soft"
                                color={user.status === 'online' ? 'primary' : 'secondary'}
                                size="sm"
                            >
                                {user.status}
                            </Badge>
                        )}
                    </div>

                    {user.role && (
                        <p className="text-sm text-text-secondary">{user.role}</p>
                    )}

                    {user.department && (
                        <p className="text-sm text-text-secondary">{user.department}</p>
                    )}

                    <div className="mt-2 space-y-1">
                        {user.email && (
                            <div className="flex items-center text-sm text-text-secondary">
                                <Mail size={14} className="mr-2" />
                                {user.email}
                            </div>
                        )}
                        {user.location && (
                            <div className="flex items-center text-sm text-text-secondary">
                                <MapPin size={14} className="mr-2" />
                                {user.location}
                            </div>
                        )}
                    </div>

                    {renderBadges()}
                </div>
            </div>

            {showActions && (
                <div className="mt-4">
                    {renderActions()}
                </div>
            )}
        </div>
    );
};

// Predefined UserCard Patterns
export const UserCardPatterns = {
    // Employee card for admin dashboard
    Employee: (user: UserCardProps['user'], props?: Partial<UserCardProps>) => (
        <UserCard
            user={user}
            variant="default"
            size="md"
            showActions
            {...props}
        />
    ),

    // Team member card
    TeamMember: (user: UserCardProps['user'], props?: Partial<UserCardProps>) => (
        <UserCard
            user={user}
            variant="compact"
            size="sm"
            showActions
            {...props}
        />
    ),

    // Profile card for user profiles
    Profile: (user: UserCardProps['user'], props?: Partial<UserCardProps>) => (
        <UserCard
            user={user}
            variant="detailed"
            size="lg"
            showActions
            {...props}
        />
    ),

    // Contact card for directories
    Contact: (user: UserCardProps['user'], props?: Partial<UserCardProps>) => (
        <UserCard
            user={user}
            variant="minimal"
            size="sm"
            interactive={false}
            showActions={false}
            {...props}
        />
    ),
};

export default UserCard;
</file>

<file path="src/app/components/ui/ViewToggle.tsx">
import React from 'react';
import { LucideIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ViewOption {
    id: string;
    label: string;
    icon: LucideIcon;
    disabled?: boolean;
}

interface ViewToggleProps {
    options: ViewOption[];
    activeView: string;
    onViewChange: (viewId: string) => void;
    size?: 'sm' | 'md' | 'lg';
    variant?: 'default' | 'minimal' | 'segmented';
    className?: string;
    showLabels?: boolean;
    disabled?: boolean;
}

const ViewToggle: React.FC<ViewToggleProps> = ({
    options,
    activeView,
    onViewChange,
    size = 'md',
    variant = 'default',
    className,
    showLabels = false,
    disabled = false,
}) => {
    const sizeClasses = {
        sm: 'h-8 px-2 text-xs',
        md: 'h-9 px-3 text-sm',
        lg: 'h-10 px-4 text-base',
    };

    const iconSizes = {
        sm: 14,
        md: 16,
        lg: 18,
    };

    const getVariantClasses = () => {
        switch (variant) {
            case 'minimal':
                return {
                    container: 'bg-transparent border-0 p-0 gap-1',
                    button: 'rounded-md border-0 hover:bg-background-light-soft dark:hover:bg-background-soft',
                    activeButton: 'bg-primary-gold/20 text-primary-gold border-primary-gold/30',
                    inactiveButton: 'text-text-light-secondary dark:text-text-secondary',
                };
            case 'segmented':
                return {
                    container: 'bg-background-light-soft dark:bg-background-soft p-1 rounded-lg border border-gray-200 dark:border-gray-700',
                    button: 'rounded-md border-0 transition-all duration-200',
                    activeButton: 'bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark shadow-sm',
                    inactiveButton: 'text-text-light-secondary dark:text-text-secondary hover:text-text-on-light dark:hover:text-text-on-dark',
                };
            default:
                return {
                    container: 'bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 rounded-lg',
                    button: 'border-r border-gray-200 dark:border-gray-700 last:border-r-0 transition-all duration-200',
                    activeButton: 'bg-primary-gold text-primary-dark-gray',
                    inactiveButton: 'text-text-light-secondary dark:text-text-secondary hover:bg-background-light-soft dark:hover:bg-background-soft hover:text-text-on-light dark:hover:text-text-on-dark',
                };
        }
    };

    const variantClasses = getVariantClasses();

    const handleViewChange = (viewId: string) => {
        if (disabled) return;
        
        const option = options.find(opt => opt.id === viewId);
        if (option?.disabled) return;
        
        onViewChange(viewId);
    };

    return (
        <div className={cn(
            'inline-flex items-center',
            variantClasses.container,
            disabled && 'opacity-50 cursor-not-allowed',
            className
        )}>
            {options.map((option, index) => {
                const isActive = activeView === option.id;
                const isDisabled = disabled || option.disabled;
                
                return (
                    <button
                        key={option.id}
                        onClick={() => handleViewChange(option.id)}
                        disabled={isDisabled}
                        className={cn(
                            'inline-flex items-center justify-center font-medium transition-all duration-200',
                            'focus:outline-none focus:ring-2 focus:ring-primary-gold/50',
                            'disabled:opacity-50 disabled:cursor-not-allowed',
                            sizeClasses[size],
                            variantClasses.button,
                            isActive 
                                ? variantClasses.activeButton 
                                : variantClasses.inactiveButton,
                            // First button rounding
                            variant === 'default' && index === 0 && 'rounded-l-lg',
                            // Last button rounding
                            variant === 'default' && index === options.length - 1 && 'rounded-r-lg',
                            // Show labels spacing
                            showLabels && 'gap-2'
                        )}
                        title={option.label}
                    >
                        <option.icon size={iconSizes[size]} />
                        {showLabels && (
                            <span className="hidden sm:inline">
                                {option.label}
                            </span>
                        )}
                    </button>
                );
            })}
        </div>
    );
};

export default ViewToggle;

// Pre-defined common view options
export const commonViewOptions = {
    grid: {
        id: 'grid',
        label: 'Kart Görünümü',
        icon: require('lucide-react').Grid,
    },
    list: {
        id: 'list',
        label: 'Liste Görünümü',
        icon: require('lucide-react').List,
    },
    table: {
        id: 'table',
        label: 'Tablo Görünümü',
        icon: require('lucide-react').Table,
    },
    kanban: {
        id: 'kanban',
        label: 'Kanban Görünümü',
        icon: require('lucide-react').Columns,
    },
    timeline: {
        id: 'timeline',
        label: 'Zaman Çizelgesi',
        icon: require('lucide-react').Clock,
    },
    calendar: {
        id: 'calendar',
        label: 'Takvim Görünümü',
        icon: require('lucide-react').Calendar,
    },
    map: {
        id: 'map',
        label: 'Harita Görünümü',
        icon: require('lucide-react').Map,
    },
};
</file>

<file path="src/app/components/Content.tsx">
"use client";

import { Users, ShoppingCart, DollarSign, CheckCircle, Truck, Clock, TrendingUp, ArrowUpRight, Activity } from 'lucide-react'
import { Card, Badge, ProgressBar, Table } from './ui'

export default function Content() {
    // Dashboard verileri
    const statsData = [
        {
            title: 'Toplam Müşteri',
            value: '1,250',
            change: '+12%',
            changeType: 'positive',
            icon: Users,
            color: 'blue'
        },
        {
            title: 'Toplam Sipariş',
            value: '3,420',
            change: '+8%',
            changeType: 'positive',
            icon: ShoppingCart,
            color: 'green'
        },
        {
            title: 'Toplam Gelir',
            value: '₺125,000',
            change: '+15%',
            changeType: 'positive',
            icon: DollarSign,
            color: 'purple'
        },
        {
            title: 'Aktif Kampanyalar',
            value: '12',
            change: '+3',
            changeType: 'positive',
            icon: Activity,
            color: 'gold'
        }
    ]

    // Son siparişler tablosu için sütun tanımları
    const orderColumns = [
        { key: 'orderId', label: 'Sipariş ID', width: '120px' },
        { key: 'customer', label: 'Müşteri', width: '200px' },
        { key: 'date', label: 'Tarih', width: '120px' },
        {
            key: 'status',
            label: 'Durum',
            width: '150px',
            render: (value: string) => {
                let color = 'secondary';
                let icon = Clock;

                switch (value) {
                    case 'Tamamlandı':
                        color = 'gold';
                        icon = CheckCircle;
                        break;
                    case 'Gönderildi':
                        color = 'accent';
                        icon = Truck;
                        break;
                    case 'İşleniyor':
                        color = 'secondary';
                        icon = Clock;
                        break;
                }

                const IconComponent = icon;
                return (
                    <Badge
                        color={color as any}
                        variant="soft"
                        className="flex items-center gap-1"
                    >
                        <IconComponent className="w-3 h-3" />
                        {value}
                    </Badge>
                );
            }
        },
        { key: 'total', label: 'Toplam', width: '100px' }
    ];

    // Son siparişler verisi
    const recentOrders = [
        { orderId: '#1001', customer: 'Zeynep Demir', date: '2024-07-26', status: 'Tamamlandı', total: '₺150' },
        { orderId: '#1002', customer: 'Emre Yılmaz', date: '2024-07-25', status: 'Gönderildi', total: '₺200' },
        { orderId: '#1003', customer: 'Deniz Kaya', date: '2024-07-24', status: 'İşleniyor', total: '₺100' },
        { orderId: '#1004', customer: 'Can Ahmet', date: '2024-07-23', status: 'Tamamlandı', total: '₺300' },
        { orderId: '#1005', customer: 'Ayşe Aksoy', date: '2024-07-22', status: 'Gönderildi', total: '₺250' }
    ];

    // Performans metrikleri
    const performanceMetrics = [
        { label: 'Satış Hedefi', value: 75, color: 'gold' },
        { label: 'Müşteri Memnuniyeti', value: 92, color: 'accent' },
        { label: 'Stok Durumu', value: 68, color: 'primary' },
        { label: 'Teslimat Performansı', value: 85, color: 'secondary' }
    ];

    return (
        <div className="flex-1 overflow-auto bg-background-primary">
            <div className="p-6">
                {/* Sayfa Başlığı */}
                <div className="mb-8">
                    <div className="flex items-center space-x-3 mb-4">
                        <div className="w-2 h-10 bg-gradient-gold rounded-full"></div>
                        <div>
                            <h2 className="text-4xl font-bold text-text-primary font-helvetica">Admin Dashboard</h2>
                            <p className="text-text-secondary font-inter mt-2">Bugünün genel görünümü ve performans metrikleri</p>
                        </div>
                    </div>
                    <div className="w-32 h-1 bg-gradient-gold rounded-full"></div>
                </div>

                {/* İstatistik Kartları */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    {statsData.map((stat, index) => {
                        const IconComponent = stat.icon;
                        return (
                            <Card key={index} className="bg-background-card border border-primary-gold/20 hover:shadow-card transition-all duration-300">
                                <div className="p-6">
                                    <div className="flex items-center justify-between mb-4">
                                        <div className={`p-3 rounded-full bg-${stat.color}-50`}>
                                            <IconComponent className={`w-6 h-6 text-${stat.color}-600`} />
                                        </div>
                                        <div className="flex items-center text-text-accent text-sm font-semibold">
                                            <ArrowUpRight className="w-4 h-4 mr-1" />
                                            {stat.change}
                                        </div>
                                    </div>
                                    <h3 className="text-text-secondary text-sm font-medium mb-2 font-inter">{stat.title}</h3>
                                    <p className="text-3xl font-bold text-text-primary font-helvetica">{stat.value}</p>
                                </div>
                            </Card>
                        );
                    })}
                </div>

                {/* Alt Grid - Performans ve Siparişler */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                    {/* Performans Metrikleri */}
                    <Card className="bg-background-card border border-primary-gold/20">
                        <div className="p-6 border-b border-primary-gold/20">
                            <div className="flex items-center space-x-2 mb-2">
                                <TrendingUp className="w-5 h-5 text-text-accent" />
                                <h3 className="text-xl font-semibold text-text-primary font-helvetica">Performans Metrikleri</h3>
                            </div>
                            <p className="text-text-secondary font-inter">Güncel performans göstergeleri</p>
                        </div>
                        <div className="p-6 space-y-6">
                            {performanceMetrics.map((metric, index) => (
                                <div key={index} className="space-y-2">
                                    <div className="flex justify-between items-center">
                                        <span className="text-text-primary font-medium">{metric.label}</span>
                                        <span className="text-text-secondary text-sm">{metric.value}%</span>
                                    </div>
                                    <ProgressBar
                                        value={metric.value}
                                        color={metric.color as any}
                                        size="sm"
                                        className="w-full"
                                    />
                                </div>
                            ))}
                        </div>
                    </Card>

                    {/* Hızlı İstatistikler */}
                    <div className="lg:col-span-2">
                        <Card className="bg-background-card border border-primary-gold/20 h-full">
                            <div className="p-6 border-b border-primary-gold/20">
                                <h3 className="text-xl font-semibold text-text-primary font-helvetica mb-2">Son Siparişler</h3>
                                <p className="text-text-secondary font-inter">En son alınan siparişlerin listesi</p>
                            </div>
                            <div className="p-6">
                                <Table
                                    columns={orderColumns}
                                    data={recentOrders}
                                    hoverable
                                    striped
                                />
                            </div>
                        </Card>
                    </div>
                </div>

                {/* Alt Bilgi */}
                <div className="text-center pt-6 border-t border-primary-gold/20">
                    <p className="text-text-secondary font-inter mb-4">
                        NinetyNineAdmin Dashboard - Modern yönetim paneli
                    </p>
                    <div className="flex justify-center items-center space-x-2">
                        <div className="w-2 h-2 bg-primary-gold rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/60 rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/30 rounded-full"></div>
                    </div>
                </div>
            </div>
        </div>
    )
}
</file>

<file path="src/app/components/Header.tsx">
import { LayoutDashboard, User } from 'lucide-react'

export default function Header() {
    return (
        <div className="flex items-center justify-between px-10 py-3 border-b border-gray-200">
            <div className="flex items-center gap-4">
                <LayoutDashboard className="w-4 h-4 text-gray-700" />
                <h1 className="text-lg font-bold text-gray-900">Yönetici Paneli</h1>
            </div>
            <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                <User className="w-6 h-6 text-gray-600" />
            </div>
        </div>
    )
}
</file>

<file path="src/app/components/Sidebar.tsx">
'use client'
import {
    Home,
    Users,
    Building,
    DollarSign,
    Megaphone,
    Wrench,
    BarChart3,
    Settings,
    ChevronRight,
    ChevronDown,
    UserPlus,
    Clock,
    List,
    MapPin,
    Activity,
    FileText,
    Receipt,
    CreditCard,
    MessageSquare,
    CheckCircle,
    PieChart,
    Building2,
    UserCog
} from 'lucide-react'
import { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import Header from './Header'

interface SubMenuItem {
    label: string;
    href: string;
    icon?: any;
}

interface MenuItem {
    icon: any;
    label: string;
    href?: string;
    hasSubmenu?: boolean;
    submenu?: SubMenuItem[];
}

export default function Sidebar() {
    const [expandedMenus, setExpandedMenus] = useState<string[]>(['dashboard']);
    const pathname = usePathname();

    const toggleMenu = (menuLabel: string) => {
        setExpandedMenus(prev =>
            prev.includes(menuLabel)
                ? prev.filter(item => item !== menuLabel)
                : [...prev, menuLabel]
        );
    };

    const navigationItems: MenuItem[] = [
        {
            icon: Home,
            label: 'Dashboard',
            href: '/dashboard'
        },
        {
            icon: Users,
            label: 'Sakinler',
            hasSubmenu: true,
            submenu: [
                { label: 'Sakin Listesi', href: '/sakinler', icon: List },
                { label: 'Yeni Sakin Ekle', href: '/sakinler/yeni', icon: UserPlus },
                { label: 'Onay Bekleyenler', href: '/sakinler/onay-bekleyenler', icon: Clock }
            ]
        },
        {
            icon: Building,
            label: 'Konutlar',
            hasSubmenu: true,
            submenu: [
                { label: 'Daire/Villa Listesi', href: '/konutlar', icon: Building2 },
                { label: 'Boş Konutlar', href: '/konutlar/bos', icon: MapPin },
                { label: 'Bakım Durumu', href: '/konutlar/bakim', icon: Activity }
            ]
        },
        {
            icon: DollarSign,
            label: 'Finansal İşlemler',
            hasSubmenu: true,
            submenu: [
                { label: 'Aidat Takibi', href: '/finans/aidat', icon: FileText },
                { label: 'Ödeme Geçmişi', href: '/finans/odeme-gecmisi', icon: Receipt },
                { label: 'Borç Raporları', href: '/finans/borc-raporlari', icon: CreditCard },
                { label: 'Fatura Yönetimi', href: '/finans/faturalar', icon: FileText }
            ]
        },
        {
            icon: Megaphone,
            label: 'Duyurular',
            hasSubmenu: true,
            submenu: [
                { label: 'Aktif Duyurular', href: '/duyurular', icon: MessageSquare },
                { label: 'Yeni Duyuru', href: '/duyurular/yeni', icon: UserPlus },
                { label: 'Duyuru Arşivi', href: '/duyurular/arsiv', icon: List }
            ]
        },
        {
            icon: Wrench,
            label: 'Hizmet Talepleri',
            hasSubmenu: true,
            submenu: [
                { label: 'Açık Talepler', href: '/hizmet-talepleri/acik', icon: Clock },
                { label: 'İşlem Bekleyenler', href: '/hizmet-talepleri/bekleyen', icon: Activity },
                { label: 'Tamamlananlar', href: '/hizmet-talepleri/tamamlanan', icon: CheckCircle }
            ]
        },
        {
            icon: BarChart3,
            label: 'Raporlar',
            hasSubmenu: true,
            submenu: [
                { label: 'Mali Raporlar', href: '/raporlar/mali', icon: DollarSign },
                { label: 'Doluluk Raporları', href: '/raporlar/doluluk', icon: PieChart },
                { label: 'Hizmet Raporları', href: '/raporlar/hizmet', icon: Wrench }
            ]
        },
        {
            icon: Settings,
            label: 'Ayarlar',
            hasSubmenu: true,
            submenu: [
                { label: 'Site Bilgileri', href: '/ayarlar/site', icon: Building },
                { label: 'Kullanıcı Yönetimi', href: '/ayarlar/kullanicilar', icon: UserCog },
                { label: 'Sistem Ayarları', href: '/ayarlar/sistem', icon: Settings }
            ]
        }
    ];

    const renderMenuItem = (item: MenuItem, index: number) => {
        const IconComponent = item.icon;
        const isExpanded = expandedMenus.includes(item.label);
        const hasSubmenu = item.hasSubmenu && item.submenu;
        const isActive = item.href === pathname;

        const menuContent = (
            <div
                onClick={() => hasSubmenu ? toggleMenu(item.label) : null}
                className={`
                    group flex items-center justify-between px-3 py-3 text-sm font-medium rounded-lg transition-all duration-200 cursor-pointer
                    ${isActive
                        ? 'bg-primary-gold/10 text-text-accent border border-primary-gold/30'
                        : 'text-text-primary hover:bg-background-secondary/50 hover:text-text-accent'
                    }
                `}
            >
                <div className="flex items-center gap-3">
                    <div className={`
                        p-1.5 rounded-lg transition-colors duration-200
                        ${isActive
                            ? 'bg-primary-gold/20'
                            : 'bg-background-secondary/50 group-hover:bg-primary-gold/20'
                        }
                    `}>
                        <IconComponent className={`
                            w-4 h-4 transition-colors duration-200
                            ${isActive
                                ? 'text-text-accent'
                                : 'text-text-secondary group-hover:text-text-accent'
                            }
                        `} />
                    </div>
                    <span className="font-inter">{item.label}</span>
                </div>

                {hasSubmenu ? (
                    isExpanded ? (
                        <ChevronDown className="w-4 h-4 text-text-secondary transition-transform duration-200" />
                    ) : (
                        <ChevronRight className="w-4 h-4 text-text-secondary transition-transform duration-200" />
                    )
                ) : isActive ? (
                    <ChevronRight className="w-4 h-4 text-text-accent" />
                ) : null}
            </div>
        );

        return (
            <div key={index} className="space-y-1">
                {/* Ana menu - Link veya div */}
                {!hasSubmenu && item.href ? (
                    <Link href={item.href}>
                        {menuContent}
                    </Link>
                ) : (
                    menuContent
                )}

                {/* Submenu */}
                {hasSubmenu && isExpanded && (
                    <div className="ml-6 space-y-1 border-l border-primary-dark-gray/20 pl-4">
                        {item.submenu?.map((subItem, subIndex) => {
                            const SubIconComponent = subItem.icon;
                            return (
                                <Link
                                    key={subIndex}
                                    href={subItem.href}
                                    className="group flex items-center gap-3 px-3 py-2 text-sm font-medium text-text-secondary hover:bg-background-secondary/30 hover:text-text-accent rounded-lg transition-all duration-200"
                                >
                                    {SubIconComponent && (
                                        <div className="p-1 rounded-md bg-background-secondary/30 group-hover:bg-primary-gold/20 transition-colors duration-200">
                                            <SubIconComponent className="w-3 h-3 text-text-secondary group-hover:text-text-accent transition-colors duration-200" />
                                        </div>
                                    )}
                                    <span className="font-inter text-xs">{subItem.label}</span>
                                </Link>
                            );
                        })}
                    </div>
                )}
            </div>
        );
    };

    return (
        <div className="w-80 bg-background-card border-r border-primary-dark-gray/20 flex flex-col h-full">
            <Header />

            {/* Navigation */}
            <div className="flex-1 px-6 py-6 overflow-y-auto">
                <nav className="space-y-2">
                    {/* Main Navigation */}
                    <div className="space-y-2">
                        <div className="px-3 pb-2">
                            <div className="flex items-center space-x-2">
                                <div className="w-2 h-2 bg-primary-gold rounded-full"></div>
                                <h3 className="text-xs font-semibold text-text-secondary uppercase tracking-wide font-inter">
                                    99Club Admin Panel
                                </h3>
                            </div>
                        </div>

                        {navigationItems.map((item, index) => renderMenuItem(item, index))}
                    </div>
                </nav>
            </div>

            {/* Bottom Section */}
            <div className="px-6 py-4 border-t border-primary-dark-gray/20">
                <div className="bg-gradient-to-r from-primary-gold/10 to-text-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2 mb-2">
                        <div className="w-2 h-2 bg-primary-gold rounded-full animate-pulse"></div>
                        <h4 className="text-sm font-semibold text-text-primary font-helvetica">
                            99Club Admin
                        </h4>
                    </div>
                    <p className="text-xs text-text-secondary font-inter leading-relaxed">
                        Site yönetim paneli ile tüm işlemlerinizi kolayca takip edin
                    </p>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/app/dashboard/components/DashboardHeader.tsx">
'use client';

import React from 'react';
import Breadcrumb from '@/app/components/ui/Breadcrumb';

interface BreadcrumbItem {
    label: string;
    href?: string;
    icon?: React.ReactNode;
    active?: boolean;
    onClick?: () => void;
}

interface DashboardHeaderProps {
    title?: string;
    breadcrumbItems?: BreadcrumbItem[];
}

export default function DashboardHeader({
    title = "Dashboard",
    breadcrumbItems = []
}: DashboardHeaderProps) {
    return (
        <header className="bg-background-light-card dark:bg-background-card border-b border-gray-200 dark:border-gray-700 h-24">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full">
                <div className="h-full flex flex-col justify-center">
                    {/* Breadcrumb */}
                    {breadcrumbItems.length > 0 && (
                        <div className="mb-1">
                            <Breadcrumb
                                items={breadcrumbItems}
                                size="sm"
                                showHome={true}
                            />
                        </div>
                    )}

                    {/* Page Title */}
                    <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                        {title}
                    </h1>
                </div>
            </div>
        </header>
    );
}
</file>

<file path="src/app/dashboard/components/FinancialChart.tsx">
'use client';

import React from 'react';
import Card from '@/app/components/ui/Card';
import { TrendingUp, Activity } from 'lucide-react';

interface FinancialChartProps {
    title?: string;
    subtitle?: string;
}

export default function FinancialChart({
    title = "Aidat Tahsilat Trendi",
    subtitle = "Son 6 ay"
}: FinancialChartProps) {
    return (
        <Card title={title} subtitle={subtitle} icon={TrendingUp}>
            <div className="h-64 flex items-center justify-center bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="text-center">
                    <Activity className="w-12 h-12 mx-auto text-gray-400 mb-4" />
                    <p className="text-gray-500 dark:text-gray-400">
                        Grafik bileşeni entegre edilecek
                    </p>
                </div>
            </div>
        </Card>
    );
}
</file>

<file path="src/app/dashboard/components/MaintenanceRequests.tsx">
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import Button from '@/app/components/ui/Button';
import { Ticket } from '@/services/ticket.service';
import { ArrowRight, ChevronLeft, ChevronRight } from 'lucide-react';

interface MaintenanceRequestsProps {
    requests?: Ticket[];
    title?: string;
    subtitle?: string;
    loading?: boolean;
    error?: string | null;
    totalCount?: number;
}

// Helper function to get priority color
const getPriorityColor = (priority: string) => {
    switch (priority?.toUpperCase()) {
        case 'URGENT':
        case 'HIGH':
            return 'red';
        case 'MEDIUM':
            return 'gold';
        case 'LOW':
            return 'primary';
        default:
            return 'secondary';
    }
};

// Helper function to get status color
const getStatusColor = (status: string) => {
    switch (status?.toUpperCase()) {
        case 'OPEN':
            return 'red';
        case 'IN_PROGRESS':
        case 'WAITING':
            return 'gold';
        case 'RESOLVED':
        case 'CLOSED':
            return 'primary';
        default:
            return 'secondary';
    }
};

// Helper function to get status label
const getStatusLabel = (status: string) => {
    switch (status?.toUpperCase()) {
        case 'OPEN':
            return 'Açık';
        case 'IN_PROGRESS':
            return 'Devam Ediyor';
        case 'WAITING':
            return 'Bekliyor';
        case 'RESOLVED':
            return 'Çözüldü';
        case 'CLOSED':
            return 'Kapalı';
        default:
            return status || 'Bilinmiyor';
    }
};

// Helper function to get priority label
const getPriorityLabel = (priority: string) => {
    switch (priority?.toUpperCase()) {
        case 'URGENT':
            return 'Acil';
        case 'HIGH':
            return 'Yüksek';
        case 'MEDIUM':
            return 'Normal';
        case 'LOW':
            return 'Düşük';
        default:
            return priority || 'Bilinmiyor';
    }
};

export default function MaintenanceRequests({
    requests = [],
    title = "Bakım & Arıza Talepleri",
    subtitle = "Aktif servis talepleri",
    loading = false,
    error = null,
    totalCount = 0
}: MaintenanceRequestsProps) {
    const router = useRouter();
    const [currentPage, setCurrentPage] = useState(1);
    const itemsPerPage = 5;

    // Calculate pagination
    const totalPages = Math.ceil(requests.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentRequests = requests.slice(startIndex, endIndex);

    const handleViewAll = () => {
        router.push('/dashboard/requests');
    };

    const handlePreviousPage = () => {
        setCurrentPage(prev => Math.max(prev - 1, 1));
    };

    const handleNextPage = () => {
        setCurrentPage(prev => Math.min(prev + 1, totalPages));
    };
    return (
        <Card title={title} subtitle={`${subtitle} (${totalCount} toplam)`}>
            {loading && (
                <div className="space-y-3">
                    {[1, 2, 3].map((i) => (
                        <div key={i} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg animate-pulse">
                            <div className="flex items-center space-x-3">
                                <div className="w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600" />
                                <div>
                                    <div className="h-4 bg-gray-300 dark:bg-gray-600 rounded w-32 mb-2" />
                                    <div className="h-3 bg-gray-300 dark:bg-gray-600 rounded w-24" />
                                </div>
                            </div>
                            <div className="h-6 bg-gray-300 dark:bg-gray-600 rounded w-16" />
                        </div>
                    ))}
                </div>
            )}

            {error && (
                <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-red-600 text-sm">{error}</p>
                </div>
            )}

            {!loading && !error && requests.length === 0 && (
                <div className="p-4 text-center text-gray-500 dark:text-gray-400">
                    <p>Henüz bakım talebi bulunmuyor.</p>
                </div>
            )}

            {!loading && !error && requests.length > 0 && (
                <div className="space-y-3">
                    {currentRequests.map((request) => (
                        <div key={request.id} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                            <div className="flex items-center space-x-3">
                                <div className={`w-3 h-3 rounded-full ${
                                    getPriorityColor(request.priority) === 'red' ? 'bg-red-500' :
                                    getPriorityColor(request.priority) === 'gold' ? 'bg-yellow-500' :
                                    'bg-green-500'
                                }`} />
                                <div>
                                    <p className="font-medium text-gray-900 dark:text-white">
                                        {request.title}
                                    </p>
                                    <p className="text-sm text-gray-500 dark:text-gray-400">
                                        {request.property?.name || request.property?.propertyNumber || 'Bilinmeyen Konut'} - {getPriorityLabel(request.priority)} öncelik
                                    </p>
                                </div>
                            </div>
                            <Badge
                                variant="soft"
                                color={getStatusColor(request.status)}
                                size="sm"
                            >
                                {getStatusLabel(request.status)}
                            </Badge>
                        </div>
                    ))}
                    
                    {/* Pagination Controls */}
                    {totalPages > 1 && (
                        <div className="flex items-center justify-between pt-3 border-t border-gray-200 dark:border-gray-700">
                            <div className="text-sm text-gray-500 dark:text-gray-400">
                                Sayfa {currentPage} / {totalPages} ({requests.length} toplam)
                            </div>
                            <div className="flex items-center space-x-2">
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={handlePreviousPage}
                                    disabled={currentPage === 1}
                                    className="p-2"
                                >
                                    <ChevronLeft className="w-4 h-4" />
                                </Button>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={handleNextPage}
                                    disabled={currentPage === totalPages}
                                    className="p-2"
                                >
                                    <ChevronRight className="w-4 h-4" />
                                </Button>
                            </div>
                        </div>
                    )}
                    
                    {/* View All Button */}
                    {totalCount > requests.length && (
                        <div className="pt-3 border-t border-gray-200 dark:border-gray-700">
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={handleViewAll}
                                className="w-full text-primary-gold hover:text-primary-gold/80 hover:bg-primary-gold/10"
                            >
                                Tümünü Görüntüle ({totalCount - requests.length} daha)
                                <ArrowRight className="w-4 h-4 ml-2" />
                            </Button>
                        </div>
                    )}
                </div>
            )}
        </Card>
    );
}
</file>

<file path="src/app/dashboard/components/OccupancyStatus.tsx">
'use client';

import React from 'react';
import Card from '@/app/components/ui/Card';
import ProgressBar from '@/app/components/ui/ProgressBar';

interface OccupancyData {
    blockName: string;
    occupied: number;
    total: number;
    percentage: number;
}

interface OccupancyStatusProps {
    occupancyData?: OccupancyData[];
    title?: string;
    subtitle?: string;
}

const defaultOccupancyData: OccupancyData[] = [
    { blockName: 'A Blok', occupied: 48, total: 50, percentage: 96 },
    { blockName: 'B Blok', occupied: 45, total: 50, percentage: 90 },
    { blockName: 'C Blok', occupied: 42, total: 50, percentage: 84 },
];

export default function OccupancyStatus({
    occupancyData = defaultOccupancyData,
    title = "Doluluk Durumu",
    subtitle = "Bloklar bazında"
}: OccupancyStatusProps) {
    return (
        <Card title={title} subtitle={subtitle}>
            <div className="space-y-4">
                {occupancyData.map((block, index) => (
                    <div key={index}>
                        <div className="flex justify-between text-sm mb-1">
                            <span className="text-gray-600 dark:text-gray-400">{block.blockName}</span>
                            <span className="font-medium">{block.occupied}/{block.total}</span>
                        </div>
                        <ProgressBar value={block.percentage} className="h-2" />
                    </div>
                ))}
            </div>
        </Card>
    );
}
</file>

<file path="src/app/dashboard/components/QuickActions.tsx">
'use client';

import React, { useState } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import { Plus, DollarSign, Users, Settings, LucideIcon } from 'lucide-react';
import CreateTicketModal from './CreateTicketModal';

interface QuickAction {
    label: string;
    icon: LucideIcon;
    variant: 'primary' | 'secondary' | 'danger' | 'ghost';
    onClick?: () => void;
}

interface QuickActionsProps {
    actions?: QuickAction[];
    title?: string;
    subtitle?: string;
}

export default function QuickActions({
    title = "Hızlı İşlemler",
    subtitle = "Sık kullanılan eylemler"
}: QuickActionsProps) {
    const [isCreateTicketModalOpen, setIsCreateTicketModalOpen] = useState(false);

    const defaultActions: QuickAction[] = [
        // {
        //     label: 'Yeni Duyuru',
        //     icon: Plus,
        //     variant: 'primary',
        //     onClick: () => console.log('Yeni duyuru oluştur')
        // },
        // {
        //     label: 'Ödeme Kaydı',
        //     icon: DollarSign,
        //     variant: 'secondary',
        //     onClick: () => console.log('Ödeme kaydı ekle')
        // },
        {
            label: 'Sakin Ekle',
            icon: Users,
            variant: 'secondary',
            onClick: () => console.log('Yeni sakin ekle')
        },
        {
            label: 'Talep Oluştur',
            icon: Settings,
            variant: 'secondary',
            onClick: () => setIsCreateTicketModalOpen(true)
        }
    ];

    const handleTicketCreated = () => {
        // You can add success notification here
        console.log('Ticket created successfully');
    };

    return (
        <>
            <Card title={title} subtitle={subtitle}>
                <div className="space-y-3">
                    {defaultActions.map((action, index) => (
                        <Button
                            key={index}
                            fullWidth
                            variant={action.variant}
                            icon={action.icon}
                            size="md"
                            onClick={action.onClick}
                        >
                            {action.label}
                        </Button>
                    ))}
                </div>
            </Card>

            <CreateTicketModal
                isOpen={isCreateTicketModalOpen}
                onClose={() => setIsCreateTicketModalOpen(false)}
                onSuccess={handleTicketCreated}
            />
        </>
    );
}
</file>

<file path="src/app/dashboard/components/RecentActivities.tsx">
'use client';

import React, { useState } from 'react';
import Card from '@/app/components/ui/Card';
import { Activity, Clock, ChevronLeft, ChevronRight } from 'lucide-react';
import { AuditLog } from '@/services/logging.service';
import Button from '@/app/components/ui/Button';

interface RecentActivitiesProps {
    logs?: AuditLog[];
    title?: string;
    subtitle?: string;
    loading?: boolean;
    error?: string | null;
}

// Helper function to format time ago
const formatTimeAgo = (dateString: string): string => {
    const now = new Date();
    const date = new Date(dateString);
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

    if (diffInSeconds < 60) {
        return `${diffInSeconds} saniye önce`;
    } else if (diffInSeconds < 3600) {
        const minutes = Math.floor(diffInSeconds / 60);
        return `${minutes} dakika önce`;
    } else if (diffInSeconds < 86400) {
        const hours = Math.floor(diffInSeconds / 3600);
        return `${hours} saat önce`;
    } else {
        const days = Math.floor(diffInSeconds / 86400);
        return `${days} gün önce`;
    }
};

// Helper function to get activity description
const getActivityDescription = (log: AuditLog): string => {
    console.log('=== RECENT ACTIVITIES - Processing log ===');
    console.log('Log data:', {
        id: log.id,
        entityType: log.entityType,
        action: log.action,
        newValue: log.newValue,
        metadata: log.metadata
    });

    // Ticket specific actions
    if (log.entityType === 'ticket' && log.action === 'update') {
        console.log('Processing ticket update');
        
        // Check metadata for specific actions
        if (log.metadata?.action) {
            console.log('Found metadata action:', log.metadata.action);
            const actionMap: Record<string, string> = {
                'resolve': 'Bakım talebi çözüldü',
                'start-progress': 'İşleme alındı',
                'mark-waiting': 'Beklemeye alındı',
                'close': 'Bakım talebi kapatıldı',
                'cancel': 'Bakım talebi iptal edildi'
            };

            const specificAction = actionMap[log.metadata.action];
            if (specificAction) {
                console.log('Returning specific action:', specificAction);
                return specificAction;
            }
        }

        // Check for status changes
        if (log.newValue?.status) {
            console.log('Found status in newValue:', log.newValue.status);
            const statusMap: Record<string, string> = {
                'OPEN': 'Açık',
                'IN_PROGRESS': 'İşlemde',
                'WAITING': 'Beklemede',
                'RESOLVED': 'Çözüldü',
                'CLOSED': 'Kapalı',
                'CANCELLED': 'İptal Edildi'
            };

            const status = statusMap[log.newValue.status] || log.newValue.status;
            console.log('Returning status update:', `Status '${status}' e güncellendi`);
            return `Status '${status}' e güncellendi`;
        }

        // Check for title changes
        if (log.newValue?.title) {
            console.log('Found title in newValue:', log.newValue.title);
            return `Title '${log.newValue.title}' e güncellendi`;
        }

        // Check for priority changes
        if (log.newValue?.priority) {
            console.log('Found priority in newValue:', log.newValue.priority);
            const priorityMap: Record<string, string> = {
                'LOW': 'Düşük',
                'MEDIUM': 'Orta',
                'HIGH': 'Yüksek',
                'URGENT': 'Acil'
            };
            const priority = priorityMap[log.newValue.priority] || log.newValue.priority;
            return `Priority '${priority}' e güncellendi`;
        }

        console.log('Falling back to generic ticket update');
        return 'Bakım talebi güncellendi';
    }

    // Ticket comments
    if (log.entityType === 'ticket_comment' && log.action === 'create') {
        console.log('Processing ticket comment');
        const commentText = log.newValue?.content || log.newValue?.text || log.newValue?.comment || 'Yorum eklendi';
        return `Yorum eklendi: "${commentText.length > 50 ? commentText.substring(0, 50) + '...' : commentText}"`;
    }

    // Generic fallback
    const actionMap: Record<string, string> = {
        'create': 'oluşturuldu',
        'update': 'güncellendi',
        'delete': 'silindi',
        'login': 'giriş yaptı',
        'logout': 'çıkış yaptı',
        'view': 'görüntülendi'
    };

    const entityMap: Record<string, string> = {
        'user': 'Kullanıcı',
        'property': 'Konut',
        'ticket': 'Bakım talebi',
        'payment': 'Ödeme',
        'announcement': 'Duyuru',
        'family-member': 'Aile üyesi',
        'staff': 'Personel'
    };

    const action = actionMap[log.action] || log.action;
    const entity = entityMap[log.entityType] || log.entityType;
    
    if (log.action === 'login' || log.action === 'logout') {
        return `${log.username} ${action}`;
    }
    
    console.log('Returning generic description:', `${entity} ${action}`);
    return `${entity} ${action}`;
};

// Helper function to get activity type color
const getActivityTypeColor = (log: AuditLog): string => {
    switch (log.action) {
        case 'create':
            return 'bg-green-500';
        case 'update':
            return 'bg-blue-500';
        case 'delete':
            return 'bg-red-500';
        case 'login':
            return 'bg-purple-500';
        case 'logout':
            return 'bg-gray-500';
        case 'view':
            return 'bg-yellow-500';
        default:
            return 'bg-blue-500';
    }
};

export default function RecentActivities({
    logs = [],
    title = "Son Aktiviteler",
    subtitle = "Sistem günlüğü",
    loading = false,
    error = null
}: RecentActivitiesProps) {
    const [currentPage, setCurrentPage] = useState(1);
    const itemsPerPage = 5;

    // Calculate pagination
    const totalPages = Math.ceil(logs.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentLogs = logs.slice(startIndex, endIndex);

    const handlePreviousPage = () => {
        setCurrentPage(prev => Math.max(prev - 1, 1));
    };

    const handleNextPage = () => {
        setCurrentPage(prev => Math.min(prev + 1, totalPages));
    };

    return (
        <Card title={title} subtitle={subtitle} icon={Activity}>
            {loading && (
                <div className="space-y-3">
                    {[1, 2, 3, 4].map((i) => (
                        <div key={i} className="flex items-start space-x-3 animate-pulse">
                            <div className="w-2 h-2 bg-gray-300 rounded-full mt-2 flex-shrink-0" />
                            <div className="flex-1">
                                <div className="h-4 bg-gray-300 rounded w-32 mb-1" />
                                <div className="h-3 bg-gray-300 rounded w-20" />
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {error && (
                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-red-600 text-sm">{error}</p>
                </div>
            )}

            {!loading && !error && logs.length === 0 && (
                <div className="p-4 text-center text-gray-500 dark:text-gray-400">
                    <Clock className="w-8 h-8 mx-auto mb-2 opacity-50" />
                    <p className="text-sm">Henüz aktivite bulunmuyor.</p>
                </div>
            )}

            {!loading && !error && logs.length > 0 && (
                <div className="space-y-3">
                    {currentLogs.map((log) => (
                        <div key={log.id} className="flex items-start space-x-3">
                            <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${getActivityTypeColor(log)}`} />
                            <div className="flex-1 min-w-0">
                                <p className="text-sm text-gray-900 dark:text-white truncate">
                                    {getActivityDescription(log)}
                                </p>
                                <div className="flex items-center space-x-2 mt-1">
                                    <p className="text-xs text-gray-500 dark:text-gray-400">
                                        {formatTimeAgo(log.createdAt)}
                                    </p>
                                    {log.username && (
                                        <span className="text-xs text-gray-400 dark:text-gray-500">
                                            • {log.username}
                                        </span>
                                    )}
                                </div>
                            </div>
                        </div>
                    ))}
                    
                    {/* Pagination Controls */}
                    {totalPages > 1 && (
                        <div className="flex items-center justify-between pt-3 border-t border-gray-200 dark:border-gray-700">
                            <div className="text-sm text-gray-500 dark:text-gray-400">
                                Sayfa {currentPage} / {totalPages} ({logs.length} toplam)
                            </div>
                            <div className="flex items-center space-x-2">
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={handlePreviousPage}
                                    disabled={currentPage === 1}
                                    className="p-2"
                                >
                                    <ChevronLeft className="w-4 h-4" />
                                </Button>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={handleNextPage}
                                    disabled={currentPage === totalPages}
                                    className="p-2"
                                >
                                    <ChevronRight className="w-4 h-4" />
                                </Button>
                            </div>
                        </div>
                    )}
                </div>
            )}
        </Card>
    );
}
</file>

<file path="src/app/dashboard/components/RecentTransactions.tsx">
'use client';

import React from 'react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';

interface Transaction {
    date: string;
    type: string;
    unit: string;
    amount: string;
    status: 'Ödendi' | 'Bekliyor' | 'Gecikmiş';
}

interface RecentTransactionsProps {
    transactions?: Transaction[];
    title?: string;
    subtitle?: string;
}

const defaultTransactions: Transaction[] = [
    { date: '2024-01-15', type: 'Aidat', unit: 'A-101', amount: '₺1,200', status: 'Ödendi' },
    { date: '2024-01-15', type: 'Bakım', unit: 'B-205', amount: '₺350', status: 'Bekliyor' },
    { date: '2024-01-14', type: 'Aidat', unit: 'C-301', amount: '₺1,200', status: 'Ödendi' },
    { date: '2024-01-14', type: 'Elektrik', unit: 'A-105', amount: '₺180', status: 'Gecikmiş' },
    { date: '2024-01-13', type: 'Aidat', unit: 'B-102', amount: '₺1,200', status: 'Ödendi' },
];

export default function RecentTransactions({
    transactions = defaultTransactions,
    title = "Son İşlemler",
    subtitle = "Bugünün finansal hareketleri"
}: RecentTransactionsProps) {
    return (
        <Card title={title} subtitle={subtitle}>
            <div className="overflow-x-auto">
                <table className="w-full">
                    <thead>
                        <tr className="border-b border-gray-200 dark:border-gray-700">
                            <th className="text-left py-3 px-4 font-medium text-text-on-light dark:text-text-on-dark">Tarih</th>
                            <th className="text-left py-3 px-4 font-medium text-text-on-light dark:text-text-on-dark">İşlem</th>
                            <th className="text-left py-3 px-4 font-medium text-text-on-light dark:text-text-on-dark">Konut</th>
                            <th className="text-left py-3 px-4 font-medium text-text-on-light dark:text-text-on-dark">Tutar</th>
                            <th className="text-left py-3 px-4 font-medium text-text-on-light dark:text-text-on-dark">Durum</th>
                        </tr>
                    </thead>
                    <tbody>
                        {transactions.map((transaction, index) => (
                            <tr key={index} className="border-b border-gray-100 dark:border-gray-800">
                                <td className="py-3 px-4 text-sm text-text-light-secondary dark:text-text-secondary">
                                    {transaction.date}
                                </td>
                                <td className="py-3 px-4 text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                    {transaction.type}
                                </td>
                                <td className="py-3 px-4 text-sm text-text-on-light dark:text-text-on-dark">
                                    {transaction.unit}
                                </td>
                                <td className="py-3 px-4 text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                    {transaction.amount}
                                </td>
                                <td className="py-3 px-4">
                                    <Badge
                                        variant="soft"
                                        color={
                                            transaction.status === 'Ödendi' ? 'primary' :
                                                transaction.status === 'Bekliyor' ? 'gold' :
                                                    'red'
                                        }
                                        size="sm"
                                    >
                                        {transaction.status}
                                    </Badge>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </Card>
    );
}
</file>

<file path="src/app/dashboard/components/TodaysAgenda.tsx">
'use client';

import React from 'react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { Calendar } from 'lucide-react';

interface AgendaItem {
    time: string;
    event: string;
    type: 'meeting' | 'maintenance';
}

interface TodaysAgendaProps {
    agendaItems?: AgendaItem[];
    title?: string;
    subtitle?: string;
}

const defaultAgendaItems: AgendaItem[] = [
    { time: '09:00', event: 'Yönetim Kurulu Toplantısı', type: 'meeting' },
    { time: '11:30', event: 'A Blok Genel Temizlik', type: 'maintenance' },
    { time: '14:00', event: 'Asansör Bakım Kontrolü', type: 'maintenance' },
    { time: '16:00', event: 'Yeni Sakin Görüşmesi', type: 'meeting' },
];

export default function TodaysAgenda({
    agendaItems = defaultAgendaItems,
    title = "Bugünün Ajandası",
    subtitle = "Planlanan etkinlikler"
}: TodaysAgendaProps) {
    return (
        <Card title={title} subtitle={subtitle} icon={Calendar}>
            <div className="space-y-3">
                {agendaItems.map((item, index) => (
                    <div key={index} className="flex items-center space-x-3">
                        <div className="w-12 text-sm font-medium text-gray-500 dark:text-gray-400">
                            {item.time}
                        </div>
                        <div className="flex-1">
                            <p className="text-sm font-medium text-gray-900 dark:text-white">
                                {item.event}
                            </p>
                            <Badge
                                variant="soft"
                                color={item.type === 'meeting' ? 'primary' : 'gold'}
                                size="sm"
                            >
                                {item.type === 'meeting' ? 'Toplantı' : 'Bakım'}
                            </Badge>
                        </div>
                    </div>
                ))}
            </div>
        </Card>
    );
}
</file>

<file path="src/app/dashboard/components/TopMetricsGrid.tsx">
'use client';

import React from 'react';
import Card, { CardTitle } from '@/app/components/ui/Card';
import {
    Home,
    Users,
    DollarSign,
    AlertTriangle,
    TrendingUp,
    TrendingDown
} from 'lucide-react';

interface MetricData {
    title: string;
    value: string;
    subtitle?: string;
    icon: React.ComponentType<any>;
    color: 'primary' | 'gold' | 'red';
    trend?: 'up' | 'down' | null;
}

interface TopMetricsGridProps {
    metrics?: MetricData[];
    totalProperties?: number;
    assignedProperties?: number;
    loading?: boolean;
    ticketStats?: {
        currentMonthCount: number;
        percentageChange: number;
        changeDirection: 'increase' | 'decrease';
    } | null;
    ticketStatsLoading?: boolean;
}

const defaultMetrics: MetricData[] = [
    {
        title: 'Toplam Konut',
        value: '2,500',
        icon: Home,
        color: 'primary',
        trend: null
    },
    {
        title: 'Dolu Konutlar',
        value: '2,350',
        subtitle: '%94 doluluk',
        icon: Users,
        color: 'gold',
        trend: null
    },
    {
        title: 'Bu Ay Tahsilat',
        value: '₺4.2M',
        subtitle: '↑ %12',
        icon: DollarSign,
        color: 'primary',
        trend: 'up'
    },
    {
        title: 'Açık Talepler',
        value: '47',
        subtitle: '↓ %8',
        icon: AlertTriangle,
        color: 'red',
        trend: 'down'
    }
];

export default function TopMetricsGrid({ 
    metrics = defaultMetrics, 
    totalProperties, 
    assignedProperties, 
    loading = false,
    ticketStats,
    ticketStatsLoading = false
}: TopMetricsGridProps) {
    // Create dynamic metrics based on real data
    const dynamicMetrics: MetricData[] = [
        {
            title: 'Toplam Konut',
            value: loading ? '...' : totalProperties?.toLocaleString() || '0',
            icon: Home,
            color: 'primary',
            trend: null
        },
        {
            title: 'Dolu Konutlar',
            value: loading ? '...' : assignedProperties?.toLocaleString() || '0',
            subtitle: (totalProperties && assignedProperties) ? 
                `%${Math.round((assignedProperties / totalProperties) * 100)} doluluk` : undefined,
            icon: Users,
            color: 'gold',
            trend: null
        },
        {
            title: 'Bu Ay Tahsilat',
            value: '₺4.2M',
            subtitle: '↑ %12',
            icon: DollarSign,
            color: 'primary',
            trend: 'up'
        },
        {
            title: 'Açık Talepler',
            value: ticketStatsLoading ? '...' : ticketStats?.currentMonthCount?.toString() || '0',
            subtitle: ticketStats ? 
                `${ticketStats.changeDirection === 'increase' ? '↑' : '↓'} %${ticketStats.percentageChange}` : 
                undefined,
            icon: AlertTriangle,
            color: 'red',
            trend: ticketStats?.changeDirection === 'increase' ? 'up' : 'down'
        }
    ];

    const displayMetrics = totalProperties !== undefined || assignedProperties !== undefined ? dynamicMetrics : metrics;

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {displayMetrics.map((metric, index) => (
                <Card
                    key={index}
                    variant="elevated"
                    hover={true}
                    className="relative overflow-hidden"
                >
                    <div className="flex items-center justify-between">
                        <div>
                            <CardTitle className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                {metric.title}
                            </CardTitle>
                            <div className="mt-2">
                                <div className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                    {metric.value}
                                </div>
                                {metric.subtitle && (
                                    <div className="flex items-center mt-1">
                                        {metric.trend === 'up' && (
                                            <TrendingUp className="w-4 h-4 text-semantic-success-500 mr-1" />
                                        )}
                                        {metric.trend === 'down' && (
                                            <TrendingDown className="w-4 h-4 text-primary-red mr-1" />
                                        )}
                                        <span className={`text-sm ${metric.trend === 'up' ? 'text-semantic-success-600' :
                                            metric.trend === 'down' ? 'text-primary-red' :
                                                'text-text-light-secondary dark:text-text-secondary'
                                            }`}>
                                            {metric.subtitle}
                                        </span>
                                    </div>
                                )}
                            </div>
                        </div>
                        <div className={`p-3 rounded-lg ${metric.color === 'primary' ? 'bg-primary-blue-light/50 dark:bg-blue-900/30' :
                            metric.color === 'gold' ? 'bg-primary-gold-light/30 dark:bg-primary-gold/20' :
                                'bg-primary-red-light/50 dark:bg-red-900/30'
                            }`}>
                            <metric.icon className={`w-6 h-6 ${metric.color === 'primary' ? 'text-primary-blue' :
                                metric.color === 'gold' ? 'text-primary-gold' :
                                    'text-primary-red'
                                }`} />
                        </div>
                    </div>
                </Card>
            ))}
        </div>
    );
}
</file>

<file path="src/app/dashboard/requests/components/TicketActivityLog.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { Activity, ChevronLeft, ChevronRight, Wrench, MessageCircle, User, Clock } from 'lucide-react';
import Button from '@/app/components/ui/Button';
import { loggingService, AuditLog } from '@/services/logging.service';

interface TicketActivityLogProps {
  ticketId: string;
  title?: string;
  subtitle?: string;
  ticketData?: any; // Current ticket data for comparison
}

// Helper function to format time ago
const formatTimeAgo = (dateString: string): string => {
  const now = new Date();
  const date = new Date(dateString);
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (diffInSeconds < 60) {
    return `${diffInSeconds} saniye önce`;
  } else if (diffInSeconds < 3600) {
    const minutes = Math.floor(diffInSeconds / 60);
    return `${minutes} dakika önce`;
  } else if (diffInSeconds < 86400) {
    const hours = Math.floor(diffInSeconds / 3600);
    return `${hours} saat önce`;
  } else {
    const days = Math.floor(diffInSeconds / 86400);
    return `${days} gün önce`;
  }
};

// Helper function to get activity description
const getActivityDescription = (log: AuditLog): { text: string; icon: React.ReactNode; color: string } => {
  console.log('=== START PROCESSING LOG ===');
  console.log('Processing log:', {
    id: log.id,
    entityType: log.entityType,
    action: log.action,
    newValue: log.newValue,
    metadata: log.metadata
  });

  // Ticket status changes
  console.log('Checking if ticket update:', log.entityType === 'ticket' && log.action === 'update');
  if (log.entityType === 'ticket' && log.action === 'update') {
    console.log('✅ Ticket update condition met');
    // Check metadata for specific actions FIRST (more specific)
    console.log('Checking metadata action:', log.metadata?.action);
    if (log.metadata?.action) {
      console.log('✅ Metadata action found:', log.metadata.action);
      const actionMap: Record<string, { text: string; color: string }> = {
        'resolve': { text: 'Bakım talebi çözüldü', color: 'text-green-600' },
        'start-progress': { text: 'İşleme alındı', color: 'text-blue-600' },
        'mark-waiting': { text: 'Beklemeye alındı', color: 'text-yellow-600' },
        'close': { text: 'Bakım talebi kapatıldı', color: 'text-gray-600' },
        'cancel': { text: 'Bakım talebi iptal edildi', color: 'text-red-600' }
      };

      console.log('Action check:', log.metadata?.action, 'Action map:', actionMap);
      console.log('Action info found:', actionMap[log.metadata.action]);

      const actionInfo = actionMap[log.metadata.action];
      console.log('Action info found:', actionInfo);
      if (actionInfo) {
        console.log('✅ Returning action info:', actionInfo);
        return {
          text: actionInfo.text,
          icon: <Wrench className="h-4 w-4" />,
          color: actionInfo.color
        };
      } else {
        console.log('❌ No action info found for:', log.metadata.action);
      }
    } else {
      console.log('❌ No metadata action found');
    }

    // Check if status changed
    console.log('Checking newValue status:', log.newValue?.status);
    if (log.newValue?.status) {
      console.log('✅ Status found:', log.newValue.status);
      const statusMap: Record<string, string> = {
        'OPEN': 'Açık',
        'IN_PROGRESS': 'İşlemde',
        'WAITING': 'Beklemede',
        'RESOLVED': 'Çözüldü',
        'CLOSED': 'Kapalı',
        'CANCELLED': 'İptal Edildi'
      };

      const newStatus = statusMap[log.newValue.status] || log.newValue.status;
      
      let color = 'text-blue-600';
      if (log.newValue.status === 'RESOLVED' || log.newValue.status === 'CLOSED') {
        color = 'text-green-600';
      } else if (log.newValue.status === 'CANCELLED') {
        color = 'text-red-600';
      }

      console.log('✅ Returning status update:', `Status '${newStatus}' e güncellendi`);
      return {
        text: `Status '${newStatus}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color
      };
    } else {
      console.log('❌ No status found in newValue');
    }

    // Check for priority changes
    if (log.newValue?.priority) {
      const priorityMap: Record<string, string> = {
        'LOW': 'Düşük',
        'MEDIUM': 'Orta',
        'HIGH': 'Yüksek',
        'URGENT': 'Acil'
      };

      const newPriority = priorityMap[log.newValue.priority] || log.newValue.priority;

      return {
        text: `Priority '${newPriority}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-orange-600'
      };
    }

    // Check for title changes
    if (log.newValue?.title) {
      return {
        text: `Title '${log.newValue.title}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-blue-600'
      };
    }

    // Check for description changes
    if (log.newValue?.description) {
      return {
        text: `Description '${log.newValue.description.length > 30 ? log.newValue.description.substring(0, 30) + '...' : log.newValue.description}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-blue-600'
      };
    }

    // Check for ticket number
    if (log.newValue?.ticketNumber) {
      return {
        text: `Ticket '${log.newValue.ticketNumber}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-blue-600'
      };
    }

    // Check for category
    if (log.newValue?.category) {
      return {
        text: `Category '${log.newValue.category}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-blue-600'
      };
    }

    // Check for type
    if (log.newValue?.type) {
      return {
        text: `Type '${log.newValue.type}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-blue-600'
      };
    }

    // Check for due date
    if (log.newValue?.dueDate) {
      const dueDate = new Date(log.newValue.dueDate).toLocaleDateString('tr-TR');
      return {
        text: `Due date '${dueDate}' e güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-blue-600'
      };
    }

    // Generic ticket update with available fields
    const availableFields = Object.keys(log.newValue || {}).filter(key => 
      log.newValue[key] !== null && log.newValue[key] !== undefined
    );

    if (availableFields.length > 0) {
      const fieldNames = availableFields.map(field => {
        const fieldMap: Record<string, string> = {
          'title': 'Title',
          'status': 'Status',
          'priority': 'Priority',
          'description': 'Description',
          'category': 'Category',
          'type': 'Type',
          'ticketNumber': 'Ticket Number',
          'dueDate': 'Due Date'
        };
        return fieldMap[field] || field;
      });

      return {
        text: `${fieldNames.join(', ')} güncellendi`,
        icon: <Wrench className="h-4 w-4" />,
        color: 'text-blue-600'
      };
    }

    console.log('❌ Falling back to generic update message');
    return {
      text: 'Bakım talebi güncellendi',
      icon: <Wrench className="h-4 w-4" />,
      color: 'text-blue-600'
    };
  }

  // Ticket comments
  if (log.entityType === 'ticket_comment' && log.action === 'create') {
    const commentText = log.newValue?.content || log.newValue?.text || log.newValue?.comment || 'Yorum eklendi';
    return {
      text: `Yorum eklendi: "${commentText.length > 50 ? commentText.substring(0, 50) + '...' : commentText}"`,
      icon: <MessageCircle className="h-4 w-4" />,
      color: 'text-purple-600'
    };
  }

  // Ticket creation
  if (log.entityType === 'ticket' && log.action === 'create') {
    const ticketTitle = log.newValue?.title || log.newValue?.subject || 'Bakım talebi';
    return {
      text: `Bakım talebi oluşturuldu: "${ticketTitle}"`,
      icon: <Activity className="h-4 w-4" />,
      color: 'text-green-600'
    };
  }

  // Default fallback with more detail
  return {
    text: `${log.entityType} ${log.action === 'create' ? 'oluşturuldu' : log.action === 'update' ? 'güncellendi' : log.action}`,
    icon: <Activity className="h-4 w-4" />,
    color: 'text-gray-600'
  };
};

// Helper function to get activity background color
const getActivityBgColor = (log: AuditLog): string => {
  if (log.entityType === 'ticket_comment') {
    return 'bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800';
  }
  
  if (log.action === 'create') {
    return 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800';
  }
  
  if (log.action === 'update') {
    return 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800';
  }
  
  return 'bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700';
};

export default function TicketActivityLog({ 
  ticketId, 
  title = "Son Aktiviteler", 
  subtitle = "Bakım talebi güncellemeleri" 
}: TicketActivityLogProps) {
  const [logs, setLogs] = useState<AuditLog[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [showDebug, setShowDebug] = useState(false);
  const itemsPerPage = 5;

  // Calculate pagination
  const totalPages = Math.ceil(logs.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentLogs = logs.slice(startIndex, endIndex);

  const handlePreviousPage = () => {
    setCurrentPage(prev => Math.max(prev - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage(prev => Math.min(prev + 1, totalPages));
  };

  // Fetch ticket-specific audit logs
  useEffect(() => {
    const fetchTicketLogs = async () => {
      if (!ticketId) return;
      
      try {
        setLoading(true);
        setError(null);
        
        // Fetch logs for this specific ticket
        const response = await loggingService.getAuditLogsByEntity('ticket', ticketId, 50);
        
        console.log('Ticket audit logs response:', response);
        console.log('Raw logs data:', JSON.stringify(response, null, 2));
        
        // Filter for ticket and ticket_comment activities
        const ticketLogs = response.filter(log => 
          (log.entityType === 'ticket' && log.entityId === ticketId) ||
          (log.entityType === 'ticket_comment' && log.newValue?.ticketId === ticketId)
        );
        
        console.log('Filtered ticket logs:', ticketLogs);
        
        // Sort by creation date (newest first)
        const sortedLogs = ticketLogs.sort((a, b) => 
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        
        console.log('Sorted logs:', sortedLogs);
        setLogs(sortedLogs);
      } catch (err) {
        console.error('Error fetching ticket audit logs:', err);
        setError(err instanceof Error ? err.message : 'Aktivite günlükleri yüklenemedi');
        setLogs([]);
      } finally {
        setLoading(false);
      }
    };

    fetchTicketLogs();
  }, [ticketId]);

  return (
    <div className="bg-background-light-card dark:bg-background-card rounded-xl border border-primary-gold/10 p-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Activity className="h-5 w-5 text-primary-gold" />
          <div>
            <h3 className="font-semibold text-text-on-light dark:text-text-on-dark">{title}</h3>
            <p className="text-sm text-text-light-secondary dark:text-text-secondary">{subtitle}</p>
          </div>
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setShowDebug(!showDebug)}
          className="text-xs"
        >
          {showDebug ? 'Gizle' : 'Debug'}
        </Button>
      </div>

      {/* Debug Section */}
      {showDebug && (
        <div className="mb-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border">
          <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Debug: Raw Log Data</h4>
          <div className="text-xs text-gray-600 dark:text-gray-400 max-h-40 overflow-y-auto">
            <pre>{JSON.stringify(logs, null, 2)}</pre>
          </div>
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="space-y-3">
          {[1, 2, 3].map((i) => (
            <div key={i} className="flex items-start space-x-3 animate-pulse">
              <div className="w-2 h-2 bg-gray-300 rounded-full mt-2 flex-shrink-0" />
              <div className="flex-1">
                <div className="h-4 bg-gray-300 rounded w-32 mb-1" />
                <div className="h-3 bg-gray-300 rounded w-20" />
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-red-600 text-sm">{error}</p>
        </div>
      )}

      {/* Empty State */}
      {!loading && !error && logs.length === 0 && (
        <div className="p-4 text-center text-gray-500 dark:text-gray-400">
          <Clock className="w-8 h-8 mx-auto mb-2 opacity-50" />
          <p className="text-sm">Henüz aktivite bulunmuyor.</p>
        </div>
      )}

      {/* Activity Logs */}
      {!loading && !error && logs.length > 0 && (
        <div className="space-y-3">
          {currentLogs.map((log) => {
            const activityInfo = getActivityDescription(log);
            const bgColor = getActivityBgColor(log);
            
            return (
              <div key={log.id} className={`p-3 rounded-lg border ${bgColor} transition-all hover:shadow-sm`}>
                <div className="flex items-start space-x-3">
                  <div className={`p-1 rounded-full ${activityInfo.color.replace('text-', 'bg-')} bg-opacity-10 flex-shrink-0`}>
                    {activityInfo.icon}
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className={`text-sm font-medium ${activityInfo.color}`}>
                      {activityInfo.text}
                    </p>
                    <div className="flex items-center space-x-2 mt-1">
                      <div className="flex items-center space-x-1">
                        <User className="h-3 w-3 text-gray-400" />
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {log.username || 'Sistem'}
                        </span>
                      </div>
                      <span className="text-xs text-gray-400">•</span>
                      <div className="flex items-center space-x-1">
                        <Clock className="h-3 w-3 text-gray-400" />
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {formatTimeAgo(log.createdAt)}
                        </span>
                      </div>
                    </div>
                    {showDebug && (
                      <div className="mt-2 p-2 bg-white dark:bg-gray-900 rounded text-xs">
                        <div><strong>Action:</strong> {log.action}</div>
                        <div><strong>Entity:</strong> {log.entityType}</div>
                        <div><strong>New Value:</strong> {JSON.stringify(log.newValue)}</div>
                        <div><strong>Meta:</strong> {JSON.stringify(log.metadata)}</div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
          
          {/* Pagination Controls */}
          {totalPages > 1 && (
            <div className="flex items-center justify-between pt-3 border-t border-gray-200 dark:border-gray-700">
              <div className="text-sm text-gray-500 dark:text-gray-400">
                Sayfa {currentPage} / {totalPages} ({logs.length} toplam)
              </div>
              <div className="flex items-center space-x-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handlePreviousPage}
                  disabled={currentPage === 1}
                  className="p-2"
                >
                  <ChevronLeft className="w-4 h-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleNextPage}
                  disabled={currentPage === totalPages}
                  className="p-2"
                >
                  <ChevronRight className="w-4 h-4" />
                </Button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/app/dashboard/residents/[id]/edit/page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useParams, useRouter } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Checkbox from '@/app/components/ui/Checkbox';
import RadioButton from '@/app/components/ui/RadioButton';
import { useResidentData } from '@/hooks/useResidentData';
import {
    ArrowLeft,
    Check,
    AlertCircle,
    Info,
    Phone,
    MessageSquare,
    Building,
    User,
    Home,
    Calendar,
    CreditCard,
    Smartphone,
    QrCode,
    Save,
    X
} from 'lucide-react';

interface FormData {
    // Identity
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    
    // Housing
    residentType: 'owner' | 'tenant' | 'family';
    block: string;
    apartmentNumber: string;
    
    // Status
    status: 'ACTIVE' | 'INACTIVE' | 'PENDING';
    membershipTier: 'GOLD' | 'SILVER' | 'STANDARD';
    
    // Notes
    notes: string;
}

export default function ResidentEditPage() {
    const params = useParams();
    const router = useRouter();
    const residentId = params.id as string;
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [showSuccess, setShowSuccess] = useState(false);
    const [formData, setFormData] = useState<FormData>({
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        residentType: 'owner',
        block: '',
        apartmentNumber: '',
        status: 'ACTIVE',
        membershipTier: 'STANDARD',
        notes: ''
    });
    const [errors, setErrors] = useState<{ [key: string]: string }>({});
    const [hasChanges, setHasChanges] = useState(false);

    const { resident, loading, error, updateResident, saving, saveError } = useResidentData({
        residentId,
        autoFetch: true
    });

    // Breadcrumb for resident edit page
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Sakinler', href: '/dashboard/residents' },
        { label: resident?.fullName || 'Sakin', href: `/dashboard/residents/${residentId}` },
        { label: 'Düzenle', active: true }
    ];

    // Mock apartment data (in real app, this would come from API)
    const mockApartments = [
        { id: '1', block: 'A', number: '12', type: '3+1', area: '145m²', status: 'occupied' },
        { id: '2', block: 'A', number: '13', type: '2+1', area: '120m²', status: 'empty' },
        { id: '3', block: 'B', number: '05', type: '3+1', area: '150m²', status: 'empty' },
        { id: '4', block: 'B', number: '06', type: '4+1', area: '180m²', status: 'occupied' },
    ];

    // Get available blocks
    const availableBlocks = Array.from(new Set(mockApartments.map(apt => apt.block)));

    // Get apartments for selected block
    const getApartmentsForBlock = (block: string) => {
        return mockApartments.filter(apt => apt.block === block);
    };

    // Populate form when resident data is loaded
    useEffect(() => {
        if (resident) {
            setFormData({
                firstName: resident.firstName,
                lastName: resident.lastName,
                email: resident.contact.email || '',
                phone: resident.contact.phone,
                residentType: resident.residentType.type === 'guest' ? 'family' : resident.residentType.type,
                block: resident.address.building,
                apartmentNumber: resident.address.apartment,
                status: resident.status.type === 'active' ? 'ACTIVE' : 'INACTIVE',
                membershipTier: resident.membershipTier?.includes('Altın') ? 'GOLD' : 
                               resident.membershipTier?.includes('Gümüş') ? 'SILVER' : 'STANDARD',
                notes: resident.notes || ''
            });
        }
    }, [resident]);

    // Handle input changes
    const handleInputChange = (field: keyof FormData, value: any) => {
        // Telefon için özel formatlama
        if (field === 'phone') {
            // Sadece rakamları al
            let digits = value.replace(/\D/g, '').slice(0, 10);
            // Otomatik boşluk ekle: 750 123 4567
            let formatted = digits
                .replace(/(\d{3})(\d{0,3})(\d{0,4})/, (match: string, p1?: string, p2?: string, p3?: string) => {
                    let result = p1;
                    if (p2) result += ' ' + p2;
                    if (p3) result += ' ' + p3;
                    return result;
                });
            setFormData(prev => ({ ...prev, [field]: formatted }));
            setHasChanges(true);
            if (errors[field]) {
                setErrors(prev => ({ ...prev, [field]: '' }));
            }
            return;
        }
        setFormData(prev => ({ ...prev, [field]: value }));
        setHasChanges(true);
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }
    };

    // Validate form
    const validateForm = (): boolean => {
        const newErrors: { [key: string]: string } = {};

        // Name validation
        if (!formData.firstName.trim()) {
            newErrors.firstName = 'Ad zorunludur';
        }
        if (!formData.lastName.trim()) {
            newErrors.lastName = 'Soyad zorunludur';
        }

        // Phone validation (Iraqi format)
        if (!formData.phone) {
            newErrors.phone = 'Cep telefonu zorunludur';
        } else {
            // Sadece rakamları kontrol et
            const digits = formData.phone.replace(/\D/g, '');
            if (!/^7\d{9}$/.test(digits)) {
                newErrors.phone = 'Telefon numarası 10 haneli olmalı ve 7 ile başlamalı. Örn: 750 123 4567';
            }
        }

        // Email validation
        if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
            newErrors.email = 'Geçerli bir e-posta adresi giriniz';
        }

        // Housing validation
        if (!formData.block) {
            newErrors.block = 'Blok seçimi zorunludur';
        }
        if (!formData.apartmentNumber) {
            newErrors.apartmentNumber = 'Daire seçimi zorunludur';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Handle form submission
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!validateForm()) return;

        try {
            await updateResident(residentId, {
                firstName: formData.firstName,
                lastName: formData.lastName,
                email: formData.email,
                phone: formData.phone,
                status: formData.status,
                membershipTier: formData.membershipTier,
                // Add property update if needed
                propertyIdentification: `${formData.block}-${formData.apartmentNumber}`
            });

            setShowSuccess(true);
            setHasChanges(false);
        } catch (error) {
            console.error('Failed to update resident:', error);
        }
    };

    // Handle cancel
    const handleCancel = () => {
        if (hasChanges) {
            const confirmed = confirm('Değişiklikler kaydedilmedi. Çıkmak istediğinizden emin misiniz?');
            if (!confirmed) return;
        }
        router.push(`/dashboard/residents/${residentId}`);
    };

    // Success modal/message
    if (showSuccess) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Başarılı!" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="text-center">
                                <div className="p-8">
                                    <div className="w-16 h-16 bg-semantic-success-500/10 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <Check className="h-8 w-8 text-semantic-success-500" />
                                    </div>
                                    <h2 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark mb-2">
                                        Sakin bilgileri güncellendi!
                                    </h2>
                                    <p className="text-text-light-secondary dark:text-text-secondary mb-6">
                                        {formData.firstName} {formData.lastName} - {formData.block} Blok, Daire {formData.apartmentNumber}
                                    </p>

                                    <div className="flex flex-col sm:flex-row gap-3 justify-center">
                                        <Link href={`/dashboard/residents/${residentId}`}>
                                            <Button variant="primary">
                                                Sakin Detayını Görüntüle
                                            </Button>
                                        </Link>
                                        <Button variant="secondary" onClick={() => setShowSuccess(false)}>
                                            Düzenlemeye Devam Et
                                        </Button>
                                        <Link href="/dashboard/residents">
                                            <Button variant="secondary">
                                                Sakin Listesine Dön
                                            </Button>
                                        </Link>
                                    </div>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    // Loading state
    if (loading) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Yükleniyor..." breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <div className="animate-pulse">
                                <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
                                <div className="space-y-6">
                                    <div className="h-64 bg-gray-200 rounded"></div>
                                    <div className="h-48 bg-gray-200 rounded"></div>
                                    <div className="h-32 bg-gray-200 rounded"></div>
                                </div>
                            </div>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    // Error state
    if (error) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Hata" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="text-center">
                                <div className="p-8">
                                    <AlertCircle className="h-12 w-12 text-primary-red mx-auto mb-4" />
                                    <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                                        Sakin bulunamadı
                                    </h2>
                                    <p className="text-text-light-secondary dark:text-text-secondary mb-6">
                                        {error}
                                    </p>
                                    <Link href="/dashboard/residents">
                                        <Button variant="primary">
                                            Sakin Listesine Dön
                                        </Button>
                                    </Link>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    if (!resident) {
        return null;
    }

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title={`${resident.fullName} - Düzenle`}
                        breadcrumbItems={breadcrumbItems}
                    />

                    {/* Main Content */}
                    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header Actions */}
                        <div className="flex justify-between items-center mb-6">
                            <div className="flex items-center gap-4">
                                <Link href={`/dashboard/residents/${residentId}`}>
                                    <Button variant="ghost" icon={ArrowLeft}>
                                        Geri Dön
                                    </Button>
                                </Link>
                                <div>
                                    <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                        Sakin Bilgilerini Düzenle
                                    </h1>
                                    <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                        {resident.fullName} - ID: #{resident.id}
                                    </p>
                                </div>
                            </div>

                            <div className="flex gap-3">
                                <Button variant="secondary" onClick={handleCancel} icon={X}>
                                    İptal
                                </Button>
                                <Button 
                                    variant="primary" 
                                    onClick={handleSubmit}
                                    isLoading={saving}
                                    icon={Save}
                                >
                                    Kaydet
                                </Button>
                            </div>
                        </div>

                        {/* Save Error */}
                        {saveError && (
                            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                                <div className="flex items-center gap-2">
                                    <AlertCircle className="h-5 w-5 text-red-600" />
                                    <p className="text-red-800 text-sm">{saveError}</p>
                                </div>
                            </div>
                        )}

                        {/* Changes Warning */}
                        {hasChanges && (
                            <div className="mb-6 p-4 bg-primary-gold/10 border border-primary-gold/20 rounded-lg">
                                <div className="flex items-center gap-2">
                                    <Info className="h-5 w-5 text-primary-gold" />
                                    <p className="text-text-on-light dark:text-text-on-dark text-sm">
                                        Kaydedilmemiş değişiklikler var. Sayfadan ayrılmadan önce kaydetmeyi unutmayın.
                                    </p>
                                </div>
                            </div>
                        )}

                        {/* Main Form */}
                        <form onSubmit={handleSubmit}>
                            <Card>
                                <div className="p-6">
                                    <div className="space-y-8">
                                        {/* Identity Information */}
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <User className="h-5 w-5 text-primary-gold" />
                                                Kişisel Bilgiler
                                            </h3>
                                            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    {/* First Name */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Ad *
                                                        </label>
                                                        <input
                                                            type="text"
                                                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.firstName ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'}`}
                                                            placeholder="Ahmet"
                                                            value={formData.firstName}
                                                            onChange={(e) => handleInputChange('firstName', e.target.value)}
                                                        />
                                                        {errors.firstName && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.firstName}</p>
                                                        )}
                                                    </div>

                                                    {/* Last Name */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Soyad *
                                                        </label>
                                                        <input
                                                            type="text"
                                                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.lastName ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'}`}
                                                            placeholder="Yılmaz"
                                                            value={formData.lastName}
                                                            onChange={(e) => handleInputChange('lastName', e.target.value)}
                                                        />
                                                        {errors.lastName && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.lastName}</p>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        {/* Contact Information */}
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <Phone className="h-5 w-5 text-primary-gold" />
                                                İletişim
                                            </h3>
                                            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    {/* Mobile Phone */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Cep Telefonu *
                                                        </label>
                                                        <div className="flex">
                                                            <span className="inline-flex items-center px-3 text-sm text-gray-500 bg-gray-200 dark:bg-gray-700 border border-r-0 border-gray-200 dark:border-gray-700 rounded-l-lg">
                                                                +964
                                                            </span>
                                                            <input
                                                                type="tel"
                                                                className={`flex-1 px-3 py-2 border rounded-r-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.phone ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'}`}
                                                                placeholder="750 123 4567"
                                                                value={formData.phone}
                                                                onChange={(e) => handleInputChange('phone', e.target.value)}
                                                                maxLength={12}
                                                            />
                                                        </div>
                                                        {errors.phone && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">Telefon numarası 10 haneli olmalı ve 7 ile başlamalı. Örn: 750 123 4567</p>
                                                        )}
                                                    </div>

                                                    {/* Email */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            E-posta
                                                        </label>
                                                        <input
                                                            type="email"
                                                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.email ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'}`}
                                                            placeholder="ahmet@email.com"
                                                            value={formData.email}
                                                            onChange={(e) => handleInputChange('email', e.target.value)}
                                                        />
                                                        {errors.email && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.email}</p>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        {/* Housing Information */}
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <Home className="h-5 w-5 text-primary-gold" />
                                                Konut Bilgileri
                                            </h3>
                                            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                                                {/* Resident Type */}
                                                <div className="mb-4">
                                                    <RadioButton
                                                        label="Sakin Tipi *"
                                                        name="residentType"
                                                        value={formData.residentType}
                                                        onChange={(e) => handleInputChange('residentType', e.target.value)}
                                                        direction="horizontal"
                                                        options={[
                                                            { value: 'owner', label: 'Malik' },
                                                            { value: 'tenant', label: 'Kiracı' },
                                                            { value: 'family', label: 'Aile Üyesi' }
                                                        ]}
                                                    />
                                                </div>

                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    {/* Block Selection */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Blok *
                                                        </label>
                                                        <select
                                                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.block ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'}`}
                                                            value={formData.block}
                                                            onChange={(e) => handleInputChange('block', e.target.value)}
                                                        >
                                                            <option value="">Seçiniz</option>
                                                            {availableBlocks.map(block => (
                                                                <option key={block} value={block}>{block} Blok</option>
                                                            ))}
                                                        </select>
                                                        {errors.block && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.block}</p>
                                                        )}
                                                    </div>

                                                    {/* Apartment Selection */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Daire No *
                                                        </label>
                                                        <select
                                                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.apartmentNumber ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'}`}
                                                            value={formData.apartmentNumber}
                                                            onChange={(e) => handleInputChange('apartmentNumber', e.target.value)}
                                                            disabled={!formData.block}
                                                        >
                                                            <option value="">Seçiniz</option>
                                                            {formData.block && getApartmentsForBlock(formData.block).map(apt => (
                                                                <option key={apt.id} value={apt.number}>
                                                                    Daire {apt.number} ({apt.type})
                                                                </option>
                                                            ))}
                                                        </select>
                                                        {errors.apartmentNumber && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.apartmentNumber}</p>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        {/* Status Information */}
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <Building className="h-5 w-5 text-primary-gold" />
                                                Durum ve Üyelik
                                            </h3>
                                            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    {/* Status */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Durum
                                                        </label>
                                                        <select
                                                            className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold"
                                                            value={formData.status}
                                                            onChange={(e) => handleInputChange('status', e.target.value)}
                                                        >
                                                            <option value="ACTIVE">Aktif</option>
                                                            <option value="INACTIVE">Pasif</option>
                                                            <option value="PENDING">Beklemede</option>
                                                        </select>
                                                    </div>

                                                    {/* Membership Tier */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Üyelik Seviyesi
                                                        </label>
                                                        <select
                                                            className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold"
                                                            value={formData.membershipTier}
                                                            onChange={(e) => handleInputChange('membershipTier', e.target.value)}
                                                        >
                                                            <option value="STANDARD">Standart</option>
                                                            <option value="SILVER">Gümüş</option>
                                                            <option value="GOLD">Altın</option>
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        {/* Notes */}
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <MessageSquare className="h-5 w-5 text-primary-gold" />
                                                Notlar
                                            </h3>
                                            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                                                <div>
                                                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                        Ek Notlar
                                                    </label>
                                                    <textarea
                                                        className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold"
                                                        rows={4}
                                                        placeholder="Bu sakinle ilgili özel notlar..."
                                                        value={formData.notes}
                                                        onChange={(e) => handleInputChange('notes', e.target.value)}
                                                    />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Submit Button */}
                                    <div className="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
                                        <div className="flex justify-between items-center">
                                            <div className="flex items-center gap-2">
                                                {hasChanges && (
                                                    <Badge variant="soft" color="gold">
                                                        Kaydedilmemiş değişiklikler
                                                    </Badge>
                                                )}
                                            </div>
                                            <div className="flex gap-3">
                                                <Button variant="secondary" onClick={handleCancel}>
                                                    İptal
                                                </Button>
                                                <Button 
                                                    variant="primary" 
                                                    size="lg" 
                                                    type="submit"
                                                    isLoading={saving}
                                                    className="px-12"
                                                >
                                                    Değişiklikleri Kaydet
                                                </Button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        </form>
                    </main>
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/residents/actions/export-actions.ts">
import { ExportHandlers } from '../types';
import { EXPORT_FORMATS } from '../constants';
import { residentsApiService } from '../services/residents-api.service';
import { ResidentFilterParams } from '@/services/types/resident.types';

function downloadBlob(blob: Blob, filename: string) {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }, 100);
}

/**
 * Toast notification functions interface
 */
interface ToastFunctions {
    success: (title: string, message: string) => void;
    info: (title: string, message: string) => void;
    error: (title: string, message: string) => void;
}

/**
 * Export action handlers class
 */
export class ExportActionHandlers {
    private toast: ToastFunctions;

    constructor(toast: ToastFunctions) {
        this.toast = toast;
    }

    /**
     * Simulate export delay
     */
    private simulateExport = async (format: string): Promise<void> => {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, 1000);
        });
    };

    /**
     * Handle PDF export
     */
    handleExportPDF = async (filters?: ResidentFilterParams): Promise<void> => {
        try {
            this.toast.success('PDF İndiriliyor', 'Sakin listesi PDF formatında hazırlanıyor...');
            const blob = await residentsApiService.exportResidents('pdf', filters);
            downloadBlob(blob, `sakinler_${new Date().toISOString().slice(0,10)}.pdf`);
            this.toast.success('PDF İndirildi', 'Sakin listesi başarıyla PDF olarak indirildi');
        } catch (error: any) {
            this.toast.error('PDF İndirme Hatası', error?.message || 'PDF indirme sırasında bir hata oluştu');
        }
    };

    /**
     * Handle Excel export
     */
    handleExportExcel = async (filters?: ResidentFilterParams): Promise<void> => {
        try {
            this.toast.success('Excel İndiriliyor', 'Sakin listesi Excel formatında hazırlanıyor...');
            const blob = await residentsApiService.exportResidents('excel', filters);
            downloadBlob(blob, `sakinler_${new Date().toISOString().slice(0,10)}.xlsx`);
            this.toast.success('Excel İndirildi', 'Sakin listesi başarıyla Excel olarak indirildi');
        } catch (error: any) {
            this.toast.error('Excel İndirme Hatası', error?.message || 'Excel indirme sırasında bir hata oluştu');
        }
    };

    /**
     * Handle CSV export
     */
    handleExportCSV = async (filters?: ResidentFilterParams): Promise<void> => {
        try {
            this.toast.success('CSV İndiriliyor', 'Sakin listesi CSV formatında hazırlanıyor...');
            const blob = await residentsApiService.exportResidents('csv', filters);
            downloadBlob(blob, `sakinler_${new Date().toISOString().slice(0,10)}.csv`);
            this.toast.success('CSV İndirildi', 'Sakin listesi başarıyla CSV olarak indirildi');
        } catch (error: any) {
            this.toast.error('CSV İndirme Hatası', error?.message || 'CSV indirme sırasında bir hata oluştu');
        }
    };

    /**
     * Handle JSON export
     */
    handleExportJSON = async (filters?: ResidentFilterParams): Promise<void> => {
        try {
            this.toast.success('JSON İndiriliyor', 'Sakin listesi JSON formatında hazırlanıyor...');
            const blob = await residentsApiService.exportResidents('json', filters);
            downloadBlob(blob, `sakinler_${new Date().toISOString().slice(0,10)}.json`);
            this.toast.success('JSON İndirildi', 'Sakin listesi başarıyla JSON olarak indirildi');
        } catch (error: any) {
            this.toast.error('JSON İndirme Hatası', error?.message || 'JSON indirme sırasında bir hata oluştu');
        }
    };

    /**
     * Get all export handlers
     */
    getExportHandlers = (): ExportHandlers => {
        return {
            handleExportPDF: this.handleExportPDF,
            handleExportExcel: this.handleExportExcel,
            handleExportCSV: this.handleExportCSV,
            handleExportJSON: this.handleExportJSON,
        };
    };
}

/**
 * Create export action handlers instance
 */
export const createExportActionHandlers = (toast: ToastFunctions): ExportHandlers => {
    const handlers = new ExportActionHandlers(toast);
    return handlers.getExportHandlers();
};
</file>

<file path="src/app/dashboard/residents/actions/resident-actions.ts">
import { Resident } from '@/app/components/ui/ResidentRow';
import { ResidentActionHandlers as IResidentActionHandlers } from '../types';
import { residentService } from '@/services';
import type { ResidentStatus } from '@/app/components/ui/ResidentRow';

/**
 * Toast notification functions interface
 */
interface ToastFunctions {
    success: (title: string, message: string) => void;
    info: (title: string, message: string) => void;
    error: (title: string, message: string) => void;
}

/**
 * Data update functions interface
 */
interface DataUpdateFunctions {
    setResidents: (residents: Resident[]) => void;
    refreshData: () => void;
}

/**
 * Individual resident action handlers class
 */
export class ResidentActionHandlers {
    private toast: ToastFunctions;
    private dataUpdate: DataUpdateFunctions;
    private residents: Resident[];

    constructor(
        toast: ToastFunctions, 
        dataUpdate: DataUpdateFunctions,
        residents: Resident[]
    ) {
        this.toast = toast;
        this.dataUpdate = dataUpdate;
        this.residents = residents;
    }

    /**
     * Handle view resident action
     */
    handleViewResident = (resident: Resident): void => {
        this.toast.info(
            'Sakin Görüntüleniyor', 
            `${resident.fullName} detayları açılıyor`
        );
        // Navigate to resident detail page
        window.location.href = `/dashboard/residents/${resident.id}`;
    };

    /**
     * Handle edit resident action
     */
    handleEditResident = (resident: Resident): void => {
        this.toast.info(
            'Sakin Düzenleniyor', 
            `${resident.fullName} bilgileri düzenleniyor`
        );
        // Navigate to resident edit page
        window.location.href = `/dashboard/residents/${resident.id}/edit`;
    };

    /**
     * Handle delete resident action
     */
    handleDeleteResident = async (resident: Resident): Promise<void> => {
        try {
            // Call the API to delete the resident
            await residentService.deleteResident(resident.id.toString());
            
            // Remove resident from local state after successful API call
            const updatedResidents = this.residents.filter(r => r.id !== resident.id);
            this.dataUpdate.setResidents(updatedResidents);
            
            // Refresh data to ensure consistency
            this.dataUpdate.refreshData();
            
            this.toast.success(
                'Sakin Silindi', 
                `${resident.fullName} başarıyla silindi`
            );
        } catch (error) {
            console.error('Delete resident failed:', error);
            this.toast.error(
                'Silme Hatası', 
                error instanceof Error ? error.message : 'Silme işlemi başarısız oldu'
            );
        }
    };

    /**
     * Handle call resident action
     */
    handleCallResident = (resident: Resident): void => {
        if (confirm(`${resident.contact.phone} numarasını aramak istiyor musunuz?`)) {
            // Open phone app or make call
            window.location.href = `tel:${resident.contact.phone}`;
        }
    };

    /**
     * Handle message resident action
     */
    handleMessageResident = (resident: Resident): void => {
        const message = prompt(`${resident.fullName} için mesaj yazın:`);
        if (message && message.trim()) {
            this.toast.success(
                'Mesaj Gönderildi', 
                `Mesaj başarıyla gönderildi: "${message}"`
            );
        }
    };

    /**
     * Handle generate QR code action
     */
    handleGenerateQR = (resident: Resident): void => {
        this.toast.info(
            'QR Kod Oluşturuluyor', 
            `${resident.fullName} için QR kod hazırlanıyor`
        );
        
        // Generate QR code with resident info
        setTimeout(() => {
            this.toast.success(
                'QR Kod İndiriliyor', 
                'QR kod oluşturuldu ve indiriliyor'
            );
        }, 1000);
    };

    /**
     * Handle view notes action
     */
    handleViewNotes = (resident: Resident): void => {
        const notes = resident.notes || 'Bu sakin için henüz not bulunmuyor.';
        const newNote = prompt(`${resident.fullName} - Notlar:\n\n${notes}\n\nYeni not eklemek için yazın:`);
        
        if (newNote && newNote.trim()) {
            // Update resident notes
            const updatedResidents = this.residents.map(r =>
                r.id === resident.id
                    ? { 
                        ...r, 
                        notes: (r.notes || '') + '\n' + new Date().toLocaleDateString() + ': ' + newNote 
                    }
                    : r
            );
            this.dataUpdate.setResidents(updatedResidents);
            
            this.toast.success('Not Eklendi', 'Not başarıyla eklendi');
        }
    };

    /**
     * Handle view history action
     */
    handleViewHistory = (resident: Resident): void => {
        const registrationDate = new Date(resident.registrationDate).toLocaleDateString();
        const lastActivity = resident.lastActivity || 'Bilgi yok';
        
        this.toast.info(
            'Aktivite Geçmişi', 
            `${resident.fullName} - Kayıt: ${registrationDate}, Son aktivite: ${lastActivity}`
        );
    };

    /**
     * Handle view payment history action
     */
    handleViewPaymentHistory = (resident: Resident): void => {
        const debt = resident.financial.totalDebt;
        const balance = resident.financial.balance;
        
        this.toast.info(
            'Ödeme Geçmişi', 
            `${resident.fullName} - Borç: ₺${debt.toLocaleString()}, Bakiye: ₺${balance.toLocaleString()}`
        );
    };

    /**
     * Handle update resident status (active/passive)
     */
    handleUpdateResidentStatus = async (resident: Resident, newStatus: 'ACTIVE' | 'INACTIVE') => {
        try {
            // Call the API to update the resident's status
            await residentService.updateResident(resident.id.toString(), { status: newStatus });

            // Update local state
            const updatedResidents = this.residents.map(r =>
                r.id === resident.id ? {
                        ...r,
                        status: {
                            ...(r.status as ResidentStatus),
                            type: newStatus === 'ACTIVE' ? 'active' : 'inactive',
                            label: newStatus === 'ACTIVE' ? 'Aktif' : 'Pasif',
                            color: newStatus === 'ACTIVE' ? 'green' : 'gray',
                        } as ResidentStatus,
                    }
                    : r
            );
            this.dataUpdate.setResidents(updatedResidents);
            this.dataUpdate.refreshData();

            this.toast.success(
                'Durum Güncellendi',
                `${resident.fullName} artık ${newStatus === 'ACTIVE' ? 'Aktif' : 'Pasif'}`
            );
        } catch (error) {
            this.toast.error(
                'Durum Güncellenemedi',
                error instanceof Error ? error.message : 'Durum güncelleme işlemi başarısız oldu'
            );
        }
    };

    /**
     * Get all resident action handlers
     */
    getActionHandlers = (): IResidentActionHandlers => {
        return {
            handleViewResident: this.handleViewResident,
            handleEditResident: this.handleEditResident,
            handleDeleteResident: this.handleDeleteResident,
            handleCallResident: this.handleCallResident,
            handleMessageResident: this.handleMessageResident,
            handleGenerateQR: this.handleGenerateQR,
            handleViewNotes: this.handleViewNotes,
            handleViewHistory: this.handleViewHistory,
            handleViewPaymentHistory: this.handleViewPaymentHistory,
            handleUpdateResidentStatus: this.handleUpdateResidentStatus,
        };
    };
}

/**
 * Create resident action handlers instance
 */
export const createResidentActionHandlers = (
    toast: ToastFunctions,
    dataUpdate: DataUpdateFunctions,
    residents: Resident[]
): IResidentActionHandlers => {
    const handlers = new ResidentActionHandlers(toast, dataUpdate, residents);
    return handlers.getActionHandlers();
};
</file>

<file path="src/app/dashboard/residents/services/residents-api.service.ts">
import { residentService } from '@/services/resident.service';
import { CreateResidentRequest, ResidentFilterParams, ResidentStatsResponse, UpdateResidentDto } from '@/services/types/resident.types';
import { Resident } from '@/app/components/ui/ResidentRow';
import { ApiResident } from '../types';
import { 
    transformApiResidentsToComponentResidents, 
    transformApiResidentToComponentResident 
} from '../utils/transformations';
import { calculateStatsFromResidents } from '../utils/stats';
import { API_CONFIG } from '../constants';
import { apiClient } from '@/services/api/client';

/**
 * API Response interface
 */
interface ApiResponse<T> {
    data: T;
    totalRecords: number;
    currentPage: number;
    totalPages: number;
}

/**
 * API Error interface
 */
interface ApiError {
    message: string;
    code?: string;
    details?: any;
}

/**
 * Residents API service class
 */
export class ResidentsApiService {
    
    /**
     * Build filter parameters for API call
     */
    private buildFilterParams(params: {
        page: number;
        limit: number;
        search?: string;
        sortConfig: { key: string; direction: string };
        filters: Record<string, any>;
    }): ResidentFilterParams {
        const { page, limit, search, sortConfig, filters } = params;
        
        // Map sort field to API field
        const orderColumn = API_CONFIG.SORT_FIELD_MAPPING[sortConfig.key as keyof typeof API_CONFIG.SORT_FIELD_MAPPING] 
            || API_CONFIG.SORT_FIELD_MAPPING.default;
        
        return {
            page,
            limit,
            search: search || undefined,
            orderColumn,
            orderBy: sortConfig.direction.toUpperCase() as 'ASC' | 'DESC',
            ...filters
        };
    }

    /**
     * Fetch residents from API
     */
    async fetchResidents(params: {
        page: number;
        limit: number;
        search?: string;
        sortConfig: { key: string; direction: string };
        filters: Record<string, any>;
    }): Promise<{
        residents: Resident[];
        totalRecords: number;
        currentPage: number;
        totalPages: number;
    }> {
        try {
            const filterParams = this.buildFilterParams(params);
            const response = await residentService.getAllResidents(filterParams);
            
            // Transform service Resident objects to component Resident objects
            // We need to map the service's Resident type to the component's Resident type
            const transformedResidents = response.data.map((resident: any) => ({
                ...resident,
                fullName: `${resident.firstName} ${resident.lastName}`,
                residentType: {
                    type: 'owner' as const,
                    label: 'Malik',
                    color: 'green' as const
                },
                address: {
                    building: resident.block || 'Belirtilmemiş',
                    apartment: resident.apartment || 'Belirtilmemiş',
                    roomType: resident.room || 'Belirtilmemiş'
                },
                contact: {
                    phone: resident.phone || 'Belirtilmemiş',
                    email: resident.email || 'Belirtilmemiş',
                    formattedPhone: resident.phone || 'Belirtilmemiş'
                },
                financial: {
                    balance: 0,
                    totalDebt: 0,
                    lastPaymentDate: undefined
                },
                status: {
                    type: 'active' as const,
                    label: 'Aktif',
                    color: 'green' as const
                },
                registrationDate: resident.createdAt || new Date().toISOString(),
                lastActivity: resident.updatedAt || new Date().toISOString(),
                isGoldMember: false,
                membershipTier: 'Standart',
                verificationStatus: 'İnceleniyor',
                notes: '',
                tags: []
            }));
            
            return {
                residents: transformedResidents,
                totalRecords: response.total || response.data.length,
                currentPage: response.page || params.page,
                totalPages: response.totalPages || Math.ceil((response.total || response.data.length) / params.limit)
            };
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Fetch resident statistics
     */
    async fetchStats(residents: Resident[], totalRecords: number): Promise<ResidentStatsResponse> {
        try {
            // For now, calculate stats from local data
            // In the future, this could be a separate API call
            return calculateStatsFromResidents(residents, totalRecords);
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Create a new resident
     */
    async createResident(residentData: Partial<ApiResident>): Promise<Resident> {
        try {
            const response = await residentService.createResident(residentData as CreateResidentRequest);
            return transformApiResidentToComponentResident(response as unknown as ApiResident);
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Update a resident
     */
    async updateResident(id: string, residentData: Partial<ApiResident>): Promise<Resident> {
        try {
            const response = await residentService.updateResident(id, residentData as UpdateResidentDto);
            return transformApiResidentToComponentResident(response as unknown as ApiResident);
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Delete a resident
     */
    async deleteResident(id: string): Promise<void> {
        try {
            await residentService.deleteResident(id);
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Get a single resident by ID
     */
    async getResident(id: string): Promise<Resident> {
        try {
            const response = await residentService.getResidentById(id);
            return transformApiResidentToComponentResident(response as unknown as ApiResident);
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Bulk update residents
     */
    async bulkUpdateResidents(ids: string[], updateData: Partial<ApiResident>): Promise<Resident[]> {
        try {
            const updatePromises = ids.map(id => this.updateResident(id, updateData));
            return await Promise.all(updatePromises);
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Bulk delete residents
     */
    async bulkDeleteResidents(ids: string[]): Promise<void> {
        try {
            const deletePromises = ids.map(id => this.deleteResident(id));
            await Promise.all(deletePromises);
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Export residents data
     */
    async exportResidents(format: 'pdf' | 'excel' | 'csv' | 'json', filters?: ResidentFilterParams): Promise<Blob> {
        try {
            // Endpoint belirle
            let endpoint = '';
            switch (format) {
                case 'pdf':
                    endpoint = '/admin/users/export/pdf';
                    break;
                case 'excel':
                    endpoint = '/admin/users/export/excel';
                    break;
                case 'csv':
                    endpoint = '/admin/users/export/csv';
                    break;
                case 'json':
                    endpoint = '/admin/users/export/json';
                    break;
                default:
                    throw new Error('Unsupported export format');
            }

            // Filtreleri query string olarak ekle
            const params = { ...filters };
            // Query string oluştur
            const queryString = Object.keys(params).length > 0
                ? '?' + new URLSearchParams(
                    Object.entries(params).reduce((acc, [key, value]) => {
                        if (value !== undefined && value !== null && value !== "") {
                            acc[key] = String(value);
                        }
                        return acc;
                    }, {} as Record<string, string>)
                ).toString()
                : '';

            // API çağrısı (responseType: 'blob')
            const response = await (await import('@/services/api/client')).apiClient['client'].get(
                `${endpoint}${queryString}`,
                { responseType: 'blob' }
            );
            return response.data;
        } catch (error) {
            throw this.handleApiError(error);
        }
    }

    /**
     * Get National ID document for a resident
     */
    async getNationalIdDocument(userId: string): Promise<any> {
        const url = `/admin/users/${userId}/documents/national_id`;
        console.log('[getNationalIdDocument] userId:', userId, 'url:', url);
        try {
            const response = await apiClient.get(url);
            console.log('[getNationalIdDocument] response:', response);
            return response.data;
        } catch (error) {
            console.error('[getNationalIdDocument] error:', error);
            throw error;
        }
    }

    /**
     * Get Ownership document for a resident
     */
    async getOwnershipDocument(userId: string): Promise<any> {
        const url = `/admin/users/${userId}/documents/ownership_document`;
        console.log('[getOwnershipDocument] userId:', userId, 'url:', url);
        try {
            const response = await apiClient.get(url);
            console.log('[getOwnershipDocument] response:', response);
            return response.data;
        } catch (error) {
            console.error('[getOwnershipDocument] error:', error);
            throw error;
        }
    }

    /**
     * Handle API errors
     */
    private handleApiError(error: unknown): ApiError {
        if (error instanceof Error) {
            return {
                message: error.message,
                code: 'API_ERROR',
                details: error
            };
        }
        
        if (typeof error === 'object' && error !== null) {
            return {
                message: (error as any).message || 'Unknown API error',
                code: (error as any).code || 'UNKNOWN_ERROR',
                details: error
            };
        }
        
        return {
            message: 'An unexpected error occurred',
            code: 'UNEXPECTED_ERROR',
            details: error
        };
    }
}

/**
 * Create residents API service instance
 */
export const residentsApiService = new ResidentsApiService();
</file>

<file path="src/app/dashboard/residents/utils/transformations.ts">
import { Resident } from '@/app/components/ui/ResidentRow';
import { ApiResident } from '../types';
import { 
    STATUS_CONFIG, 
    MEMBERSHIP_CONFIG, 
    VERIFICATION_CONFIG, 
    DEFAULT_VALUES 
} from '../constants';

/**
 * Get status label and color based on status string
 */
export const getStatusConfig = (status: string) => {
    return STATUS_CONFIG[status] || STATUS_CONFIG.default;
};

/**
 * Get membership label and color based on membership tier
 */
export const getMembershipConfig = (tier: string) => {
    return MEMBERSHIP_CONFIG[tier] || MEMBERSHIP_CONFIG.default;
};

/**
 * Get verification label and color based on verification status
 */
export const getVerificationConfig = (status: string) => {
    switch ((status || '').toUpperCase()) {
        case 'APPROVED':
            return { label: 'Onaylandı', color: 'green' };
        case 'REJECTED':
            return { label: 'Reddedildi', color: 'red' };
        case 'PENDING':
        case 'UNDER_REVIEW':
        default:
            return { label: 'İnceleniyor', color: 'yellow' };
    }
};

/**
 * Format Iraq phone number
 * @param phone - Phone number string
 * @returns Formatted phone number
 */
export const formatIraqPhone = (phone: string): string => {
    if (!phone) return 'Belirtilmemiş';
    
    // Remove any non-digit characters
    const digits = phone.replace(/\D/g, '');
    
    // Iraq phone format: +964XXXXXXXXX
    if (digits.startsWith('964')) {
        return `+${digits}`;
    } else if (digits.startsWith('0')) {
        return `+964${digits.substring(1)}`;
    } else {
        return `+964${digits}`;
    }
};

/**
 * Mask national ID for privacy
 * @param nationalId - National ID string
 * @returns Masked national ID
 */
export const maskNationalId = (nationalId?: string): string => {
    if (!nationalId) return '';
    
    const visibleLength = DEFAULT_VALUES.NATIONAL_ID_MASK_LENGTH;
    if (nationalId.length <= visibleLength) {
        return nationalId;
    }
    
    return '****' + nationalId.slice(-visibleLength);
};

/**
 * Transform API resident to component resident
 * @param apiResident - API resident data
 * @returns Component resident data
 */
export const transformApiResidentToComponentResident = (apiResident: ApiResident): Resident => {
    const statusConfig = getStatusConfig(apiResident.status || '');
    const membershipConfig = getMembershipConfig(apiResident.membershipTier || '');
    const verificationConfig = getVerificationConfig(apiResident.verificationStatus || 'PENDING');

    return {
        id: String(apiResident.id),
        firstName: apiResident.firstName,
        lastName: apiResident.lastName,
        fullName: `${apiResident.firstName} ${apiResident.lastName}`,
        
        // Iraq-specific: National ID could be Iraqi National ID or Passport
        nationalId: apiResident.tcKimlikNo || apiResident.nationalId || apiResident.passportNumber || '',

        // Property information from API
        residentType: {
            type: apiResident.property?.ownershipType || 'owner',
            label: apiResident.property?.ownershipType === 'tenant' ? 'Kiracı' : 'Malik',
            color: apiResident.property?.ownershipType === 'tenant' ? 'blue' : 'green'
        },
        
        address: {
            building: apiResident.property?.block || 'Belirtilmemiş',
            apartment: apiResident.property?.apartment || 'Belirtilmemiş',
            roomType: apiResident.property?.roomType || 'Belirtilmemiş',
        },
        
        contact: {
            phone: apiResident.phone || 'Belirtilmemiş',
            email: apiResident.email || 'Belirtilmemiş',
            formattedPhone: formatIraqPhone(apiResident.phone || '')
        },
        
        financial: {
            balance: apiResident.financial?.balance || 0,
            totalDebt: apiResident.financial?.totalDebt || 0,
            lastPaymentDate: apiResident.financial?.lastPaymentDate
        },
        
        status: {
            type: (
                apiResident.status?.toLowerCase() === 'pending' ? 'pending' :
                apiResident.status?.toLowerCase() === 'inactive' ? 'inactive' :
                apiResident.status?.toLowerCase() === 'banned' ? 'suspended' :
                apiResident.status?.toLowerCase() === 'suspended' ? 'suspended' :
                'active'
            ) as 'active' | 'pending' | 'inactive' | 'suspended',
            label: statusConfig.label,
            color: statusConfig.color
        },
        
        // Membership and verification - Note: We need to check if these fields exist in Resident type
        membershipTier: membershipConfig.label,
        verificationStatus: verificationConfig,
        
        registrationDate: apiResident.createdAt || '',
        lastActivity: apiResident.updatedAt || new Date().toISOString(),
        isGoldMember: apiResident.membershipTier === 'GOLD',
        avatar: apiResident.avatar,
        notes: apiResident.notes || '',
        tags: [] // Default empty tags
    };
};

/**
 * Transform multiple API residents to component residents
 * @param apiResidents - Array of API resident data
 * @returns Array of component resident data
 */
export const transformApiResidentsToComponentResidents = (apiResidents: ApiResident[]): Resident[] => {
    return apiResidents.map(transformApiResidentToComponentResident);
};
</file>

<file path="src/app/dashboard/template/page.tsx">
'use client';

import React, { useState } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import {
    Home,
    Users,
    Settings,
    Plus,
    Edit,
    Trash2,
    Search,
    Filter,
    Download,
    Upload
} from 'lucide-react';

export default function TemplatePage() {
    const [sidebarOpen, setSidebarOpen] = useState(false);

    // Breadcrumb örnekleri
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Şablon', href: '/dashboard/template' },
        { label: 'Sayfa Şablonu', active: true }
    ];

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title="Sayfa Şablonu"
                        breadcrumbItems={breadcrumbItems}
                    />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header Actions */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                                    Sayfa İçeriği
                                </h2>
                                <p className="text-text-light-secondary dark:text-text-secondary">
                                    Bu sayfa yeni sayfa geliştirmek için referans olarak kullanılacak temel şablon sayfasıdır.
                                </p>
                            </div>

                            <div className="flex gap-3">
                                <Button variant="secondary" size="sm" icon={Filter}>
                                    Filtrele
                                </Button>
                                <Button variant="secondary" size="sm" icon={Download}>
                                    İndir
                                </Button>
                                <Button variant="primary" size="sm" icon={Plus}>
                                    Yeni Ekle
                                </Button>
                            </div>
                        </div>

                        {/* Content Grid */}
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            {/* Main Content Area */}
                            <div className="lg:col-span-2 space-y-6">
                                {/* Stats Cards */}
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <Card className="p-6">
                                        <div className="flex items-center gap-4">
                                            <div className="w-12 h-12 bg-primary-gold/10 dark:bg-primary-gold/20 rounded-xl flex items-center justify-center">
                                                <Users className="h-6 w-6 text-primary-gold" />
                                            </div>
                                            <div>
                                                <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                                    247
                                                </p>
                                                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                    Toplam Kullanıcı
                                                </p>
                                            </div>
                                        </div>
                                    </Card>

                                    <Card className="p-6">
                                        <div className="flex items-center gap-4">
                                            <div className="w-12 h-12 bg-semantic-success-500/10 dark:bg-semantic-success-500/20 rounded-xl flex items-center justify-center">
                                                <Home className="h-6 w-6 text-semantic-success-500" />
                                            </div>
                                            <div>
                                                <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                                    89
                                                </p>
                                                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                    Aktif Konut
                                                </p>
                                            </div>
                                        </div>
                                    </Card>

                                    <Card className="p-6">
                                        <div className="flex items-center gap-4">
                                            <div className="w-12 h-12 bg-primary-red/10 dark:bg-primary-red/20 rounded-xl flex items-center justify-center">
                                                <Settings className="h-6 w-6 text-primary-red" />
                                            </div>
                                            <div>
                                                <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                                    12
                                                </p>
                                                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                    Bekleyen İşlem
                                                </p>
                                            </div>
                                        </div>
                                    </Card>
                                </div>

                                {/* Main Content Card */}
                                <Card>
                                    <div className="p-6">
                                        <div className="flex items-center justify-between mb-4">
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                                                İçerik Listesi
                                            </h3>
                                            <div className="flex gap-2">
                                                <Button variant="ghost" size="sm" icon={Search}>
                                                    Ara
                                                </Button>
                                                <Button variant="ghost" size="sm" icon={Upload}>
                                                    Yükle
                                                </Button>
                                            </div>
                                        </div>

                                        {/* Sample Table/List */}
                                        <div className="space-y-4">
                                            {[1, 2, 3, 4, 5].map((item) => (
                                                <div key={item} className="flex items-center justify-between p-4 bg-background-light-soft dark:bg-background-soft rounded-lg">
                                                    <div className="flex items-center gap-4">
                                                        <div className="w-10 h-10 bg-primary-gold/20 dark:bg-primary-gold/30 rounded-full flex items-center justify-center">
                                                            <span className="text-sm font-medium text-primary-gold">
                                                                {item}
                                                            </span>
                                                        </div>
                                                        <div>
                                                            <h4 className="font-medium text-text-on-light dark:text-text-on-dark">
                                                                Örnek İçerik {item}
                                                            </h4>
                                                            <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                                Bu bir örnek açıklama metnidir.
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <Badge
                                                            variant="soft"
                                                            color={item % 2 === 0 ? "primary" : "gold"}
                                                        >
                                                            {item % 2 === 0 ? "Aktif" : "Beklemede"}
                                                        </Badge>
                                                        <Button variant="ghost" size="sm" icon={Edit}>
                                                            Düzenle
                                                        </Button>
                                                        <Button variant="ghost" size="sm" icon={Trash2} className="text-primary-red hover:text-primary-red">
                                                            Sil
                                                        </Button>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                </Card>
                            </div>

                            {/* Sidebar Content */}
                            <div className="space-y-6">
                                {/* Info Card */}
                                <Card>
                                    <div className="p-6">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                                            Hızlı Bilgi
                                        </h3>
                                        <div className="space-y-3">
                                            <div className="flex justify-between">
                                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                    Durum:
                                                </span>
                                                <Badge variant="soft" color="primary">
                                                    Aktif
                                                </Badge>
                                            </div>
                                            <div className="flex justify-between">
                                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                    Oluşturulma:
                                                </span>
                                                <span className="text-sm text-text-on-light dark:text-text-on-dark">
                                                    15 Ocak 2024
                                                </span>
                                            </div>
                                            <div className="flex justify-between">
                                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                    Güncelleme:
                                                </span>
                                                <span className="text-sm text-text-on-light dark:text-text-on-dark">
                                                    2 saat önce
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </Card>

                                {/* Action Card */}
                                <Card>
                                    <div className="p-6">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                                            Hızlı İşlemler
                                        </h3>
                                        <div className="space-y-3">
                                            <Button variant="ghost" className="w-full justify-start" icon={Plus}>
                                                Yeni Öğe Ekle
                                            </Button>
                                            <Button variant="ghost" className="w-full justify-start" icon={Edit}>
                                                Toplu Düzenle
                                            </Button>
                                            <Button variant="ghost" className="w-full justify-start" icon={Download}>
                                                Rapor İndir
                                            </Button>
                                            <Button variant="ghost" className="w-full justify-start" icon={Settings}>
                                                Ayarları Düzenle
                                            </Button>
                                        </div>
                                    </div>
                                </Card>

                                {/* Help Card */}
                                <Card>
                                    <div className="p-6">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                                            Yardım
                                        </h3>
                                        <p className="text-sm text-text-light-secondary dark:text-text-secondary mb-4">
                                            Bu sayfayı kullanırken yardıma ihtiyacınız mı var?
                                        </p>
                                        <Button variant="primary" size="sm" className="w-full">
                                            Destek Al
                                        </Button>
                                    </div>
                                </Card>
                            </div>
                        </div>
                    </main>
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/units/components/UnitsAnalytics.tsx">
import React from 'react';
import { Property, QuickStats } from '@/services/types/property.types';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import { 
    TrendingUp, 
    TrendingDown, 
    RotateCcw, 
    Plus, 
    UserPlus, 
    DollarSign, 
    FileText 
} from 'lucide-react';

interface UnitsAnalyticsProps {
    units: Property[];
    quickStats: QuickStats | null;
    onQuickAction?: (action: string) => void;
}

export const UnitsAnalytics: React.FC<UnitsAnalyticsProps> = ({
    units,
    quickStats,
    onQuickAction
}) => {
    const totalUnits = quickStats ? 
        quickStats.apartmentUnits.total + quickStats.villaUnits.total + quickStats.commercialUnits.total :
        units.length;

    const occupiedUnits = quickStats ?
        quickStats.apartmentUnits.occupied + quickStats.villaUnits.occupied + quickStats.commercialUnits.occupied :
        units.filter(u => u.status === 'OCCUPIED').length;

    const occupancyRate = totalUnits > 0 ? Math.round((occupiedUnits / totalUnits) * 100) : 0;

    const handleQuickAction = (action: string) => {
        onQuickAction?.(action);
    };

    return (
        <div className="space-y-6">
            {/* Quick Analysis */}
            <Card>
                <div className="p-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                        📊 Hızlı Analiz
                    </h3>

                    <div className="space-y-4">
                        <div>
                            <div className="flex justify-between items-center mb-2">
                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    Doluluk Oranı
                                </span>
                                <span className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                    %{occupancyRate}
                                </span>
                            </div>
                            <div className="w-full bg-background-light-soft dark:bg-background-soft rounded-full h-2">
                                <div
                                    className="bg-primary-gold h-2 rounded-full transition-all duration-300"
                                    style={{ width: `${occupancyRate}%` }}
                                />
                            </div>
                        </div>

                        <div className="space-y-2">
                            <h4 className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                Konut Tipi Dağılımı
                            </h4>
                            <div className="space-y-1">
                                <div className="flex justify-between text-sm">
                                    <span className="text-text-light-secondary dark:text-text-secondary">1+1:</span>
                                    <span className="text-text-on-light dark:text-text-on-dark">420 (%17)</span>
                                </div>
                                <div className="flex justify-between text-sm">
                                    <span className="text-text-light-secondary dark:text-text-secondary">2+1:</span>
                                    <span className="text-text-on-light dark:text-text-on-dark">840 (%34)</span>
                                </div>
                                <div className="flex justify-between text-sm">
                                    <span className="text-text-light-secondary dark:text-text-secondary">3+1:</span>
                                    <span className="text-text-on-light dark:text-text-on-dark">840 (%34)</span>
                                </div>
                                <div className="flex justify-between text-sm">
                                    <span className="text-text-light-secondary dark:text-text-secondary">4+1:</span>
                                    <span className="text-text-on-light dark:text-text-on-dark">250 (%10)</span>
                                </div>
                                <div className="flex justify-between text-sm">
                                    <span className="text-text-light-secondary dark:text-text-secondary">Villa:</span>
                                    <span className="text-text-on-light dark:text-text-on-dark">150 (%5)</span>
                                </div>
                            </div>
                        </div>

                        <div className="space-y-2 pt-2 border-t border-border-light dark:border-border-dark">
                            <h4 className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                Borç Durumu
                            </h4>
                            <div className="flex justify-between text-sm">
                                <span className="text-text-light-secondary dark:text-text-secondary">Temiz:</span>
                                <span className="text-semantic-success-500">2,100</span>
                            </div>
                            <div className="flex justify-between text-sm">
                                <span className="text-text-light-secondary dark:text-text-secondary">Borçlu:</span>
                                <span className="text-primary-red">248</span>
                            </div>
                            <div className="flex justify-between text-sm">
                                <span className="text-text-light-secondary dark:text-text-secondary">Toplam:</span>
                                <span className="text-text-on-light dark:text-text-on-dark">4.2M ₺</span>
                            </div>
                        </div>
                    </div>
                </div>
            </Card>

            {/* Recent Activity */}
            <Card>
                <div className="p-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                        Son 30 Gün
                    </h3>

                    <div className="space-y-3">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                                <TrendingUp className="h-4 w-4 text-semantic-success-500" />
                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    Yeni dolu
                                </span>
                            </div>
                            <span className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                12
                            </span>
                        </div>

                        <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                                <TrendingDown className="h-4 w-4 text-primary-red" />
                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    Boşalan
                                </span>
                            </div>
                            <span className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                8
                            </span>
                        </div>

                        <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                                <RotateCcw className="h-4 w-4 text-semantic-warning-500" />
                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    Bakıma giren
                                </span>
                            </div>
                            <span className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                3
                            </span>
                        </div>
                    </div>
                </div>
            </Card>

            {/* Quick Actions */}
            <Card>
                <div className="p-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                        Hızlı İşlemler
                    </h3>
                    <div className="space-y-3">
                        <Button 
                            variant="ghost" 
                            className="w-full justify-start" 
                            icon={Plus}
                            onClick={() => handleQuickAction('add-unit')}
                        >
                            Yeni Konut Ekle
                        </Button>
                        <Button 
                            variant="ghost" 
                            className="w-full justify-start" 
                            icon={UserPlus}
                            onClick={() => handleQuickAction('bulk-assign')}
                        >
                            Toplu Sakin Ata
                        </Button>
                        <Button 
                            variant="ghost" 
                            className="w-full justify-start" 
                            icon={DollarSign}
                            onClick={() => handleQuickAction('debt-analysis')}
                        >
                            Borç Analizi
                        </Button>
                        <Button 
                            variant="ghost" 
                            className="w-full justify-start" 
                            icon={FileText}
                            onClick={() => handleQuickAction('occupancy-report')}
                        >
                            Doluluk Raporu
                        </Button>
                    </div>
                </div>
            </Card>
        </div>
    );
};
</file>

<file path="src/app/dashboard/units/components/UnitsGridView.tsx">
import React from 'react';
import { Property } from '@/services/types/property.types';
import { propertyService } from '@/services';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import { 
    Home, 
    Building, 
    MapPin, 
    User, 
    Eye, 
    MoreVertical,
    CheckCircle,
    AlertCircle,
    RotateCcw,
    Calendar
} from 'lucide-react';

interface UnitsGridViewProps {
    units: Property[];
    loading: boolean;
    error: string | null;
    onUnitAction?: (unit: Property, action: string) => void;
}

const statusConfig = {
    OCCUPIED: { label: 'Dolu', color: 'green', icon: CheckCircle },
    AVAILABLE: { label: 'Boş', color: 'blue', icon: AlertCircle },
    UNDER_MAINTENANCE: { label: 'Bakım', color: 'orange', icon: RotateCcw },
    RESERVED: { label: 'Rezerve', color: 'purple', icon: Calendar }
};

export const UnitsGridView: React.FC<UnitsGridViewProps> = ({
    units,
    loading,
    error,
    onUnitAction
}) => {
    const handleUnitAction = (unit: Property, action: string) => {
        onUnitAction?.(unit, action);
    };

    const renderLoadingState = () => (
        Array.from({ length: 8 }).map((_, index) => (
            <Card key={index} variant="elevated">
                <div className="p-4 animate-pulse">
                    <div className="h-4 bg-gray-200 rounded mb-3"></div>
                    <div className="space-y-2">
                        <div className="h-3 bg-gray-200 rounded"></div>
                        <div className="h-3 bg-gray-200 rounded w-3/4"></div>
                    </div>
                </div>
            </Card>
        ))
    );

    const renderErrorState = () => (
        <div className="col-span-full text-center py-8">
            <div className="text-primary-red">{error}</div>
        </div>
    );

    const renderEmptyState = () => (
        <div className="col-span-full text-center py-8">
            <div className="text-text-light-secondary dark:text-text-secondary">
                Henüz konut bulunamadı
            </div>
        </div>
    );

    const renderUnitCard = (unit: Property) => {
        const statusInfo = statusConfig[unit.status as keyof typeof statusConfig];
        const StatusIcon = statusInfo.icon;
        const typeInfo = propertyService.getTypeInfo(unit.type);
        const currentResident = unit.tenant || unit.owner;

        return (
            <Card key={unit.id} variant="elevated" hover={true}>
                <div className="p-4">
                    <div className="flex items-center justify-between mb-3">
                        <h4 className="font-semibold text-text-on-light dark:text-text-on-dark">
                            {unit.propertyNumber || unit.name}
                        </h4>
                        <Badge variant="soft" color={statusInfo.color as any}>
                            {statusInfo.label}
                        </Badge>
                    </div>

                    <div className="space-y-2 mb-4">
                        <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                            <Home className="h-4 w-4" />
                            <span>{typeInfo.label}</span>
                        </div>
                        {unit.area && (
                            <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                                <MapPin className="h-4 w-4" />
                                <span>{unit.area} m²</span>
                            </div>
                        )}
                        {unit.blockNumber && (
                            <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                                <Building className="h-4 w-4" />
                                <span>Blok {unit.blockNumber}</span>
                            </div>
                        )}
                        {currentResident && (
                            <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                                <User className="h-4 w-4" />
                                <span>{currentResident.firstName} {currentResident.lastName}</span>
                            </div>
                        )}
                    </div>

                    {unit.bills && unit.bills.length > 0 && (
                        <div className="mb-4 p-2 bg-primary-red/10 dark:bg-primary-red/20 rounded-lg">
                            <div className="text-sm text-primary-red font-medium">
                                Ödenmemiş Faturalar Var
                            </div>
                        </div>
                    )}

                    <div className="flex gap-2">
                        <Button 
                            variant="ghost" 
                            size="sm" 
                            className="flex-1" 
                            icon={Eye}
                            onClick={() => handleUnitAction(unit, 'view')}
                        >
                            Detay
                        </Button>
                        <Button 
                            variant="ghost" 
                            size="sm" 
                            icon={MoreVertical}
                            onClick={() => handleUnitAction(unit, 'menu')}
                        />
                    </div>
                </div>
            </Card>
        );
    };

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {loading && renderLoadingState()}
            {error && renderErrorState()}
            {!loading && !error && units.length === 0 && renderEmptyState()}
            {!loading && !error && units.length > 0 && units.map(renderUnitCard)}
        </div>
    );
};
</file>

<file path="src/app/dashboard/units/components/UnitsQuickStats.tsx">
import React from 'react';
import { QuickStats } from '@/services/types/property.types';
import Card from '@/app/components/ui/Card';
import { Building, Home, Store, Car } from 'lucide-react';

interface UnitsQuickStatsProps {
    quickStats: QuickStats | null;
    loading: boolean;
}

export const UnitsQuickStats: React.FC<UnitsQuickStatsProps> = ({
    quickStats,
    loading
}) => {
    if (loading) {
        return (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {Array.from({ length: 4 }).map((_, index) => (
                    <Card key={index} className="p-6">
                        <div className="animate-pulse">
                            <div className="flex items-center gap-4">
                                <div className="w-12 h-12 bg-gray-200 rounded-xl"></div>
                                <div className="flex-1">
                                    <div className="h-6 bg-gray-200 rounded mb-2"></div>
                                    <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                                </div>
                            </div>
                        </div>
                    </Card>
                ))}
            </div>
        );
    }

    const apartmentUnits = quickStats?.apartmentUnits.total || 0;
    const villaUnits = quickStats?.villaUnits.total || 0;
    const commercialUnits = quickStats?.commercialUnits.total || 0;
    const parkingSpaces = quickStats?.parkingSpaces.total || 0;

    const statCards = [
        {
            title: 'Apartman Dairesi',
            value: apartmentUnits,
            icon: Building,
            color: 'primary-gold',
            bgColor: 'primary-gold/10 dark:bg-primary-gold/20'
        },
        {
            title: 'Villa',
            value: villaUnits,
            icon: Home,
            color: 'semantic-success-500',
            bgColor: 'semantic-success-500/10 dark:bg-semantic-success-500/20'
        },
        {
            title: 'Ticari Alan',
            value: commercialUnits,
            icon: Store,
            color: 'primary-blue',
            bgColor: 'primary-blue/10 dark:bg-primary-blue/20'
        },
        {
            title: 'Otopark Alanı',
            value: parkingSpaces,
            icon: Car,
            color: 'primary-red',
            bgColor: 'primary-red/10 dark:bg-primary-red/20'
        }
    ];

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {statCards.map((stat, index) => {
                const IconComponent = stat.icon;
                
                return (
                    <Card key={index} className="p-6">
                        <div className="flex items-center gap-4">
                            <div className={`w-12 h-12 bg-${stat.bgColor} rounded-xl flex items-center justify-center`}>
                                <IconComponent className={`h-6 w-6 text-${stat.color}`} />
                            </div>
                            <div>
                                <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                    {stat.value.toLocaleString()}
                                </p>
                                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    {stat.title}
                                </p>
                            </div>
                        </div>
                    </Card>
                );
            })}
        </div>
    );
};
</file>

<file path="src/app/dashboard/units/components/UnitsTableView.tsx">
import React from 'react';
import { Property } from '@/services/types/property.types';
import { propertyService } from '@/services';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import { 
    Search, 
    Download, 
    Eye, 
    MoreVertical,
    CheckCircle,
    AlertCircle,
    RotateCcw,
    Calendar
} from 'lucide-react';

interface UnitsTableViewProps {
    units: Property[];
    loading: boolean;
    error: string | null;
    totalCount: number;
    onUnitAction?: (unit: Property, action: string) => void;
    onExport?: () => void;
}

const statusConfig = {
    OCCUPIED: { label: 'Dolu', color: 'green', icon: CheckCircle },
    AVAILABLE: { label: 'Boş', color: 'blue', icon: AlertCircle },
    UNDER_MAINTENANCE: { label: 'Bakım', color: 'orange', icon: RotateCcw },
    RESERVED: { label: 'Rezerve', color: 'purple', icon: Calendar }
};

export const UnitsTableView: React.FC<UnitsTableViewProps> = ({
    units,
    loading,
    error,
    totalCount,
    onUnitAction,
    onExport
}) => {
    const handleUnitAction = (unit: Property, action: string) => {
        onUnitAction?.(unit, action);
    };

    const renderLoadingState = () => (
        <tr>
            <td colSpan={8} className="py-8 text-center">
                <div className="flex items-center justify-center gap-3">
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-gold"></div>
                    <span className="text-text-light-secondary dark:text-text-secondary">
                        Konutlar yükleniyor...
                    </span>
                </div>
            </td>
        </tr>
    );

    const renderErrorState = () => (
        <tr>
            <td colSpan={8} className="py-8 text-center">
                <div className="text-primary-red">{error}</div>
            </td>
        </tr>
    );

    const renderEmptyState = () => (
        <tr>
            <td colSpan={8} className="py-8 text-center">
                <div className="text-text-light-secondary dark:text-text-secondary">
                    Henüz konut bulunamadı
                </div>
            </td>
        </tr>
    );

    const renderUnitRow = (unit: Property) => {
        const statusInfo = statusConfig[unit.status as keyof typeof statusConfig];
        const StatusIcon = statusInfo.icon;
        const typeInfo = propertyService.getTypeInfo(unit.type);

        return (
            <tr 
                key={unit.id} 
                className="border-b border-border-light dark:border-border-dark hover:bg-background-light-soft dark:hover:bg-background-soft"
            >
                <td className="py-4 px-4">
                    <div>
                        <div className="font-medium text-text-on-light dark:text-text-on-dark">
                            {unit.propertyNumber || unit.name}
                        </div>
                        <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                            {unit.blockNumber && `Blok ${unit.blockNumber}`}
                            {unit.floor && ` • ${unit.floor}. kat`}
                        </div>
                    </div>
                </td>
                <td className="py-4 px-4">
                    <Badge variant="soft" color="secondary">
                        {typeInfo.label}
                    </Badge>
                </td>
                <td className="py-4 px-4 text-text-on-light dark:text-text-on-dark">
                    {unit.area || '--'}
                </td>
                <td className="py-4 px-4">
                    {unit.tenant ? (
                        <div>
                            <div className="font-medium text-text-on-light dark:text-text-on-dark">
                                {unit.tenant.firstName} {unit.tenant.lastName}
                            </div>
                            <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                                Kiracı
                            </div>
                        </div>
                    ) : unit.owner ? (
                        <div>
                            <div className="font-medium text-text-on-light dark:text-text-on-dark">
                                {unit.owner.firstName} {unit.owner.lastName}
                            </div>
                            <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                                Malik
                            </div>
                        </div>
                    ) : (
                        <span className="text-text-light-muted dark:text-text-muted">
                            Boş
                        </span>
                    )}
                </td>
                <td className="py-4 px-4">
                    <div className="flex items-center gap-2">
                        <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
                        <Badge variant="soft" color={statusInfo.color as any}>
                            {statusInfo.label}
                        </Badge>
                    </div>
                </td>
                <td className="py-4 px-4">
                    {unit.bills && unit.bills.length > 0 ? (
                        <span className="text-primary-red font-medium">
                            Var
                        </span>
                    ) : (
                        <span className="text-semantic-success-500">
                            Temiz
                        </span>
                    )}
                </td>
                <td className="py-4 px-4 text-text-light-secondary dark:text-text-secondary">
                    --
                </td>
                <td className="py-4 px-4">
                    <div className="flex items-center gap-2">
                        <Button 
                            variant="ghost" 
                            size="sm" 
                            icon={Eye}
                            onClick={() => handleUnitAction(unit, 'view')}
                        >
                            Detay
                        </Button>
                        <Button 
                            variant="ghost" 
                            size="sm" 
                            icon={MoreVertical}
                            onClick={() => handleUnitAction(unit, 'menu')}
                        />
                    </div>
                </td>
            </tr>
        );
    };

    return (
        <Card>
            <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                        Konut Listesi ({totalCount})
                    </h3>
                    <div className="flex gap-2">
                        <Button variant="ghost" size="sm" icon={Search}>
                            Ara
                        </Button>
                        <Button 
                            variant="ghost" 
                            size="sm" 
                            icon={Download}
                            onClick={onExport}
                        >
                            İndir
                        </Button>
                    </div>
                </div>

                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead>
                            <tr className="border-b border-border-light dark:border-border-dark">
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    Konut
                                </th>
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    Tip
                                </th>
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    m²
                                </th>
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    Sakin
                                </th>
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    Durum
                                </th>
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    Borç
                                </th>
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    Son Ödeme
                                </th>
                                <th className="text-left py-3 px-4 text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                    İşlemler
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading && renderLoadingState()}
                            {error && renderErrorState()}
                            {!loading && !error && units.length === 0 && renderEmptyState()}
                            {!loading && !error && units.length > 0 && units.map(renderUnitRow)}
                        </tbody>
                    </table>
                </div>
            </div>
        </Card>
    );
};
</file>

<file path="src/app/dashboard/page.tsx">
'use client';

import React, { useState } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';

// Dashboard Components
import DashboardHeader from './components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import TopMetricsGrid from './components/TopMetricsGrid';
import FinancialChart from './components/FinancialChart';
import RecentTransactions from './components/RecentTransactions';
import MaintenanceRequests from './components/MaintenanceRequests';
import QuickActions from './components/QuickActions';
import OccupancyStatus from './components/OccupancyStatus';
import TodaysAgenda from './components/TodaysAgenda';
import RecentActivities from './components/RecentActivities';

// Hooks
import { useDashboardMetrics } from '@/hooks/useDashboardMetrics';
import { useMaintenanceRequests } from '@/hooks/useMaintenanceRequests';
import { useAuditLogs } from '@/hooks/useAuditLogs';
import { useTicketStats } from '@/hooks/useTicketStats';

export default function DashboardPage() {
    const [sidebarOpen, setSidebarOpen] = useState(false);

    // Fetch dashboard metrics
    const { totalProperties, assignedProperties, loading, error } = useDashboardMetrics();
    
    // Fetch maintenance requests
    const { requests: maintenanceRequests, loading: maintenanceLoading, error: maintenanceError, totalCount: maintenanceTotalCount } = useMaintenanceRequests(50);

    // Fetch audit logs
    const { logs: auditLogs, loading: auditLogsLoading, error: auditLogsError, totalCount: auditLogsTotalCount } = useAuditLogs({}, 25);

    // Fetch ticket stats
    const { stats: ticketStats, loading: ticketStatsLoading, error: ticketStatsError } = useTicketStats();

    const breadcrumbItems = [
        { label: 'Dashboard', href: '/dashboard' },
    ];

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader title="Dashboard" breadcrumbItems={breadcrumbItems} />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                        <div className="px-4 sm:px-0">

                            {/* Top Metrics Cards */}
                            <TopMetricsGrid 
                                totalProperties={totalProperties}
                                assignedProperties={assignedProperties}
                                loading={loading}
                                ticketStats={ticketStats}
                                ticketStatsLoading={ticketStatsLoading}
                            />
                            
                            {/* Error Display */}
                            {(error || ticketStatsError) && (
                                <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                                    <p className="text-red-600 text-sm">{error || ticketStatsError}</p>
                                </div>
                            )}



                            {/* Two Column Layout */}
                            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">

                                {/* Left Column - 60% */}
                                <div className="lg:col-span-2 space-y-6">

                                    {/* Financial Chart */}
                                    <FinancialChart />

                                    {/* Recent Transactions */}
                                    <RecentTransactions />

                                    {/* Maintenance Requests */}
                                    <MaintenanceRequests 
                                        requests={maintenanceRequests}
                                        loading={maintenanceLoading}
                                        error={maintenanceError}
                                        totalCount={maintenanceTotalCount}
                                    />



                                </div>

                                {/* Right Column - 40% */}
                                <div className="space-y-6">

                                    {/* Quick Actions */}
                                    <QuickActions />

                                    {/* Occupancy Status */}
                                    {/* <OccupancyStatus /> */}

                                    {/* Today's Agenda */}
                                    {/* <TodaysAgenda /> */}

                                    {/* Recent Activities */}
                                    <RecentActivities 
                                        logs={auditLogs}
                                        loading={auditLogsLoading}
                                        error={auditLogsError}
                                    />

                                </div>
                            </div> 
                        </div>
                    </main>
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/data-display/page.tsx">
'use client';

import React, { useState } from 'react';
import { Table, Pagination, DataList, EmptyState, ProgressBar, Badge, Chip, Button, Card } from '@/app/components/ui';
import { UserIcon, TrashIcon, EditIcon } from 'lucide-react';

const DataDisplayDemo = () => {
    const [currentPage, setCurrentPage] = useState(1);
    const [tableData, setTableData] = useState([
        { id: 1, name: 'Ahmet Yılmaz', email: 'ahmet@example.com', role: 'Admin', status: 'Aktif', progress: 85 },
        { id: 2, name: 'Fatma Demir', email: 'fatma@example.com', role: 'Kullanıcı', status: 'Pasif', progress: 60 },
        { id: 3, name: 'Mehmet Kaya', email: 'mehmet@example.com', role: 'Editör', status: 'Aktif', progress: 92 },
        { id: 4, name: 'Ayşe Özkan', email: 'ayse@example.com', role: 'Kullanıcı', status: 'Aktif', progress: 78 },
        { id: 5, name: 'Ali Çelik', email: 'ali@example.com', role: 'Admin', status: 'Pasif', progress: 45 },
    ]);

    const [chips, setChips] = useState([
        { id: 1, label: 'React', color: 'gold' as const },
        { id: 2, label: 'TypeScript', color: 'accent' as const },
        { id: 3, label: 'Next.js', color: 'primary' as const },
        { id: 4, label: 'Tailwind CSS', color: 'secondary' as const },
    ]);

    const tableColumns = [
        { key: 'name', label: 'İsim', width: '200px' },
        { key: 'email', label: 'E-posta', width: '250px' },
        { key: 'role', label: 'Rol', width: '120px' },
        {
            key: 'status',
            label: 'Durum',
            width: '120px',
            render: (value: string) => (
                <Badge
                    color={value === 'Aktif' ? 'gold' : 'red'}
                    size="sm"
                    variant="soft"
                >
                    {value}
                </Badge>
            )
        },
        {
            key: 'progress',
            label: 'İlerleme',
            width: '150px',
            render: (value: number) => (
                <ProgressBar
                    value={value}
                    size="sm"
                    color="gold"
                    showPercentage
                />
            )
        },
        {
            key: 'actions',
            label: 'İşlemler',
            width: '100px',
            render: () => (
                <div className="flex space-x-2">
                    <Button size="sm" variant="ghost">
                        <EditIcon className="h-4 w-4" />
                    </Button>
                    <Button size="sm" variant="ghost" color="red">
                        <TrashIcon className="h-4 w-4" />
                    </Button>
                </div>
            )
        },
    ];

    const listData = [
        {
            id: 1,
            title: 'Ahmet Yılmaz',
            subtitle: 'ahmet@example.com',
            description: 'Son giriş: 2 saat önce',
            badge: 'Admin',
            badgeColor: 'gold' as const,
            meta: <span>Hesap ID: #1234</span>
        },
        {
            id: 2,
            title: 'Fatma Demir',
            subtitle: 'fatma@example.com',
            description: 'Son giriş: 1 gün önce',
            badge: 'Kullanıcı',
            badgeColor: 'secondary' as const,
            meta: <span>Hesap ID: #1235</span>
        },
        {
            id: 3,
            title: 'Mehmet Kaya',
            subtitle: 'mehmet@example.com',
            description: 'Son giriş: 3 gün önce',
            badge: 'Editör',
            badgeColor: 'accent' as const,
            meta: <span>Hesap ID: #1236</span>
        },
    ];

    const handleChipRemove = (id: number) => {
        setChips(chips.filter(chip => chip.id !== id));
    };

    return (
        <div className="min-h-screen bg-background-primary py-8">
            <div className="max-w-7xl mx-auto px-4">
                <h1 className="text-4xl font-bold text-text-primary mb-8">Veri Gösterim Component'leri</h1>

                {/* Table */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Table - Veri Tablosu</h2>
                        <p className="text-text-secondary">Verileri tablo formatında gösterir</p>
                    </div>
                    <div className="p-6">
                        <Table
                            columns={tableColumns}
                            data={tableData}
                            hoverable
                            striped
                        />
                    </div>
                </Card>

                {/* Pagination */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Pagination - Sayfalama</h2>
                        <p className="text-text-secondary">Sayfa geçişi için kullanılır</p>
                    </div>
                    <div className="p-6">
                        <Pagination
                            currentPage={currentPage}
                            totalPages={10}
                            onPageChange={setCurrentPage}
                            showFirstLast
                            showPrevNext
                        />
                    </div>
                </Card>

                {/* DataList */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">DataList - Liste Görünümü</h2>
                        <p className="text-text-secondary">Verileri liste formatında gösterir</p>
                    </div>
                    <div className="p-6">
                        <DataList
                            items={listData}
                            clickable
                            showAvatar
                            showArrow
                            onItemClick={(item) => console.log('Tıklanan item:', item)}
                        />
                    </div>
                </Card>

                {/* EmptyState */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">EmptyState - Boş Durum</h2>
                        <p className="text-text-secondary">Veri olmadığında gösterilir</p>
                    </div>
                    <div className="p-6">
                        <EmptyState
                            icon="inbox"
                            title="Henüz veri yok"
                            description="Buraya veri eklendiğinde görüntülenecek"
                            action={
                                <Button variant="ghost" className="border-primary-gold text-text-accent hover:bg-primary-gold/10">
                                    Veri Ekle
                                </Button>
                            }
                        />
                    </div>
                </Card>

                {/* ProgressBar */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">ProgressBar - İlerleme Çubuğu</h2>
                        <p className="text-text-secondary">İlerleme durumunu gösterir</p>
                    </div>
                    <div className="p-6 space-y-4">
                        <ProgressBar value={25} color="gold" showPercentage />
                        <ProgressBar value={50} color="accent" showPercentage label="Tamamlanan" />
                        <ProgressBar value={75} color="primary" showPercentage size="lg" />
                        <ProgressBar value={90} color="red" showPercentage striped animated />
                    </div>
                </Card>

                {/* Badge */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Badge - Durum Etiketi</h2>
                        <p className="text-text-secondary">Durum ve etiket gösterimi için kullanılır</p>
                    </div>
                    <div className="p-6">
                        <div className="flex flex-wrap gap-2 mb-4">
                            <Badge color="gold">Yeni</Badge>
                            <Badge color="accent">Aktif</Badge>
                            <Badge color="red">Pasif</Badge>
                            <Badge color="primary">Beklemede</Badge>
                            <Badge color="secondary">VIP</Badge>
                        </div>
                        <div className="flex flex-wrap gap-2 mb-4">
                            <Badge variant="outline" color="gold">Outline</Badge>
                            <Badge variant="solid" color="gold">Solid</Badge>
                            <Badge variant="soft" color="accent">Soft</Badge>
                            <Badge dot color="gold">Noktalı</Badge>
                        </div>
                        <div className="flex flex-wrap gap-2">
                            <Badge size="sm" color="gold">Küçük</Badge>
                            <Badge size="md" color="accent">Orta</Badge>
                            <Badge size="lg" color="red">Büyük</Badge>
                        </div>
                    </div>
                </Card>

                {/* Chip */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Chip - Küçük Etiket</h2>
                        <p className="text-text-secondary">Kaldırılabilir küçük etiketler</p>
                    </div>
                    <div className="p-6">
                        <div className="flex flex-wrap gap-2 mb-4">
                            {chips.map(chip => (
                                <Chip
                                    key={chip.id}
                                    color={chip.color}
                                    removable
                                    onRemove={() => handleChipRemove(chip.id)}
                                >
                                    {chip.label}
                                </Chip>
                            ))}
                        </div>
                        <div className="flex flex-wrap gap-2 mb-4">
                            <Chip variant="outline" color="gold">Outline</Chip>
                            <Chip variant="solid" color="gold">Solid</Chip>
                            <Chip avatar="https://via.placeholder.com/32">Avatar</Chip>
                        </div>
                        <div className="flex flex-wrap gap-2">
                            <Chip size="sm" color="gold">Küçük</Chip>
                            <Chip size="md" color="accent">Orta</Chip>
                            <Chip size="lg" color="red">Büyük</Chip>
                        </div>
                    </div>
                </Card>
            </div>
        </div>
    );
};

export default DataDisplayDemo;
</file>

<file path="src/app/feedback/page.tsx">
'use client';

import React, { useState } from 'react';
import {
    Toast,
    ToastContainer,
    Alert,
    Tooltip,
    Skeleton,
    SkeletonAvatar,
    SkeletonCard,
    SkeletonList,
    SkeletonTable,
    SkeletonText,
    Spinner,
    SpinnerOverlay,
    SpinnerButton,
    SpinnerCard,
    SpinnerInline,
    Button,
    Card
} from '@/app/components/ui';
import { HelpCircle, RefreshCw, User, Settings } from 'lucide-react';

const FeedbackDemo = () => {
    const [toasts, setToasts] = useState<any[]>([]);
    const [alertVisible, setAlertVisible] = useState({
        success: true,
        error: true,
        warning: true,
        info: true,
    });
    const [showSkeletons, setShowSkeletons] = useState(true);
    const [loadingStates, setLoadingStates] = useState({
        overlay: false,
        button: false,
        inline: false,
    });

    const addToast = (type: 'success' | 'error' | 'warning' | 'info') => {
        const messages = {
            success: { title: 'Başarılı!', message: 'İşlem başarıyla tamamlandı.' },
            error: { title: 'Hata!', message: 'Bir hata oluştu, lütfen tekrar deneyin.' },
            warning: { title: 'Uyarı!', message: 'Bu işlem geri alınamaz.' },
            info: { title: 'Bilgi', message: 'Yeni güncellemeler mevcut.' },
        };

        const newToast = {
            id: Date.now().toString(),
            type,
            ...messages[type],
        };

        setToasts(prev => [...prev, newToast]);
    };

    const removeToast = (id: string) => {
        setToasts(prev => prev.filter(toast => toast.id !== id));
    };

    const toggleSkeleton = () => {
        setShowSkeletons(!showSkeletons);
    };

    const toggleLoading = (type: 'overlay' | 'button' | 'inline') => {
        setLoadingStates(prev => ({
            ...prev,
            [type]: !prev[type]
        }));

        // Auto reset after 3 seconds
        setTimeout(() => {
            setLoadingStates(prev => ({
                ...prev,
                [type]: false
            }));
        }, 3000);
    };

    return (
        <div className="min-h-screen bg-background-primary py-8">
            <div className="max-w-7xl mx-auto px-4">
                <h1 className="text-4xl font-bold text-text-primary mb-8">Geri Bildirim Component'leri</h1>

                {/* Toast */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Toast - Bildirim Mesajı</h2>
                        <p className="text-text-secondary">Geçici bildirim mesajları gösterir</p>
                    </div>
                    <div className="p-6">
                        <div className="flex flex-wrap gap-2">
                            <Button onClick={() => addToast('success')} variant="ghost" className="border-green-600 text-green-400">
                                Başarı Toast'ı
                            </Button>
                            <Button onClick={() => addToast('error')} variant="ghost" className="border-primary-red text-primary-red">
                                Hata Toast'ı
                            </Button>
                            <Button onClick={() => addToast('warning')} variant="ghost" className="border-yellow-600 text-yellow-400">
                                Uyarı Toast'ı
                            </Button>
                            <Button onClick={() => addToast('info')} variant="ghost" className="border-primary-gold text-primary-gold">
                                Bilgi Toast'ı
                            </Button>
                        </div>
                    </div>
                </Card>

                {/* Alert */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Alert - Uyarı Kutusu</h2>
                        <p className="text-text-secondary">Önemli mesajları vurgular</p>
                    </div>
                    <div className="p-6 space-y-4">
                        {alertVisible.success && (
                            <Alert
                                type="success"
                                title="Başarılı İşlem"
                                closable
                                onClose={() => setAlertVisible(prev => ({ ...prev, success: false }))}
                            >
                                Hesabınız başarıyla oluşturuldu. E-posta adresinizi doğrulamayı unutmayın.
                            </Alert>
                        )}

                        {alertVisible.error && (
                            <Alert
                                type="error"
                                title="Hata Oluştu"
                                variant="outline"
                                closable
                                onClose={() => setAlertVisible(prev => ({ ...prev, error: false }))}
                            >
                                Sunucu bağlantısı kurulamadı. Lütfen internet bağlantınızı kontrol edin.
                            </Alert>
                        )}

                        {alertVisible.warning && (
                            <Alert
                                type="warning"
                                title="Dikkat!"
                                variant="solid"
                                closable
                                onClose={() => setAlertVisible(prev => ({ ...prev, warning: false }))}
                            >
                                Bu işlem geri alınamaz. Devam etmek istediğinizden emin misiniz?
                            </Alert>
                        )}

                        {alertVisible.info && (
                            <Alert
                                type="info"
                                title="Bilgilendirme"
                                closable
                                onClose={() => setAlertVisible(prev => ({ ...prev, info: false }))}
                            >
                                Yeni özellikler eklendi! Daha fazla bilgi için dokümantasyonu inceleyin.
                            </Alert>
                        )}
                    </div>
                </Card>

                {/* Tooltip */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Tooltip - Açıklama Balonu</h2>
                        <p className="text-text-secondary">Hover ile açıklama gösterir</p>
                    </div>
                    <div className="p-6">
                        <div className="flex flex-wrap gap-4 items-center">
                            <Tooltip content="Bu bir yardım ikonu" position="top">
                                <Button variant="ghost" size="sm">
                                    <HelpCircle className="h-4 w-4" />
                                </Button>
                            </Tooltip>

                            <Tooltip content="Ayarlara git" position="bottom">
                                <Button variant="ghost" size="sm">
                                    <Settings className="h-4 w-4" />
                                </Button>
                            </Tooltip>

                            <Tooltip content="Kullanıcı profili" position="left">
                                <Button variant="ghost" size="sm">
                                    <User className="h-4 w-4" />
                                </Button>
                            </Tooltip>

                            <Tooltip content="Sayfayı yenile" position="right">
                                <Button variant="ghost" size="sm">
                                    <RefreshCw className="h-4 w-4" />
                                </Button>
                            </Tooltip>
                        </div>
                    </div>
                </Card>

                {/* Skeleton */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Skeleton - Yükleme Placeholder'ı</h2>
                        <p className="text-text-secondary">İçerik yüklenene kadar gösterilen placeholder</p>
                    </div>
                    <div className="p-6">
                        <div className="mb-4">
                            <Button onClick={toggleSkeleton} variant="ghost" className="border-primary-gold text-primary-gold">
                                {showSkeletons ? 'İçeriği Göster' : 'Skeleton Göster'}
                            </Button>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {/* Avatar Skeleton */}
                            <div>
                                <h3 className="text-lg font-medium text-text-primary mb-3">Avatar</h3>
                                {showSkeletons ? (
                                    <SkeletonAvatar />
                                ) : (
                                    <div className="w-10 h-10 bg-primary-gold rounded-full flex items-center justify-center">
                                        <span className="text-background-primary font-semibold">AY</span>
                                    </div>
                                )}
                            </div>

                            {/* Card Skeleton */}
                            <div>
                                <h3 className="text-lg font-medium text-text-primary mb-3">Kart</h3>
                                {showSkeletons ? (
                                    <SkeletonCard />
                                ) : (
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <img src="https://via.placeholder.com/300x200" alt="Demo" className="w-full h-48 object-cover rounded mb-3" />
                                        <h4 className="text-text-primary font-semibold mb-2">Başlık</h4>
                                        <p className="text-text-secondary text-sm">Bu bir örnek içeriktir.</p>
                                    </div>
                                )}
                            </div>

                            {/* List Skeleton */}
                            <div>
                                <h3 className="text-lg font-medium text-text-primary mb-3">Liste</h3>
                                {showSkeletons ? (
                                    <SkeletonList items={3} />
                                ) : (
                                    <div className="space-y-4">
                                        {[1, 2, 3].map(i => (
                                            <div key={i} className="flex items-center space-x-4">
                                                <div className="w-10 h-10 bg-primary-gold rounded-full"></div>
                                                <div>
                                                    <div className="text-text-primary font-medium">Kullanıcı {i}</div>
                                                    <div className="text-text-secondary text-sm">user{i}@example.com</div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>

                            {/* Text Skeleton */}
                            <div>
                                <h3 className="text-lg font-medium text-text-primary mb-3">Metin</h3>
                                {showSkeletons ? (
                                    <SkeletonText lines={4} />
                                ) : (
                                    <div className="space-y-2 text-text-secondary">
                                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                                        <p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
                                        <p>Ut enim ad minim veniam, quis nostrud exercitation.</p>
                                        <p>Duis aute irure dolor in reprehenderit in voluptate.</p>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </Card>

                {/* Spinner */}
                <Card className="mb-8 bg-background-card border-primary-dark-gray/20">
                    <div className="p-6 border-b border-primary-dark-gray/20">
                        <h2 className="text-xl font-semibold mb-2 text-text-primary">Spinner - Yükleme Animasyonu</h2>
                        <p className="text-text-secondary">Yükleme durumlarında gösterilen animasyonlar</p>
                    </div>
                    <div className="p-6 space-y-6">
                        {/* Basic Spinners */}
                        <div>
                            <h3 className="text-lg font-medium text-text-primary mb-3">Temel Spinner'lar</h3>
                            <div className="flex flex-wrap gap-4 items-center">
                                <Spinner size="xs" color="gold" />
                                <Spinner size="sm" color="gold" />
                                <Spinner size="md" color="gold" />
                                <Spinner size="lg" color="gold" />
                                <Spinner size="xl" color="gold" />
                            </div>
                        </div>

                        {/* Spinner Variants */}
                        <div>
                            <h3 className="text-lg font-medium text-text-primary mb-3">Farklı Türler</h3>
                            <div className="flex flex-wrap gap-6 items-center">
                                <div className="text-center">
                                    <Spinner variant="default" color="gold" />
                                    <p className="text-xs text-text-secondary mt-2">Default</p>
                                </div>
                                <div className="text-center">
                                    <Spinner variant="dots" color="gold" />
                                    <p className="text-xs text-text-secondary mt-2">Dots</p>
                                </div>
                                <div className="text-center">
                                    <Spinner variant="bars" color="gold" />
                                    <p className="text-xs text-text-secondary mt-2">Bars</p>
                                </div>
                                <div className="text-center">
                                    <Spinner variant="pulse" color="gold" />
                                    <p className="text-xs text-text-secondary mt-2">Pulse</p>
                                </div>
                                <div className="text-center">
                                    <Spinner variant="ring" color="gold" />
                                    <p className="text-xs text-text-secondary mt-2">Ring</p>
                                </div>
                            </div>
                        </div>

                        {/* Interactive Examples */}
                        <div>
                            <h3 className="text-lg font-medium text-text-primary mb-3">Etkileşimli Örnekler</h3>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                {/* Overlay Example */}
                                <div>
                                    <Button
                                        onClick={() => toggleLoading('overlay')}
                                        variant="ghost"
                                        className="border-primary-gold text-primary-gold mb-3"
                                    >
                                        Overlay Göster
                                    </Button>
                                    <SpinnerOverlay className={loadingStates.overlay ? '' : 'hidden'}>
                                        <div className="bg-background-secondary p-6 rounded-lg">
                                            <h4 className="text-text-primary font-medium mb-2">İçerik Alanı</h4>
                                            <p className="text-text-secondary">Bu alan loading sırasında blur olur.</p>
                                        </div>
                                    </SpinnerOverlay>
                                </div>

                                {/* Button Example */}
                                <div>
                                    <Button
                                        onClick={() => toggleLoading('button')}
                                        variant="ghost"
                                        className="border-primary-gold text-primary-gold mb-3"
                                    >
                                        Button Loading
                                    </Button>
                                    {loadingStates.button && <SpinnerButton text="Kaydediliyor..." />}
                                </div>

                                {/* Inline Example */}
                                <div>
                                    <Button
                                        onClick={() => toggleLoading('inline')}
                                        variant="ghost"
                                        className="border-primary-gold text-primary-gold mb-3"
                                    >
                                        Inline Loading
                                    </Button>
                                    <div className="flex items-center space-x-2">
                                        <span className="text-text-primary">Veriler yükleniyor</span>
                                        {loadingStates.inline && <SpinnerInline />}
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Card Example */}
                        <div>
                            <h3 className="text-lg font-medium text-text-primary mb-3">Kart İçinde Loading</h3>
                            <div className="max-w-md">
                                <SpinnerCard
                                    title="Veriler Yükleniyor"
                                    description="Lütfen bekleyiniz, bu işlem birkaç saniye sürebilir."
                                />
                            </div>
                        </div>
                    </div>
                </Card>
            </div>

            {/* Toast Container */}
            <ToastContainer
                toasts={toasts}
                onRemove={removeToast}
            />
        </div>
    );
};

export default FeedbackDemo;
</file>

<file path="src/app/layout-demo/page.tsx">
'use client'

import { useState } from 'react'
import {
    Card, CardHeader, CardBody, CardFooter, CardTitle, CardSubtitle,
    Modal, ModalHeader, ModalBody, ModalFooter,
    Drawer, DrawerHeader, DrawerBody, DrawerFooter,
    Tabs, Accordion, Collapse,
    Button, IconButton
} from '../components/ui'
import {
    Settings,
    User,
    Bell,
    Heart,
    Star,
    Calendar,
    FileText,
    MessageCircle,
    HelpCircle,
    ChevronRight,
    Plus,
    Edit2,
    Trash2,
    Eye,
    Download,
    Share2,
    BookOpen,
    Info,
    CheckCircle,
    AlertTriangle,
    X
} from 'lucide-react'

export default function LayoutDemo() {
    const [modalOpen, setModalOpen] = useState(false)
    const [drawerOpen, setDrawerOpen] = useState(false)
    const [drawerPosition, setDrawerPosition] = useState<'left' | 'right' | 'top' | 'bottom'>('right')
    const [selectedTab, setSelectedTab] = useState('profile')

    const tabItems = [
        {
            id: 'profile',
            label: 'Profil',
            icon: User,
            content: (
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-text-primary">Profil Bilgileri</h3>
                    <p className="text-text-secondary">
                        Kullanıcı profil bilgilerinizi bu sekmede düzenleyebilirsiniz.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Card>
                            <CardBody>
                                <h4 className="text-text-primary font-semibold">Ad Soyad</h4>
                                <p className="text-text-secondary">Ahmet Yılmaz</p>
                            </CardBody>
                        </Card>
                        <Card>
                            <CardBody>
                                <h4 className="text-text-primary font-semibold">E-posta</h4>
                                <p className="text-text-secondary">ahmet@example.com</p>
                            </CardBody>
                        </Card>
                    </div>
                </div>
            )
        },
        {
            id: 'settings',
            label: 'Ayarlar',
            icon: Settings,
            badge: 'Yeni',
            content: (
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-text-primary">Uygulama Ayarları</h3>
                    <p className="text-text-secondary">
                        Uygulama tercihlerinizi ve bildirim ayarlarınızı yapılandırın.
                    </p>
                    <div className="space-y-3">
                        <div className="flex items-center justify-between p-3 bg-background-secondary rounded-lg">
                            <span className="text-text-primary">E-posta Bildirimleri</span>
                            <Button size="sm" variant="ghost">Açık</Button>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-background-secondary rounded-lg">
                            <span className="text-text-primary">Push Bildirimleri</span>
                            <Button size="sm" variant="ghost">Kapalı</Button>
                        </div>
                    </div>
                </div>
            )
        },
        {
            id: 'notifications',
            label: 'Bildirimler',
            icon: Bell,
            badge: '3',
            content: (
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-text-primary">Son Bildirimler</h3>
                    <div className="space-y-2">
                        {['Yeni mesaj alındı', 'Profil güncellendi', 'Sistem bakımı'].map((notification, index) => (
                            <div key={index} className="p-3 bg-background-secondary rounded-lg">
                                <p className="text-text-primary">{notification}</p>
                                <p className="text-text-secondary text-sm">{index + 1} saat önce</p>
                            </div>
                        ))}
                    </div>
                </div>
            )
        },
        {
            id: 'help',
            label: 'Yardım',
            icon: HelpCircle,
            disabled: false,
            content: (
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-text-primary">Yardım ve Destek</h3>
                    <p className="text-text-secondary">
                        Sıkça sorulan sorular ve destek kaynaklarına buradan ulaşabilirsiniz.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Card clickable hover>
                            <CardBody>
                                <h4 className="text-text-primary font-semibold flex items-center">
                                    <BookOpen className="w-4 h-4 mr-2" />
                                    Dokümantasyon
                                </h4>
                                <p className="text-text-secondary text-sm mt-2">
                                    Detaylı kullanım kılavuzu
                                </p>
                            </CardBody>
                        </Card>
                        <Card clickable hover>
                            <CardBody>
                                <h4 className="text-text-primary font-semibold flex items-center">
                                    <MessageCircle className="w-4 h-4 mr-2" />
                                    Canlı Destek
                                </h4>
                                <p className="text-text-secondary text-sm mt-2">
                                    7/24 canlı destek hattı
                                </p>
                            </CardBody>
                        </Card>
                    </div>
                </div>
            )
        }
    ]

    const accordionItems = [
        {
            id: 'general',
            title: 'Genel Bilgiler',
            subtitle: 'Temel uygulama bilgileri',
            icon: Info,
            content: (
                <div className="space-y-3">
                    <p className="text-text-secondary">
                        Bu uygulama modern React ve Next.js teknolojileri kullanılarak geliştirilmiştir.
                    </p>
                    <div className="space-y-2">
                        <div className="flex justify-between">
                            <span className="text-text-secondary">Versiyon:</span>
                            <span className="text-text-primary">1.0.0</span>
                        </div>
                        <div className="flex justify-between">
                            <span className="text-text-secondary">Son Güncelleme:</span>
                            <span className="text-text-primary">15 Ocak 2024</span>
                        </div>
                    </div>
                </div>
            )
        },
        {
            id: 'features',
            title: 'Özellikler',
            subtitle: 'Mevcut özellikler ve yetenekler',
            icon: CheckCircle,
            badge: 'Yeni',
            content: (
                <div className="space-y-3">
                    <ul className="space-y-2">
                        <li className="flex items-center text-text-secondary">
                            <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                            Dark Theme Desteği
                        </li>
                        <li className="flex items-center text-text-secondary">
                            <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                            Responsive Tasarım
                        </li>
                        <li className="flex items-center text-text-secondary">
                            <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                            TypeScript Desteği
                        </li>
                        <li className="flex items-center text-text-secondary">
                            <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                            Modern UI Components
                        </li>
                    </ul>
                </div>
            )
        },
        {
            id: 'limitations',
            title: 'Sınırlamalar',
            subtitle: 'Mevcut kısıtlamalar ve bilinen sorunlar',
            icon: AlertTriangle,
            content: (
                <div className="space-y-3">
                    <p className="text-text-secondary">
                        Beta sürümde olan bazı özellikler sınırlı olabilir.
                    </p>
                    <ul className="space-y-2">
                        <li className="flex items-center text-text-secondary">
                            <AlertTriangle className="w-4 h-4 mr-2 text-yellow-500" />
                            Offline modu henüz desteklenmiyor
                        </li>
                        <li className="flex items-center text-text-secondary">
                            <AlertTriangle className="w-4 h-4 mr-2 text-yellow-500" />
                            Bazı animasyonlar performans sorunlarına neden olabilir
                        </li>
                    </ul>
                </div>
            )
        }
    ]

    return (
        <div className="min-h-screen bg-background-primary py-10">
            <div className="max-w-7xl mx-auto px-6">
                {/* Header */}
                <div className="text-center mb-10">
                    <h1 className="text-4xl font-bold text-text-primary font-helvetica mb-4">
                        Layout & İçerik Component'leri Demo
                    </h1>
                    <div className="w-24 h-1 bg-gradient-gold mx-auto rounded-full mb-6"></div>
                    <p className="text-text-secondary text-lg font-inter max-w-3xl mx-auto">
                        Modern layout ve içerik yönetimi component'lerinin kapsamlı demo sayfası.
                        Kartlar, modal'lar, drawer'lar, tab'lar ve daha fazlasını keşfedin.
                    </p>
                </div>

                {/* Cards Section */}
                <div className="mb-12">
                    <h2 className="text-2xl font-bold text-text-primary font-helvetica mb-6">
                        Card Component'leri
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                        {/* Basic Card */}
                        <Card
                            title="Temel Kart"
                            subtitle="Basit card örneği"
                            icon={FileText}
                        >
                            <p className="text-text-secondary">
                                Bu temel bir card component'i örneğidir. İçeriğinizi düzenli bir şekilde sunmanız için idealdir.
                            </p>
                        </Card>

                        {/* Interactive Card */}
                        <Card
                            variant="bordered"
                            hover
                            clickable
                            title="Etkileşimli Kart"
                            subtitle="Hover ve click efektleri"
                            icon={Heart}
                            headerAction={
                                <IconButton icon={Star} size="sm" variant="ghost" />
                            }
                        >
                            <p className="text-text-secondary">
                                Bu karta hover yapın veya tıklayın. Görsel geri bildirimler alacaksınız.
                            </p>
                        </Card>

                        {/* Glass Card */}
                        <Card
                            variant="glass"
                            title="Glass Effect"
                            subtitle="Şeffaf arka plan"
                            icon={Calendar}
                            footer={
                                <div className="flex gap-2">
                                    <Button size="sm" variant="ghost">İptal</Button>
                                    <Button size="sm">Tamam</Button>
                                </div>
                            }
                        >
                            <p className="text-text-secondary">
                                Glass effect ile modern görünüm.
                            </p>
                        </Card>
                    </div>

                    {/* Card Variants */}
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <Card variant="default" padding="sm">
                            <CardTitle>Default</CardTitle>
                            <CardSubtitle>Varsayılan stil</CardSubtitle>
                        </Card>
                        <Card variant="bordered" padding="sm">
                            <CardTitle>Bordered</CardTitle>
                            <CardSubtitle>Kalın kenarlık</CardSubtitle>
                        </Card>
                        <Card variant="elevated" padding="sm">
                            <CardTitle>Elevated</CardTitle>
                            <CardSubtitle>Yükseltilmiş görünüm</CardSubtitle>
                        </Card>
                        <Card variant="glass" padding="sm">
                            <CardTitle>Glass</CardTitle>
                            <CardSubtitle>Şeffaf efekt</CardSubtitle>
                        </Card>
                    </div>
                </div>

                {/* Modal & Drawer Section */}
                <div className="mb-12">
                    <h2 className="text-2xl font-bold text-text-primary font-helvetica mb-6">
                        Modal & Drawer Component'leri
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Card>
                            <CardHeader>
                                <CardTitle>Modal Örnekleri</CardTitle>
                                <CardSubtitle>Pop-up dialog'lar</CardSubtitle>
                            </CardHeader>
                            <CardBody>
                                <div className="space-y-3">
                                    <Button
                                        onClick={() => setModalOpen(true)}
                                        icon={Plus}
                                        fullWidth
                                    >
                                        Modal Aç
                                    </Button>
                                    <p className="text-text-secondary text-sm">
                                        Farklı boyut ve stil seçenekleri ile modal pencereler.
                                    </p>
                                </div>
                            </CardBody>
                        </Card>

                        <Card>
                            <CardHeader>
                                <CardTitle>Drawer Örnekleri</CardTitle>
                                <CardSubtitle>Yan panel'ler</CardSubtitle>
                            </CardHeader>
                            <CardBody>
                                <div className="space-y-3">
                                    <div className="grid grid-cols-2 gap-2">
                                        <Button
                                            size="sm"
                                            onClick={() => {
                                                setDrawerPosition('left')
                                                setDrawerOpen(true)
                                            }}
                                        >
                                            Sol
                                        </Button>
                                        <Button
                                            size="sm"
                                            onClick={() => {
                                                setDrawerPosition('right')
                                                setDrawerOpen(true)
                                            }}
                                        >
                                            Sağ
                                        </Button>
                                        <Button
                                            size="sm"
                                            onClick={() => {
                                                setDrawerPosition('top')
                                                setDrawerOpen(true)
                                            }}
                                        >
                                            Üst
                                        </Button>
                                        <Button
                                            size="sm"
                                            onClick={() => {
                                                setDrawerPosition('bottom')
                                                setDrawerOpen(true)
                                            }}
                                        >
                                            Alt
                                        </Button>
                                    </div>
                                    <p className="text-text-secondary text-sm">
                                        Dört farklı pozisyondan açılabilen drawer'lar.
                                    </p>
                                </div>
                            </CardBody>
                        </Card>
                    </div>
                </div>

                {/* Tabs Section */}
                <div className="mb-12">
                    <h2 className="text-2xl font-bold text-text-primary font-helvetica mb-6">
                        Tabs Component'i
                    </h2>

                    <Card>
                        <CardBody className="p-0">
                            <Tabs
                                items={tabItems}
                                value={selectedTab}
                                onValueChange={setSelectedTab}
                                variant="underline"
                            />
                        </CardBody>
                    </Card>

                    {/* Tab Variants */}
                    <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Card>
                            <CardHeader>
                                <CardTitle>Pills Tabs</CardTitle>
                            </CardHeader>
                            <CardBody className="p-0">
                                <Tabs
                                    items={tabItems.slice(0, 3)}
                                    variant="pills"
                                    size="sm"
                                />
                            </CardBody>
                        </Card>

                        <Card>
                            <CardHeader>
                                <CardTitle>Cards Tabs</CardTitle>
                            </CardHeader>
                            <CardBody className="p-0">
                                <Tabs
                                    items={tabItems.slice(0, 3)}
                                    variant="cards"
                                    size="sm"
                                />
                            </CardBody>
                        </Card>
                    </div>
                </div>

                {/* Accordion Section */}
                <div className="mb-12">
                    <h2 className="text-2xl font-bold text-text-primary font-helvetica mb-6">
                        Accordion Component'i
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Card>
                            <CardHeader>
                                <CardTitle>Tekli Accordion</CardTitle>
                                <CardSubtitle>Bir seferde bir panel açık</CardSubtitle>
                            </CardHeader>
                            <CardBody>
                                <Accordion
                                    items={accordionItems}
                                    type="single"
                                    variant="minimal"
                                />
                            </CardBody>
                        </Card>

                        <Card>
                            <CardHeader>
                                <CardTitle>Çoklu Accordion</CardTitle>
                                <CardSubtitle>Birden fazla panel açık olabilir</CardSubtitle>
                            </CardHeader>
                            <CardBody>
                                <Accordion
                                    items={accordionItems}
                                    type="multiple"
                                    variant="bordered"
                                    size="sm"
                                />
                            </CardBody>
                        </Card>
                    </div>
                </div>

                {/* Collapse Section */}
                <div className="mb-12">
                    <h2 className="text-2xl font-bold text-text-primary font-helvetica mb-6">
                        Collapse Component'i
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Card>
                            <CardHeader>
                                <CardTitle>Temel Collapse</CardTitle>
                            </CardHeader>
                            <CardBody>
                                <div className="space-y-4">
                                    <Collapse
                                        title="Proje Detayları"
                                        subtitle="Daha fazla bilgi için tıklayın"
                                        icon={FileText}
                                    >
                                        <div className="space-y-3">
                                            <p className="text-text-secondary">
                                                Bu proje React ve Next.js kullanılarak geliştirilmiştir.
                                            </p>
                                            <div className="flex gap-2">
                                                <Button size="sm" variant="ghost">Düzenle</Button>
                                                <Button size="sm" variant="ghost">Paylaş</Button>
                                            </div>
                                        </div>
                                    </Collapse>

                                    <Collapse
                                        title="Ekip Üyeleri"
                                        icon={User}
                                        defaultOpen
                                        variant="filled"
                                    >
                                        <div className="space-y-2">
                                            {['Ahmet Yılmaz', 'Ayşe Demir', 'Mehmet Kaya'].map((name, index) => (
                                                <div key={index} className="flex items-center justify-between p-2 bg-background-secondary rounded">
                                                    <span className="text-text-primary">{name}</span>
                                                    <IconButton icon={MessageCircle} size="sm" variant="ghost" />
                                                </div>
                                            ))}
                                        </div>
                                    </Collapse>
                                </div>
                            </CardBody>
                        </Card>

                        <Card>
                            <CardHeader>
                                <CardTitle>Ghost Collapse</CardTitle>
                            </CardHeader>
                            <CardBody>
                                <div className="space-y-4">
                                    <Collapse
                                        title="Minimal Görünüm"
                                        ghost
                                        showIcon={false}
                                    >
                                        <p className="text-text-secondary">
                                            Ghost mode ile minimal ve temiz görünüm.
                                        </p>
                                    </Collapse>

                                    <Collapse
                                        title="Custom Trigger"
                                        trigger={
                                            <div className="flex items-center justify-between p-3 bg-primary-gold/10 rounded-lg cursor-pointer hover:bg-primary-gold/20 transition-colors">
                                                <span className="text-text-primary font-semibold">Özel Tetikleyici</span>
                                                <ChevronRight className="w-4 h-4 text-text-secondary" />
                                            </div>
                                        }
                                    >
                                        <div className="mt-3 p-3 bg-background-secondary rounded-lg">
                                            <p className="text-text-secondary">
                                                Özelleştirilmiş tetikleyici ile farklı görünümler elde edebilirsiniz.
                                            </p>
                                        </div>
                                    </Collapse>
                                </div>
                            </CardBody>
                        </Card>
                    </div>
                </div>

                {/* Footer */}
                <div className="text-center">
                    <p className="text-text-secondary font-inter">
                        Bu demo sayfası, NinetyNineAdmin projesinin layout component'lerini göstermektedir
                    </p>
                    <div className="flex justify-center items-center space-x-2 mt-4">
                        <div className="w-2 h-2 bg-primary-gold rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/60 rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/30 rounded-full"></div>
                    </div>
                </div>
            </div>

            {/* Modal Example */}
            <Modal
                isOpen={modalOpen}
                onClose={() => setModalOpen(false)}
                title="Örnek Modal"
                subtitle="Bu bir demo modal penceresidir"
                icon={Settings}
                size="lg"
                footer={
                    <div className="flex gap-3 justify-end">
                        <Button variant="ghost" onClick={() => setModalOpen(false)}>
                            İptal
                        </Button>
                        <Button onClick={() => setModalOpen(false)}>
                            Tamam
                        </Button>
                    </div>
                }
            >
                <div className="space-y-4">
                    <p className="text-text-secondary">
                        Bu modal penceresi farklı boyutlarda ve stillerde kullanılabilir.
                        Escape tuşu ile kapatabilir veya overlay'e tıklayarak çıkış yapabilirsiniz.
                    </p>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="p-4 bg-background-secondary rounded-lg">
                            <h4 className="text-text-primary font-semibold mb-2">Özellik 1</h4>
                            <p className="text-text-secondary text-sm">
                                Modal içerisinde karmaşık içerikler de yerleştirilebilir.
                            </p>
                        </div>
                        <div className="p-4 bg-background-secondary rounded-lg">
                            <h4 className="text-text-primary font-semibold mb-2">Özellik 2</h4>
                            <p className="text-text-secondary text-sm">
                                Responsive tasarım ile her cihazda mükemmel görünüm.
                            </p>
                        </div>
                    </div>
                </div>
            </Modal>

            {/* Drawer Example */}
            <Drawer
                isOpen={drawerOpen}
                onClose={() => setDrawerOpen(false)}
                position={drawerPosition}
                title={`${drawerPosition.charAt(0).toUpperCase() + drawerPosition.slice(1)} Drawer`}
                subtitle="Bu bir demo drawer'dır"
                icon={Settings}
                size="md"
                footer={
                    <div className="flex gap-3">
                        <Button variant="ghost" onClick={() => setDrawerOpen(false)} fullWidth>
                            İptal
                        </Button>
                        <Button onClick={() => setDrawerOpen(false)} fullWidth>
                            Kaydet
                        </Button>
                    </div>
                }
            >
                <div className="space-y-4">
                    <p className="text-text-secondary">
                        Drawer component'i {drawerPosition} pozisyonundan açılıyor.
                        Farklı pozisyonlardan açılabilen yan panel'ler oluşturabilirsiniz.
                    </p>

                    <div className="space-y-3">
                        <div className="flex items-center justify-between p-3 bg-background-secondary rounded-lg">
                            <span className="text-text-primary">Ayar 1</span>
                            <Button size="sm" variant="ghost">Düzenle</Button>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-background-secondary rounded-lg">
                            <span className="text-text-primary">Ayar 2</span>
                            <Button size="sm" variant="ghost">Düzenle</Button>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-background-secondary rounded-lg">
                            <span className="text-text-primary">Ayar 3</span>
                            <Button size="sm" variant="ghost">Düzenle</Button>
                        </div>
                    </div>
                </div>
            </Drawer>
        </div>
    )
}
</file>

<file path="src/app/login/page.tsx">
'use client';

import React from 'react';
import { useRouter } from 'next/navigation';
import { LoginForm } from '@/app/components/auth/LoginForm';
import { useAuth } from '@/app/components/auth/AuthProvider';

export default function LoginPage() {
    const router = useRouter();
    const { isAuthenticated } = useAuth();

    // Redirect if already authenticated
    React.useEffect(() => {
        if (isAuthenticated) {
            router.push('/dashboard');
        }
    }, [isAuthenticated, router]);

    const handleLoginSuccess = () => {
        router.push('/dashboard');
    };

    const handleLoginError = (error: string) => {
        console.error('Login error:', error);
    };

    if (isAuthenticated) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
        );
    }

    return (
        <>
            {/* Login Form */}
            <LoginForm
                onSuccess={handleLoginSuccess}
                onError={handleLoginError}
            />
        </>
    );
}
</file>

<file path="src/app/navigation/page.tsx">
'use client';

import React, { useState } from 'react';
import {
    Home,
    Settings,
    Users,
    FileText,
    ShoppingCart,
    Bell,
    Search,
    User,
    Package,
    CreditCard,
    Truck,
    CheckCircle,
    X
} from 'lucide-react';

import {
    Navbar,
    Sidebar,
    Breadcrumb,
    BreadcrumbPatterns,
    Stepper,
    StepperPatterns,
    Button,
    Card,
    CardHeader,
    CardBody,
    CardTitle,
    Toast,
    ToastContainer
} from '@/app/components/ui';

export default function NavigationDemo() {
    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
    const [showSidebar, setShowSidebar] = useState(false);
    const [currentStep, setCurrentStep] = useState(1);
    const [toasts, setToasts] = useState<Array<{ id: string; message: string; type: 'success' | 'error' | 'warning' | 'info' }>>([]);

    const showToast = (message: string, type: 'success' | 'error' | 'warning' | 'info') => {
        const id = Date.now().toString();
        setToasts(prev => [...prev, { id, message, type }]);
        setTimeout(() => {
            setToasts(prev => prev.filter(toast => toast.id !== id));
        }, 3000);
    };

    const navItems = [
        {
            label: 'Ana Sayfa',
            icon: <Home size={20} />,
            onClick: () => showToast('Ana Sayfa seçildi', 'info'),
        },
        {
            label: 'Ürünler',
            icon: <Package size={20} />,
            badge: 5,
            children: [
                {
                    label: 'Tüm Ürünler',
                    onClick: () => showToast('Tüm Ürünler seçildi', 'info'),
                },
                {
                    label: 'Kategoriler',
                    onClick: () => showToast('Kategoriler seçildi', 'info'),
                },
                {
                    label: 'Stok Takibi',
                    badge: 3,
                    onClick: () => showToast('Stok Takibi seçildi', 'warning'),
                },
            ],
        },
        {
            label: 'Kullanıcılar',
            icon: <Users size={20} />,
            onClick: () => showToast('Kullanıcılar seçildi', 'info'),
        },
        {
            label: 'Ayarlar',
            icon: <Settings size={20} />,
            onClick: () => showToast('Ayarlar seçildi', 'info'),
        },
    ];

    const sidebarItems = [
        {
            id: 'dashboard',
            label: 'Dashboard',
            icon: <Home size={20} />,
            active: true,
            onClick: () => showToast('Dashboard seçildi', 'success'),
        },
        {
            id: 'products',
            label: 'Ürünler',
            icon: <Package size={20} />,
            badge: 12,
            children: [
                {
                    id: 'all-products',
                    label: 'Tüm Ürünler',
                    onClick: () => showToast('Tüm Ürünler seçildi', 'info'),
                },
                {
                    id: 'add-product',
                    label: 'Ürün Ekle',
                    onClick: () => showToast('Ürün Ekle seçildi', 'info'),
                },
                {
                    id: 'categories',
                    label: 'Kategoriler',
                    onClick: () => showToast('Kategoriler seçildi', 'info'),
                },
            ],
        },
        {
            id: 'orders',
            label: 'Siparişler',
            icon: <ShoppingCart size={20} />,
            badge: 5,
            onClick: () => showToast('Siparişler seçildi', 'info'),
        },
        {
            id: 'users',
            label: 'Kullanıcılar',
            icon: <Users size={20} />,
            onClick: () => showToast('Kullanıcılar seçildi', 'info'),
        },
        {
            id: 'settings',
            label: 'Ayarlar',
            icon: <Settings size={20} />,
            onClick: () => showToast('Ayarlar seçildi', 'info'),
        },
    ];

    const orderSteps = [
        {
            id: 'cart',
            title: 'Sepet',
            description: 'Ürünlerinizi seçin',
            icon: <ShoppingCart size={20} />,
        },
        {
            id: 'shipping',
            title: 'Teslimat',
            description: 'Adres bilgilerini girin',
            icon: <Truck size={20} />,
        },
        {
            id: 'payment',
            title: 'Ödeme',
            description: 'Ödeme yöntemini seçin',
            icon: <CreditCard size={20} />,
        },
        {
            id: 'confirmation',
            title: 'Onay',
            description: 'Siparişinizi onaylayın',
            icon: <CheckCircle size={20} />,
        },
    ];

    return (
        <div className="min-h-screen bg-background-primary">
            <ToastContainer
                toasts={toasts}
                onRemove={(id) => setToasts(prev => prev.filter(toast => toast.id !== id))}
            />

            {/* Navbar Demo */}
            <Navbar
                brand={{
                    name: 'NinetyNine',
                    logo: '/logo.svg',
                }}
                items={navItems}
                user={{
                    name: 'John Doe',
                    email: 'john@example.com',
                }}
                searchable
                actions={
                    <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setShowSidebar(!showSidebar)}
                    >
                        Menu
                    </Button>
                }
            />

            <div className="flex">
                {/* Sidebar Demo */}
                <Sidebar isOpen={showSidebar} onClose={() => setShowSidebar(false)} />

                {/* Main Content */}
                <div className="flex-1 p-8 transition-all duration-300">
                    <div className="max-w-6xl mx-auto space-y-12">

                        {/* Page Header */}
                        <div className="text-center space-y-4">
                            <h1 className="text-4xl font-bold text-text-primary">
                                🧭 Navigasyon Component'leri
                            </h1>
                            <p className="text-text-secondary max-w-2xl mx-auto">
                                Navbar, Sidebar, Breadcrumb ve Stepper component'leri ile güçlü navigasyon çözümleri
                            </p>
                        </div>

                        {/* Navbar Section */}
                        <Card>
                            <CardHeader>
                                <CardTitle>Navbar - Üst Navigasyon</CardTitle>
                            </CardHeader>
                            <CardBody className="space-y-6">
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Özellikler</h3>
                                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                        <div className="p-3 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary">Responsive</div>
                                            <div className="text-xs text-text-secondary">Mobil uyumlu</div>
                                        </div>
                                        <div className="p-3 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary">Dropdown</div>
                                            <div className="text-xs text-text-secondary">Alt menüler</div>
                                        </div>
                                        <div className="p-3 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary">Arama</div>
                                            <div className="text-xs text-text-secondary">Entegre arama</div>
                                        </div>
                                        <div className="p-3 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary">Kullanıcı Menüsü</div>
                                            <div className="text-xs text-text-secondary">Profil yönetimi</div>
                                        </div>
                                    </div>
                                </div>
                            </CardBody>
                        </Card>

                        {/* Sidebar Section */}
                        <Card>
                            <CardHeader>
                                <CardTitle>Sidebar - Yan Menü</CardTitle>
                            </CardHeader>
                            <CardBody className="space-y-6">
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Kontroller</h3>
                                    <div className="flex flex-wrap gap-3">
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                                        >
                                            {sidebarCollapsed ? 'Genişlet' : 'Daralt'}
                                        </Button>
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => setShowSidebar(!showSidebar)}
                                        >
                                            {showSidebar ? 'Gizle' : 'Göster'}
                                        </Button>
                                    </div>
                                </div>

                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Önceden Tanımlı Desenleri</h3>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Admin Sidebar</div>
                                            {/* SidebarPatterns.Admin({ collapsed: false }) */}
                                        </div>
                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Basit Sidebar</div>
                                            {/* SidebarPatterns.Simple({ collapsed: false }) */}
                                        </div>
                                    </div>
                                </div>
                            </CardBody>
                        </Card>

                        {/* Breadcrumb Section */}
                        <Card>
                            <CardHeader>
                                <CardTitle>Breadcrumb - Sayfa Yolu</CardTitle>
                            </CardHeader>
                            <CardBody className="space-y-6">
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Örnekler</h3>
                                    <div className="space-y-4">
                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Basit Breadcrumb</div>
                                            {BreadcrumbPatterns.Simple("Navigasyon Demo")}
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">İki Seviyeli</div>
                                            {BreadcrumbPatterns.TwoLevel("Components", "Navigasyon")}
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Üç Seviyeli</div>
                                            {BreadcrumbPatterns.ThreeLevel("Components", "UI", "Navigasyon")}
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Dashboard Yolu</div>
                                            {BreadcrumbPatterns.Dashboard(['Dashboard', 'Components', 'Navigation', 'Demo'])}
                                        </div>
                                    </div>
                                </div>

                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Boyut Seçenekleri</h3>
                                    <div className="space-y-3">
                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Küçük (sm)</div>
                                            <Breadcrumb
                                                items={[
                                                    { label: 'Ana Sayfa', href: '/' },
                                                    { label: 'Components', href: '/components' },
                                                    { label: 'Navigasyon', active: true },
                                                ]}
                                                size="sm"
                                            />
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Orta (md)</div>
                                            <Breadcrumb
                                                items={[
                                                    { label: 'Ana Sayfa', href: '/' },
                                                    { label: 'Components', href: '/components' },
                                                    { label: 'Navigasyon', active: true },
                                                ]}
                                                size="md"
                                            />
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-2">Büyük (lg)</div>
                                            <Breadcrumb
                                                items={[
                                                    { label: 'Ana Sayfa', href: '/' },
                                                    { label: 'Components', href: '/components' },
                                                    { label: 'Navigasyon', active: true },
                                                ]}
                                                size="lg"
                                            />
                                        </div>
                                    </div>
                                </div>
                            </CardBody>
                        </Card>

                        {/* Stepper Section */}
                        <Card>
                            <CardHeader>
                                <CardTitle>Stepper - Adım Göstergesi</CardTitle>
                            </CardHeader>
                            <CardBody className="space-y-6">
                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Interaktif Stepper</h3>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <div className="mb-4">
                                            <Stepper
                                                steps={orderSteps}
                                                currentStep={currentStep}
                                                variant="icon"
                                                clickable
                                            />
                                        </div>
                                        <div className="flex gap-2">
                                            <Button
                                                variant="ghost"
                                                size="sm"
                                                onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}
                                                disabled={currentStep === 0}
                                            >
                                                Önceki
                                            </Button>
                                            <Button
                                                variant="ghost"
                                                size="sm"
                                                onClick={() => setCurrentStep(Math.min(orderSteps.length - 1, currentStep + 1))}
                                                disabled={currentStep === orderSteps.length - 1}
                                            >
                                                Sonraki
                                            </Button>
                                        </div>
                                    </div>
                                </div>

                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Önceden Tanımlı Desenleri</h3>
                                    <div className="grid grid-cols-1 gap-6">
                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-3">Kayıt Süreci</div>
                                            {StepperPatterns.Registration(2)}
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-3">Sipariş Süreci</div>
                                            {StepperPatterns.Order(1)}
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-3">Basit Süreç</div>
                                            {StepperPatterns.Simple(1)}
                                        </div>
                                    </div>
                                </div>

                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Varyantlar</h3>
                                    <div className="grid grid-cols-1 gap-4">
                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-3">Varsayılan</div>
                                            <Stepper
                                                steps={[
                                                    { id: '1', title: 'Başlangıç' },
                                                    { id: '2', title: 'İşlem' },
                                                    { id: '3', title: 'Bitir' },
                                                ]}
                                                currentStep={1}
                                                variant="default"
                                            />
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-3">Numaralı</div>
                                            <Stepper
                                                steps={[
                                                    { id: '1', title: 'Başlangıç' },
                                                    { id: '2', title: 'İşlem' },
                                                    { id: '3', title: 'Bitir' },
                                                ]}
                                                currentStep={1}
                                                variant="numbered"
                                            />
                                        </div>

                                        <div className="p-4 bg-background-secondary rounded-lg">
                                            <div className="text-sm font-medium text-text-primary mb-3">Minimal</div>
                                            <Stepper
                                                steps={[
                                                    { id: '1', title: 'Başlangıç' },
                                                    { id: '2', title: 'İşlem' },
                                                    { id: '3', title: 'Bitir' },
                                                ]}
                                                currentStep={1}
                                                variant="minimal"
                                            />
                                        </div>
                                    </div>
                                </div>

                                <div className="space-y-4">
                                    <h3 className="text-lg font-semibold text-text-primary">Dikey Stepper</h3>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        {StepperPatterns.Minimal(1, { orientation: "vertical" })}
                                    </div>
                                </div>
                            </CardBody>
                        </Card>

                        {/* Summary */}
                        <Card>
                            <CardHeader>
                                <CardTitle>Özet</CardTitle>
                            </CardHeader>
                            <CardBody>
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div className="text-center p-4 bg-background-secondary rounded-lg">
                                        <div className="text-2xl font-bold text-primary-gold">4</div>
                                        <div className="text-sm text-text-secondary">Navigasyon Component'i</div>
                                    </div>
                                    <div className="text-center p-4 bg-background-secondary rounded-lg">
                                        <div className="text-2xl font-bold text-primary-gold">15+</div>
                                        <div className="text-sm text-text-secondary">Hazır Desen</div>
                                    </div>
                                    <div className="text-center p-4 bg-background-secondary rounded-lg">
                                        <div className="text-2xl font-bold text-primary-gold">3</div>
                                        <div className="text-sm text-text-secondary">Boyut Seçeneği</div>
                                    </div>
                                    <div className="text-center p-4 bg-background-secondary rounded-lg">
                                        <div className="text-2xl font-bold text-primary-gold">100%</div>
                                        <div className="text-sm text-text-secondary">Responsive</div>
                                    </div>
                                </div>
                            </CardBody>
                        </Card>
                    </div>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/app/qr/page.tsx">
"use client";

import React, { useEffect, useState } from "react";
import QRCode from "react-qr-code";
import { useSearchParams, usePathname } from "next/navigation";

export default function QrPage() {
  // Tüm query parametrelerini obje olarak topla
  let paramsObj = {};
  if (typeof window !== "undefined") {
    const searchParams = new URLSearchParams(window.location.search);
    paramsObj = Array.from(searchParams.entries()).reduce((acc, [key, value]) => {
      acc[key] = value;
      return acc;
    }, {} as Record<string, string>);
  }

  // Paylaşım linki için tam URL'i client-side'da al
  const [shareUrl, setShareUrl] = useState("");
  useEffect(() => {
    if (typeof window !== "undefined") {
      setShareUrl(window.location.href);
    }
  }, []);

  // QR kodunu 1.5 sn'de bir güncelle (paramsObj + timestamp)
  const [qrData, setQrData] = useState("");
  useEffect(() => {
    const getQrString = () => {
      return JSON.stringify({ ...paramsObj, ts: Date.now() });
    };
    setQrData(getQrString());
    const interval = setInterval(() => {
      setQrData(getQrString());
    }, 1500);
    return () => clearInterval(interval);
  }, [JSON.stringify(paramsObj)]);

  // Responsive QR code size
  const [qrSize, setQrSize] = useState(220);
  useEffect(() => {
    function handleResize() {
      if (window.innerWidth < 640) {
        setQrSize(300); // Mobilde daha büyük
      } else {
        setQrSize(220);
      }
    }
    if (typeof window !== "undefined") {
      handleResize();
      window.addEventListener("resize", handleResize);
      return () => window.removeEventListener("resize", handleResize);
    }
  }, []);

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-background-light-primary dark:bg-background-primary">
      {/* Logo ve Hoşgeldiniz Alanı */}
     
      {/* Kart Alanı */}
      <div className="bg-background-light-card dark:bg-background-card rounded-2xl shadow-lg p-8 max-w-md w-full text-center">
      <div className="w-full flex flex-col items-center mt-8 mb-4">
        <div className="flex items-center">
          <img
            src="/images/NinetyNine Logo.png"
            alt="NinetyNine Logo"
            className="h-20 w-auto"
          />
         
        </div>
        <div className="mt-3 text-center">
          
        </div>
      </div>
        <h1 className="text-2xl font-bold text-text-on-light dark:text-on-dark mb-4">QR İşlemleri</h1>
        <p className="text-base text-text-light-secondary dark:text-text-secondary mb-2">
          QR kodunu aşağıda görebilirsiniz. Bu kodu güvenliğe okutunuz.
        </p>
        <div className="flex justify-center my-6">
          <div className="bg-background-light-soft dark:bg-background-soft p-4 sm:p-8 rounded-xl inline-block">
            <QRCode
              value={qrData}
              size={qrSize}
              bgColor="#FFFFFF"
              fgColor="#000000"
              style={{ background: "#FFFFFF", padding: 8, borderRadius: 16 }}
            />
          </div>
        </div>
        {/* <p className="text-xs text-text-light-muted dark:text-text-muted break-all mb-4">{qrData}</p> */}

      </div>
    </div>
  );
}
</file>

<file path="src/app/user/page.tsx">
'use client';

import React, { useState } from 'react';
import {
    User,
    Mail,
    Phone,
    MapPin,
    Users,
    Calendar,
    Star,
    Award,
    Target,
    TrendingUp
} from 'lucide-react';

import {
    Avatar,
    AvatarGroup,
    AvatarPatterns,
    UserCard,
    UserCardPatterns,
    ProfileDropdown,
    ProfileDropdownPatterns,
    Button,
    Card,
    CardHeader,
    CardBody,
    CardTitle,
    Badge,
    Toast,
    ToastContainer
} from '@/app/components/ui';

export default function UserDemo() {
    const [toasts, setToasts] = useState<Array<{ id: string; message: string; type: 'success' | 'error' | 'warning' | 'info' }>>([]);

    const showToast = (message: string, type: 'success' | 'error' | 'warning' | 'info') => {
        const id = Date.now().toString();
        setToasts(prev => [...prev, { id, message, type }]);
        setTimeout(() => {
            setToasts(prev => prev.filter(toast => toast.id !== id));
        }, 3000);
    };

    // Sample user data
    const sampleUser = {
        id: '1',
        name: 'Ahmet Yılmaz',
        email: 'ahmet@example.com',
        phone: '+90 555 123 4567',
        role: 'Frontend Developer',
        department: 'Yazılım Geliştirme',
        location: 'İstanbul, Türkiye',
        joinDate: '15 Mart 2023',
        status: 'online' as const,
        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
        bio: 'Deneyimli frontend developer. React, TypeScript ve modern web teknolojileri konusunda uzman.',
        stats: {
            projects: 24,
            tasks: 156,
            followers: 89,
            following: 45,
        },
        badges: [
            { label: 'Senior Developer', variant: 'solid' as const, color: 'gold' as const },
            { label: 'Team Lead', variant: 'outline' as const, color: 'blue' as const },
            { label: 'React Expert', variant: 'soft' as const, color: 'green' as const },
        ],
    };

    const teamMembers = [
        {
            src: 'https://images.unsplash.com/photo-1494790108755-2616b612b524?w=150&h=150&fit=crop&crop=face',
            alt: 'Ayşe Kaya',
            fallback: 'AK',
        },
        {
            src: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
            alt: 'Mehmet Demir',
            fallback: 'MD',
        },
        {
            src: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face',
            alt: 'Fatma Öz',
            fallback: 'FÖ',
        },
        {
            src: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face',
            alt: 'Ali Yıldız',
            fallback: 'AY',
        },
        {
            src: 'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150&h=150&fit=crop&crop=face',
            alt: 'Zeynep Çelik',
            fallback: 'ZÇ',
        },
    ];

    const profileUser = {
        name: 'Ahmet Yılmaz',
        email: 'ahmet@example.com',
        role: 'Frontend Developer',
        status: 'online' as const,
        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
    };

    return (
        <div className="min-h-screen bg-background-primary p-8">
            <ToastContainer
                toasts={toasts}
                onRemove={(id: string) => setToasts(prev => prev.filter(toast => toast.id !== id))}
            />

            <div className="max-w-7xl mx-auto space-y-12">

                {/* Page Header */}
                <div className="text-center space-y-4">
                    <h1 className="text-4xl font-bold text-text-primary">
                        👤 Kullanıcı Component'leri
                    </h1>
                    <p className="text-text-secondary max-w-2xl mx-auto">
                        Avatar, UserCard ve ProfileDropdown component'leri ile kullanıcı arayüzü elementleri
                    </p>
                </div>

                {/* Avatar Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>Avatar - Profil Resmi</CardTitle>
                    </CardHeader>
                    <CardBody className="space-y-8">

                        {/* Avatar Sizes */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Boyut Seçenekleri</h3>
                            <div className="flex items-center gap-4 flex-wrap">
                                <div className="text-center">
                                    <Avatar size="xs" fallback="XS" />
                                    <div className="text-sm text-text-secondary mt-1">XS</div>
                                </div>
                                <div className="text-center">
                                    <Avatar size="sm" fallback="SM" />
                                    <div className="text-sm text-text-secondary mt-1">SM</div>
                                </div>
                                <div className="text-center">
                                    <Avatar size="md" fallback="MD" />
                                    <div className="text-sm text-text-secondary mt-1">MD</div>
                                </div>
                                <div className="text-center">
                                    <Avatar size="lg" fallback="LG" />
                                    <div className="text-sm text-text-secondary mt-1">LG</div>
                                </div>
                                <div className="text-center">
                                    <Avatar size="xl" fallback="XL" />
                                    <div className="text-sm text-text-secondary mt-1">XL</div>
                                </div>
                                <div className="text-center">
                                    <Avatar size="2xl" fallback="2XL" />
                                    <div className="text-sm text-text-secondary mt-1">2XL</div>
                                </div>
                            </div>
                        </div>

                        {/* Avatar Shapes */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Şekil Seçenekleri</h3>
                            <div className="flex items-center gap-4 flex-wrap">
                                <div className="text-center">
                                    <Avatar shape="circle" fallback="C" />
                                    <div className="text-sm text-text-secondary mt-1">Circle</div>
                                </div>
                                <div className="text-center">
                                    <Avatar shape="rounded" fallback="R" />
                                    <div className="text-sm text-text-secondary mt-1">Rounded</div>
                                </div>
                                <div className="text-center">
                                    <Avatar shape="square" fallback="S" />
                                    <div className="text-sm text-text-secondary mt-1">Square</div>
                                </div>
                            </div>
                        </div>

                        {/* Avatar with Status */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Durum Göstergeleri</h3>
                            <div className="flex items-center gap-4 flex-wrap">
                                <div className="text-center">
                                    <Avatar fallback="ON" status="online" showStatus />
                                    <div className="text-sm text-text-secondary mt-1">Online</div>
                                </div>
                                <div className="text-center">
                                    <Avatar fallback="OF" status="offline" showStatus />
                                    <div className="text-sm text-text-secondary mt-1">Offline</div>
                                </div>
                                <div className="text-center">
                                    <Avatar fallback="AW" status="away" showStatus />
                                    <div className="text-sm text-text-secondary mt-1">Away</div>
                                </div>
                                <div className="text-center">
                                    <Avatar fallback="BU" status="busy" showStatus />
                                    <div className="text-sm text-text-secondary mt-1">Busy</div>
                                </div>
                            </div>
                        </div>

                        {/* Avatar Group */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Avatar Grup</h3>
                            <div className="space-y-4">
                                <div className="flex items-center gap-4">
                                    <AvatarGroup avatars={teamMembers} />
                                    <span className="text-sm text-text-secondary">Takım Üyeleri</span>
                                </div>
                                <div className="flex items-center gap-4">
                                    <AvatarGroup avatars={teamMembers} max={3} />
                                    <span className="text-sm text-text-secondary">Maksimum 3 Avatar</span>
                                </div>
                                <div className="flex items-center gap-4">
                                    <AvatarGroup avatars={teamMembers} size="sm" />
                                    <span className="text-sm text-text-secondary">Küçük Boyut</span>
                                </div>
                            </div>
                        </div>

                        {/* Avatar Patterns */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Hazır Desenler</h3>
                            <div className="flex items-center gap-4 flex-wrap">
                                <div className="text-center">
                                    {AvatarPatterns.Online({ fallback: 'ON' })}
                                    <div className="text-sm text-text-secondary mt-1">Online</div>
                                </div>
                                <div className="text-center">
                                    {AvatarPatterns.Admin({ fallback: 'AD' })}
                                    <div className="text-sm text-text-secondary mt-1">Admin</div>
                                </div>
                                <div className="text-center">
                                    {AvatarPatterns.Profile({ fallback: 'PR' })}
                                    <div className="text-sm text-text-secondary mt-1">Profile</div>
                                </div>
                                <div className="text-center">
                                    {AvatarPatterns.Notification({ fallback: 'NO' })}
                                    <div className="text-sm text-text-secondary mt-1">Notification</div>
                                </div>
                            </div>
                        </div>
                    </CardBody>
                </Card>

                {/* UserCard Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>UserCard - Kullanıcı Kartı</CardTitle>
                    </CardHeader>
                    <CardBody className="space-y-8">

                        {/* UserCard Variants */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Varyantlar</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Minimal</div>
                                    <UserCard
                                        user={sampleUser}
                                        variant="minimal"
                                        onMessage={() => showToast('Mesaj gönderme özelliği', 'info')}
                                    />
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Compact</div>
                                    <UserCard
                                        user={sampleUser}
                                        variant="compact"
                                        onMessage={() => showToast('Mesaj gönderme özelliği', 'info')}
                                        onConnect={() => showToast('Bağlantı isteği gönderildi', 'success')}
                                    />
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Default</div>
                                    <UserCard
                                        user={sampleUser}
                                        variant="default"
                                        onMessage={() => showToast('Mesaj gönderme özelliği', 'info')}
                                        onConnect={() => showToast('Bağlantı isteği gönderildi', 'success')}
                                        onProfile={() => showToast('Profil sayfasına yönlendiriliyor', 'info')}
                                    />
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Detailed</div>
                                    <UserCard
                                        user={sampleUser}
                                        variant="detailed"
                                        onMessage={() => showToast('Mesaj gönderme özelliği', 'info')}
                                        onConnect={() => showToast('Bağlantı isteği gönderildi', 'success')}
                                        onProfile={() => showToast('Profil sayfasına yönlendiriliyor', 'info')}
                                    />
                                </div>
                            </div>
                        </div>

                        {/* UserCard Sizes */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Boyut Seçenekleri</h3>
                            <div className="space-y-4">
                                <div className="space-y-2">
                                    <div className="text-sm font-medium text-text-secondary">Small</div>
                                    <UserCard
                                        user={sampleUser}
                                        variant="compact"
                                        size="sm"
                                        onMessage={() => showToast('Mesaj gönderme özelliği', 'info')}
                                    />
                                </div>

                                <div className="space-y-2">
                                    <div className="text-sm font-medium text-text-secondary">Medium</div>
                                    <UserCard
                                        user={sampleUser}
                                        variant="compact"
                                        size="md"
                                        onMessage={() => showToast('Mesaj gönderme özelliği', 'info')}
                                    />
                                </div>

                                <div className="space-y-2">
                                    <div className="text-sm font-medium text-text-secondary">Large</div>
                                    <UserCard
                                        user={sampleUser}
                                        variant="compact"
                                        size="lg"
                                        onMessage={() => showToast('Mesaj gönderme özelliği', 'info')}
                                    />
                                </div>
                            </div>
                        </div>

                        {/* UserCard Patterns */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Hazır Desenler</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Employee</div>
                                    {UserCardPatterns.Employee(sampleUser, {
                                        onMessage: () => showToast('Mesaj gönderme özelliği', 'info'),
                                        onConnect: () => showToast('Bağlantı isteği gönderildi', 'success'),
                                    })}
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Team Member</div>
                                    {UserCardPatterns.TeamMember(sampleUser, {
                                        onMessage: () => showToast('Mesaj gönderme özelliği', 'info'),
                                        onConnect: () => showToast('Bağlantı isteği gönderildi', 'success'),
                                    })}
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Profile</div>
                                    {UserCardPatterns.Profile(sampleUser, {
                                        onMessage: () => showToast('Mesaj gönderme özelliği', 'info'),
                                        onConnect: () => showToast('Bağlantı isteği gönderildi', 'success'),
                                    })}
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Contact</div>
                                    {UserCardPatterns.Contact(sampleUser)}
                                </div>
                            </div>
                        </div>

                        {/* Custom Actions */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Özel Aksiyonlar</h3>
                            <UserCard
                                user={sampleUser}
                                variant="default"
                                actions={
                                    <div className="flex gap-2">
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => showToast('Favorilere eklendi', 'success')}
                                        >
                                            <Star size={16} className="mr-1" />
                                            Favorile
                                        </Button>
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => showToast('Proje atandı', 'success')}
                                        >
                                            <Target size={16} className="mr-1" />
                                            Ata
                                        </Button>
                                    </div>
                                }
                            />
                        </div>
                    </CardBody>
                </Card>

                {/* ProfileDropdown Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>ProfileDropdown - Profil Menüsü</CardTitle>
                    </CardHeader>
                    <CardBody className="space-y-8">

                        {/* ProfileDropdown Patterns */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Hazır Desenler</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Standard</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        {ProfileDropdownPatterns.Standard(profileUser, {
                                            onClose: () => showToast('Profil menüsü kapatıldı', 'info'),
                                        })}
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Admin</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        {ProfileDropdownPatterns.Admin(profileUser, {
                                            onClose: () => showToast('Admin menüsü kapatıldı', 'info'),
                                        })}
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Compact</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        {ProfileDropdownPatterns.Compact(profileUser, {
                                            onClose: () => showToast('Compact menü kapatıldı', 'info'),
                                        })}
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Simple</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        {ProfileDropdownPatterns.Simple(profileUser, {
                                            onClose: () => showToast('Simple menü kapatıldı', 'info'),
                                        })}
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* ProfileDropdown Positions */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Pozisyon Seçenekleri</h3>
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Bottom Right</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <ProfileDropdown
                                            user={profileUser}
                                            position="bottom-right"
                                            items={[
                                                { id: 'profile', label: 'Profil', icon: <User size={16} /> },
                                                { id: 'settings', label: 'Ayarlar', icon: <Mail size={16} /> },
                                            ]}
                                        />
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Bottom Left</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <ProfileDropdown
                                            user={profileUser}
                                            position="bottom-left"
                                            items={[
                                                { id: 'profile', label: 'Profil', icon: <User size={16} /> },
                                                { id: 'settings', label: 'Ayarlar', icon: <Mail size={16} /> },
                                            ]}
                                        />
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Top Right</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <ProfileDropdown
                                            user={profileUser}
                                            position="top-right"
                                            items={[
                                                { id: 'profile', label: 'Profil', icon: <User size={16} /> },
                                                { id: 'settings', label: 'Ayarlar', icon: <Mail size={16} /> },
                                            ]}
                                        />
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Top Left</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <ProfileDropdown
                                            user={profileUser}
                                            position="top-left"
                                            items={[
                                                { id: 'profile', label: 'Profil', icon: <User size={16} /> },
                                                { id: 'settings', label: 'Ayarlar', icon: <Mail size={16} /> },
                                            ]}
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* ProfileDropdown Triggers */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-primary">Tetikleyici Seçenekleri</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Click Trigger</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <ProfileDropdown
                                            user={profileUser}
                                            trigger="click"
                                            items={[
                                                { id: 'profile', label: 'Profil', icon: <User size={16} /> },
                                                { id: 'settings', label: 'Ayarlar', icon: <Mail size={16} /> },
                                            ]}
                                        />
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <div className="text-sm font-medium text-text-secondary">Hover Trigger</div>
                                    <div className="p-4 bg-background-secondary rounded-lg">
                                        <ProfileDropdown
                                            user={profileUser}
                                            trigger="hover"
                                            items={[
                                                { id: 'profile', label: 'Profil', icon: <User size={16} /> },
                                                { id: 'settings', label: 'Ayarlar', icon: <Mail size={16} /> },
                                            ]}
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </CardBody>
                </Card>

                {/* Summary */}
                <Card>
                    <CardHeader>
                        <CardTitle>Özet</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div className="text-center p-4 bg-background-secondary rounded-lg">
                                <div className="text-2xl font-bold text-primary-gold">3</div>
                                <div className="text-sm text-text-secondary">Kullanıcı Component'i</div>
                            </div>
                            <div className="text-center p-4 bg-background-secondary rounded-lg">
                                <div className="text-2xl font-bold text-primary-gold">12+</div>
                                <div className="text-sm text-text-secondary">Hazır Desen</div>
                            </div>
                            <div className="text-center p-4 bg-background-secondary rounded-lg">
                                <div className="text-2xl font-bold text-primary-gold">6</div>
                                <div className="text-sm text-text-secondary">Boyut Seçeneği</div>
                            </div>
                            <div className="text-center p-4 bg-background-secondary rounded-lg">
                                <div className="text-2xl font-bold text-primary-gold">4</div>
                                <div className="text-sm text-text-secondary">Durum Göstergesi</div>
                            </div>
                        </div>
                    </CardBody>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Font Variables */
  --font-inter: "Inter", "system-ui", "sans-serif";

  /* 99Club Design System Colors */
  --primary: #000000;
  --primary-white: #fff5f5;
  --primary-gold: #ac8d6a;
  --primary-gold-light: #f2e7dc;
  --primary-red: #f21c1f;
  --primary-gray-blue: #9da6b9;
  --primary-dark-gray: #201f1d;

  /* Background Colors */
  --background-primary: #000000;
  --background-secondary: #201f1d;
  --background-card: #1a1a1a;

  /* Text Colors */
  --text-primary: #f2e7dc;
  --text-secondary: #9da6b9;
  --text-accent: #ac8d6a;

  /* Gradient Colors */
  --gradient-gold-start: #f2e7dc;
  --gradient-gold-end: #ac8d6a;
  --gradient-dark-start: #5f5f5f;
  --gradient-dark-end: #1a1a1a;
}

/* Base Styles */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html {
  font-size: 16px; /* Web standard base font size */
  scroll-behavior: smooth;
}

body {
  background-color: var(--background-primary);
  color: var(--text-primary);
  font-family: "Helvetica", var(--font-inter), "system-ui", "sans-serif";
  font-smooth: always;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  line-height: 1.4;
  min-height: 100vh;
}

/* Font Face Fallbacks */
@font-face {
  font-family: "Helvetica";
  src: local("Helvetica Neue"), local("Helvetica"), local("Arial");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

/* Selection Styles */
::selection {
  background-color: var(--primary-gold);
  color: var(--primary-dark-gray);
}

/* Focus Styles */
:focus-visible {
  outline: 2px solid var(--primary-gold);
  outline-offset: 2px;
}

/* Scrollbar Styles */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: var(--background-secondary);
}

::-webkit-scrollbar-thumb {
  background: var(--primary-gold);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--gradient-gold-end);
}

/* Input Autofill Styles */
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus {
  -webkit-box-shadow: 0 0 0 1000px var(--background-card) inset !important;
  -webkit-text-fill-color: var(--text-primary) !important;
}
</file>

<file path="src/app/layout.tsx">
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { AuthProvider } from './components/auth/AuthProvider'

// Google Fonts - Inter
const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
})

export const metadata: Metadata = {
  title: '99Club Admin - Konut Yönetim Sistemi',
  description: '99Club konut yönetim sistemi admin paneli',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="tr">
      <body className={`${inter.variable} font-sans antialiased bg-background-primary overflow-x-hidden`}>
        <AuthProvider>
          {children}
        </AuthProvider>
      </body>
    </html>
  )
}
</file>

<file path="src/app/page.tsx">
'use client';

import React, { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from './components/auth/AuthProvider';
import Sidebar from './components/Sidebar'
import Header from './components/Header'
import {
  Building,
  Users,
  DollarSign,
  AlertTriangle,
  TrendingUp,
  TrendingDown,
  Plus,
  Calendar,
  Bell,
  Activity,
  MapPin,
  Clock,
  CheckCircle,
  AlertCircle,
  Wrench,
  CreditCard
} from 'lucide-react'

export default function HomePage() {
  const router = useRouter();
  const { isAuthenticated, isLoading } = useAuth();

  useEffect(() => {
    if (!isLoading) {
      if (isAuthenticated) {
        router.push('/dashboard');
      } else {
        router.push('/login');
      }
    }
  }, [isAuthenticated, isLoading, router]);

  // Show loading while determining authentication status
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
          99Club Admin
        </h2>
        <p className="text-gray-600 dark:text-gray-300">
          Yükleniyor...
        </p>
      </div>
    </div>
  );
}
</file>

<file path="src/hooks/useAuditLogs.ts">
import { useState, useEffect } from 'react';
import { loggingService, AuditLog, AuditLogFilter } from '@/services/logging.service';

interface UseAuditLogsReturn {
  logs: AuditLog[];
  loading: boolean;
  error: string | null;
  totalCount: number;
  refetch: () => void;
}

export function useAuditLogs(filter: AuditLogFilter = {}, limit: number = 10): UseAuditLogsReturn {
  const [logs, setLogs] = useState<AuditLog[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [totalCount, setTotalCount] = useState(0);

  const fetchLogs = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // For dashboard, we'll use the recent logs endpoint
      const response = await loggingService.getRecentAuditLogs(limit);
      
      console.log('Fetched audit logs:', response);
      
      // Handle different response structures
      let logsArray: AuditLog[] = [];
      let total = 0;
      
      if (response && Array.isArray(response)) {
        logsArray = response;
        total = response.length;
      } else if (response && typeof response === 'object' && 'data' in response && Array.isArray((response as any).data)) {
        logsArray = (response as any).data;
        total = (response as any).total || (response as any).data.length;
      } else if (response && typeof response === 'object') {
        // If response is an object but not in expected format, try to extract data
        console.warn('Unexpected response format:', response);
        logsArray = [];
        total = 0;
      } else {
        logsArray = [];
        total = 0;
      }
      
      setLogs(logsArray);
      setTotalCount(total);
    } catch (err) {
      console.error('Error in useAuditLogs:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch audit logs');
      setLogs([]);
      setTotalCount(0);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchLogs();
  }, [limit]);

  const refetch = () => {
    fetchLogs();
  };

  return {
    logs,
    loading,
    error,
    totalCount,
    refetch
  };
}
</file>

<file path="src/hooks/useDashboardMetrics.ts">
import { useState, useEffect, useCallback } from 'react';
import propertyService from '@/services/property.service';

interface DashboardMetrics {
    totalProperties: number;
    assignedProperties: number;
    loading: boolean;
    error: string | null;
}

export function useDashboardMetrics(): DashboardMetrics {
    const [totalProperties, setTotalProperties] = useState<number>(0);
    const [assignedProperties, setAssignedProperties] = useState<number>(0);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    const fetchMetrics = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);

            console.log('Starting to fetch dashboard metrics...');

            // Fetch both metrics in parallel
            const [totalCount, assignedCount] = await Promise.all([
                propertyService.getAllPropertiesCount(),
                propertyService.getAssignedPropertiesCount()
            ]);

            console.log('Dashboard metrics fetched successfully:', { totalCount, assignedCount });

            setTotalProperties(totalCount);
            setAssignedProperties(assignedCount);
        } catch (err: any) {
            console.error('Failed to fetch dashboard metrics:', err);
            console.error('Error details:', {
                message: err.message,
                response: err.response?.data,
                status: err.response?.status
            });
            setError(`Dashboard metrikleri yüklenirken bir hata oluştu: ${err.message}`);
            // Set fallback values
            setTotalProperties(0);
            setAssignedProperties(0);
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchMetrics();
    }, [fetchMetrics]);

    return {
        totalProperties,
        assignedProperties,
        loading,
        error
    };
}
</file>

<file path="src/hooks/useMaintenanceRequests.ts">
import { useState, useEffect, useCallback } from 'react';
import { ticketService, Ticket, TicketFilters } from '@/services/ticket.service';

interface MaintenanceRequestsData {
    requests: Ticket[];
    loading: boolean;
    error: string | null;
    totalCount: number;
}

export function useMaintenanceRequests(limit: number = 5): MaintenanceRequestsData {
    const [requests, setRequests] = useState<Ticket[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [totalCount, setTotalCount] = useState<number>(0);

    const fetchMaintenanceRequests = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);

            console.log('Fetching maintenance requests...');

            // Fetch maintenance requests without filter to get all tickets
            const filters: TicketFilters = {
                limit: limit,
                orderColumn: 'createdAt',
                orderBy: 'DESC',
            };

            const response = await ticketService.getTickets(filters);
            
            console.log('Maintenance requests response:', response);

            // Handle different response structures
            if (response.data && Array.isArray(response.data)) {
                // Direct array response
                setRequests(response.data);
                setTotalCount(response.data.length);
            } else if (response.data && response.data.data && Array.isArray(response.data.data)) {
                // Nested data structure
                setRequests(response.data.data);
                setTotalCount(response.data.pagination?.total || response.data.data.length);
            } else if (Array.isArray(response)) {
                // Direct array response (no wrapper)
                setRequests(response);
                setTotalCount(response.length);
            } else {
                console.warn('Unexpected response structure:', response);
                setRequests([]);
                setTotalCount(0);
            }
        } catch (err: any) {
            console.error('Failed to fetch maintenance requests:', err);
            console.error('Error details:', {
                message: err.message,
                response: err.response?.data,
                status: err.response?.status
            });
            setError(`Bakım talepleri yüklenirken bir hata oluştu: ${err.message}`);
            setRequests([]);
            setTotalCount(0);
        } finally {
            setLoading(false);
        }
    }, [limit]);

    useEffect(() => {
        fetchMaintenanceRequests();
    }, [fetchMaintenanceRequests]);

    return {
        requests,
        loading,
        error,
        totalCount
    };
}
</file>

<file path="src/hooks/usePendingResidents.ts">
import { useState, useCallback, useEffect } from 'react';
import { adminResidentService } from '@/services/admin-resident.service';
import { Resident, ResidentFilterParams, PendingResidentsResponse } from '@/services/types/resident.types';

interface UsePendingResidentsProps {
  page?: number;
  limit?: number;
  orderColumn?: string;
  orderBy?: 'ASC' | 'DESC';
}

interface UsePendingResidentsReturn {
  residents: Resident[];
  loading: boolean;
  error: string | null;
  pagination: PendingResidentsResponse['pagination'] | null;
  refresh: () => Promise<void>;
}

export function usePendingResidents({
  page = 1,
  limit = 10,
  orderColumn,
  orderBy
}: UsePendingResidentsProps = {}): UsePendingResidentsReturn {
  const [residents, setResidents] = useState<Resident[]>([]);
  const [pagination, setPagination] = useState<PendingResidentsResponse['pagination'] | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchPendingResidents = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const params: ResidentFilterParams = {
        page,
        limit,
        orderColumn,
        orderBy
      };
      const response = await adminResidentService.getPendingResidents(params);
      console.log("GELEN RESPONSE", response);
      setResidents(response.data || []);
      setPagination(response.pagination || null);
    } catch (err: any) {
      setError(err?.message || 'Bekleyen sakinler yüklenemedi.');
    } finally {
      setLoading(false);
    }
  }, [page, limit, orderColumn, orderBy]);

  useEffect(() => {
    fetchPendingResidents();
  }, [fetchPendingResidents]);

  return {
    residents,
    loading,
    error,
    pagination,
    refresh: fetchPendingResidents
  };
}
</file>

<file path="src/hooks/usePropertyDetail.ts">
import { useEffect, useState } from 'react';
import { unitsService } from '@/services/units.service';
import { Property } from '@/services/types/property.types';
import { ApiResponse } from '@/services/core/types'; // ApiResponse tipini import et

export function usePropertyDetail(id: string | undefined) {
  const [data, setData] = useState<ApiResponse<Property> | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!id) return;
    setLoading(true);
    setError(null);
    unitsService.getPropertyById(id)
      .then((res) => {
        setData(res); // Artık tüm response'u kaydedebilirsin
      })
      .catch((err) => {
        setError('Konut detayı yüklenemedi');
      })
      .finally(() => {
        setLoading(false);
      });
  }, [id]);

  return { data, loading, error };
}
</file>

<file path="src/hooks/useResidentData.ts">
'use client';

import { useState, useCallback, useEffect } from 'react';
import { residentService } from '@/services/resident.service';
import { Resident } from '@/app/components/ui/ResidentRow';
import { 
    Resident as ApiResident, 
    UpdateResidentDto, 
    CreateResidentDto,
    CreateResidentRequest // yeni tip eklendi
} from '@/services/types/resident.types';

interface UseResidentDataProps {
    residentId?: string;
    autoFetch?: boolean;
}

interface UseResidentDataReturn {
    resident: Resident | null;
    loading: boolean;
    error: string | null;
    saving: boolean;
    saveError: string | null;
    fetchResident: (id: string) => Promise<void>;
    updateResident: (id: string, data: UpdateResidentDto) => Promise<void>;
    createResident: (data: CreateResidentRequest) => Promise<string>; // tip güncellendi
    refreshData: () => Promise<void>;
    clearError: () => void;
    clearSaveError: () => void;
}

// Transform API resident to component resident (Iraq-specific)
const transformApiResidentToComponentResident = (apiResident: ApiResident): Resident => {
    const property = apiResident.property;

    return {
        id: apiResident.id.toString(),
        firstName: apiResident.firstName,
        lastName: apiResident.lastName,
        fullName: `${apiResident.firstName} ${apiResident.lastName}`,
        nationalId: apiResident.phone || 'Belirtilmemiş',

        // Property information from API
        residentType: {
            type: property?.ownershipType || 'owner',
            label: property?.ownershipType === 'tenant' ? 'Kiracı' : 'Malik',
            color: property?.ownershipType === 'tenant' ? 'blue' : 'green'
        },
        address: {
            building: property?.block || 'Belirtilmemiş',
            apartment: property?.apartment || 'Belirtilmemiş',
            roomType: property?.propertyNumber || 'Belirtilmemiş'
        },
        contact: {
            phone: apiResident.phone || 'Belirtilmemiş',
            email: apiResident.email || 'Belirtilmemiş',
            formattedPhone: apiResident.phone ? `+964 ${apiResident.phone}` : 'Belirtilmemiş'
        },
        financial: {
            balance: 0,
            totalDebt: 0,
            lastPaymentDate: undefined
        },
        status: {
            type: apiResident.status?.toLowerCase() === 'pending' ? 'pending'
                : apiResident.status?.toLowerCase() === 'inactive' ? 'inactive'
                : apiResident.status?.toLowerCase() === 'suspended' ? 'suspended'
                : 'active',
            label: apiResident.status?.toLowerCase() === 'pending' ? 'Beklemede'
                : apiResident.status?.toLowerCase() === 'inactive' ? 'Pasif'
                : apiResident.status?.toLowerCase() === 'suspended' ? 'Askıda'
                : 'Aktif',
            color: apiResident.status?.toLowerCase() === 'pending' ? 'yellow'
                : apiResident.status?.toLowerCase() === 'inactive' ? 'red'
                : apiResident.status?.toLowerCase() === 'suspended' ? 'red'
                : 'green',
        },
        membershipTier: apiResident.membershipTier === 'GOLD' ? 'Altın Üye' : 
                       apiResident.membershipTier === 'SILVER' ? 'Gümüş Üye' : 'Standart Üye',
        verificationStatus: apiResident.verificationStatus === 'APPROVED' ? { label: 'Onaylandı', color: 'green' } : 
                           apiResident.verificationStatus === 'REJECTED' ? { label: 'Reddedildi', color: 'red' } : { label: 'Beklemede', color: 'yellow' },
        registrationDate: apiResident.registrationDate || apiResident.createdAt || new Date().toISOString(),
        lastActivity: apiResident.lastLoginDate,
        notes: '',
        profileImage: apiResident.avatar
    };
};

export const useResidentData = ({
    residentId,
    autoFetch = true
}: UseResidentDataProps = {}): UseResidentDataReturn => {
    const [resident, setResident] = useState<Resident | null>(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [saving, setSaving] = useState(false);
    const [saveError, setSaveError] = useState<string | null>(null);

    const fetchResident = useCallback(async (id: string) => {
        try {
            setLoading(true);
            setError(null);

            const response = await residentService.getResidentById(id);
            
            if (response && response.data) {
                const transformedResident = transformApiResidentToComponentResident(response.data);
                setResident(transformedResident);
            } else {
                setError('Sakin bulunamadı');
            }

        } catch (error: unknown) {
            console.error('Failed to fetch resident:', error);
            setError(error instanceof Error ? error.message : 'Sakin bilgileri yüklenirken bir hata oluştu.');
        } finally {
            setLoading(false);
        }
    }, []);

    const updateResident = useCallback(async (id: string, data: UpdateResidentDto) => {
        try {
            setSaving(true);
            setSaveError(null);

            const response = await residentService.updateResident(id, data);
            
            if (response && response.data) {
                const transformedResident = transformApiResidentToComponentResident(response.data);
                setResident(transformedResident);
            }

        } catch (error: unknown) {
            console.error('Failed to update resident:', error);
            setSaveError(error instanceof Error ? error.message : 'Sakin bilgileri güncellenirken bir hata oluştu.');
            throw error;
        } finally {
            setSaving(false);
        }
    }, []);

    const createResident = useCallback(async (data: CreateResidentRequest): Promise<string> => {
        try {
            setSaving(true);
            setSaveError(null);

            // Yeni API formatına uygun çağrı
            const response = await residentService.createResident(data);
            
            if (response && response.data) {
                const transformedResident = transformApiResidentToComponentResident(response.data);
                setResident(transformedResident);
                return response.data.id?.toString?.() || '';
            }

            throw new Error('Sakin oluşturulamadı');

        } catch (error: unknown) {
            console.error('Failed to create resident:', error);
            setSaveError(error instanceof Error ? error.message : 'Sakin oluşturulurken bir hata oluştu.');
            throw error;
        } finally {
            setSaving(false);
        }
    }, []);

    const refreshData = useCallback(async () => {
        if (residentId) {
            await fetchResident(residentId);
        }
    }, [residentId, fetchResident]);

    const clearError = useCallback(() => {
        setError(null);
    }, []);

    const clearSaveError = useCallback(() => {
        setSaveError(null);
    }, []);

    // Auto-fetch when residentId changes
    useEffect(() => {
        if (autoFetch && residentId) {
            fetchResident(residentId);
        }
    }, [residentId, autoFetch, fetchResident]);

    return {
        resident,
        loading,
        error,
        saving,
        saveError,
        fetchResident,
        updateResident,
        createResident,
        refreshData,
        clearError,
        clearSaveError
    };
};
</file>

<file path="src/hooks/useResidentsActions.ts">
'use client';

import { useCallback } from 'react';
import { residentService } from '@/services/resident.service';
import { Resident } from '@/app/components/ui/ResidentRow';
import { useToast } from '@/hooks/useToast';
import adminResidentService from '@/services/admin-resident.service';
import billingService, { Bill } from '@/services/billing.service';

interface UseResidentsActionsProps {
    refreshData: () => Promise<void>;
    setSelectedResidents: (residents: Resident[]) => void;
    setResidents: React.Dispatch<React.SetStateAction<Resident[]>>;
}

interface UseResidentsActionsReturn {
    // Bulk actions
    handleBulkMail: (residents: Resident[]) => void;
    handleBulkSMS: (residents: Resident[]) => void;
    handleBulkPDF: (residents: Resident[]) => void;
    handleBulkTag: (residents: Resident[]) => void;
    handleBulkStatusChange: (selectedResidents: Resident[], status: 'active' | 'inactive') => Promise<void>;
    handleBulkDelete: (selectedResidents: Resident[]) => Promise<void>;
    
    // Individual actions
    handleViewResident: (resident: Resident) => void;
    handleEditResident: (resident: Resident) => void;
    handleCallResident: (resident: Resident) => void;
    handleMessageResident: (resident: Resident) => void;
    handleGenerateQR: (resident: Resident) => void;
    handleViewNotes: (resident: Resident) => void;
    handleViewHistory: (resident: Resident) => void;
    handleViewPaymentHistory: (resident: Resident) => Promise<{ bills: Bill[]; error?: string }>;
    handleDeleteResident: (resident: Resident) => Promise<void>;
    handleSetResidentStatus: (resident: Resident, status: 'ACTIVE' | 'INACTIVE') => Promise<void>;
    
    // Export actions
    handleExportExcel: () => void;
    handleExportCSV: () => void;
    handlePrint: () => void;
}

export const useResidentsActions = ({
    refreshData,
    setSelectedResidents,
    setResidents
}: UseResidentsActionsProps): UseResidentsActionsReturn => {
    const { success, error, info } = useToast();

    // Bulk Actions
    const handleBulkMail = useCallback((residents: Resident[]) => {
        const emails = residents.filter(r => r.contact.email).map(r => r.contact.email).join(', ');
        info('Toplu Mail', `${residents.length} sakine mail gönderiliyor. ${emails ? 'E-postalar: ' + emails : 'Email adresi bulunamadı'}`);
    }, [info]);

    const handleBulkSMS = useCallback((residents: Resident[]) => {
        const phones = residents.map(r => r.contact.phone).join(', ');
        info('Toplu SMS', `${residents.length} sakine SMS gönderiliyor. Telefonlar: ${phones}`);
    }, [info]);

    const handleBulkPDF = useCallback((residents: Resident[]) => {
        info('PDF Oluşturuluyor', `${residents.length} sakin bilgisi PDF olarak hazırlanıyor`);
        // Implement PDF generation
        setTimeout(() => {
            success('PDF İndiriliyor', 'PDF başarıyla oluşturuldu ve indiriliyor');
        }, 1000);
    }, [info, success]);

    const handleBulkTag = useCallback((residents: Resident[]) => {
        const tags = prompt('Atanacak etiketleri virgülle ayırarak yazın:');
        if (tags) {
            success('Etiketler Atandı', `${residents.length} sakine "${tags}" etiketleri başarıyla atandı`);
        }
    }, [success]);

    const handleBulkStatusChange = useCallback(async (selectedResidents: Resident[], status: 'active' | 'inactive') => {
        if (selectedResidents.length === 0) return;

        const confirmMessage = `${selectedResidents.length} sakinin durumunu ${status === 'active' ? 'aktif' : 'pasif'} yapmak istediğinizden emin misiniz?`;
        if (confirm(confirmMessage)) {
            try {
                if (status === 'active') {
                    await adminResidentService.bulkActivateResidents(selectedResidents.map(r => String(r.id)));
                } else {
                    await adminResidentService.bulkDeactivateResidents(selectedResidents.map(r => String(r.id)));
                }
                await refreshData();
                setSelectedResidents([]);
                success('Durum güncellendi', `${selectedResidents.length} sakinin durumu başarıyla güncellendi.`);
            } catch (err: unknown) {
                console.error('Bulk status update failed:', err);
                error('Durum Güncelleme Hatası', err instanceof Error ? err.message : 'Durum güncelleme işlemi başarısız oldu');
            }
        }
    }, [refreshData, setSelectedResidents, success, error]);

    const handleBulkDelete = useCallback(async (selectedResidents: Resident[]) => {
        if (selectedResidents.length === 0) return;

        const confirmMessage = `${selectedResidents.length} sakini kalıcı olarak silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!`;
        
        if (confirm(confirmMessage)) {
            try {
                // Bulk delete logic would go here
                // await residentService.bulkDelete(selectedResidents.map(r => r.id));
                
                await refreshData();
                setSelectedResidents([]);
                success('Silme işlemi tamamlandı', `${selectedResidents.length} sakin başarıyla silindi.`);

            } catch (err: unknown) {
                console.error('Bulk delete failed:', err);
                error('Silme Hatası', err instanceof Error ? err.message : 'Silme işlemi başarısız oldu');
            }
        }
    }, [refreshData, setSelectedResidents, success, error]);

    // Individual Row Actions
    const handleViewResident = useCallback((resident: Resident) => {
        info('Detay Sayfası', `${resident.fullName} sakininin detay sayfası açılıyor`);
        // Navigate to resident detail page
        // router.push(`/dashboard/residents/${resident.id}`);
    }, [info]);

    const handleEditResident = useCallback((resident: Resident) => {
        info('Düzenleme Sayfası', `${resident.fullName} sakininin düzenleme sayfası açılıyor`);
        // Navigate to edit resident page
        // router.push(`/dashboard/residents/${resident.id}/edit`);
    }, [info]);

    const handleCallResident = useCallback((resident: Resident) => {
        if (confirm(`${resident.contact.phone} numarasını aramak istiyor musunuz?`)) {
            // Open phone app or make call
            window.open(`tel:${resident.contact.phone}`);
        }
    }, []);

    const handleMessageResident = useCallback((resident: Resident) => {
        const message = prompt(`${resident.fullName} için mesaj yazın:`);
        if (message) {
            success('Mesaj Gönderildi', `Mesaj başarıyla gönderildi: "${message}"`);
        }
    }, [success]);

    const handleGenerateQR = useCallback((resident: Resident) => {
        info('QR Kod Oluşturuluyor', `${resident.fullName} için QR kod hazırlanıyor`);
        // Generate QR code with resident info
        setTimeout(() => {
            success('QR Kod İndiriliyor', 'QR kod oluşturuldu ve indiriliyor');
        }, 1000);
    }, [info, success]);

    const handleViewNotes = useCallback((resident: Resident) => {
        const newNote = prompt(`${resident.fullName} için not ekleyin:`);
        if (newNote) {
            // Update resident notes in state
            setResidents(prevResidents =>
                prevResidents.map(r =>
                    r.id === resident.id
                        ? { ...r, notes: (r.notes || '') + '\n' + new Date().toLocaleDateString() + ': ' + newNote }
                        : r
                )
            );
            success('Not Eklendi', 'Not başarıyla eklendi');
        }
    }, [setResidents, success]);

    const handleViewHistory = useCallback((resident: Resident) => {
        const registration = new Date(String(resident.registrationDate)).toLocaleDateString();
        const lastActivity = resident.lastActivity ? new Date(String(resident.lastActivity)).toLocaleDateString() : 'Bilgi yok';
        info('Aktivite Geçmişi', `${resident.fullName} - Kayıt: ${registration}, Son aktivite: ${lastActivity}`);
    }, [info]);

    // Yeni: Ödeme geçmişi modalı için async handler
    const handleViewPaymentHistory = async (resident: Resident): Promise<{ bills: Bill[]; error?: string }> => {
        try {
            const bills = await billingService.getBillsByUser(String(resident.id));
            console.log("bills GELDİ Mİ ALOO", bills);
            return { bills };
        } catch (err: any) {
            return { bills: [], error: err?.message || 'Ödeme geçmişi alınamadı.' };
        }
    };

    const handleDeleteResident = useCallback(async (resident: Resident) => {
        if (confirm(`${resident.fullName} sakinini kalıcı olarak silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!`)) {
            try {
                await residentService.deleteResident(String(resident.id));
                await refreshData();
                success('Sakin silindi', `${resident.fullName} başarıyla silindi.`);
            } catch (err: unknown) {
                console.error('Delete resident failed:', err);
                error('Silme Hatası', err instanceof Error ? err.message : 'Silme işlemi başarısız oldu');
            }
        }
    }, [refreshData, success, error]);

    // Bireysel resident için aktif/pasif yapma
    const handleSetResidentStatus = useCallback(
        async (resident: Resident, status: 'ACTIVE' | 'INACTIVE') => {
            const actionLabel = status === 'ACTIVE' ? 'Aktif' : 'Pasif';
            if (confirm(`${resident.fullName} sakini ${actionLabel} yapmak istediğinize emin misiniz?`)) {
                try {
                    await adminResidentService.updateResident(String(resident.id), { status });
                    await refreshData();
                    success('Durum güncellendi', `${resident.fullName} ${actionLabel} yapıldı.`);
                } catch (err: unknown) {
                    console.error('Status update failed:', err);
                    error('Durum Güncelleme Hatası', err instanceof Error ? err.message : 'Durum güncelleme işlemi başarısız oldu');
                }
            }
        },
        [refreshData, success, error]
    );

    // Export Actions
    const handleExportExcel = useCallback(() => {
        info('Excel Dosyası', 'Excel dosyası oluşturuluyor');
        setTimeout(() => {
            success('Excel İndiriliyor', 'residents.xlsx dosyası indiriliyor');
        }, 1000);
    }, [info, success]);

    const handleExportCSV = useCallback(() => {
        // CSV export logic would go here
        info('CSV Export', 'CSV dosyası oluşturuluyor');
        setTimeout(() => {
            success('CSV İndiriliyor', 'residents.csv dosyası indiriliyor');
        }, 1000);
    }, [info, success]);

    const handlePrint = useCallback(() => {
        window.print();
    }, []);

    return {
        // Bulk actions
        handleBulkMail,
        handleBulkSMS,
        handleBulkPDF,
        handleBulkTag,
        handleBulkStatusChange,
        handleBulkDelete,
        
        // Individual actions
        handleViewResident,
        handleEditResident,
        handleCallResident,
        handleMessageResident,
        handleGenerateQR,
        handleViewNotes,
        handleViewHistory,
        handleViewPaymentHistory,
        handleDeleteResident,
        handleSetResidentStatus,
        
        // Export actions
        handleExportExcel,
        handleExportCSV,
        handlePrint
    };
};
</file>

<file path="src/hooks/useResidentsData.ts">
'use client';

import { useState, useCallback, useEffect } from 'react';
import { residentService } from '@/services/resident.service';
import { Resident } from '@/app/components/ui/ResidentRow';
import { ResidentFilterParams, ResidentStatsResponse } from '@/services/types/resident.types';
import { ApiResident } from '@/app/dashboard/residents/types';
import { transformApiResidentToComponentResident } from '@/app/dashboard/residents/utils/transformations';

interface UseResidentsDataProps {
    currentPage: number;
    recordsPerPage: number;
    searchQuery: string;
    sortConfig: { key: string; direction: 'asc' | 'desc' };
    filters: Record<string, unknown>;
}

interface UseResidentsDataReturn {
    residents: Resident[];
    totalRecords: number;
    totalPages: number;
    stats: ResidentStatsResponse | null;
    loading: boolean;
    apiError: string | null;
    lastUpdated: Date;
    fetchResidents: () => Promise<void>;
    fetchStats: () => Promise<void>;
    refreshData: () => Promise<void>;
    setResidents: React.Dispatch<React.SetStateAction<Resident[]>>;
}

// Convert API types to component types (Iraq-specific)
// const transformApiResidentToComponentResident = (apiResident: ApiResident): Resident => {
//     return {
//         id: apiResident.id,
//         firstName: apiResident.firstName,
//         lastName: apiResident.lastName,
//         fullName: `${apiResident.firstName} ${apiResident.lastName}`,
//         // Iraq-specific: National ID could be Iraqi National ID or Passport
//         nationalId: apiResident.tcKimlikNo || apiResident.nationalId || apiResident.passportNumber,
//         email: apiResident.email,
//         phone: apiResident.phone,

//         // Property information from API
//         residentType: {
//             type: apiResident.property?.ownershipType || 'owner',
//             label: apiResident.property?.ownershipType === 'tenant' ? 'Kiracı' : 'Malik',
//             color: apiResident.property?.ownershipType === 'tenant' ? 'blue' : 'green'
//         },
//         address: {
//             building: apiResident.property?.block || 'Belirtilmemiş',
//             apartment: apiResident.property?.apartment || 'Belirtilmemiş',
//             roomType: apiResident.property?.roomType || 'Belirtilmemiş',
//             // Iraq-specific location fields
//             governorate: apiResident.property?.governorate || 'Belirtilmemiş',
//             district: apiResident.property?.district || 'Belirtilmemiş',
//             neighborhood: apiResident.property?.neighborhood || 'Belirtilmemiş'
//         },
//         contact: {
//             phone: apiResident.phone || 'Belirtilmemiş',
//             email: apiResident.email || 'Belirtilmemiş',
//             formattedPhone: apiResident.phone ? `+964 ${apiResident.phone}` : 'Belirtilmemiş'
//         },
//         financial: {
//             balance: apiResident.financial?.balance || 0,
//             totalDebt: apiResident.financial?.totalDebt || 0,
//             lastPaymentDate: apiResident.financial?.lastPaymentDate
//         },
//         status: {
//             type: 'active',
//             label: 'Aktif',
//             color: 'green'
//         },
//         membershipTier: {
//             type: 'BRONZE',
//             label: 'Bronz Üye'
//         },
//         verificationStatus: {
//             color: 'green',
//             label: 'Doğrulandı'
//         },
//         registrationDate: apiResident.registrationDate || new Date().toISOString(),
//         lastActivity: apiResident.lastActivity,
//         notes: apiResident.notes,
//         profileImage: apiResident.avatar,
//         createdAt: apiResident.createdAt,
//         updatedAt: apiResident.updatedAt
//     };
// };

export const useResidentsData = ({
    currentPage,
    recordsPerPage,
    searchQuery,
    sortConfig,
    filters
}: UseResidentsDataProps): UseResidentsDataReturn => {
    const [residents, setResidents] = useState<Resident[]>([]);
    const [totalRecords, setTotalRecords] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [stats, setStats] = useState<ResidentStatsResponse | null>(null);
    const [loading, setLoading] = useState(false);
    const [apiError, setApiError] = useState<string | null>(null);
    const [lastUpdated, setLastUpdated] = useState(new Date());

    const fetchResidents = useCallback(async () => {
        try {
            setLoading(true);
            setApiError(null);

            const filterParams: ResidentFilterParams = {
                page: currentPage,
                limit: recordsPerPage,
                search: searchQuery || undefined,
                orderColumn: sortConfig.key,
                orderBy: sortConfig.direction === 'asc' ? 'ASC' : 'DESC',
                ...filters
            };

            const response = await residentService.getAllResidents(filterParams);
            
            if (response.data) {
                const transformedResidents = (response.data as ApiResident[]).map(transformApiResidentToComponentResident);
                setResidents(transformedResidents);
                setTotalRecords(response.total || 0);
                setTotalPages(response.totalPages || 0);
            } else {
                setResidents([]);
                setTotalRecords(0);
                setTotalPages(0);
            }

            setLastUpdated(new Date());

        } catch (error: unknown) {
            console.error('Failed to fetch residents:', error);
            setApiError(error instanceof Error ? error.message : 'Sakinler yüklenirken bir hata oluştu.');
            // Keep existing data on error, don't clear it
        } finally {
            setLoading(false);
        }
    }, [currentPage, recordsPerPage, searchQuery, sortConfig, filters]);

    const fetchStats = useCallback(async () => {
        try {
            const statsResponse = await residentService.getResidentStats();
            setStats(statsResponse as unknown as ResidentStatsResponse);
        } catch (error: unknown) {
            console.error('Failed to fetch stats:', error);
            // Don't set error state for stats failure, just log it
        }
    }, [residents]);

    const refreshData = useCallback(async () => {
        await Promise.all([fetchResidents(), fetchStats()]);
    }, [fetchResidents, fetchStats]);

    // Auto-fetch when dependencies change
    useEffect(() => {
        fetchResidents();
    }, [fetchResidents]);

    // Initial stats fetch
    useEffect(() => {
        fetchStats();
    }, [fetchStats]);

    return {
        residents,
        totalRecords,
        totalPages,
        stats,
        loading,
        apiError,
        lastUpdated,
        fetchResidents,
        fetchStats,
        refreshData,
        setResidents
    };
};
</file>

<file path="src/hooks/useResidentsFilters.ts">
'use client';

import { useState, useCallback } from 'react';
import { Resident } from '@/app/components/ui/ResidentRow';

interface UseResidentsFiltersReturn {
    // Search and filters
    searchQuery: string;
    filters: Record<string, unknown>;
    showFilterPanel: boolean;
    drawerClosing: boolean;
    setSearchQuery: (query: string) => void;
    setFilters: (filters: Record<string, unknown>) => void;
    setShowFilterPanel: (show: boolean) => void;
    
    // Pagination
    currentPage: number;
    recordsPerPage: number;
    setCurrentPage: (page: number) => void;
    setRecordsPerPage: (records: number) => void;
    
    // Sorting
    sortConfig: { key: string; direction: 'asc' | 'desc' };
    setSortConfig: (config: { key: string; direction: 'asc' | 'desc' }) => void;
    
    // View and selection
    selectedView: string;
    selectedResidents: Resident[];
    setSelectedView: (view: string) => void;
    setSelectedResidents: (residents: Resident[]) => void;
    
    // Event handlers
    handleSearch: (query: string) => void;
    handleViewChange: (view: string) => void;
    handleSelectionChange: (residents: Resident[]) => void;
    handleSort: (key: string, direction: 'asc' | 'desc') => void;
    handlePageChange: (page: number) => void;
    handleRecordsPerPageChange: (records: number) => void;
    handleFiltersApply: (appliedFilters: Record<string, unknown>) => void;
    handleFiltersReset: () => void;
    handleCloseDrawer: () => void;
    handleOpenDrawer: () => void;
}

export const useResidentsFilters = (): UseResidentsFiltersReturn => {
    // Search and filters
    const [searchQuery, setSearchQuery] = useState('');
    const [filters, setFilters] = useState<Record<string, unknown>>({});
    const [showFilterPanel, setShowFilterPanel] = useState(false);
    const [drawerClosing, setDrawerClosing] = useState(false);
    
    // Pagination
    const [currentPage, setCurrentPage] = useState(1);
    const [recordsPerPage, setRecordsPerPage] = useState(10);
    
    // Sorting
    const [sortConfig, setSortConfig] = useState<{ key: string; direction: 'asc' | 'desc' }>({ key: 'firstName', direction: 'asc' });
    
    // View and selection
    const [selectedView, setSelectedView] = useState('table');
    const [selectedResidents, setSelectedResidents] = useState<Resident[]>([]);

    // Event handlers
    const handleSearch = useCallback((query: string) => {
        setSearchQuery(query);
        setCurrentPage(1); // Reset to first page when searching
    }, []);

    const handleViewChange = useCallback((view: string) => {
        setSelectedView(view);
    }, []);

    const handleSelectionChange = useCallback((residents: Resident[]) => {
        setSelectedResidents(residents);
    }, []);

    const handleSort = useCallback((key: string, direction: 'asc' | 'desc') => {
        setSortConfig({ key, direction });
        setCurrentPage(1); // Reset to first page when sorting
    }, []);

    const handlePageChange = useCallback((page: number) => {
        setCurrentPage(page);
    }, []);

    const handleRecordsPerPageChange = useCallback((records: number) => {
        setRecordsPerPage(records);
        setCurrentPage(1); // Reset to first page when changing page size
    }, []);

    const handleFiltersApply = useCallback((appliedFilters: Record<string, unknown>) => {
        // Map status filter values to uppercase if present
        let mappedFilters = { ...appliedFilters };
        if (mappedFilters.status && Array.isArray(mappedFilters.status)) {
            mappedFilters.status = mappedFilters.status.map((v: string) => v.toUpperCase());
        }
        // Map resident type to API values (owner -> resident, tenant -> tenant, guest -> guest)
        if (mappedFilters.type) {
            const typeMap: Record<string, string> = {
                'owner': 'resident',
                'tenant': 'tenant',
                'guest': 'guest',
            };
            if (Array.isArray(mappedFilters.type)) {
                mappedFilters.type = mappedFilters.type.map((v: string) => typeMap[v.toLowerCase()] || v.toLowerCase());
            } else if (typeof mappedFilters.type === 'string') {
                mappedFilters.type = typeMap[mappedFilters.type.toLowerCase()] || mappedFilters.type.toLowerCase();
            }
        }
        setFilters(mappedFilters);
        setCurrentPage(1); // Reset to first page when applying filters
        handleCloseDrawer();
    }, []);

    const handleFiltersReset = useCallback(() => {
        setFilters({});
        setCurrentPage(1); // Reset to first page when resetting filters
    }, []);

    const handleCloseDrawer = useCallback(() => {
        setDrawerClosing(true);
        setTimeout(() => {
            setShowFilterPanel(false);
            setDrawerClosing(false);
        }, 300);
    }, []);

    const handleOpenDrawer = useCallback(() => {
        setShowFilterPanel(true);
        setDrawerClosing(false);
    }, []);

    return {
        // State
        searchQuery,
        filters,
        showFilterPanel,
        drawerClosing,
        currentPage,
        recordsPerPage,
        sortConfig,
        selectedView,
        selectedResidents,
        
        // Setters
        setSearchQuery,
        setFilters,
        setShowFilterPanel,
        setCurrentPage,
        setRecordsPerPage,
        setSortConfig: (config: { key: string; direction: 'asc' | 'desc' }) => setSortConfig(config),
        setSelectedView,
        setSelectedResidents,
        
        // Handlers
        handleSearch,
        handleViewChange,
        handleSelectionChange,
        handleSort,
        handlePageChange,
        handleRecordsPerPageChange,
        handleFiltersApply,
        handleFiltersReset,
        handleCloseDrawer,
        handleOpenDrawer
    };
};
</file>

<file path="src/hooks/useResidentsStats.ts">
import { useEffect, useState } from 'react';
import { residentsStatsService } from '@/services';

export function useResidentsStats() {
  const [goldCount, setGoldCount] = useState<number>(0);
  const [totalCount, setTotalCount] = useState<number>(0);
  const [activeCount, setActiveCount] = useState<number>(0);
  const [tenantsCount, setTenantsCount] = useState<number>(0);
  const [ownersCount, setOwnersCount] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let isMounted = true;
    setLoading(true);
    setError(null);
    Promise.all([
      residentsStatsService.getGoldResidentsCount(),
      residentsStatsService.getTotalResidentsCount(),
      residentsStatsService.getActiveUsersCount(),
      residentsStatsService.getTenantsCount(),
      residentsStatsService.getOwnersCount(),
    ])
      .then(([gold, total, active, tenants, owners]) => {
        if (!isMounted) return;
        setGoldCount(gold);
        setTotalCount(total);
        setActiveCount(active);
        setTenantsCount(tenants);
        setOwnersCount(owners);
      })
      .catch((err) => {
        if (!isMounted) return;
        setError('İstatistikler alınamadı');
      })
      .finally(() => {
        if (!isMounted) return;
        setLoading(false);
      });
    return () => {
      isMounted = false;
    };
  }, []);

  return { goldCount, totalCount, activeCount, tenantsCount, ownersCount, loading, error };
}
</file>

<file path="src/hooks/useResidentsUI.ts">
'use client';

import { useState, useCallback, useEffect } from 'react';

interface UseResidentsUIReturn {
    sidebarOpen: boolean;
    setSidebarOpen: (open: boolean) => void;
    handleRefresh: () => Promise<void>;
    handleExport: () => void;
    handleAddResident: () => void;
}

interface UseResidentsUIProps {
    refreshData: () => Promise<void>;
}

export const useResidentsUI = ({ refreshData }: UseResidentsUIProps): UseResidentsUIReturn => {
    const [sidebarOpen, setSidebarOpen] = useState(false);

    const handleRefresh = useCallback(async () => {
        try {
            await refreshData();
        } catch (error) {
            console.error('Failed to refresh residents:', error);
        }
    }, [refreshData]);

    const handleExport = useCallback(() => {
        const options = [
            'Excel (.xlsx)',
            'CSV (.csv)',
            'PDF',
            'Yazdır'
        ];

        const choice = prompt(`Dışa aktarma formatını seçin:\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\n')}\n\nSeçiminizi yazın (1-${options.length}):`);
        
        const choiceNum = choice ? parseInt(choice) - 1 : null;
        
        switch (choiceNum) {
            case 0:
                // handleExportExcel(); // Will be called from actions hook
                break;
            case 1:
                // handleExportCSV(); // Will be called from actions hook
                break;
            case 2:
                // handleExportPDF(); // Will be called from actions hook
                break;
            case 3:
                // handlePrint(); // Will be called from actions hook
                break;
            default:
                if (choice !== null) {
                    // warning('Geçersiz seçim!'); // Will be called from actions hook
                }
        }
    }, []);

    const handleAddResident = useCallback(() => {
        // Navigate to add resident page
        // router.push('/dashboard/residents/add');
    }, []);

    // Keyboard shortcuts
    useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
                setSidebarOpen(false);
            }
        };

        document.addEventListener('keydown', handleEscape);
        return () => document.removeEventListener('keydown', handleEscape);
    }, []);

    return {
        sidebarOpen,
        setSidebarOpen,
        handleRefresh,
        handleExport,
        handleAddResident
    };
};
</file>

<file path="src/hooks/useResolvedTickets.ts">
import { useEffect, useState, useCallback } from 'react';
import { ticketService, Ticket } from '@/services/ticket.service';

export function useResolvedTickets() {
  const [tickets, setTickets] = useState<Ticket[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchTickets = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await ticketService.getTicketsByStatus('RESOLVED');
      setTickets(data as unknown as Ticket[]);
    } catch (err: any) {
      setError(err?.message || 'Çözümlenen talepler alınamadı.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchTickets();
  }, [fetchTickets]);

  return {
    tickets,
    loading,
    error,
    refresh: fetchTickets,
  };
}
</file>

<file path="src/hooks/useToast.ts">
'use client';

import { useState, useCallback } from 'react';

export interface ToastData {
    id: string;
    type: 'success' | 'error' | 'warning' | 'info';
    title?: string;
    message: string;
    duration?: number;
}

export const useToast = () => {
    const [toasts, setToasts] = useState<ToastData[]>([]);

    const addToast = useCallback((toast: Omit<ToastData, 'id'>) => {
        const id = Math.random().toString(36).substring(2, 9);
        const newToast: ToastData = {
            ...toast,
            id,
            duration: toast.duration || 5000,
        };

        setToasts((prevToasts) => [...prevToasts, newToast]);

        // Auto remove after duration
        if (newToast.duration && newToast.duration > 0) {
            
            setTimeout(() => {
                removeToast(id);
            }, newToast.duration);
        }
    }, []);

    const removeToast = useCallback((id: string) => {
        setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
    }, []);

    const success = useCallback((title: string, message?: string) => {
        addToast({ 
            type: 'success', 
            title, 
            message: message || title,
            duration: 4000 
        });
    }, [addToast]);

    const error = useCallback((title: string, message?: string) => {
        addToast({ 
            type: 'error', 
            title, 
            message: message || title,
            duration: 7000 
        });
    }, [addToast]);

    const warning = useCallback((title: string, message?: string) => {
        addToast({ 
            type: 'warning', 
            title, 
            message: message || title,
            duration: 5000 
        });
    }, [addToast]);

    const info = useCallback((title: string, message?: string) => {
        addToast({ 
            type: 'info', 
            title, 
            message: message || title,
            duration: 5000 
        });
    }, [addToast]);

    return {
        toasts,
        addToast,
        removeToast,
        success,
        error,
        warning,
        info,
    };
};
</file>

<file path="src/hooks/useUnitsData.ts">
import { useState, useEffect, useCallback } from 'react';
import { unitsService } from '@/services/units.service';
import { 
    Property, 
    PropertyFilterParams, 
    QuickStats, 
    PropertyActivity 
} from '@/services/types/property.types';
import { propertyService } from '@/services';

interface UseUnitsDataReturn {
    units: Property[];
    loading: boolean;
    error: string | null;
    quickStats: QuickStats | null;
    recentActivities: PropertyActivity[];
    pagination: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    };
    refetch: () => Promise<void>;
    updateUnit: (id: string, data: Partial<Property>) => Promise<void>;
    deleteUnit: (id: string) => Promise<void>;
    exportUnits: (format: 'csv' | 'excel') => Promise<void>;
}

export const useUnitsData = (
    filters: PropertyFilterParams = {},
    autoLoad: boolean = true
): UseUnitsDataReturn => {
    const [units, setUnits] = useState<Property[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [quickStats, setQuickStats] = useState<QuickStats | null>(null);
    const [recentActivities, setRecentActivities] = useState<PropertyActivity[]>([]);
    const [pagination, setPagination] = useState({
        total: 0,
        page: 1,
        limit: 20,
        totalPages: 0
    });

    const loadUnits = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);

            const response = await unitsService.getAllUnits(filters);
            setUnits(response.data);
            setPagination(response.pagination);
        } catch (err: any) {
            console.error('Failed to load units:', err);
            setError('Konutlar yüklenirken bir hata oluştu');
            setUnits([]);
        } finally {
            setLoading(false);
        }
    }, [filters]);

    const loadQuickStats = useCallback(async () => {
        try {
            const response = await unitsService.getQuickStats();
            setQuickStats(response.data);
        } catch (err: any) {
            console.error('Failed to load quick stats:', err);
            setQuickStats({
                apartmentUnits: { total: 85, occupied: 72, occupancyRate: 85 },
                villaUnits: { total: 15, occupied: 12, occupancyRate: 80 },
                commercialUnits: { total: 8, occupied: 6, occupancyRate: 75 },
                parkingSpaces: { total: 120, occupied: 98, occupancyRate: 82 }
            });
        }
    }, []);

    const loadRecentActivities = useCallback(async () => {
        try {
            const response = await unitsService.getRecentActivities(10, 7);
            setRecentActivities(response.data);
        } catch (err: any) {
            console.error('Failed to load recent activities:', err);
            setRecentActivities([]);
        }
    }, []);

    const refetch = useCallback(async () => {
        await Promise.all([
            loadUnits(),
            loadQuickStats(),
            loadRecentActivities()
        ]);
    }, [loadUnits, loadQuickStats, loadRecentActivities]);

    const updateUnit = useCallback(async (id: string, data: Partial<Property>) => {
        try {
            setLoading(true);
            await unitsService.updateUnit(id, data);
            await loadUnits();
        } catch (err: any) {
            console.error('Failed to update unit:', err);
            throw new Error('Konut güncellenirken bir hata oluştu');
        } finally {
            setLoading(false);
        }
    }, [loadUnits]);

    const deleteUnit = useCallback(async (id: string) => {
        try {
            setLoading(true);
            await unitsService.deleteUnit(id);
            await loadUnits();
        } catch (err: any) {
            console.error('Failed to delete unit:', err);
            throw new Error('Konut silinirken bir hata oluştu');
        } finally {
            setLoading(false);
        }
    }, [loadUnits]);

    const exportUnits = useCallback(async (format: 'csv' | 'excel' = 'excel') => {
        try {
            const blob = await unitsService.exportUnits(filters, format);
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `konutlar.${format === 'excel' ? 'xlsx' : 'csv'}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } catch (err: any) {
            console.error('Failed to export units:', err);
            throw new Error('Konutlar dışa aktarılırken bir hata oluştu');
        }
    }, [filters]);

    useEffect(() => {
        if (autoLoad) {
            refetch();
        }
    }, [refetch, autoLoad]);

    return {
        units,
        loading,
        error,
        quickStats,
        recentActivities,
        pagination,
        refetch,
        updateUnit,
        deleteUnit,
        exportUnits
    };
};

export function useUnitCounts() {
    const [residentCount, setResidentCount] = useState<number | null>(null);
    const [villaCount, setVillaCount] = useState<number | null>(null);
    const [availableCount, setAvailableCount] = useState<number | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        let isMounted = true;
        setLoading(true);
        setError(null);
        Promise.all([
            propertyService.getResidentCount(),
            propertyService.getVillaCount(),
            propertyService.getAvailableCount(),
        ])
            .then(([resident, villa, available]) => {
                if (!isMounted) return;
                setResidentCount(resident);
                setVillaCount(villa);
                setAvailableCount(available);
            })
            .catch((err) => {
                if (!isMounted) return;
                setError('Konut sayaçları yüklenirken bir hata oluştu');
            })
            .finally(() => {
                if (!isMounted) return;
                setLoading(false);
            });
        return () => {
            isMounted = false;
        };
    }, []);

    return { residentCount, villaCount, availableCount, loading, error };
}
</file>

<file path="src/hooks/useUnitsFilters.ts">
import { useState, useCallback, useMemo } from 'react';
import { PropertyFilterParams } from '@/services/types/property.types';

interface UseUnitsFiltersReturn {
    filters: PropertyFilterParams;
    searchQuery: string;
    showFilters: boolean;
    viewMode: 'table' | 'grid' | 'block' | 'map';
    setFilters: (filters: PropertyFilterParams) => void;
    updateFilter: (key: keyof PropertyFilterParams, value: any) => void;
    setSearchQuery: (query: string) => void;
    setShowFilters: (show: boolean) => void;
    setViewMode: (mode: 'table' | 'grid' | 'block' | 'map') => void;
    resetFilters: () => void;
    getFilteredParams: () => PropertyFilterParams;
}

const DEFAULT_FILTERS: PropertyFilterParams = {
    type: undefined,
    status: undefined,
    page: 1,
    limit: 20,
    orderColumn: 'firstName',
    orderBy: 'ASC'
};

export const useUnitsFilters = (
    initialFilters: PropertyFilterParams = DEFAULT_FILTERS
): UseUnitsFiltersReturn => {
    const [filters, setFilters] = useState<PropertyFilterParams>(initialFilters);
    const [searchQuery, setSearchQuery] = useState('');
    const [showFilters, setShowFilters] = useState(false);
    const [viewMode, setViewMode] = useState<'table' | 'grid' | 'block' | 'map'>('table');

    const updateFilter = useCallback((key: keyof PropertyFilterParams, value: any) => {
        setFilters(prev => ({
            ...prev,
            [key]: value,
            page: key === 'page' ? value : 1 // Reset to first page when other filters change
        }));
    }, []);

    const resetFilters = useCallback(() => {
        setFilters(DEFAULT_FILTERS);
        setSearchQuery('');
    }, []);

    const getFilteredParams = useMemo((): PropertyFilterParams => {
        const params: PropertyFilterParams = { ...filters };
        
        if (searchQuery.trim()) {
            params.search = searchQuery.trim();
        }

        // Remove undefined values
        Object.keys(params).forEach(key => {
            if (params[key as keyof PropertyFilterParams] === undefined) {
                delete params[key as keyof PropertyFilterParams];
            }
        });

        return params;
    }, [filters, searchQuery]);

    return {
        filters,
        searchQuery,
        showFilters,
        viewMode,
        setFilters,
        updateFilter,
        setSearchQuery,
        setShowFilters,
        setViewMode,
        resetFilters,
        getFilteredParams: () => getFilteredParams
    };
};
</file>

<file path="src/hooks/useWaitingTickets.ts">
import { useEffect, useState, useCallback } from 'react';
import { ticketService, Ticket } from '@/services/ticket.service';

export function useWaitingTickets() {
  const [tickets, setTickets] = useState<Ticket[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchTickets = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await ticketService.getTicketsByStatus('WAITING');
      setTickets(data as unknown as Ticket[]);
    } catch (err: any) {
      setError(err?.message || 'Bekleyen talepler alınamadı.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchTickets();
  }, [fetchTickets]);

  return {
    tickets,
    loading,
    error,
    refresh: fetchTickets,
  };
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs));
}
</file>

<file path="src/services/api/client.ts">
// API Client - Infrastructure Layer
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { apiConfig, features } from '../config/api.config';
import { ApiResponse, ApiError, RequestConfig } from '../core/types';
import { TokenManager } from '../utils/token-manager';
import { Logger } from '../utils/logger';

class ApiClient {
    private client: AxiosInstance;
    private tokenManager: TokenManager;
    private logger: Logger;

    constructor() {
        this.tokenManager = new TokenManager();
        this.logger = new Logger('ApiClient');

        this.client = axios.create({
            baseURL: apiConfig.version ? `${apiConfig.baseURL}/${apiConfig.version}` : apiConfig.baseURL,
            timeout: apiConfig.timeout,
            headers: apiConfig.defaultHeaders,
        });

        this.setupInterceptors();
    }

    private setupInterceptors(): void {
        // Request interceptor
        this.client.interceptors.request.use(
            (config) => {
                // Add auth token
                if (!config.headers?.skipAuth) {
                    const token = this.tokenManager.getAccessToken();
                    if (token) {
                        config.headers.Authorization = `Bearer ${token}`;
                    }
                }

                // Add request ID for tracking
                config.headers['X-Request-ID'] = this.generateRequestId();

                // Log request in development
                if (features.enableDebugLogs) {
                    this.logger.info('Request:', {
                        method: config.method?.toUpperCase(),
                        url: config.url,
                        data: config.data,
                    });
                }

                return config;
            },
            (error) => {
                this.logger.error('Request error:', error);
                return Promise.reject(error);
            }
        );

        // Response interceptor
        this.client.interceptors.response.use(
            (response: AxiosResponse) => {
                // Log response in development
                if (features.enableDebugLogs) {
                    this.logger.info('Response:', {
                        status: response.status,
                        url: response.config.url,
                        data: response.data,
                    });
                }

                return response;
            },
            async (error: AxiosError) => {
                const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };

                // Handle 401 Unauthorized
                if (error.response?.status === 401 && !originalRequest._retry) {
                    originalRequest._retry = true;

                    try {
                        await this.refreshToken();
                        const token = this.tokenManager.getAccessToken();

                        if (token && originalRequest.headers) {
                            originalRequest.headers.Authorization = `Bearer ${token}`;
                            return this.client(originalRequest);
                        }
                    } catch (refreshError) {
                        this.tokenManager.clearTokens();
                        this.redirectToLogin();
                        return Promise.reject(refreshError);
                    }
                }

                // Transform error
                const apiError = this.transformError(error);
                this.logger.error('API Error:', apiError);

                return Promise.reject(apiError);
            }
        );
    }

    private async refreshToken(): Promise<void> {
        const refreshToken = this.tokenManager.getRefreshToken();

        if (!refreshToken) {
            throw new Error('No refresh token available');
        }

        const response = await this.client.post(apiConfig.endpoints.auth.refresh, {
            refreshToken,
        }, {
            headers: { skipAuth: true },
        });

        // API-99CLUB response format: {accessToken, refreshToken, tokenType, expiresIn}
        const { accessToken, refreshToken: newRefreshToken } = response.data;
        this.tokenManager.setTokens(accessToken, newRefreshToken);
    }

    private transformError(error: AxiosError): ApiError {
        if (error.response) {
            // Server responded with error status
            const responseData = error.response.data as any;
            return {
                message: responseData?.message || error.message,
                code: responseData?.code,
                status: error.response.status,
                details: responseData?.details,
            };
        } else if (error.request) {
            // Request was made but no response received
            return {
                message: 'Network error: No response from server',
                code: 'NETWORK_ERROR',
                status: 0,
            };
        } else {
            // Something else happened
            return {
                message: error.message || 'Unknown error occurred',
                code: 'UNKNOWN_ERROR',
                status: 0,
            };
        }
    }

    private generateRequestId(): string {
        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    private redirectToLogin(): void {
        if (typeof window !== 'undefined') {
            window.location.href = '/login';
        }
    }

    // Public API methods
    async get<T = any>(
        url: string,
        config?: RequestConfig
    ): Promise<ApiResponse<T>> {
        const response = await this.client.get(url, this.mergeConfig(config));
        return response.data;
    }

    async post<T = any>(
        url: string,
        data?: any,
        config?: RequestConfig
    ): Promise<ApiResponse<T>> {
        const response = await this.client.post(url, data, this.mergeConfig(config));
        return response.data;
    }

    async put<T = any>(
        url: string,
        data?: any,
        config?: RequestConfig
    ): Promise<ApiResponse<T>> {
        const response = await this.client.put(url, data, this.mergeConfig(config));
        return response.data;
    }

    async patch<T = any>(
        url: string,
        data?: any,
        config?: RequestConfig
    ): Promise<ApiResponse<T>> {
        const response = await this.client.patch(url, data, this.mergeConfig(config));
        return response.data;
    }

    async delete<T = any>(
        url: string,
        config?: RequestConfig
    ): Promise<ApiResponse<T>> {
        const response = await this.client.delete(url, this.mergeConfig(config));
        return response.data;
    }

    private mergeConfig(config?: RequestConfig): AxiosRequestConfig {
        return {
            timeout: config?.timeout,
            headers: config?.skipAuth ? { skipAuth: true } : {},
            ...config,
        };
    }

    // Upload file method
    async uploadFile<T = any>(
        url: string,
        file: File,
        onProgress?: (progress: number) => void
    ): Promise<ApiResponse<T>> {
        const formData = new FormData();
        formData.append('file', file);

        const response = await this.client.post(url, formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
            onUploadProgress: (progressEvent) => {
                if (onProgress && progressEvent.total) {
                    const progress = (progressEvent.loaded / progressEvent.total) * 100;
                    onProgress(Math.round(progress));
                }
            },
        });

        return response.data;
    }
}

// Export singleton instance
export const apiClient = new ApiClient();
export default apiClient;
</file>

<file path="src/services/core/base.service.ts">
// Base Service - Application Layer
import { apiClient } from '../api/client';
import { ApiResponse, PaginatedResponse, FilterParams, Repository } from './types';
import { Logger, createLogger } from '../utils/logger';

export abstract class BaseService<TEntity, TCreateDto = Partial<TEntity>, TUpdateDto = Partial<TEntity>>
    implements Repository<TEntity, TCreateDto, TUpdateDto> {

    protected logger: Logger;
    protected abstract baseEndpoint: string;

    constructor(serviceName: string) {
        this.logger = createLogger(serviceName);
    }

    /**
     * Tüm kayıtları getirir (pagination ile)
     */
    async getAll(params?: FilterParams): Promise<PaginatedResponse<TEntity>> {
        this.logger.info(`Fetching all ${this.baseEndpoint}`, params);

        const queryParams = this.buildQueryParams(params);
        const response = await apiClient.get<PaginatedResponse<TEntity>>(
            `${this.baseEndpoint}${queryParams}`
        );

        this.logger.info(`Fetched ${response.data.data.length} items`);
        return response.data;
    }

    /**
     * ID'ye göre tek kayıt getirir
     */
    async getById(id: string | number): Promise<ApiResponse<TEntity>> {
        this.logger.info(`Fetching ${this.baseEndpoint} with ID: ${id}`);

        const response = await apiClient.get<TEntity>(`${this.baseEndpoint}/${id}`);

        this.logger.info(`Fetched ${this.baseEndpoint} successfully`);
        return response;
    }

    /**
     * Yeni kayıt oluşturur
     */
    async create(data: TCreateDto): Promise<ApiResponse<TEntity>> {
        this.logger.info(`Creating new ${this.baseEndpoint}`, data);

        const response = await apiClient.post<TEntity>(this.baseEndpoint, data);

        this.logger.info(`Created ${this.baseEndpoint} successfully`);
        return response;
    }

    /**
     * Mevcut kaydı günceller
     */
    async update(id: string | number, data: TUpdateDto): Promise<ApiResponse<TEntity>> {
        this.logger.info(`Updating ${this.baseEndpoint} with ID: ${id}`, data);

        const response = await apiClient.put<TEntity>(`${this.baseEndpoint}/${id}`, data);

        this.logger.info(`Updated ${this.baseEndpoint} successfully`);
        return response;
    }

    /**
     * Partial update (PATCH)
     */
    async patch(id: string | number, data: Partial<TUpdateDto>): Promise<ApiResponse<TEntity>> {
        this.logger.info(`Patching ${this.baseEndpoint} with ID: ${id}`, data);

        const response = await apiClient.patch<TEntity>(`${this.baseEndpoint}/${id}`, data);

        this.logger.info(`Patched ${this.baseEndpoint} successfully`);
        return response;
    }

    /**
     * Kaydı siler
     */
    async delete(id: string | number): Promise<ApiResponse<void>> {
        this.logger.info(`Deleting ${this.baseEndpoint} with ID: ${id}`);

        const response = await apiClient.delete<void>(`${this.baseEndpoint}/${id}`);

        this.logger.info(`Deleted ${this.baseEndpoint} successfully`);
        return response;
    }

    /**
     * Bulk operations
     */
    async bulkCreate(data: TCreateDto[]): Promise<ApiResponse<TEntity[]>> {
        this.logger.info(`Bulk creating ${data.length} ${this.baseEndpoint} items`);

        const response = await apiClient.post<TEntity[]>(`${this.baseEndpoint}/bulk`, data);

        this.logger.info(`Bulk created ${this.baseEndpoint} successfully`);
        return response;
    }

    async bulkUpdate(updates: Array<{ id: string | number; data: TUpdateDto }>): Promise<ApiResponse<TEntity[]>> {
        this.logger.info(`Bulk updating ${updates.length} ${this.baseEndpoint} items`);

        const response = await apiClient.put<TEntity[]>(`${this.baseEndpoint}/bulk`, updates);

        this.logger.info(`Bulk updated ${this.baseEndpoint} successfully`);
        return response;
    }

    async bulkDelete(ids: (string | number)[]): Promise<ApiResponse<void>> {
        this.logger.info(`Bulk deleting ${ids.length} ${this.baseEndpoint} items`);

        const response = await apiClient.delete<void>(`${this.baseEndpoint}/bulk`, {
            data: { ids }
        } as any);

        this.logger.info(`Bulk deleted ${this.baseEndpoint} successfully`);
        return response;
    }

    /**
     * Search functionality
     */
    async search(query: string, filters?: FilterParams): Promise<PaginatedResponse<TEntity>> {
        this.logger.info(`Searching ${this.baseEndpoint} with query: ${query}`, filters);

        const params = { ...filters, search: query };
        const queryParams = this.buildQueryParams(params);

        const response = await apiClient.get<PaginatedResponse<TEntity>>(
            `${this.baseEndpoint}/search${queryParams}`
        );

        this.logger.info(`Search returned ${response.data.data.length} results`);
        return response.data;
    }

    /**
     * Count records
     */
    async count(filters?: Omit<FilterParams, 'page' | 'limit'>): Promise<ApiResponse<number>> {
        this.logger.info(`Counting ${this.baseEndpoint} records`, filters);

        const queryParams = this.buildQueryParams(filters);
        const response = await apiClient.get<number>(`${this.baseEndpoint}/count${queryParams}`);

        this.logger.info(`Count result: ${response.data}`);
        return response;
    }

    /**
     * Check if record exists
     */
    async exists(id: string | number): Promise<ApiResponse<boolean>> {
        this.logger.info(`Checking if ${this.baseEndpoint} exists with ID: ${id}`);

        const response = await apiClient.get<boolean>(`${this.baseEndpoint}/${id}/exists`);

        this.logger.info(`Exists check result: ${response.data}`);
        return response;
    }

    /**
     * Upload file for entity
     */
    async uploadFile(
        id: string | number,
        file: File,
        fieldName: string = 'file',
        onProgress?: (progress: number) => void
    ): Promise<ApiResponse<TEntity>> {
        this.logger.info(`Uploading file for ${this.baseEndpoint} with ID: ${id}`);

        const response = await apiClient.uploadFile<TEntity>(
            `${this.baseEndpoint}/${id}/upload/${fieldName}`,
            file,
            onProgress
        );

        this.logger.info(`File uploaded successfully`);
        return response;
    }

    /**
     * Query parametrelerini build eder
     */
    protected buildQueryParams(params?: Record<string, any>): string {
        if (!params || Object.keys(params).length === 0) {
            return '';
        }

        const cleanParams = Object.entries(params)
            .filter(([_, value]) => value !== undefined && value !== null && value !== '')
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join('&');

        return cleanParams ? `?${cleanParams}` : '';
    }

    /**
     * Cache key generator
     */
    protected getCacheKey(method: string, ...args: any[]): string {
        const argsString = args.map(arg =>
            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
        ).join('_');

        return `${this.baseEndpoint}_${method}_${argsString}`;
    }

    /**
     * Generic error handler
     */
    protected handleError(error: any, operation: string): never {
        this.logger.error(`Error during ${operation}:`, error);
        throw error;
    }
}
</file>

<file path="src/services/types/auth.types.ts">
// Authentication Domain Types - API-99CLUB Compatible
import { User } from './user.types';

// API-99CLUB TokenDto Schema
export interface AuthTokens {
    accessToken: string;
    refreshToken: string;
    tokenType: string; // "bearer"
    expiresIn: number; // seconds
}

export interface AuthUser {
    user: User;
    tokens: AuthTokens;
}

// API-99CLUB LoginDto Schema
export interface LoginDto {
    email: string;
    password: string;
}

export interface LoginResponse {
    accessToken: string;
    refreshToken: string;
    tokenType: string;
    expiresIn: number;
}

// API-99CLUB RegisterDto Schema  
export interface RegisterDto {
    email: string;
    firstName: string;
    lastName: string;
    password: string;
    phone?: string; // Optional phone number
}

export interface RegisterResponse {
    accessToken: string;
    refreshToken: string;
    tokenType: string;
    expiresIn: number;
}

// API-99CLUB RefreshTokenDto Schema
export interface RefreshTokenDto {
    refreshToken: string;
}

export interface RefreshTokenResponse {
    accessToken: string;
    refreshToken: string;
    tokenType: string;
    expiresIn: number;
}

// Password Reset DTOs (Future Implementation)
export interface ForgotPasswordDto {
    email: string;
}

export interface ResetPasswordDto {
    token: string;
    password: string;
    confirmPassword: string;
}

export interface ChangePasswordDto {
    currentPassword: string;
    newPassword: string;
    confirmPassword: string;
}

// Email Verification DTOs (Future Implementation)
export interface EmailVerificationDto {
    token: string;
}

export interface ResendVerificationDto {
    email: string;
}

// 2FA DTOs (Future Implementation)
export interface Enable2FAResponse {
    qrCode: string;
    secret: string;
    backupCodes: string[];
}

export interface Verify2FADto {
    token: string;
    code: string;
}

export interface Disable2FADto {
    password: string;
    code: string;
}

// Logout DTOs
export interface LogoutDto {
    refreshToken?: string;
}

// Social Login DTOs (Future Implementation)
export interface SocialLoginDto {
    provider: 'google' | 'facebook' | 'github' | 'twitter';
    token: string;
}

export interface SocialLoginResponse {
    user: User;
    tokens: AuthTokens;
    isNewUser: boolean;
    message: string;
}

// Session DTOs (Future Implementation)
export interface SessionInfo {
    id: string;
    userId: string;
    ipAddress: string;
    userAgent: string;
    location?: string;
    isCurrentSession: boolean;
    createdAt: string;
    lastActivityAt: string;
    expiresAt: string;
}

export interface ActiveSessionsResponse {
    sessions: SessionInfo[];
    currentSessionId: string;
}

export interface RevokeSessionDto {
    sessionId: string;
}

// Auth State
export interface AuthState {
    isAuthenticated: boolean;
    user: User | null;
    tokens: AuthTokens | null;
    isLoading: boolean;
    error: string | null;
}

// Permission checking - API-99CLUB Compatible
export interface PermissionCheck {
    resource: string; // "users", "roles", "properties"
    action: string;   // "read", "create", "update", "delete"
}

// Security events (Future Implementation)
export interface SecurityEvent {
    type: 'login' | 'logout' | 'password_change' | 'email_change' | '2fa_enabled' | '2fa_disabled' | 'suspicious_activity';
    description: string;
    ipAddress: string;
    userAgent: string;
    location?: string;
    timestamp: string;
}

export interface SecurityEventsResponse {
    events: SecurityEvent[];
    pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
    };
}
</file>

<file path="src/services/types/user.types.ts">
// User Domain Types - API-99CLUB Compatible
import { BaseEntity } from '../core/types';

// API-99CLUB ResponseUserDto Schema
export interface User extends BaseEntity {
    email: string;
    firstName: string;
    lastName: string;
    phone?: string;
    status: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED';
    membershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
    role: UserRole;
}

// API-99CLUB ResponseRoleDto Schema
export interface UserRole {
    id: string;
    name: string;
    description?: string;
    slug: string;
    isSystem: boolean;
    permissions?: Permission[];
}

// API-99CLUB ResponsePermissionDto Schema
export interface Permission {
    id: string;
    name: string;
    description?: string;
    action: string; // "read", "create", "update", "delete"
    resource: string; // "users", "roles", "properties"
    isSystem: boolean;
}

// Additional User Properties (for future use)
export interface UserPreferences {
    language: string;
    theme: 'light' | 'dark' | 'system';
    timezone: string;
    notifications: NotificationSettings;
}

export interface NotificationSettings {
    email: boolean;
    push: boolean;
    sms: boolean;
    marketing: boolean;
}

// DTOs (Data Transfer Objects)
export interface CreateUserDto {
    email: string;
    firstName: string;
    lastName: string;
    phone?: string;
    roleId: string;
}

export interface UpdateUserDto {
    firstName?: string;
    lastName?: string;
    phone?: string;
    roleId?: string;
}

export interface UpdateUserPasswordDto {
    currentPassword: string;
    newPassword: string;
    confirmPassword: string;
}

export interface UserProfileDto {
    firstName: string;
    lastName: string;
    phone?: string;
    preferences?: UserPreferences;
}

// Query DTOs
export interface UserFilterParams {
    page?: number;
    limit?: number;
    type?: string;
    status?: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED';
}

// Response DTOs
export interface UserListResponse {
    users: User[];
    pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
    };
}

export interface UserStatsResponse {
    totalUsers: number;
    activeUsers: number;
    newUsersThisMonth: number;
    verifiedUsers: number;
}
</file>

<file path="src/services/utils/logger.ts">
// Logger Utility - Infrastructure Layer
import { features } from '../config/api.config';

export enum LogLevel {
    ERROR = 0,
    WARN = 1,
    INFO = 2,
    DEBUG = 3,
}

interface LogEntry {
    timestamp: string;
    level: string;
    context: string;
    message: string;
    data?: any;
}

export class Logger {
    private context: string;
    private logLevel: LogLevel;

    constructor(context: string = 'App', logLevel: LogLevel = LogLevel.INFO) {
        this.context = context;
        this.logLevel = features.enableDebugLogs ? LogLevel.DEBUG : logLevel;
    }

    /**
     * Error seviyesinde log yazar
     */
    error(message: string, data?: any): void {
        if (this.logLevel >= LogLevel.ERROR) {
            this.writeLog(LogLevel.ERROR, message, data);
        }
    }

    /**
     * Warning seviyesinde log yazar
     */
    warn(message: string, data?: any): void {
        if (this.logLevel >= LogLevel.WARN) {
            this.writeLog(LogLevel.WARN, message, data);
        }
    }

    /**
     * Info seviyesinde log yazar
     */
    info(message: string, data?: any): void {
        if (this.logLevel >= LogLevel.INFO) {
            this.writeLog(LogLevel.INFO, message, data);
        }
    }

    /**
     * Debug seviyesinde log yazar
     */
    debug(message: string, data?: any): void {
        if (this.logLevel >= LogLevel.DEBUG) {
            this.writeLog(LogLevel.DEBUG, message, data);
        }
    }

    /**
     * Log entry'yi konsola yazar
     */
    private writeLog(level: LogLevel, message: string, data?: any): void {
        const logEntry: LogEntry = {
            timestamp: new Date().toISOString(),
            level: LogLevel[level],
            context: this.context,
            message,
            data,
        };

        const formattedMessage = this.formatMessage(logEntry);

        switch (level) {
            case LogLevel.ERROR:
                console.error(formattedMessage, data || '');
                break;
            case LogLevel.WARN:
                console.warn(formattedMessage, data || '');
                break;
            case LogLevel.INFO:
                console.info(formattedMessage, data || '');
                break;
            case LogLevel.DEBUG:
                console.debug(formattedMessage, data || '');
                break;
        }

        // Production'da kritik hataları external service'e gönder
        if (level === LogLevel.ERROR && !features.enableDebugLogs) {
            this.sendToExternalService(logEntry);
        }
    }

    /**
     * Log mesajını formatlar
     */
    private formatMessage(entry: LogEntry): string {
        return `[${entry.timestamp}] [${entry.level}] [${entry.context}] ${entry.message}`;
    }

    /**
     * Production ortamında kritik hataları external service'e gönderir
     */
    private sendToExternalService(logEntry: LogEntry): void {
        // Burada Sentry, LogRocket vb. external logging service'lere gönderilebilir
        // Örnek implementation:
        /*
        try {
          // External service API call
          fetch('/api/logs', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(logEntry),
          });
        } catch (error) {
          console.error('Failed to send log to external service:', error);
        }
        */
    }

    /**
     * Performance tracking için timer başlatır
     */
    startTimer(label: string): () => void {
        const startTime = performance.now();

        return () => {
            const endTime = performance.now();
            const duration = endTime - startTime;
            this.debug(`Timer [${label}]: ${duration.toFixed(2)}ms`);
        };
    }

    /**
     * Network request'leri loglar
     */
    logRequest(method: string, url: string, data?: any): void {
        this.debug(`🌐 ${method.toUpperCase()} ${url}`, data);
    }

    /**
     * Network response'ları loglar
     */
    logResponse(status: number, url: string, data?: any): void {
        const emoji = status >= 200 && status < 300 ? '✅' : '❌';
        this.debug(`${emoji} ${status} ${url}`, data);
    }

    /**
     * User action'ları loglar
     */
    logUserAction(action: string, details?: any): void {
        this.info(`👤 User Action: ${action}`, details);
    }

    /**
     * Component lifecycle'ı loglar
     */
    logComponentLifecycle(component: string, phase: string, props?: any): void {
        this.debug(`🔄 ${component} [${phase}]`, props);
    }

    /**
     * Cache operations'ları loglar
     */
    logCacheOperation(operation: string, key: string, value?: any): void {
        this.debug(`💾 Cache ${operation}: ${key}`, value);
    }
}

// Global logger instance
export const logger = new Logger('Global');

// Context-specific logger factory
export const createLogger = (context: string): Logger => {
    return new Logger(context);
};
</file>

<file path="src/services/utils/token-manager.ts">
// Token Manager - Infrastructure Layer
import { apiConfig } from '../config/api.config';

export class TokenManager {
    private accessTokenKey = apiConfig.authTokenKey;
    private refreshTokenKey = apiConfig.refreshTokenKey;

    /**
     * Access token'ı localStorage'dan alır
     */
    getAccessToken(): string | null {
        if (typeof window === 'undefined') return null;

        try {
            return localStorage.getItem(this.accessTokenKey);
        } catch (error) {
            console.warn('Failed to get access token from localStorage:', error);
            return null;
        }
    }

    /**
     * Refresh token'ı localStorage'dan alır
     */
    getRefreshToken(): string | null {
        if (typeof window === 'undefined') return null;

        try {
            return localStorage.getItem(this.refreshTokenKey);
        } catch (error) {
            console.warn('Failed to get refresh token from localStorage:', error);
            return null;
        }
    }

    /**
     * Access ve refresh token'ları localStorage'a kaydeder
     */
    setTokens(accessToken: string, refreshToken?: string): void {
        if (typeof window === 'undefined') return;

        try {
            localStorage.setItem(this.accessTokenKey, accessToken);

            if (refreshToken) {
                localStorage.setItem(this.refreshTokenKey, refreshToken);
            }
        } catch (error) {
            console.error('Failed to set tokens in localStorage:', error);
        }
    }

    /**
     * Sadece access token'ı günceller
     */
    setAccessToken(accessToken: string): void {
        if (typeof window === 'undefined') return;

        try {
            localStorage.setItem(this.accessTokenKey, accessToken);
        } catch (error) {
            console.error('Failed to set access token in localStorage:', error);
        }
    }

    /**
     * Sadece refresh token'ı günceller
     */
    setRefreshToken(refreshToken: string): void {
        if (typeof window === 'undefined') return;

        try {
            localStorage.setItem(this.refreshTokenKey, refreshToken);
        } catch (error) {
            console.error('Failed to set refresh token in localStorage:', error);
        }
    }

    /**
     * Tüm token'ları localStorage'dan siler
     */
    clearTokens(): void {
        if (typeof window === 'undefined') return;

        try {
            localStorage.removeItem(this.accessTokenKey);
            localStorage.removeItem(this.refreshTokenKey);
        } catch (error) {
            console.error('Failed to clear tokens from localStorage:', error);
        }
    }

    /**
     * Token'ın geçerli olup olmadığını kontrol eder
     */
    isTokenValid(token?: string | null): boolean {
        const tokenToCheck = token || this.getAccessToken();

        if (!tokenToCheck) return false;

        try {
            // JWT token'ın payload kısmını decode et
            const payload = JSON.parse(atob(tokenToCheck.split('.')[1]));
            const currentTime = Math.floor(Date.now() / 1000);

            // Token'ın süresi dolmuş mu kontrol et
            return payload.exp > currentTime;
        } catch (error) {
            console.warn('Failed to validate token:', error);
            return false;
        }
    }

    /**
     * Token'dan user bilgilerini çıkarır
     */
    getUserFromToken(): any | null {
        const token = this.getAccessToken();

        if (!token || !this.isTokenValid(token)) return null;

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload.user || payload.sub || null;
        } catch (error) {
            console.warn('Failed to extract user from token:', error);
            return null;
        }
    }

    /**
     * Token'ın ne zaman dolacağını döner (milisaniye)
     */
    getTokenExpiryTime(): number | null {
        const token = this.getAccessToken();

        if (!token) return null;

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload.exp * 1000; // Convert to milliseconds
        } catch (error) {
            console.warn('Failed to get token expiry time:', error);
            return null;
        }
    }

    /**
     * Token'ın kalan süresini döner (milisaniye)
     */
    getTokenRemainingTime(): number | null {
        const expiryTime = this.getTokenExpiryTime();

        if (!expiryTime) return null;

        const remainingTime = expiryTime - Date.now();
        return remainingTime > 0 ? remainingTime : 0;
    }

    /**
     * Token otomatik yenileme için gereken süreyi kontrol eder
     */
    shouldRefreshToken(bufferTime: number = 5 * 60 * 1000): boolean {
        const remainingTime = this.getTokenRemainingTime();

        if (!remainingTime) return false;

        return remainingTime <= bufferTime;
    }
}
</file>

<file path="src/services/auth.service.ts">
// Authentication Service - Application Layer - API-99CLUB Compatible
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';
import { TokenManager } from './utils/token-manager';
import { createLogger } from './utils/logger';
import {
    LoginDto,
    LoginResponse,
    RegisterDto,
    RegisterResponse,
    RefreshTokenDto,
    RefreshTokenResponse,
    LogoutDto,
    AuthState,
    // Future implementation types
    ForgotPasswordDto,
    ResetPasswordDto,
    ChangePasswordDto,
    EmailVerificationDto,
    ResendVerificationDto,
    Enable2FAResponse,
    Verify2FADto,
    Disable2FADto,
    SocialLoginDto,
    SocialLoginResponse,
    SessionInfo,
    ActiveSessionsResponse,
    RevokeSessionDto,
    PermissionCheck,
    SecurityEventsResponse,
} from './types/auth.types';
import { User } from './types/user.types';
import { ApiResponse } from './core/types';

class AuthService {
    private tokenManager: TokenManager;
    private logger = createLogger('AuthService');
    private endpoints = apiConfig.endpoints.auth;

    constructor() {
        this.tokenManager = new TokenManager();
    }

    // Basic Authentication Methods - API-99CLUB Compatible
    async login(credentials: LoginDto): Promise<LoginResponse> {
        try {
            this.logger.info('Attempting login', { email: credentials.email });

            const response = await apiClient.post<LoginResponse>(
                this.endpoints.login,
                credentials,
                { skipAuth: true }
            );

            // Store tokens
            this.tokenManager.setTokens(
                response.data.accessToken,
                response.data.refreshToken
            );

            this.logger.info('Login successful');
            return response.data;
        } catch (error) {
            this.logger.error('Login failed', error);
            throw error;
        }
    }

    async register(userData: RegisterDto): Promise<RegisterResponse> {
        try {
            this.logger.info('Attempting registration', { email: userData.email });

            const response = await apiClient.post<RegisterResponse>(
                this.endpoints.register,
                userData,
                { skipAuth: true }
            );

            // Store tokens
            this.tokenManager.setTokens(
                response.data.accessToken,
                response.data.refreshToken
            );

            this.logger.info('Registration successful');
            return response.data;
        } catch (error) {
            this.logger.error('Registration failed', error);
            throw error;
        }
    }

    async logout(data?: LogoutDto): Promise<void> {
        try {
            this.logger.info('Attempting logout');

            await apiClient.post(this.endpoints.logout);

            // Clear local tokens
            this.tokenManager.clearTokens();

            this.logger.info('Logout successful');
        } catch (error) {
            // Clear tokens even if logout request fails
            this.tokenManager.clearTokens();
            this.logger.error('Logout failed', error);
            throw error;
        }
    }

    async refreshTokens(refreshToken?: string): Promise<RefreshTokenResponse> {
        try {
            const token = refreshToken || this.tokenManager.getRefreshToken();

            if (!token) {
                throw new Error('No refresh token available');
            }

            this.logger.info('Refreshing tokens');

            const response = await apiClient.post<RefreshTokenResponse>(
                this.endpoints.refresh,
                { refreshToken: token },
                { skipAuth: true }
            );

            // Update stored tokens
            this.tokenManager.setTokens(
                response.data.accessToken,
                response.data.refreshToken
            );

            this.logger.info('Tokens refreshed successfully');
            return response.data;
        } catch (error) {
            this.logger.error('Token refresh failed', error);
            this.tokenManager.clearTokens();
            throw error;
        }
    }

    async getCurrentUser(): Promise<User> {
        try {
            this.logger.info('Fetching current user');

            const response = await apiClient.get<User>(this.endpoints.me);

            this.logger.info('Current user fetched successfully');
            return response.data;
        } catch (error) {
            this.logger.error('Failed to fetch current user', error);
            throw error;
        }
    }

    // Future Implementation - Password Management
    async forgotPassword(data: ForgotPasswordDto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    async resetPassword(data: ResetPasswordDto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    async changePassword(data: ChangePasswordDto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    // Future Implementation - Email Verification
    async verifyEmail(data: EmailVerificationDto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    async resendVerificationEmail(data: ResendVerificationDto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    // Future Implementation - Two-Factor Authentication
    async enable2FA(): Promise<Enable2FAResponse> {
        throw new Error('Not implemented yet. Future feature.');
    }

    async verify2FA(data: Verify2FADto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    async disable2FA(data: Disable2FADto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    // Future Implementation - Social Login
    async socialLogin(data: SocialLoginDto): Promise<SocialLoginResponse> {
        throw new Error('Not implemented yet. Future feature.');
    }

    // Future Implementation - Session Management
    async getActiveSessions(): Promise<ActiveSessionsResponse> {
        throw new Error('Not implemented yet. Future feature.');
    }

    async revokeSession(data: RevokeSessionDto): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    async revokeAllSessions(): Promise<void> {
        throw new Error('Not implemented yet. Future feature.');
    }

    // Permission checking - Basic implementation
    async hasPermission(check: PermissionCheck): Promise<boolean> {
        try {
            const user = await this.getCurrentUser();

            if (!user.role?.permissions) {
                return false;
            }

            return user.role.permissions.some(permission =>
                permission.resource === check.resource && permission.action === check.action
            );
        } catch (error) {
            this.logger.error('Permission check failed', error);
            return false;
        }
    }

    async hasAnyPermission(checks: PermissionCheck[]): Promise<boolean> {
        for (const check of checks) {
            if (await this.hasPermission(check)) {
                return true;
            }
        }
        return false;
    }

    async hasAllPermissions(checks: PermissionCheck[]): Promise<boolean> {
        for (const check of checks) {
            if (!(await this.hasPermission(check))) {
                return false;
            }
        }
        return true;
    }

    // Future Implementation - Security Events
    async getSecurityEvents(page: number = 1, limit: number = 20): Promise<SecurityEventsResponse> {
        throw new Error('Not implemented yet. Future feature.');
    }

    // Utility methods
    isAuthenticated(): boolean {
        return this.tokenManager.isTokenValid();
    }

    getUser(): any | null {
        // This should be implemented with proper state management
        return null;
    }

    getAccessToken(): string | null {
        return this.tokenManager.getAccessToken();
    }

    getRefreshToken(): string | null {
        return this.tokenManager.getRefreshToken();
    }

    shouldRefreshToken(): boolean {
        return this.tokenManager.shouldRefreshToken();
    }

    getAuthState(): AuthState {
        return {
            isAuthenticated: this.isAuthenticated(),
            user: this.getUser(),
            tokens: {
                accessToken: this.tokenManager.getAccessToken() || '',
                refreshToken: this.tokenManager.getRefreshToken() || '',
                tokenType: 'bearer',
                expiresIn: 3600
            },
            isLoading: false,
            error: null,
        };
    }

    clearAuthState(): void {
        this.tokenManager.clearTokens();
    }
}

// Export singleton instance
export const authService = new AuthService();
export default authService;
</file>

<file path="src/services/logging.service.ts">
import { apiClient } from './api/client';

export interface AuditLog {
  id: string;
  action: 'create' | 'update' | 'delete' | 'login' | 'logout' | 'view';
  entityType: string;
  entityId: string;
  oldValue: Record<string, any>;
  newValue: Record<string, any>;
  metadata: Record<string, any>;
  userId: string;
  username: string;
  ipAddress: string;
  userAgent: string;
  createdAt: string;
  module: string;
  endpoint: string;
  httpMethod: string;
}

export interface AuditLogsResponse {
  data: AuditLog[];
  total: number;
  page: number;
  limit: number;
  pages: number;
}

export interface AuditLogFilter {
  page?: number;
  limit?: number;
  action?: string;
  entityType?: string;
  userId?: string;
  username?: string;
  module?: string;
  startDate?: string;
  endDate?: string;
}

class LoggingService {
  private baseUrl = '/admin/logging';

  async getAuditLogs(filter: AuditLogFilter = {}): Promise<AuditLogsResponse> {
    try {
      const queryParams = new URLSearchParams();
      
      if (filter.page) queryParams.append('page', filter.page.toString());
      if (filter.limit) queryParams.append('limit', filter.limit.toString());
      if (filter.action) queryParams.append('action', filter.action);
      if (filter.entityType) queryParams.append('entityType', filter.entityType);
      if (filter.userId) queryParams.append('userId', filter.userId);
      if (filter.username) queryParams.append('username', filter.username);
      if (filter.module) queryParams.append('module', filter.module);
      if (filter.startDate) queryParams.append('startDate', filter.startDate);
      if (filter.endDate) queryParams.append('endDate', filter.endDate);

      const url = `${this.baseUrl}/audit-logs${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
      
      const response = await apiClient.get(url);
      
      console.log('Audit logs response:', response);
      
      return response.data;
    } catch (error) {
      console.error('Error fetching audit logs:', error);
      throw error;
    }
  }

  async getRecentAuditLogs(limit: number = 10): Promise<AuditLog[]> {
    try {
      console.log('Fetching recent audit logs from:', `${this.baseUrl}/audit-logs/recent?limit=${limit}`);
      
      const response = await apiClient.get(`${this.baseUrl}/audit-logs/recent?limit=${limit}`);
      
      console.log('Recent audit logs response:', response);
      console.log('Response type:', typeof response);
      console.log('Response keys:', response ? Object.keys(response) : 'null/undefined');
      
      // Handle different response structures
      if (response && response.data) {
        console.log('Using response.data:', response.data);
        return response.data;
      } else if (response && Array.isArray(response)) {
        console.log('Using response as array:', response);
        return response;
      } else {
        console.warn('Unexpected response format for recent audit logs:', response);
        return [];
      }
    } catch (error: any) {
      console.error('Error fetching recent audit logs:', error);
      console.error('Error details:', {
        message: error?.message || 'Unknown error',
        status: error?.response?.status,
        statusText: error?.response?.statusText,
        data: error?.response?.data
      });
      // Return empty array instead of throwing to prevent component crashes
      return [];
    }
  }

  async getAuditLogsByEntity(entityType: string, entityId: string, limit: number = 10): Promise<AuditLog[]> {
    try {
      const response = await apiClient.get(`${this.baseUrl}/audit-logs/${entityType}/${entityId}?limit=${limit}`);
      
      console.log('Entity audit logs response:', response);
      
      return response.data;
    } catch (error) {
      console.error('Error fetching entity audit logs:', error);
      throw error;
    }
  }
}

export const loggingService = new LoggingService();
</file>

<file path="src/services/README.md">
# Services Architecture - Backend Entegrasyon Yapısı

Bu klasör, NinetyNineAdmin projesi için Clean Architecture yaklaşımına uygun backend entegrasyon altyapısını içerir.

## 📁 Klasör Yapısı

```
src/services/
├── core/                 # Domain layer (entities, interfaces)
│   ├── types.ts         # Temel tipler ve interface'ler
│   └── base.service.ts  # Temel service sınıfı
├── api/                 # Infrastructure layer
│   └── client.ts        # API client (axios wrapper)
├── config/              # Configuration
│   └── api.config.ts    # API konfigürasyonu
├── types/               # Domain-specific types
│   ├── user.types.ts    # User domain types
│   ├── auth.types.ts    # Authentication types
│   └── resident.types.ts # Resident domain types
├── utils/               # Utilities
│   ├── token-manager.ts # Token yönetimi
│   └── logger.ts        # Logging sistemi
├── auth.service.ts      # Authentication service
├── user.service.ts      # User service
├── admin-resident.service.ts # Admin resident management
├── resident.service.ts  # Resident operations (mobile)
└── index.ts            # Ana export dosyası
```

## 🏗️ Clean Architecture Katmanları

### 1. Domain Layer (Core)

- **types.ts**: Temel tipler, interface'ler ve business logic
- **base.service.ts**: Tüm service'lerin extend ettiği temel sınıf

### 2. Application Layer (Services)

- **auth.service.ts**: Authentication işlemleri
- **user.service.ts**: User management işlemleri
- **admin-resident.service.ts**: Admin panel resident yönetimi
- **resident.service.ts**: Resident panel işlemleri (mobile)
- Service'ler business logic'i yönetir

### 3. Infrastructure Layer (API)

- **client.ts**: Axios tabanlı HTTP client
- Token management, interceptors, error handling

### 4. Configuration Layer

- **api.config.ts**: API konfigürasyonu
- Environment variables yönetimi

## 🚀 Kullanım Örnekleri

### Temel Kullanım

```typescript
import {
  authService,
  userService,
  adminResidentService,
  residentService,
  ApiResponse,
  User,
  Resident,
} from "@/services";

// Authentication
const loginResult = await authService.login({
  email: "user@example.com",
  password: "password123",
});

// User operations
const users = await userService.getAllUsers({
  page: 1,
  limit: 10,
  search: "john",
});

// Admin Resident Management
const pendingResidents = await adminResidentService.getPendingResidents({
  page: 1,
  limit: 20,
});

// Approve resident
await adminResidentService.approveResident("resident-id", {
  decision: "APPROVED",
  reason: "All documents verified",
  assignedRole: "resident",
  initialMembershipTier: "SILVER",
});

// Bulk operations
await adminResidentService.bulkApproveResidents(["id1", "id2"], {
  assignedRole: "resident",
  initialMembershipTier: "STANDARD",
});

// Resident Profile Management (Mobile)
const myProfile = await residentService.getMyProfile();

// Upload avatar
await residentService.uploadAvatar("user-id", file, (progress) => {
  console.log(`Upload progress: ${progress}%`);
});
```

### Custom Service Oluşturma

```typescript
import { BaseService } from "@/services/core/base.service";

interface Product {
  id: string;
  name: string;
  price: number;
}

class ProductService extends BaseService<Product> {
  protected baseEndpoint = "/products";

  constructor() {
    super("ProductService");
  }

  async getTopSelling(): Promise<Product[]> {
    const response = await this.apiClient.get(
      `${this.baseEndpoint}/top-selling`
    );
    return response.data;
  }
}

export const productService = new ProductService();
```

### Error Handling

```typescript
import { authService, ApiError } from "@/services";

try {
  const user = await authService.login(credentials);
  console.log("Login successful:", user);
} catch (error) {
  const apiError = error as ApiError;
  console.error("Login failed:", apiError.message);

  if (apiError.status === 401) {
    // Handle unauthorized
  } else if (apiError.status === 429) {
    // Handle rate limiting
  }
}
```

## 🔧 Environment Variables

Aşağıdaki environment variables'ları `.env.local` dosyasında tanımlayın:

```env
# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:3001/api
NEXT_PUBLIC_API_VERSION=v1
NEXT_PUBLIC_API_TIMEOUT=30000
NEXT_PUBLIC_API_MAX_RETRIES=3
NEXT_PUBLIC_API_RETRY_DELAY=1000

# Feature Flags
NEXT_PUBLIC_ENABLE_CACHE=true
NEXT_PUBLIC_ENABLE_MOCKING=false
NEXT_PUBLIC_ENABLE_DEBUG_LOGS=true

# Authentication
NEXT_PUBLIC_AUTH_TOKEN_KEY=auth_token
NEXT_PUBLIC_REFRESH_TOKEN_KEY=refresh_token
```

## 🔐 Authentication Flow

```typescript
import { authService } from "@/services";

// 1. Login
const loginResponse = await authService.login({
  email: "user@example.com",
  password: "password123",
});

// 2. Tokens otomatik olarak saklanır
// 3. Sonraki istekler otomatik olarak authenticated olur

// 4. Check authentication status
const isAuthenticated = authService.isAuthenticated();
const currentUser = authService.getUser();

// 5. Logout
await authService.logout();
```

## 📊 Logging

```typescript
import { createLogger } from "@/services";

const logger = createLogger("MyComponent");

logger.info("User action performed", { userId: 123 });
logger.error("Operation failed", error);

// Performance monitoring
const stopTimer = logger.startTimer("api-call");
await someApiCall();
stopTimer(); // Logs execution time
```

## 🔄 Token Management

```typescript
import { TokenManager } from "@/services";

const tokenManager = new TokenManager();

// Token validation
const isValid = tokenManager.isTokenValid();

// Get user from token
const user = tokenManager.getUserFromToken();

// Check if token needs refresh
const shouldRefresh = tokenManager.shouldRefreshToken();

// Manual token operations
tokenManager.setTokens(accessToken, refreshToken);
tokenManager.clearTokens();
```

## 📝 Type Safety

```typescript
import type {
  User,
  CreateUserDto,
  ApiResponse,
  PaginatedResponse,
  LoginDto,
  AuthState,
} from "@/services";

// Fully typed API responses
const response: ApiResponse<User> = await userService.getUserById("123");
const paginatedUsers: PaginatedResponse<User> = await userService.getAllUsers();

// Type-safe DTOs
const newUser: CreateUserDto = {
  email: "test@example.com",
  firstName: "John",
  lastName: "Doe",
  password: "secure123",
  roleId: "user",
};
```

## 🎯 Best Practices

### 1. Service Usage

- Services'leri singleton olarak kullanın
- Error handling'i her zaman implement edin
- Type safety'yi önceliğiniz yapın

### 2. Custom Services

- BaseService'den extend edin
- Logger kullanımını ihmal etmeyin
- Endpoint'leri config'de tanımlayın

### 3. Error Management

- Global error handling için interceptors kullanın
- User-friendly error messages sağlayın
- Retry logic implement edin

### 4. Performance

- Pagination kullanın
- Cache mekanizmalarını kullanın
- Lazy loading implement edin

## 🚀 Yeni Service Ekleme

1. **Types oluşturun:**

```typescript
// src/services/types/product.types.ts
export interface Product extends BaseEntity {
  name: string;
  price: number;
  category: string;
}

export interface CreateProductDto {
  name: string;
  price: number;
  categoryId: string;
}
```

2. **Service oluşturun:**

```typescript
// src/services/product.service.ts
import { BaseService } from "./core/base.service";
import { Product, CreateProductDto } from "./types/product.types";

class ProductService extends BaseService<Product, CreateProductDto> {
  protected baseEndpoint = "/products";

  constructor() {
    super("ProductService");
  }
}

export const productService = new ProductService();
```

3. **Index'e ekleyin:**

```typescript
// src/services/index.ts
export { default as productService } from "./product.service";
export * from "./types/product.types";
```

## 🔍 Global Standartlar

Bu services yapısı aşağıdaki global standartlara uygun olarak geliştirilmiştir:

- **Clean Architecture**: Domain, Application, Infrastructure katmanları
- **SOLID Principles**: Single responsibility, Open/closed, vb.
- **DRY (Don't Repeat Yourself)**: BaseService ile kod tekrarını önleme
- **Type Safety**: Full TypeScript support
- **Error Handling**: Comprehensive error management
- **Logging**: Structured logging system
- **Security**: Token management ve authentication
- **Performance**: Caching, pagination, optimization
- **Scalability**: Modular yapı ve service factory

Bu yapı ile backend entegrasyonu için enterprise-level, ölçeklenebilir ve maintainable bir altyapı elde etmiş olursunuz.
</file>

<file path="src/services/resident.service.ts">
// Resident Service - Mobile/Resident Panel - Application Layer
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';
import {
    Resident,
    CreateResidentDto,
    UpdateResidentDto,
    ResidentFilterParams,
    AvatarUploadResponse,
    ResidentListResponse,
    PendingResidentsResponse,
    ResidentApprovalDto,
    ResidentApprovalResponse,
    BulkActionDto,
    BulkActionResponse,
    CreateResidentRequest // yeni tip eklendi
} from './types/resident.types';
import { ApiResponse, PaginatedResponse } from './core/types';

class ResidentService extends BaseService<Resident, CreateResidentDto, UpdateResidentDto> {
    getResidentStats() {
        throw new Error('Method not implemented.');
    }
    protected baseEndpoint = apiConfig.endpoints.residents.admin.base;

    constructor() {
        super('ResidentService');
    }

    // === RESIDENT PROFILE MANAGEMENT === //

    /**
     * Get current resident profile
     * GET /auth/me
     */
    async getMyProfile(): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info('Fetching current resident profile');

            const response = await apiClient.get<Resident>(apiConfig.endpoints.auth.me);

            this.logger.info('Resident profile fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch resident profile', error);
            throw error;
        }
    }

    /**
     * Update resident profile
     * PUT /users/{id}
     */
    async updateMyProfile(id: string, data: UpdateResidentDto): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Updating resident profile with ID: ${id}`, data);

            return await this.update(id, data);
        } catch (error) {
            this.logger.error(`Failed to update resident profile with ID: ${id}`, error);
            throw error;
        }
    }

    // === AVATAR MANAGEMENT === //

    /**
     * Upload resident avatar
     * PUT /users/{id}/upload-avatar
     */
    async uploadAvatar(
        id: string,
        file: File,
        onProgress?: (progress: number) => void
    ): Promise<ApiResponse<AvatarUploadResponse>> {
        try {
            this.logger.info(`Uploading avatar for resident ID: ${id}`);

            const formData = new FormData();
            formData.append('avatar', file);

            const response = await apiClient.put<AvatarUploadResponse>(
                apiConfig.endpoints.residents.mobile.uploadAvatar(id),
                formData
            );

            this.logger.info('Avatar uploaded successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to upload avatar', error);
            throw error;
        }
    }

    /**
     * Delete resident avatar
     * DELETE /users/{id}/avatar (if available)
     */
    async deleteAvatar(id: string): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Deleting avatar for resident ID: ${id}`);

            const response = await apiClient.delete<Resident>(apiConfig.endpoints.residents.mobile.deleteAvatar(id));

            this.logger.info('Avatar deleted successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to delete avatar', error);
            throw error;
        }
    }

    // === RESIDENT LISTING (Admin) === //

    /**
     * Get all residents with pagination and filtering (admin)
     * GET /admin/users
     */
    async getAllResidents(params?: ResidentFilterParams): Promise<PaginatedResponse<Resident>> {
        try {
            this.logger.info('Fetching all residents (admin)', params);

            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<ResidentListResponse>(
                `${apiConfig.endpoints.residents.admin.base}${queryParams}`
            );

            // API response yapısını kontrol edelim
            console.log('API Response:', response.data);
            
            // Eğer response.data.users yoksa, response.data'nın kendisi array olabilir
            const users = response.data.users || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(users) ? users.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            this.logger.info(`Fetched ${users.length} residents`);
            return {
                data: users,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error('Failed to fetch residents', error);
            throw error;
        }
    }

    /**
     * Search residents (admin)
     * GET /admin/users (with search parameters)
     */
    async searchResidents(query: string, filters?: ResidentFilterParams): Promise<PaginatedResponse<Resident>> {
        try {
            this.logger.info('Searching residents (admin)', { query, filters });

            const searchParams = {
                search: query,
                ...filters,
            };

            return await this.getAllResidents(searchParams);
        } catch (error) {
            this.logger.error('Failed to search residents', error);
            throw error;
        }
    }

    // === RESIDENT MANAGEMENT (Admin) === //

    /**
     * Get pending residents
     * GET /admin/users/pending-verification
     */
    async getPendingResidents(params?: ResidentFilterParams): Promise<PaginatedResponse<Resident>> {
        try {
            this.logger.info('Fetching pending residents', params);

            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<PendingResidentsResponse>(
                `${apiConfig.endpoints.residents.admin.pendingVerification}${queryParams}`
            );

            // API response yapısını kontrol edelim
            const users =  response.data || [];
            const pagination = response.data.pagination || {
                total: Array.isArray(users) ? users.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

          
            return {
                data: users,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error('Failed to fetch pending residents', error);
            throw error;
        }
    }

    /**
     * Approve or reject resident
     * PUT /admin/users/{id}/approve
     */
    async approveResident(id: string, data: ResidentApprovalDto): Promise<ApiResponse<ResidentApprovalResponse>> {
        try {
            this.logger.info(`Approving/rejecting resident with ID: ${id}`, data);

            const response = await apiClient.put<ResidentApprovalResponse>(
                apiConfig.endpoints.residents.admin.approve(id),
                data
            );

            this.logger.info('Resident approval processed successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to approve resident with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Bulk actions on residents
     * POST /admin/users/bulk-action
     */
    async bulkAction(data: BulkActionDto): Promise<ApiResponse<BulkActionResponse>> {
        try {
            this.logger.info('Performing bulk action on residents', data);

            const response = await apiClient.post<BulkActionResponse>(
                apiConfig.endpoints.residents.admin.bulkAction,
                data
            );

            this.logger.info('Bulk action completed successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to perform bulk action', error);
            throw error;
        }
    }

    /**
     * Create new resident (admin)
     * POST /admin/users
     */
    async createResident(data: CreateResidentRequest): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info('Creating new resident (admin)', { personalInfo: data.personalInfo });
            const response = await apiClient.post<Resident>(apiConfig.endpoints.residents.admin.base, data);
            this.logger.info('Resident created successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to create resident', error);
            throw error;
        }
    }

    /**
     * Get resident by ID (admin)
     * GET /admin/users/{id}
     */
    async getResidentById(id: string): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Fetching resident with ID: ${id} (admin)`);

            const response = await apiClient.get<Resident>(apiConfig.endpoints.residents.admin.byId(id));

            this.logger.info('Resident fetched successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to fetch resident with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Update resident (admin)
     * PUT /admin/users/{id}
     */
    async updateResident(id: string, data: UpdateResidentDto): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Updating resident with ID: ${id} (admin)`, data);

            const response = await apiClient.put<Resident>(apiConfig.endpoints.residents.admin.byId(id), data);

            this.logger.info('Resident updated successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to update resident with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Delete resident (admin)
     * DELETE /admin/users/{id}
     */
    async deleteResident(id: string): Promise<ApiResponse<void>> {
        try {
            this.logger.info(`Deleting resident with ID: ${id} (admin)`);

            const response = await apiClient.delete<void>(apiConfig.endpoints.residents.admin.byId(id));

            this.logger.info('Resident deleted successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to delete resident with ID: ${id}`, error);
            throw error;
        }
    }

    // === DOCUMENT MANAGEMENT === //

    /**
     * Upload resident documents
     * POST /users/{id}/upload-documents (if available)
     */
    async uploadDocuments(
        id: string,
        documents: File[],
        onProgress?: (progress: number) => void
    ): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Uploading ${documents.length} documents for resident ID: ${id}`);

            const formData = new FormData();
            documents.forEach((file, index) => {
                formData.append(`documents[${index}]`, file);
            });

            const response = await apiClient.post<Resident>(
                apiConfig.endpoints.residents.mobile.uploadDocuments(id),
                formData
            );

            this.logger.info('Documents uploaded successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to upload documents', error);
            throw error;
        }
    }

    /**
     * Get resident documents
     * GET /users/{id}/documents (if available)
     */
    async getResidentDocuments(id: string): Promise<ApiResponse<any[]>> {
        try {
            this.logger.info(`Fetching documents for resident ID: ${id}`);

            const response = await apiClient.get<any[]>(apiConfig.endpoints.residents.mobile.documents(id));

            this.logger.info('Documents fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch documents', error);
            throw error;
        }
    }

    /**
     * Delete resident document
     * DELETE /users/{id}/documents/{documentId} (if available)
     */
    async deleteDocument(id: string, documentId: string): Promise<ApiResponse<void>> {
        try {
            this.logger.info(`Deleting document ${documentId} for resident ID: ${id}`);

            const response = await apiClient.delete<void>(apiConfig.endpoints.residents.mobile.deleteDocument(id, documentId));

            this.logger.info('Document deleted successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to delete document', error);
            throw error;
        }
    }

    // === PROPERTY MANAGEMENT === //

    /**
     * Get my properties (as a resident)
     * GET /users/{id}/properties (if available)
     */
    async getMyProperties(id: string): Promise<ApiResponse<any[]>> {
        try {
            this.logger.info(`Fetching properties for resident ID: ${id}`);

            const response = await apiClient.get<any[]>(apiConfig.endpoints.residents.mobile.properties(id));

            this.logger.info('Properties fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch properties', error);
            throw error;
        }
    }

    /**
     * Update property information
     * PUT /users/{id}/property (if available)
     */
    async updateProperty(id: string, propertyData: any): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Updating property for resident ID: ${id}`, propertyData);

            const response = await apiClient.put<Resident>(apiConfig.endpoints.residents.mobile.updateProperty(id), propertyData);

            this.logger.info('Property updated successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to update property', error);
            throw error;
        }
    }

    // === FILTERING HELPERS === //

    /**
     * Get residents by status
     */
    async getResidentsByStatus(status: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED' | 'SUSPENDED', params?: Omit<ResidentFilterParams, 'status'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, status });
    }

    /**
     * Get residents by membership tier
     */
    async getResidentsByMembershipTier(membershipTier: 'GOLD' | 'SILVER' | 'STANDARD', params?: Omit<ResidentFilterParams, 'membershipTier'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, membershipTier });
    }

    /**
     * Get residents by role
     */
    async getResidentsByRole(role: 'admin' | 'resident' | 'tenant', params?: Omit<ResidentFilterParams, 'role'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, role });
    }

    /**
     * Get residents by property (block/apartment)
     */
    async getResidentsByProperty(block?: string, apartment?: string, params?: Omit<ResidentFilterParams, 'block' | 'apartment'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, block, apartment });
    }

    /**
     * Get residents by ownership type
     */
    async getResidentsByOwnershipType(ownershipType: 'owner' | 'tenant', params?: Omit<ResidentFilterParams, 'ownershipType'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, ownershipType });
    }
}

// Export singleton instance
export const residentService = new ResidentService();
export default residentService;
</file>

<file path="src/services/residents-stats.service.ts">
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';

export const residentsStatsService = {
  async getGoldResidentsCount(): Promise<number> {
    const response = await apiClient.get<{ count: number }>(apiConfig.endpoints.admin.goldResidentsCount);
    const count = response?.data?.count ?? 0;
    return count;
  },
  async getTotalResidentsCount(): Promise<number> {
    const response = await apiClient.get<{ count: number }>(apiConfig.endpoints.admin.activeResidentsCount);
    const count = response?.data?.count ?? 0;
    return count;
  },
  async getActiveUsersCount(): Promise<number> {
    const response = await apiClient.get<{ count: number }>(apiConfig.endpoints.admin.activeUsersCount);
    const count = response?.data?.count ?? 0;
    return count;
  },
  async getTenantsCount(): Promise<number> {
    const response = await apiClient.get<{ count: number }>(apiConfig.endpoints.admin.tenantsCount);
    const count = response?.data?.count ?? 0;
    return count;
  },
  async getOwnersCount(): Promise<number> {
    const response = await apiClient.get<{ count: number }>(apiConfig.endpoints.admin.ownersCount);
    const count = response?.data?.count ?? 0;
    return count;
  },
};
</file>

<file path=".claude-project">
{
  "name": "NinetyNineAdmin",
  "description": "NinetyNineAdmin project created with Pare CLI",
  "context": {
    "projectType": "web",
    "techStack": [
      "Next.js 14",
      "React 18",
      "TypeScript",
      "Tailwind CSS"
      
    ],
    "architecture": {
      "type": "Next.js App Router",
      "structure": "src/app routing with components and lib folders"
      
    }
  },
  "instructions": [
    "This is a web project built with modern TypeScript stack",
    "Use Next.js 14 App Router conventions for routing and layouts",
    "Implement responsive design with Tailwind CSS utilities",
    "Use React Server Components where appropriate for better performance",
    "Follow TypeScript best practices with proper typing",
    "Maintain consistent code style and naming conventions",
    "Write clean, readable, and maintainable code",
    "Consider performance and security implications",
    "Add appropriate error handling and loading states"
  ],
  "codeStyle": {
    "language": "TypeScript",
    "framework": "Next.js + React",
    "conventions": {
      "components": "PascalCase",
      "functions": "camelCase",
      "constants": "UPPER_SNAKE_CASE",
      "files": "kebab-case"
    }
  }
}
</file>

<file path=".cursorrules">
# NinetyNine Admin Web - Cursor AI Rules

You are an expert React/Next.js developer working on NinetyNine Admin Web Dashboard.

## 🏗️ Project Architecture

**Tech Stack:**

- Next.js 14 (App Router)
- TypeScript
- Tailwind CSS
- Lucide React Icons

**Project Structure:**

- Components: `src/app/components/`
- UI Components: `src/app/components/ui/`
- Dashboard Components: `src/app/dashboard/components/`
- Services: `src/services/`
- Utils: `src/lib/`

## 🎨 NinetyNine Design System

### Color Palette Philosophy

NinetyNine uses a **warm, earthy, premium** color palette inspired by luxury real estate branding. Avoid cold blues, harsh whites, and pure grays.

### 🎯 Primary Brand Colors

```css
Gold (Main Brand): #AC8D6A
Gold Light: #F2E7DC
Warm Red: #E53E3E
Warm Blue: #718096 (Slate)
Dark Gray: #201F1D
```

### 🤍 Warm White System

**NEVER use pure white (#FFFFFF) for text. Always use warm whites:**

```css
text-on-dark: #FDFCFB (Cream white - primary text on dark)
text-on-light: #1C1917 (Warm dark - primary text on light)
text-soft: #F9F8F7 (Pearl white - subtle text)
text-bright: #FFFFFF (Pure white - only for high contrast)
```

### 🔴 Warm Red Palette (Terracotta & Rust)

```css
red-50: #FEF7F7   red-500: #E53E3E   red-900: #4A1515
red-100: #FDEAEA  red-600: #C53030   red-950: #2D0A0A
red-200: #FBCFCF  red-700: #9C2A2A
red-300: #F6A8A8  red-800: #742A2A
```

### 🔵 Warm Blue Palette (Slate & Steel)

```css
blue-50: #F7F9FC   blue-500: #718096   blue-900: #171923
blue-100: #EDF2F7  blue-600: #4A5568   blue-950: #0D0E12
blue-200: #E2E8F0  blue-700: #2D3748
blue-300: #CBD5E0  blue-800: #1A202C
```

### 🌫️ Warm Gray System

```css
gray-50: #FAFAF9 (Paper white)   gray-600: #57534E
gray-100: #F5F5F4                gray-700: #44403C
gray-200: #E7E5E4                gray-800: #292524
gray-300: #D6D3D1                gray-900: #1C1917
gray-400: #A8A29E                gray-950: #0C0A09
gray-500: #78716C (Body text)
```

### 🎨 Semantic Colors

```css
Success: #22C55E (Warm green)
Warning: #F59E0B (Warm amber)
Info: #718096 (Warm slate)
Error: #E53E3E (Warm red)
```

## 📝 Typography Rules

### Text Color Hierarchy

```css
/* Primary Text */
text-on-light dark:text-on-dark     /* Headings, important text */
text-light-secondary dark:text-secondary  /* Body text, labels */
text-light-muted dark:text-muted    /* Helper text, captions */

/* Semantic Text */
text-primary-gold                   /* Brand accent text */
text-semantic-success-600           /* Success messages */
text-semantic-warning-600           /* Warning messages */
text-primary-red                    /* Error messages */
```

### Font Weights

```css
font-light (300)      /* Large display text */
font-normal (400)     /* Body text */
font-medium (500)     /* Emphasis */
font-semibold (600)   /* Subheadings */
font-bold (700)       /* Headings */
```

### Font Sizes

```css
text-xs (12px)        /* Captions, helper text */
text-sm (14px)        /* Small text, labels */
text-base (16px)      /* Body text */
text-lg (18px)        /* Large body text */
text-xl (20px)        /* Small headings */
text-2xl (24px)       /* Section headings */
text-3xl (30px)       /* Page headings */
```

## 🎭 Component Guidelines

### Card Components

```tsx
// ✅ Good
<Card variant="elevated" hover={true}>
  <CardTitle className="text-text-on-light dark:text-on-dark">
    Title
  </CardTitle>
</Card>

// ❌ Bad - Don't use pure white or cold colors
<Card className="bg-white text-black">
```

### Button Components

```tsx
// ✅ Good - Use semantic variants
<Button variant="primary" size="md" icon={Plus}>
  Action
</Button>

// ✅ Good - Warm colors for states
<Button variant="danger">  // Uses warm red
  Delete
</Button>
```

### Badge Components

```tsx
// ✅ Good - Semantic colors
<Badge variant="soft" color="gold">Admin</Badge>
<Badge variant="soft" color="red">Error</Badge>

// ❌ Bad - Don't use cold blue
<Badge color="blue">Status</Badge>
```

## 🌈 Background System

### Light Mode Backgrounds

```css
bg-background-light-primary (#FAFAF9)    /* Page background */
bg-background-light-secondary (#F5F5F4)  /* Section background */
bg-background-light-card (#FDFCFB)       /* Card background */
bg-background-light-soft (#FCFBFA)       /* Soft background */
```

### Dark Mode Backgrounds

```css
bg-background-primary (#000000)          /* Page background */
bg-background-secondary (#201F1D)        /* Section background */
bg-background-card (#1C1917)             /* Card background */
bg-background-soft (#292524)             /* Soft background */
```

## 🖱️ Interactive States

### Hover Effects

```css
/* Gold Theme Hovers */
hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg
hover:border-primary-gold/60
hover:text-primary-gold

/* Button Hovers */
hover:bg-primary-gold/10 dark:hover:bg-primary-gold/20
```

### Focus States

```css
focus:ring-2 focus:ring-primary-gold/30
focus:border-primary-gold
```

## 🧱 Component Creation Rules

### 1. TypeScript Interface Pattern

```tsx
interface ComponentProps {
  children?: React.ReactNode;
  className?: string;
  variant?: "default" | "elevated" | "outlined";
  size?: "sm" | "md" | "lg";
  // Always include optional styling props
}
```

### 2. Color Prop Pattern

```tsx
interface ComponentProps {
  color?: "primary" | "gold" | "red" | "secondary";
  // Use semantic color names, not specific colors
}
```

### 3. Default Props Pattern

```tsx
export default function Component({
  variant = "default",
  size = "md",
  className,
  ...props
}: ComponentProps) {
  // Always provide sensible defaults
}
```

### 4. Styling Pattern

```tsx
const variantClasses = {
  default: 'bg-background-light-card dark:bg-background-card',
  elevated: 'bg-background-light-card dark:bg-background-card shadow-lg',
};

return (
  <div className={cn(
    'base-classes',
    variantClasses[variant],
    className // Allow override
  )}>
);
```

## 📋 Dashboard Component Rules

### Metric Cards

```tsx
// ✅ Good - Use semantic colors
<div className="bg-primary-gold-light/30 dark:bg-primary-gold/20">
  <Icon className="text-primary-gold" />
</div>

// ✅ Good - Warm success/error indicators
<TrendingUp className="text-semantic-success-500" />
<TrendingDown className="text-primary-red" />
```

### Data Tables

```tsx
// ✅ Good - Semantic headers and content
<th className="text-text-on-light dark:text-text-on-dark">
<td className="text-text-light-secondary dark:text-text-secondary">
```

### Status Badges

```tsx
// ✅ Good - Map status to warm colors
const getStatusColor = (status: string) => {
  switch (status) {
    case "success":
      return "primary"; // Uses warm blue
    case "warning":
      return "gold"; // Uses brand gold
    case "error":
      return "red"; // Uses warm red
    default:
      return "secondary";
  }
};
```

## 🎨 Design Principles

### 1. Warm Over Cold

- Always prefer warm grays over cool grays
- Use warm whites instead of pure white
- Choose warm blues (slate) over cold blues (cyan)

### 2. Brand Consistency

- Gold (#AC8D6A) is the primary brand color
- Use gold for accents, CTAs, and brand elements
- Secondary actions use warm slate blue

### 3. Premium Feel

- Use subtle gradients: `bg-gradient-to-r from-primary-gold-light/30`
- Add soft shadows: `shadow-lg`
- Prefer rounded corners: `rounded-xl`, `rounded-2xl`

### 4. Accessibility

- Maintain WCAG AA contrast ratios
- Use semantic HTML elements
- Provide proper alt texts and labels

## 🚫 What NOT to Do

### ❌ Color Mistakes

```css
/* Don't use these */
text-white           /* Use text-on-dark instead */
bg-blue-500         /* Use bg-primary-blue instead */
text-gray-900       /* Use text-on-light instead */
border-gray-300     /* Use border-gray-200 instead */
```

### ❌ Component Mistakes

```tsx
// Don't use hardcoded colors
<div className="bg-white text-black">

// Don't skip TypeScript interfaces
function Component(props: any) {

// Don't forget responsive design
<div className="w-96"> // Use responsive widths
```

### ❌ Typography Mistakes

```tsx
// Don't mix font weights randomly
<h1 className="font-light">  // Headings should be bold
<p className="font-bold">    // Body text should be normal/medium
```

## 🔄 Migration Guidelines

When updating existing components:

1. Replace `text-white` → `text-on-dark`
2. Replace `text-gray-900` → `text-on-light`
3. Replace `bg-blue-*` → `bg-primary-blue*`
4. Replace `text-red-*` → `text-primary-red*`
5. Add proper TypeScript interfaces
6. Use semantic color props

## 📚 Component Library Reference

All UI components are in `src/app/components/ui/`:

- `Button.tsx` - Actions and CTAs
- `Card.tsx` - Content containers
- `Badge.tsx` - Status indicators
- `Modal.tsx` - Overlays
- `ProfileDropdown.tsx` - User menus
- `Table.tsx` - Data display

Always import from existing components before creating new ones.

## 🎯 Dashboard Specific Rules

### Page Structure

```tsx
<ProtectedRoute>
  <div className="min-h-screen bg-background-primary">
    <DashboardHeader />
    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      {/* Content */}
    </main>
  </div>
</ProtectedRoute>
```

### Grid Layouts

```tsx
// Metrics grid
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">

// Two-column layout
<div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
  <div className="lg:col-span-2">{/* Main content */}</div>
  <div>{/* Sidebar */}</div>
</div>
```

Remember: NinetyNine is a premium real estate brand. Every design decision should reflect luxury, warmth, and professionalism. When in doubt, choose the warmer, more premium option.
</file>

<file path=".env.example">
# Environment Variables
# Copy this file to .env.local and fill in the values

# Database
# DATABASE_URL="postgresql://username:password@localhost:5432/database_name"

# API Keys
# NEXT_PUBLIC_API_URL="http://localhost:3001"

# Authentication
# NEXTAUTH_SECRET="your-secret-here"
# NEXTAUTH_URL="http://localhost:3000"
</file>

<file path=".gitignore">
# Dependencies
node_modules/
/.pnp
.pnp.js

# Testing
/coverage

# Next.js (web projects)
/.next/
/out/

# NestJS (api projects)
/dist/

# Production
/build

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Local env files
.env
.env*.local

# Vercel
.vercel

# TypeScript
*.tsbuildinfo
next-env.d.ts

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
Thumbs.db

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview
NinetyNine Admin Web - Next.js 14 admin dashboard for apartment/property management system (99Club)

## Development Commands

### Essential Commands
```bash
# Development
npm run dev              # Start development server (http://localhost:3000)

# Build & Production
npm run build           # Build for production
npm run start           # Start production server

# Code Quality
npm run lint            # Run ESLint
npm run type-check      # TypeScript type checking
```

### Environment Setup
- API URL configured via `NEXT_PUBLIC_API_URL` environment variable
- Default development API: `http://localhost:8080`

## Architecture Overview

### Directory Structure
- **`src/app/`** - Next.js App Router pages and layouts
  - Uses App Router (not Pages Router)
  - Protected routes pattern with authentication
  - Nested layouts for dashboard sections
  
- **`src/app/components/ui/`** - Extensive UI component library (30+ components)
  - All components follow consistent design system
  - Uses Radix UI primitives with custom styling
  - Components are self-contained with TypeScript interfaces
  
- **`src/services/`** - API service layer
  - Base service classes in `core/`
  - Axios-based API client with interceptors
  - Consistent error handling patterns

### Key Architectural Patterns

1. **Service Layer Pattern**
   - All API calls go through service classes
   - Base service provides CRUD operations
   - Services handle authentication tokens automatically

2. **Component Architecture**
   - Presentation components in `ui/`
   - Feature components colocated with pages
   - Consistent prop interfaces with TypeScript

3. **State Management**
   - React hooks for local state
   - Service layer handles API state
   - Form state via React Hook Form

4. **Authentication Flow**
   - JWT token-based authentication
   - Protected routes using middleware pattern
   - Token stored in localStorage/cookies

## Design System & Styling

### NinetyNine Brand Guidelines
- **Primary Color**: Gold `#AC8D6A` - Used for primary actions and brand elements
- **Color Philosophy**: Warm, premium aesthetic avoiding cold colors
- **Background**: Warm whites (`#FAFAF9`, `#F5F5F4`) instead of pure white
- **Text**: Warm grays (`#0A0A0A`, `#525252`) for better readability

### Tailwind Configuration
- Extended color palette with semantic naming
- Custom spacing and typography scales
- Predefined animation classes
- Mobile-first responsive design

### Component Styling Rules
- Use Tailwind utility classes
- Follow existing component patterns in `ui/` directory
- Maintain consistency with warm color palette
- Ensure WCAG AA compliance for accessibility

## API Integration

### Service Usage Pattern
```typescript
// Example: Using a service
import { ResidentService } from '@/services/resident.service';

const residentService = new ResidentService();
const residents = await residentService.getAll();
```

### API Response Format
- Consistent response structure across all endpoints
- Error handling with proper status codes
- Pagination support for list endpoints

## Form Handling
- Use React Hook Form for all forms
- Validation schemas with TypeScript
- Consistent error display patterns
- Loading states during submission

## Important Context Files
- **`.cursorrules`** - Comprehensive coding standards and component examples
- **`docs/ai-context.md`** - Detailed project context and business logic
- **`docs/information-architect.md`** - Dashboard information architecture
- **`tailwind.config.ts`** - Complete design system configuration
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Proxy route'u artık Next.js API routes ile yönetiyoruz
  // CORS headers'ları da proxy handler'da yönetiliyor
}

module.exports = nextConfig
</file>

<file path="package.json">
{
  "name": "ninety-nine-admin-web",
  "version": "0.1.0",
  "description": "NinetyNineAdmin project created with Pare CLI",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.525.0",
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.60.0",
    "react-qr-code": "^2.0.18",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@types/node": "^20.10.0",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "typescript": "^5.3.3"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# NinetyNine Admin Web Dashboard

NinetyNine Admin Web projesine hoş geldiniz! Bu proje, NinetyNine Club'un admin paneli için geliştirilmiş Next.js tabanlı bir web uygulamasıdır.

## 🚀 Hızlı Başlangıç

### Gereksinimler
- Node.js 18.0.0 veya üzeri
- npm veya yarn package manager

### Kurulum

1. Repository'yi klonlayın:
```bash
git clone <repo-url>
cd ninety-nine-admin-web
```

2. Bağımlılıkları yükleyin:
```bash
npm install
```

3. Environment variables'ı ayarlayın:
```bash
# .env.local dosyası oluşturun
NEXT_PUBLIC_API_URL=https://ninetynineclub-api.onrender.com
```

4. Development sunucusunu başlatın:
```bash
npm run dev
```

5. Tarayıcınızda [http://localhost:3000](http://localhost:3000) adresini açın.

## 🔧 API Proxy Yapılandırması

Bu proje, CORS sorunlarını çözmek için Next.js API routes üzerinden proxy kullanır:

### Nasıl Çalışır?
- Tüm API istekleri `/api/proxy/*` path'ine gönderilir
- Proxy handler, istekleri canlı API'ye (`https://ninetynineclub-api.onrender.com`) yönlendirir
- CORS headers'ları otomatik olarak eklenir
- Authentication token'ları proxy üzerinden geçirilir

### Örnek Kullanım:
```typescript
// Bu istek:
fetch('/api/proxy/auth/login', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ email, password })
})

// Şu adrese yönlendirilir:
// https://ninetynineclub-api.onrender.com/auth/login
```

### Proxy Özellikleri:
- ✅ Tüm HTTP methodları desteklenir (GET, POST, PUT, PATCH, DELETE)
- ✅ Authorization header'ları otomatik geçirilir
- ✅ CORS headers'ları otomatik eklenir
- ✅ Query parametreleri korunur
- ✅ Error handling ve logging

## 📝 Environment Variables

Projeyi çalıştırmadan önce `.env.local` dosyasını oluşturun:

```bash
# API Configuration
NEXT_PUBLIC_API_URL=https://ninetynineclub-api.onrender.com
NEXT_PUBLIC_API_TIMEOUT=30000
NEXT_PUBLIC_API_MAX_RETRIES=3
NEXT_PUBLIC_API_RETRY_DELAY=1000

# Feature Flags
NEXT_PUBLIC_ENABLE_CACHE=true
NEXT_PUBLIC_ENABLE_MOCKING=false
NEXT_PUBLIC_ENABLE_DEBUG_LOGS=true
```

## 🏗️ Proje Yapısı

```
ninety-nine-admin-web/
├── src/
│   ├── app/
│   │   ├── api/
│   │   │   └── proxy/
│   │   │       └── [...path]/
│   │   │           └── route.ts      # Proxy handler
│   │   ├── components/
│   │   ├── dashboard/
│   │   └── login/
│   ├── services/
│   │   ├── config/
│   │   │   └── api.config.ts         # API konfigürasyonu
│   │   ├── auth.service.ts           # Authentication service
│   │   └── api/
│   │       └── client.ts             # API client
│   └── lib/
└── docs/
```

## 🎯 Özellikler

- **🔐 Authentication**: JWT tabanlı kimlik doğrulama
- **🏠 Dashboard**: Admin paneli ana sayfa
- **👥 Resident Management**: Sakin yönetimi
- **🏢 Unit Management**: Daire yönetimi
- **📊 Analytics**: Analitik ve raporlar
- **🎨 UI Components**: Özel tasarım sistemi

## 🔌 API Entegrasyonu

Proje, API-99CLUB ile uyumlu şekilde tasarlanmıştır:

### Authentication Endpoints:
- `POST /auth/login` - Giriş
- `POST /auth/logout` - Çıkış
- `POST /auth/refresh-token` - Token yenileme
- `GET /auth/me` - Kullanıcı bilgileri

### Admin Endpoints:
- `GET /admin/users` - Kullanıcı listesi
- `POST /admin/users` - Kullanıcı oluşturma
- `PUT /admin/users/{id}` - Kullanıcı güncelleme
- `DELETE /admin/users/{id}` - Kullanıcı silme

## 🧪 Test Etme

Proxy yapılandırmasını test etmek için:

1. Development sunucusunu başlatın: `npm run dev`
2. Browser'da Network tab'ını açın
3. Login sayfasına giderek giriş yapmayı deneyin
4. `/api/proxy/auth/login` isteklerini kontrol edin

## 📚 Dokümantasyon

- [AI Context](docs/ai-context.md) - AI geliştirme rehberi
- [Modules](docs/modules/) - Modül dokümantasyonları
- [API Requirements](docs/api-requirements-units-module.md) - API gereksinimleri

## 🚨 Sorun Giderme

### CORS Hatası
Eğer CORS hatası alıyorsanız:
- `.env.local` dosyasının doğru ayarlandığından emin olun
- Development sunucusunu yeniden başlatın

### API Bağlantı Hatası
Eğer API'ye bağlanamıyorsanız:
- `NEXT_PUBLIC_API_URL` değerinin doğru olduğunu kontrol edin
- Canlı API'nin çalıştığından emin olun
- Network tab'ında proxy isteklerini kontrol edin

### Token Hatası
Eğer authentication token hatası alıyorsanız:
- Browser'daki localStorage'ı temizleyin
- Yeniden giriş yapmayı deneyin

## 🤝 Katkıda Bulunma

1. Fork edin
2. Feature branch oluşturun: `git checkout -b feature/amazing-feature`
3. Commit edin: `git commit -m 'Add amazing feature'`
4. Push edin: `git push origin feature/amazing-feature`
5. Pull Request açın

## 📄 Lisans

Bu proje MIT lisansı altında lisanslanmıştır.
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      // Renkler - Figma tasarım dosyasından alındı
      colors: {
        // Ana renkler
        primary: {
          DEFAULT: '#000000',
          white: '#FFFFFF',
          gold: '#AC8D6A',
          'gold-light': '#F2E7DC',
          red: '#E53E3E',            // Updated to warm red
          'red-light': '#FDEAEA',    // Light warm red
          'red-dark': '#9C2A2A',     // Dark rust red
          blue: '#718096',           // Warm slate blue
          'blue-light': '#E2E8F0',   // Light warm blue
          'blue-dark': '#2D3748',    // Dark steel blue
          'gray-blue': '#9DA6B9',
          'dark-gray': '#201F1D',
        },
        // Warm Red Palette - Terracotta & Rust tones
        red: {
          50: '#FEF7F7',     // Very light warm red
          100: '#FDEAEA',    // Light warm red
          200: '#FBCFCF',    // Soft warm red
          300: '#F6A8A8',    // Light terracotta
          400: '#EF7070',    // Medium warm red
          500: '#E53E3E',    // Main warm red
          600: '#C53030',    // Deep warm red
          700: '#9C2A2A',    // Rust red
          800: '#742A2A',    // Dark rust
          900: '#4A1515',    // Very dark warm red
          950: '#2D0A0A',    // Ultra dark red
        },
        // Warm Blue Palette - Slate & Steel tones
        blue: {
          50: '#F7F9FC',     // Very light warm blue
          100: '#EDF2F7',    // Light warm blue
          200: '#E2E8F0',    // Soft warm blue
          300: '#CBD5E0',    // Light slate
          400: '#A0AEC0',    // Medium warm blue
          500: '#718096',    // Main warm blue (slate)
          600: '#4A5568',    // Deep warm blue
          700: '#2D3748',    // Steel blue
          800: '#1A202C',    // Dark steel
          900: '#171923',    // Very dark blue
          950: '#0D0E12',    // Ultra dark blue
        },
        // White & Off-White Palette - Warm tones
        white: {
          DEFAULT: '#FFFFFF',       // Pure white - rare use
          warm: '#FEFEFE',          // Slightly warm white
          cream: '#FDFCFB',         // Cream white
          soft: '#FCFBFA',          // Soft warm white
          paper: '#FAFAF9',         // Paper white (matches gray-50)
          pearl: '#F9F8F7',         // Pearl white
          ivory: '#F8F7F5',         // Ivory white
          snow: '#F7F6F4',          // Snow white
        },
        // Warm Gray Palette - NinetyNine temasına uygun
        gray: {
          50: '#FAFAF9',    // En açık - almost white
          100: '#F5F5F4',   // Çok açık warm gray
          200: '#E7E5E4',   // Açık warm gray
          300: '#D6D3D1',   // Orta açık warm gray
          400: '#A8A29E',   // Orta warm gray
          500: '#78716C',   // Ana warm gray
          600: '#57534E',   // Koyu warm gray
          700: '#44403C',   // Daha koyu warm gray
          800: '#292524',   // Çok koyu warm gray
          900: '#1C1917',   // En koyu warm gray
          950: '#0C0A09',   // Ultra koyu
        },
        // Gradient renkleri
        gradient: {
          'gold-start': '#F2E7DC',
          'gold-end': '#AC8D6A',
          'dark-start': '#5F5F5F',
          'dark-end': '#1A1A1A',
        },
        // Arka plan renkleri
        background: {
          // Dark mode
          primary: '#000000',        // Pure black
          secondary: '#201F1D',      // Primary dark-gray
          card: '#1C1917',          // Gray-900
          soft: '#292524',           // Gray-800 (softer dark)

          // Light mode - Warm white tones
          'light-primary': '#FAFAF9',    // Gray-50 (paper white)
          'light-secondary': '#F5F5F4',  // Gray-100  
          'light-card': '#FDFCFB',       // Cream white
          'light-soft': '#FCFBFA',       // Soft warm white
          'light-pearl': '#F9F8F7',      // Pearl white
          'light-ivory': '#F8F7F5',      // Ivory white
          'light-pure': '#FFFFFF',       // Pure white (special cases)

          // Contextual backgrounds
          'glass-light': 'rgba(253, 252, 251, 0.8)',  // Glass effect light
          'glass-dark': 'rgba(28, 25, 23, 0.8)',      // Glass effect dark
        },
        // Metin renkleri
        text: {
          // Dark mode - Warm white tones
          primary: '#FDFCFB',        // Cream white (softer than pure white)
          secondary: '#9DA6B9',      // Gray-blue
          accent: '#AC8D6A',         // Gold
          muted: '#78716C',          // Gray-500
          soft: '#F9F8F7',           // Pearl white (for subtle text)
          bright: '#FFFFFF',         // Pure white (for high contrast)

          // Light mode
          'light-primary': '#1C1917',    // Gray-900
          'light-secondary': '#57534E',  // Gray-600
          'light-accent': '#AC8D6A',     // Gold (aynı)
          'light-muted': '#78716C',      // Gray-500
          'light-soft': '#44403C',       // Gray-700 (soft dark text)

          // Semantic text colors
          'on-dark': '#FDFCFB',          // Best text on dark backgrounds
          'on-light': '#1C1917',         // Best text on light backgrounds
          'on-gold': '#1C1917',          // Best text on gold backgrounds
          'on-gray': '#FDFCFB',          // Best text on gray backgrounds
        },
        // Border renkleri
        border: {
          // Dark mode
          primary: '#44403C',        // Gray-700
          secondary: '#292524',      // Gray-800
          light: '#57534E',          // Gray-600

          // Light mode
          'light-primary': '#E7E5E4',    // Gray-200
          'light-secondary': '#D6D3D1',  // Gray-300
          'light-muted': '#A8A29E',      // Gray-400

          // Accent borders
          gold: '#AC8D6A',           // Primary gold
          'gold-light': '#D4B896',   // Lighter gold
        },
        // Hover ve Focus renkleri
        hover: {
          // Dark mode
          gold: '#B8956F',           // Lighter gold
          'gold-bg': '#1F1B0F',      // Dark gold background
          gray: '#374151',           // Gray hover
          white: '#F9F8F7',          // Pearl white hover

          // Light mode  
          'light-gold': '#9A7A5A',   // Darker gold
          'light-gold-bg': '#FDF8F3', // Light gold background
          'light-gray': '#F3F4F6',   // Light gray hover
          'light-white': '#F8F7F5',  // Ivory white hover
          'light-cream': '#FCFBFA',  // Soft cream hover
        },
        // Focus renkleri
        focus: {
          gold: '#D6C7A8',           // Focus gold
          ring: '#AC8D6A33',         // Gold ring with opacity
        },
        // Semantic Color System - Warm tones
        semantic: {
          // Success - Warm green tones
          success: {
            50: '#F0FDF4',           // Very light success
            100: '#DCFCE7',          // Light success
            500: '#22C55E',          // Main success (slightly warm green)
            600: '#16A34A',          // Deep success
            700: '#15803D',          // Dark success
          },
          // Warning - Warm amber/orange tones
          warning: {
            50: '#FFFBEB',           // Very light warning
            100: '#FEF3C7',          // Light warning
            500: '#F59E0B',          // Main warning (warm amber)
            600: '#D97706',          // Deep warning
            700: '#B45309',          // Dark warning
          },
          // Info - Warm blue tones (from our blue palette)
          info: {
            50: '#F7F9FC',           // Very light info
            100: '#EDF2F7',          // Light info
            500: '#718096',          // Main info (warm slate)
            600: '#4A5568',          // Deep info
            700: '#2D3748',          // Dark info
          },
          // Error - Warm red tones (from our red palette)
          error: {
            50: '#FEF7F7',           // Very light error
            100: '#FDEAEA',          // Light error
            500: '#E53E3E',          // Main error (warm red)
            600: '#C53030',          // Deep error
            700: '#9C2A2A',          // Dark error (rust)
          }
        }
      },
      // Font aileleri - CSS Variables ile
      fontFamily: {
        sans: ['Helvetica', 'var(--font-inter)', 'system-ui', 'sans-serif'],
        helvetica: ['Helvetica', 'system-ui', 'sans-serif'],
        inter: ['var(--font-inter)', 'system-ui', 'sans-serif'],
        'sf-pro': ['SF Pro', 'system-ui', 'sans-serif'],
      },
      // Font boyutları - Global Standards
      fontSize: {
        // Minimum sizes (accessibility compliant)
        'xs': ['12px', { lineHeight: '16px' }],     // Caption, helper text
        'sm': ['14px', { lineHeight: '20px' }],     // Small text, labels
        'base': ['16px', { lineHeight: '24px' }],   // Body text (web standard)
        'lg': ['18px', { lineHeight: '28px' }],     // Large body text
        'xl': ['20px', { lineHeight: '28px' }],     // Small headings

        // Heading sizes
        '2xl': ['24px', { lineHeight: '32px' }],    // Section headings
        '3xl': ['30px', { lineHeight: '36px' }],    // Page headings
        '4xl': ['36px', { lineHeight: '40px' }],    // Large headings
        '5xl': ['48px', { lineHeight: '48px' }],    // Display headings
        '6xl': ['60px', { lineHeight: '60px' }],    // Hero headings

        // Mobile-optimized sizes
        'mobile-xs': ['14px', { lineHeight: '20px' }],
        'mobile-sm': ['16px', { lineHeight: '24px' }],
        'mobile-base': ['18px', { lineHeight: '28px' }],
      },
      // Font ağırlıkları - CSS Standards
      fontWeight: {
        thin: '100',
        extralight: '200',
        light: '300',
        normal: '400',        // Regular
        medium: '500',        // Medium
        semibold: '600',      // Demi Bold
        bold: '700',          // Bold
        extrabold: '800',     // Extra Bold
        black: '900',         // Heavy

        // Custom weights for design system
        'semi-medium': '550', // Between medium and semibold
      },
      // Spacing
      spacing: {
        '1': '4px',
        '2': '8px',
        '2.5': '10px',
        '3': '12px',
        '4': '16px',
        '6': '24px',
        '6.25': '25px',
        '10': '40px',
        '33.5': '134px',
      },
      // Border radius
      borderRadius: {
        'sm': '4px',
        'DEFAULT': '8px',
        'lg': '12px',
        'xl': '16px',
        'full': '9999px',
        'pill': '100px',
      },
      // Box shadows
      boxShadow: {
        'bottom-nav': '0px -1px 16px 0px rgba(0, 0, 0, 0.07)',
        'card': '0px 4px 16px 0px rgba(0, 0, 0, 0.1)',
      },
      // Gradients
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
        'gradient-gold': 'linear-gradient(180deg, #F2E7DC 0%, #AC8D6A 100%)',
        'gradient-dark': 'linear-gradient(180deg, #5F5F5F 0%, #1A1A1A 100%)',
        'gradient-card': 'linear-gradient(180deg, rgba(95, 95, 95, 0.2) 0%, #1A1A1A 100%)',
      },
      // Breakpoints (Mobile First)
      screens: {
        'mobile': '390px',
        'tablet': '768px',
        'desktop': '1024px',
      },
      // Line heights - Typography Standards
      lineHeight: {
        'none': '1',          // For display text
        'tight': '1.25',      // For headings
        'snug': '1.375',      // For large text
        'normal': '1.5',      // For body text (web standard)
        'relaxed': '1.625',   // For comfortable reading
        'loose': '2',         // For very relaxed text

        // Semantic line heights
        'heading': '1.2',     // For display headings
        'subheading': '1.3',  // For subheadings
        'body': '1.6',        // For body content
        'caption': '1.4',     // For small text
      },
      // Opacity
      opacity: {
        '35': '0.35',
        '40': '0.4',
      },
      // Z-index
      zIndex: {
        'bottom-nav': '50',
        'modal': '100',
        'tooltip': '200',
      },
      // Keyframes for animations
      keyframes: {
        // Toast animations
        slideInRight: {
          '0%': {
            transform: 'translateX(100%)',
            opacity: '0'
          },
          '100%': {
            transform: 'translateX(0)',
            opacity: '1'
          }
        },
        slideOutRight: {
          '0%': {
            transform: 'translateX(0)',
            opacity: '1'
          },
          '100%': {
            transform: 'translateX(100%)',
            opacity: '0'
          }
        },
        slideInLeft: {
          '0%': {
            transform: 'translateX(-100%)',
            opacity: '0'
          },
          '100%': {
            transform: 'translateX(0)',
            opacity: '1'
          }
        },
        slideOutLeft: {
          '0%': {
            transform: 'translateX(0)',
            opacity: '1'
          },
          '100%': {
            transform: 'translateX(-100%)',
            opacity: '0'
          }
        },
        slideInDown: {
          '0%': {
            transform: 'translateY(-100%)',
            opacity: '0'
          },
          '100%': {
            transform: 'translateY(0)',
            opacity: '1'
          }
        },
        slideOutUp: {
          '0%': {
            transform: 'translateY(0)',
            opacity: '1'
          },
          '100%': {
            transform: 'translateY(-100%)',
            opacity: '0'
          }
        },
        slideInUp: {
          '0%': {
            transform: 'translateY(100%)',
            opacity: '0'
          },
          '100%': {
            transform: 'translateY(0)',
            opacity: '1'
          }
        },
        slideOutDown: {
          '0%': {
            transform: 'translateY(0)',
            opacity: '1'
          },
          '100%': {
            transform: 'translateY(100%)',
            opacity: '0'
          }
        },
        'toast-progress': {
          '0%': { width: '100%' },
          '100%': { width: '0%' }
        },
        // Spinner animations
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        },
        scaleIn: {
          '0%': { transform: 'scale(0.95)', opacity: '0' },
          '100%': { transform: 'scale(1)', opacity: '1' }
        }
      },
      // Animation configurations
      animation: {
        slideInRight: 'slideInRight 0.3s ease-out',
        slideOutRight: 'slideOutRight 0.2s ease-in',
        slideInLeft: 'slideInLeft 0.3s ease-out',
        slideOutLeft: 'slideOutLeft 0.2s ease-in',
        slideInDown: 'slideInDown 0.3s ease-out',
        slideOutUp: 'slideOutUp 0.2s ease-in',
        slideInUp: 'slideInUp 0.3s ease-out',
        slideOutDown: 'slideOutDown 0.2s ease-in',
        'toast-progress': 'toast-progress linear',
        fadeIn: 'fadeIn 0.2s ease-out',
        scaleIn: 'scaleIn 0.2s ease-out',
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path=".cursor/mcp.json">
{
  "mcpServers": {
    "API-99CLUB": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "apidog-mcp-server@latest",
        "--oas=https://ninetynineclub-api.onrender.com/api-docs-json"
      ],
      "env": {}
    },
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp"]
    },
    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]
    },
    "playwright": {
      "command": "npx",
      "args": ["-y", "@playwright/mcp"]
    }
  }
}
</file>

<file path="docs/page-structure/financial-list.view.json">
{
    "financialTransactionsList": {
        "pageInfo": {
            "title": "Finansal İşlemler",
            "subtitle": "Fatura ve Ödeme Yönetimi",
            "icon": "💰",
            "lastUpdated": "2025-07-30T11:30:00Z"
        },
        "filters": {
            "search": {
                "placeholder": "İşlem ID, daire numarası veya açıklama ile ara...",
                "value": "",
                "type": "text"
            },
            "transactionType": {
                "label": "İşlem Türü",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm İşlemler",
                        "count": 1247
                    },
                    {
                        "value": "payment",
                        "label": "Ödeme",
                        "count": 856,
                        "color": "#10b981",
                        "icon": "💳"
                    },
                    {
                        "value": "bill",
                        "label": "Fatura",
                        "count": 234,
                        "color": "#f59e0b",
                        "icon": "📄"
                    },
                    {
                        "value": "due",
                        "label": "Aidat",
                        "count": 98,
                        "color": "#3b82f6",
                        "icon": "🏠"
                    },
                    {
                        "value": "refund",
                        "label": "İade",
                        "count": 12,
                        "color": "#8b5cf6",
                        "icon": "↩️"
                    },
                    {
                        "value": "penalty",
                        "label": "Gecikme Cezası",
                        "count": 34,
                        "color": "#ef4444",
                        "icon": "⚠️"
                    },
                    {
                        "value": "deposit",
                        "label": "Depozit",
                        "count": 13,
                        "color": "#06b6d4",
                        "icon": "🏦"
                    }
                ]
            },
            "paymentStatus": {
                "label": "Ödeme Durumu",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Durumlar",
                        "count": 1247
                    },
                    {
                        "value": "paid",
                        "label": "Ödendi",
                        "count": 856,
                        "color": "#10b981"
                    },
                    {
                        "value": "pending",
                        "label": "Bekliyor",
                        "count": 198,
                        "color": "#f59e0b"
                    },
                    {
                        "value": "overdue",
                        "label": "Gecikmiş",
                        "count": 156,
                        "color": "#ef4444"
                    },
                    {
                        "value": "partial",
                        "label": "Kısmi Ödeme",
                        "count": 23,
                        "color": "#8b5cf6"
                    },
                    {
                        "value": "cancelled",
                        "label": "İptal",
                        "count": 14,
                        "color": "#6b7280"
                    }
                ]
            },
            "paymentMethod": {
                "label": "Ödeme Yöntemi",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Yöntemler",
                        "count": 1247
                    },
                    {
                        "value": "zaincash",
                        "label": "ZainCash",
                        "count": 423,
                        "icon": "📱",
                        "color": "#e11d48"
                    },
                    {
                        "value": "asiacell",
                        "label": "AsiaCell Pay",
                        "count": 298,
                        "icon": "📱",
                        "color": "#0ea5e9"
                    },
                    {
                        "value": "bank_transfer",
                        "label": "Banka Havalesi",
                        "count": 234,
                        "icon": "🏦",
                        "color": "#059669"
                    },
                    {
                        "value": "cash",
                        "label": "Nakit",
                        "count": 187,
                        "icon": "💵",
                        "color": "#d97706"
                    },
                    {
                        "value": "credit_card",
                        "label": "Kredi Kartı",
                        "count": 89,
                        "icon": "💳",
                        "color": "#7c3aed"
                    },
                    {
                        "value": "check",
                        "label": "Çek",
                        "count": 16,
                        "icon": "📝",
                        "color": "#64748b"
                    }
                ]
            },
            "serviceType": {
                "label": "Hizmet Türü",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Hizmetler",
                        "count": 1247
                    },
                    {
                        "value": "monthly_dues",
                        "label": "Aylık Aidat",
                        "count": 345,
                        "icon": "🏠"
                    },
                    {
                        "value": "electricity",
                        "label": "Elektrik",
                        "count": 298,
                        "icon": "⚡"
                    },
                    {
                        "value": "water",
                        "label": "Su",
                        "count": 267,
                        "icon": "💧"
                    },
                    {
                        "value": "gas",
                        "label": "Gaz",
                        "count": 156,
                        "icon": "🔥"
                    },
                    {
                        "value": "internet",
                        "label": "İnternet",
                        "count": 89,
                        "icon": "🌐"
                    },
                    {
                        "value": "maintenance",
                        "label": "Bakım",
                        "count": 67,
                        "icon": "🔧"
                    },
                    {
                        "value": "parking",
                        "label": "Otopark",
                        "count": 25,
                        "icon": "🚗"
                    }
                ]
            },
            "dateRange": {
                "label": "Tarih Aralığı",
                "startDate": "2025-07-01",
                "endDate": "2025-07-30",
                "type": "daterange",
                "presets": [
                    {
                        "value": "today",
                        "label": "Bugün"
                    },
                    {
                        "value": "yesterday",
                        "label": "Dün"
                    },
                    {
                        "value": "last_7_days",
                        "label": "Son 7 Gün"
                    },
                    {
                        "value": "last_30_days",
                        "label": "Son 30 Gün"
                    },
                    {
                        "value": "this_month",
                        "label": "Bu Ay"
                    },
                    {
                        "value": "last_month",
                        "label": "Geçen Ay"
                    },
                    {
                        "value": "this_quarter",
                        "label": "Bu Çeyrek"
                    },
                    {
                        "value": "this_year",
                        "label": "Bu Yıl"
                    },
                    {
                        "value": "custom",
                        "label": "Özel Tarih"
                    }
                ]
            },
            "amountRange": {
                "label": "Tutar Aralığı (IQD)",
                "minAmount": 0,
                "maxAmount": 2000000,
                "type": "range",
                "presets": [
                    {
                        "value": "0-100000",
                        "label": "0 - 100,000 IQD"
                    },
                    {
                        "value": "100000-500000",
                        "label": "100,000 - 500,000 IQD"
                    },
                    {
                        "value": "500000-1000000",
                        "label": "500,000 - 1,000,000 IQD"
                    },
                    {
                        "value": "1000000+",
                        "label": "1,000,000+ IQD"
                    }
                ]
            },
            "building": {
                "label": "Bina/Blok",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Bloklar",
                        "count": 1247
                    },
                    {
                        "value": "block_a",
                        "label": "A Blok",
                        "count": 356
                    },
                    {
                        "value": "block_b",
                        "label": "B Blok",
                        "count": 298
                    },
                    {
                        "value": "block_c",
                        "label": "C Blok",
                        "count": 334
                    },
                    {
                        "value": "block_d",
                        "label": "D Blok",
                        "count": 259
                    }
                ]
            }
        },
        "financialSummary": {
            "totalTransactions": 1247,
            "totalRevenue": {
                "amount": 187500000,
                "currency": "IQD",
                "formatted": "187,500,000 IQD"
            },
            "totalPending": {
                "amount": 23400000,
                "currency": "IQD",
                "formatted": "23,400,000 IQD"
            },
            "totalOverdue": {
                "amount": 8900000,
                "currency": "IQD",
                "formatted": "8,900,000 IQD"
            },
            "collectionRate": 94.2,
            "averageTransactionAmount": {
                "amount": 150240,
                "currency": "IQD",
                "formatted": "150,240 IQD"
            },
            "monthlyGrowth": {
                "percentage": 12.5,
                "trend": "up"
            }
        },
        "quickStats": [
            {
                "label": "Bugün Toplanan",
                "value": "12,450,000 IQD",
                "count": 34,
                "change": "+18%",
                "trend": "up",
                "color": "#10b981",
                "icon": "💰"
            },
            {
                "label": "Bekleyen Ödemeler",
                "value": "23,400,000 IQD",
                "count": 198,
                "change": "-5%",
                "trend": "down",
                "color": "#f59e0b",
                "icon": "⏳"
            },
            {
                "label": "Gecikmiş Borçlar",
                "value": "8,900,000 IQD",
                "count": 156,
                "change": "-12%",
                "trend": "down",
                "color": "#ef4444",
                "icon": "⚠️"
            },
            {
                "label": "Bu Ay Toplam",
                "value": "187,500,000 IQD",
                "count": 1247,
                "change": "+12.5%",
                "trend": "up",
                "color": "#3b82f6",
                "icon": "📊"
            }
        ],
        "paymentMethodStats": [
            {
                "method": "ZainCash",
                "amount": 63450000,
                "percentage": 33.8,
                "count": 423,
                "color": "#e11d48",
                "icon": "📱"
            },
            {
                "method": "AsiaCell Pay",
                "amount": 55860000,
                "percentage": 29.8,
                "count": 298,
                "color": "#0ea5e9",
                "icon": "📱"
            },
            {
                "method": "Banka Havalesi",
                "amount": 39000000,
                "percentage": 20.8,
                "count": 234,
                "color": "#059669",
                "icon": "🏦"
            },
            {
                "method": "Nakit",
                "amount": 18720000,
                "percentage": 10.0,
                "count": 187,
                "color": "#d97706",
                "icon": "💵"
            },
            {
                "method": "Diğer",
                "amount": 10470000,
                "percentage": 5.6,
                "count": 105,
                "color": "#6b7280",
                "icon": "💳"
            }
        ],
        "sortOptions": {
            "currentSort": "transaction_date_desc",
            "options": [
                {
                    "value": "transaction_date_desc",
                    "label": "En Yeni Önce"
                },
                {
                    "value": "transaction_date_asc",
                    "label": "En Eski Önce"
                },
                {
                    "value": "amount_desc",
                    "label": "Tutar (Yüksek→Düşük)"
                },
                {
                    "value": "amount_asc",
                    "label": "Tutar (Düşük→Yüksek)"
                },
                {
                    "value": "due_date_asc",
                    "label": "Vade Tarihi (Yakın→Uzak)"
                },
                {
                    "value": "status_asc",
                    "label": "Duruma Göre"
                },
                {
                    "value": "apartment_asc",
                    "label": "Daire Numarasına Göre"
                },
                {
                    "value": "payment_method_asc",
                    "label": "Ödeme Yöntemine Göre"
                }
            ]
        },
        "pagination": {
            "currentPage": 1,
            "totalPages": 25,
            "itemsPerPage": 50,
            "totalItems": 1247,
            "showingFrom": 1,
            "showingTo": 50,
            "pageSizeOptions": [
                25,
                50,
                100,
                200
            ]
        },
        "bulkActions": {
            "enabled": true,
            "selectedCount": 0,
            "selectedAmount": {
                "amount": 0,
                "currency": "IQD",
                "formatted": "0 IQD"
            },
            "actions": [
                {
                    "id": "mark_paid",
                    "label": "Ödendi Olarak İşaretle",
                    "icon": "✅",
                    "requiresSelection": true,
                    "confirmationRequired": true,
                    "restrictedTo": [
                        "pending",
                        "overdue"
                    ]
                },
                {
                    "id": "send_reminder",
                    "label": "Ödeme Hatırlatması Gönder",
                    "icon": "📢",
                    "requiresSelection": true,
                    "confirmationRequired": false,
                    "restrictedTo": [
                        "pending",
                        "overdue"
                    ]
                },
                {
                    "id": "apply_penalty",
                    "label": "Gecikme Cezası Uygula",
                    "icon": "⚠️",
                    "requiresSelection": true,
                    "confirmationRequired": true,
                    "restrictedTo": [
                        "overdue"
                    ]
                },
                {
                    "id": "generate_receipt",
                    "label": "Makbuz Oluştur",
                    "icon": "🧾",
                    "requiresSelection": true,
                    "confirmationRequired": false,
                    "restrictedTo": [
                        "paid"
                    ]
                },
                {
                    "id": "export_selected",
                    "label": "Seçilenleri Dışa Aktar",
                    "icon": "📤",
                    "requiresSelection": true,
                    "confirmationRequired": false
                },
                {
                    "id": "cancel_transaction",
                    "label": "İşlemi İptal Et",
                    "icon": "❌",
                    "requiresSelection": true,
                    "confirmationRequired": true,
                    "dangerAction": true,
                    "restrictedTo": [
                        "pending"
                    ]
                }
            ]
        },
        "tableColumns": [
            {
                "key": "select",
                "label": "",
                "width": "40px",
                "sortable": false,
                "type": "checkbox"
            },
            {
                "key": "transactionId",
                "label": "İşlem ID",
                "width": "120px",
                "sortable": true,
                "type": "link"
            },
            {
                "key": "apartment",
                "label": "Daire",
                "width": "100px",
                "sortable": true,
                "type": "text"
            },
            {
                "key": "resident",
                "label": "Sakin",
                "width": "150px",
                "sortable": true,
                "type": "user"
            },
            {
                "key": "transactionType",
                "label": "İşlem Türü",
                "width": "120px",
                "sortable": true,
                "type": "badge"
            },
            {
                "key": "serviceType",
                "label": "Hizmet",
                "width": "120px",
                "sortable": true,
                "type": "badge"
            },
            {
                "key": "amount",
                "label": "Tutar",
                "width": "120px",
                "sortable": true,
                "type": "currency",
                "align": "right"
            },
            {
                "key": "paymentMethod",
                "label": "Ödeme Yöntemi",
                "width": "130px",
                "sortable": true,
                "type": "badge"
            },
            {
                "key": "status",
                "label": "Durum",
                "width": "100px",
                "sortable": true,
                "type": "status"
            },
            {
                "key": "transactionDate",
                "label": "İşlem Tarihi",
                "width": "120px",
                "sortable": true,
                "type": "datetime"
            },
            {
                "key": "dueDate",
                "label": "Vade",
                "width": "100px",
                "sortable": true,
                "type": "date"
            },
            {
                "key": "actions",
                "label": "İşlemler",
                "width": "100px",
                "sortable": false,
                "type": "actions"
            }
        ],
        "transactions": [
            {
                "id": "TXN-2025-0789",
                "transactionId": "TXN-2025-0789",
                "apartment": {
                    "number": "A-101",
                    "block": "A",
                    "floor": 1,
                    "owner": "Ahmed Mohammed Al-Rashid",
                    "tenant": "Sara Hassan Al-Mahmoud"
                },
                "resident": {
                    "name": "Sara Hassan Al-Mahmoud",
                    "phone": "+964 750 987 6543",
                    "email": "sara.hassan@email.com",
                    "avatar": "SH",
                    "type": "tenant"
                },
                "transactionType": {
                    "id": "payment",
                    "label": "Ödeme",
                    "icon": "💳",
                    "color": "#10b981"
                },
                "serviceType": {
                    "id": "monthly_dues",
                    "label": "Aylık Aidat",
                    "icon": "🏠",
                    "color": "#3b82f6"
                },
                "amount": {
                    "value": 150000,
                    "currency": "IQD",
                    "formatted": "150,000 IQD"
                },
                "paymentMethod": {
                    "id": "zaincash",
                    "label": "ZainCash",
                    "icon": "📱",
                    "color": "#e11d48",
                    "transactionRef": "ZC789456123"
                },
                "status": {
                    "id": "paid",
                    "label": "Ödendi",
                    "color": "#10b981",
                    "bgColor": "#d1fae5"
                },
                "transactionDate": "2025-07-28T14:30:00Z",
                "dueDate": "2025-08-01T23:59:59Z",
                "paidDate": "2025-07-28T14:30:00Z",
                "period": "2025-08",
                "description": "Ağustos 2025 aylık aidat ödemesi",
                "receiptNumber": "RCP-2025-0789",
                "fees": {
                    "processingFee": 2500,
                    "currency": "IQD"
                },
                "isOverdue": false,
                "daysOverdue": 0,
                "penalty": {
                    "amount": 0,
                    "currency": "IQD"
                },
                "tags": [
                    "aylık",
                    "zaincash",
                    "a-blok"
                ]
            },
            {
                "id": "TXN-2025-0788",
                "transactionId": "TXN-2025-0788",
                "apartment": {
                    "number": "B-205",
                    "block": "B",
                    "floor": 2,
                    "owner": "Layla Omar Al-Najjar",
                    "tenant": null
                },
                "resident": {
                    "name": "Layla Omar Al-Najjar",
                    "phone": "+964 770 888 9999",
                    "email": "layla.najjar@email.com",
                    "avatar": "LN",
                    "type": "owner"
                },
                "transactionType": {
                    "id": "bill",
                    "label": "Fatura",
                    "icon": "📄",
                    "color": "#f59e0b"
                },
                "serviceType": {
                    "id": "electricity",
                    "label": "Elektrik",
                    "icon": "⚡",
                    "color": "#f59e0b"
                },
                "amount": {
                    "value": 89500,
                    "currency": "IQD",
                    "formatted": "89,500 IQD"
                },
                "paymentMethod": {
                    "id": "bank_transfer",
                    "label": "Banka Havalesi",
                    "icon": "🏦",
                    "color": "#059669",
                    "bankAccount": "****1234"
                },
                "status": {
                    "id": "pending",
                    "label": "Bekliyor",
                    "color": "#f59e0b",
                    "bgColor": "#fef3c7"
                },
                "transactionDate": "2025-07-25T09:15:00Z",
                "dueDate": "2025-08-10T23:59:59Z",
                "paidDate": null,
                "period": "2025-07",
                "description": "Temmuz 2025 elektrik faturası",
                "consumption": {
                    "amount": 596,
                    "unit": "kWh",
                    "rate": 150,
                    "currency": "IQD"
                },
                "previousReading": 12450,
                "currentReading": 13046,
                "meterNumber": "ELC002205",
                "isOverdue": false,
                "daysOverdue": 0,
                "penalty": {
                    "amount": 0,
                    "currency": "IQD"
                },
                "tags": [
                    "elektrik",
                    "bekliyor",
                    "b-blok"
                ]
            },
            {
                "id": "TXN-2025-0787",
                "transactionId": "TXN-2025-0787",
                "apartment": {
                    "number": "C-308",
                    "block": "C",
                    "floor": 3,
                    "owner": "Hassan Ali Al-Mahmoud",
                    "tenant": "Maryam Hassan Al-Zahra"
                },
                "resident": {
                    "name": "Maryam Hassan Al-Zahra",
                    "phone": "+964 750 111 2222",
                    "email": "maryam.zahra@email.com",
                    "avatar": "MZ",
                    "type": "tenant"
                },
                "transactionType": {
                    "id": "payment",
                    "label": "Ödeme",
                    "icon": "💳",
                    "color": "#10b981"
                },
                "serviceType": {
                    "id": "water",
                    "label": "Su",
                    "icon": "💧",
                    "color": "#06b6d4"
                },
                "amount": {
                    "value": 34200,
                    "currency": "IQD",
                    "formatted": "34,200 IQD"
                },
                "paymentMethod": {
                    "id": "asiacell",
                    "label": "AsiaCell Pay",
                    "icon": "📱",
                    "color": "#0ea5e9",
                    "transactionRef": "AC445566778"
                },
                "status": {
                    "id": "paid",
                    "label": "Ödendi",
                    "color": "#10b981",
                    "bgColor": "#d1fae5"
                },
                "transactionDate": "2025-07-24T16:45:00Z",
                "dueDate": "2025-08-05T23:59:59Z",
                "paidDate": "2025-07-24T16:45:00Z",
                "period": "2025-07",
                "description": "Temmuz 2025 su faturası",
                "consumption": {
                    "amount": 19,
                    "unit": "m³",
                    "rate": 1800,
                    "currency": "IQD"
                },
                "previousReading": 345,
                "currentReading": 364,
                "meterNumber": "WTR003308",
                "isOverdue": false,
                "daysOverdue": 0,
                "penalty": {
                    "amount": 0,
                    "currency": "IQD"
                },
                "tags": [
                    "su",
                    "asiacell",
                    "c-blok"
                ]
            },
            {
                "id": "TXN-2025-0786",
                "transactionId": "TXN-2025-0786",
                "apartment": {
                    "number": "A-205",
                    "block": "A",
                    "floor": 2,
                    "owner": "Mohammed Hassan Al-Timimi",
                    "tenant": "Fatima Ali Al-Baghdadi"
                },
                "resident": {
                    "name": "Fatima Ali Al-Baghdadi",
                    "phone": "+964 770 333 4444",
                    "email": "fatima.baghdadi@email.com",
                    "avatar": "FB",
                    "type": "tenant"
                },
                "transactionType": {
                    "id": "due",
                    "label": "Aidat",
                    "icon": "🏠",
                    "color": "#3b82f6"
                },
                "serviceType": {
                    "id": "monthly_dues",
                    "label": "Aylık Aidat",
                    "icon": "🏠",
                    "color": "#3b82f6"
                },
                "amount": {
                    "value": 150000,
                    "currency": "IQD",
                    "formatted": "150,000 IQD"
                },
                "paymentMethod": null,
                "status": {
                    "id": "overdue",
                    "label": "Gecikmiş",
                    "color": "#ef4444",
                    "bgColor": "#fee2e2"
                },
                "transactionDate": "2025-07-01T00:00:00Z",
                "dueDate": "2025-07-15T23:59:59Z",
                "paidDate": null,
                "period": "2025-07",
                "description": "Temmuz 2025 aylık aidat",
                "isOverdue": true,
                "daysOverdue": 15,
                "penalty": {
                    "amount": 15000,
                    "currency": "IQD",
                    "rate": 0.1,
                    "description": "Günlük %0.1 gecikme cezası"
                },
                "remindersSent": 3,
                "lastReminderDate": "2025-07-25T10:00:00Z",
                "tags": [
                    "aidat",
                    "gecikmiş",
                    "hatırlatma",
                    "a-blok"
                ]
            },
            {
                "id": "TXN-2025-0785",
                "transactionId": "TXN-2025-0785",
                "apartment": {
                    "number": "D-112",
                    "block": "D",
                    "floor": 1,
                    "owner": "Ali Omar Al-Rashid",
                    "tenant": null
                },
                "resident": {
                    "name": "Ali Omar Al-Rashid",
                    "phone": "+964 750 666 7777",
                    "email": "ali.rashid@email.com",
                    "avatar": "AR",
                    "type": "owner"
                },
                "transactionType": {
                    "id": "payment",
                    "label": "Ödeme",
                    "icon": "💳",
                    "color": "#10b981"
                },
                "serviceType": {
                    "id": "maintenance",
                    "label": "Bakım",
                    "icon": "🔧",
                    "color": "#8b5cf6"
                },
                "amount": {
                    "value": 275000,
                    "currency": "IQD",
                    "formatted": "275,000 IQD"
                },
                "paymentMethod": {
                    "id": "cash",
                    "label": "Nakit",
                    "icon": "💵",
                    "color": "#d97706",
                    "receivedBy": "Site Muhasebecisi"
                },
                "status": {
                    "id": "paid",
                    "label": "Ödendi",
                    "color": "#10b981",
                    "bgColor": "#d1fae5"
                },
                "transactionDate": "2025-07-22T11:20:00Z",
                "dueDate": "2025-07-25T23:59:59Z",
                "paidDate": "2025-07-22T11:20:00Z",
                "period": "2025-07",
                "description": "Klima bakım ve gaz dolumu",
                "maintenanceDetails": {
                    "requestId": "MNT-2025-0245",
                    "technician": "Sara Ahmed",
                    "company": "City HVAC Services",
                    "workDescription": "Salon kliması bakım ve R410A gaz dolumu"
                },
                "receiptNumber": "RCP-2025-0785",
                "isOverdue": false,
                "daysOverdue": 0,
                "penalty": {
                    "amount": 0,
                    "currency": "IQD"
                },
                "tags": [
                    "bakım",
                    "klima",
                    "nakit",
                    "d-blok"
                ]
            }
        ],
        "exportOptions": {
            "formats": [
                {
                    "value": "excel",
                    "label": "Excel (.xlsx)",
                    "icon": "📊"
                },
                {
                    "value": "pdf",
                    "label": "PDF Raporu",
                    "icon": "📄"
                },
                {
                    "value": "csv",
                    "label": "CSV Dosyası",
                    "icon": "📋"
                },
                {
                    "value": "financial_report",
                    "label": "Mali Rapor (PDF)",
                    "icon": "💼"
                }
            ],
            "includeOptions": [
                {
                    "key": "basic_info",
                    "label": "Temel Bilgiler",
                    "default": true
                },
                {
                    "key": "resident_info",
                    "label": "Sakin Bilgileri",
                    "default": true
                },
                {
                    "key": "payment_details",
                    "label": "Ödeme Detayları",
                    "default": true
                },
                {
                    "key": "consumption_data",
                    "label": "Tüketim Verileri",
                    "default": false
                },
                {
                    "key": "penalty_info",
                    "label": "Ceza Bilgileri",
                    "default": false
                },
                {
                    "key": "receipt_numbers",
                    "label": "Makbuz Numaraları",
                    "default": true
                },
                {
                    "key": "financial_summary",
                    "label": "Mali Özet",
                    "default": false
                }
            ],
            "dateRangeRequired": true
        },
        "reportingOptions": {
            "availableReports": [
                {
                    "id": "monthly_collection",
                    "label": "Aylık Tahsilat Raporu",
                    "description": "Detaylı gelir analizi ve tahsilat oranları",
                    "icon": "📊"
                },
                {
                    "id": "overdue_analysis",
                    "label": "Gecikmiş Ödemeler Analizi",
                    "description": "Borçlu daireler ve gecikme trendleri",
                    "icon": "⚠️"
                },
                {
                    "id": "payment_method_breakdown",
                    "label": "Ödeme Yöntemi Dağılımı",
                    "description": "Kullanılan ödeme kanalları ve performans",
                    "icon": "💳"
                },
                {
                    "id": "consumption_trends",
                    "label": "Tüketim Trend Analizi",
                    "description": "Elektrik, su, gaz tüketim analizleri",
                    "icon": "⚡"
                }
            ]
        },
        "permissions": {
            "canCreate": true,
            "canEdit": true,
            "canDelete": false,
            "canApprove": true,
            "canRefund": true,
            "canExport": true,
            "canViewCosts": true,
            "canManagePenalties": true,
            "canGenerateReports": true,
            "canBulkEdit": true,
            "role": "financial_admin"
        },
        "integrations": {
            "paymentGateways": {
                "zaincash": {
                    "enabled": true,
                    "status": "active",
                    "lastSync": "2025-07-30T10:30:00Z"
                },
                "asiacell": {
                    "enabled": true,
                    "status": "active",
                    "lastSync": "2025-07-30T10:25:00Z"
                },
                "bankTransfer": {
                    "enabled": true,
                    "accounts": [
                        "Al-Rashid Bank",
                        "Commercial Bank of Iraq"
                    ],
                    "autoReconciliation": true
                }
            },
            "accountingSystem": {
                "enabled": false,
                "provider": null,
                "lastSync": null
            }
        }
    }
}
</file>

<file path="docs/page-structure/property-view.json">
{
    "housingDetail": {
        "id": "HSE-2024-0101",
        "apartmentNumber": "A-101",
        "block": "A",
        "floor": 1,
        "type": "3+1",
        "area": 120,
        "status": "active",
        "createdDate": "2024-01-15T10:30:00Z",
        "lastUpdated": "2025-07-28T14:20:00Z",
        "basicInfo": {
            "title": "Konut Temel Bilgileri",
            "icon": "🏠",
            "data": {
                "apartmentNumber": {
                    "label": "Daire No",
                    "value": "A-101",
                    "type": "text",
                    "required": true
                },
                "block": {
                    "label": "Blok",
                    "value": "A Blok",
                    "type": "select",
                    "options": [
                        "A Blok",
                        "B Blok",
                        "C Blok",
                        "D Blok"
                    ],
                    "required": true
                },
                "floor": {
                    "label": "Kat",
                    "value": 1,
                    "type": "number",
                    "min": -1,
                    "max": 20,
                    "required": true
                },
                "apartmentType": {
                    "label": "Daire Tipi",
                    "value": "3+1 (120m²)",
                    "type": "select",
                    "options": [
                        "1+0 (45m²)",
                        "1+1 (65m²)",
                        "2+1 (85m²)",
                        "3+1 (120m²)",
                        "4+1 (150m²)",
                        "5+1 (180m²)"
                    ],
                    "required": true
                },
                "area": {
                    "label": "Alan (m²)",
                    "value": 120,
                    "type": "number",
                    "min": 30,
                    "max": 500,
                    "required": true
                },
                "status": {
                    "label": "Durum",
                    "value": "active",
                    "type": "select",
                    "options": [
                        {
                            "value": "active",
                            "label": "Aktif",
                            "color": "green"
                        },
                        {
                            "value": "inactive",
                            "label": "Pasif",
                            "color": "red"
                        },
                        {
                            "value": "maintenance",
                            "label": "Bakımda",
                            "color": "orange"
                        },
                        {
                            "value": "renovation",
                            "label": "Tadilat",
                            "color": "blue"
                        }
                    ],
                    "required": true
                }
            }
        },
        "ownerInfo": {
            "title": "Malik Bilgileri",
            "icon": "👤",
            "data": {
                "fullName": {
                    "label": "Ad Soyad",
                    "value": "Ahmed Mohammed Al-Rashid",
                    "type": "text",
                    "required": true,
                    "validation": "name"
                },
                "phone": {
                    "label": "Telefon",
                    "value": "+964 770 123 4567",
                    "type": "tel",
                    "format": "+964 XXX XXX XXXX",
                    "required": true,
                    "validation": "iraq_phone"
                },
                "email": {
                    "label": "E-posta",
                    "value": "ahmed.rashid@email.com",
                    "type": "email",
                    "required": false,
                    "validation": "email"
                },
                "nationalId": {
                    "label": "Kimlik No",
                    "value": "12345678901",
                    "type": "text",
                    "required": false,
                    "validation": "national_id"
                },
                "address": {
                    "label": "Adres",
                    "value": "Baghdad, Karrada District, Street 15, Building 42",
                    "type": "textarea",
                    "required": false
                },
                "ownershipType": {
                    "label": "Sahiplik Türü",
                    "value": "owner",
                    "type": "select",
                    "options": [
                        {
                            "value": "owner",
                            "label": "Malik",
                            "color": "blue"
                        },
                        {
                            "value": "investor",
                            "label": "Yatırımcı",
                            "color": "purple"
                        },
                        {
                            "value": "inherited",
                            "label": "Miras",
                            "color": "green"
                        }
                    ],
                    "required": true
                }
            }
        },
        "tenantInfo": {
            "title": "Kiracı Bilgileri",
            "icon": "🏠",
            "isRented": true,
            "data": {
                "isRented": {
                    "label": "Kiralık Daire",
                    "value": true,
                    "type": "checkbox"
                },
                "tenantName": {
                    "label": "Kiracı Adı",
                    "value": "Sara Hassan Al-Mahmoud",
                    "type": "text",
                    "required": true,
                    "dependsOn": "isRented",
                    "validation": "name"
                },
                "tenantPhone": {
                    "label": "Kiracı Telefon",
                    "value": "+964 750 987 6543",
                    "type": "tel",
                    "format": "+964 XXX XXX XXXX",
                    "required": true,
                    "dependsOn": "isRented",
                    "validation": "iraq_phone"
                },
                "tenantEmail": {
                    "label": "Kiracı E-posta",
                    "value": "sara.hassan@email.com",
                    "type": "email",
                    "required": false,
                    "dependsOn": "isRented"
                },
                "leaseStartDate": {
                    "label": "Kira Başlangıç",
                    "value": "2024-01-01",
                    "type": "date",
                    "required": true,
                    "dependsOn": "isRented"
                },
                "leaseEndDate": {
                    "label": "Kira Bitiş",
                    "value": "2024-12-31",
                    "type": "date",
                    "required": true,
                    "dependsOn": "isRented"
                },
                "monthlyRent": {
                    "label": "Aylık Kira (IQD)",
                    "value": 800000,
                    "type": "currency",
                    "currency": "IQD",
                    "required": true,
                    "dependsOn": "isRented"
                },
                "deposit": {
                    "label": "Depozit (IQD)",
                    "value": 1600000,
                    "type": "currency",
                    "currency": "IQD",
                    "required": false,
                    "dependsOn": "isRented"
                }
            }
        },
        "residents": {
            "title": "Mevcut Sakinler",
            "icon": "👥",
            "count": 3,
            "data": [
                {
                    "id": "RES-001",
                    "name": "Sara Hassan Al-Mahmoud",
                    "role": "tenant",
                    "roleLabel": "Kiracı",
                    "phone": "+964 750 987 6543",
                    "email": "sara.hassan@email.com",
                    "age": 34,
                    "nationalId": "98765432101",
                    "isMainResident": true,
                    "moveInDate": "2024-01-01",
                    "emergencyContact": {
                        "name": "Hassan Al-Mahmoud",
                        "phone": "+964 770 555 1234",
                        "relation": "Eş"
                    }
                },
                {
                    "id": "RES-002",
                    "name": "Omar Hassan Al-Mahmoud",
                    "role": "family_member",
                    "roleLabel": "Aile Üyesi",
                    "phone": "+964 750 111 2222",
                    "email": "",
                    "age": 16,
                    "nationalId": "",
                    "isMainResident": false,
                    "moveInDate": "2024-01-01",
                    "relation": "Çocuk"
                },
                {
                    "id": "RES-003",
                    "name": "Layla Hassan Al-Mahmoud",
                    "role": "family_member",
                    "roleLabel": "Aile Üyesi",
                    "phone": "",
                    "email": "",
                    "age": 12,
                    "nationalId": "",
                    "isMainResident": false,
                    "moveInDate": "2024-01-01",
                    "relation": "Çocuk"
                }
            ]
        },
        "billingInfo": {
            "title": "Fatura Ayarları",
            "icon": "💰",
            "data": {
                "monthlyDues": {
                    "label": "Aylık Aidat (IQD)",
                    "value": 150000,
                    "type": "currency",
                    "currency": "IQD",
                    "required": true
                },
                "electricityMeterNo": {
                    "label": "Elektrik Sayacı No",
                    "value": "ELC001234",
                    "type": "text",
                    "required": false,
                    "validation": "meter_number"
                },
                "waterMeterNo": {
                    "label": "Su Sayacı No",
                    "value": "WTR005678",
                    "type": "text",
                    "required": false,
                    "validation": "meter_number"
                },
                "gasMeterNo": {
                    "label": "Gaz Sayacı No",
                    "value": "GAS009012",
                    "type": "text",
                    "required": false,
                    "validation": "meter_number"
                },
                "internetConnection": {
                    "label": "İnternet Bağlantısı",
                    "value": true,
                    "type": "checkbox"
                },
                "parkingSpace": {
                    "label": "Otopark",
                    "value": "P-A-15",
                    "type": "text",
                    "required": false
                }
            }
        },
        "financialSummary": {
            "title": "Finansal Özet",
            "icon": "📊",
            "data": {
                "currentBalance": {
                    "label": "Güncel Bakiye",
                    "value": -75000,
                    "type": "currency",
                    "currency": "IQD",
                    "status": "debt"
                },
                "lastPaymentDate": {
                    "label": "Son Ödeme",
                    "value": "2025-06-15T10:30:00Z",
                    "type": "datetime"
                },
                "lastPaymentAmount": {
                    "label": "Son Ödeme Tutarı",
                    "value": 150000,
                    "type": "currency",
                    "currency": "IQD"
                },
                "overdueAmount": {
                    "label": "Gecikmiş Tutar",
                    "value": 75000,
                    "type": "currency",
                    "currency": "IQD",
                    "status": "overdue"
                },
                "nextDueDate": {
                    "label": "Sonraki Vade",
                    "value": "2025-08-01",
                    "type": "date"
                }
            }
        },
        "consumptionData": {
            "title": "Tüketim Verileri",
            "icon": "⚡",
            "period": "monthly",
            "data": {
                "electricity": {
                    "label": "Elektrik",
                    "currentMonth": {
                        "consumption": 450,
                        "unit": "kWh",
                        "cost": 67500,
                        "currency": "IQD"
                    },
                    "previousMonth": {
                        "consumption": 420,
                        "unit": "kWh",
                        "cost": 63000,
                        "currency": "IQD"
                    },
                    "trend": "increase",
                    "percentage": 7.1
                },
                "water": {
                    "label": "Su",
                    "currentMonth": {
                        "consumption": 18,
                        "unit": "m³",
                        "cost": 27000,
                        "currency": "IQD"
                    },
                    "previousMonth": {
                        "consumption": 16,
                        "unit": "m³",
                        "cost": 24000,
                        "currency": "IQD"
                    },
                    "trend": "increase",
                    "percentage": 12.5
                },
                "gas": {
                    "label": "Gaz",
                    "currentMonth": {
                        "consumption": 85,
                        "unit": "m³",
                        "cost": 42500,
                        "currency": "IQD"
                    },
                    "previousMonth": {
                        "consumption": 92,
                        "unit": "m³",
                        "cost": 46000,
                        "currency": "IQD"
                    },
                    "trend": "decrease",
                    "percentage": -7.6
                }
            }
        },
        "maintenanceHistory": {
            "title": "Bakım Geçmişi",
            "icon": "🔧",
            "count": 5,
            "data": [
                {
                    "id": "MNT-2025-0156",
                    "type": "Elektrik Arızası",
                    "category": "electrical",
                    "priority": "high",
                    "status": "in_progress",
                    "createdDate": "2025-07-25T14:30:00Z",
                    "assignedTo": "Ali Hassan",
                    "company": "Mahmoud Electrical Services",
                    "estimatedCompletion": "2025-07-30",
                    "description": "Mutfak prizlerinde elektrik yok"
                },
                {
                    "id": "MNT-2025-0134",
                    "type": "Su Sızıntısı",
                    "category": "plumbing",
                    "priority": "medium",
                    "status": "completed",
                    "createdDate": "2025-07-15T09:15:00Z",
                    "completedDate": "2025-07-16T16:45:00Z",
                    "assignedTo": "Mohammed Ali",
                    "company": "Baghdad Plumbing Co.",
                    "cost": 75000,
                    "currency": "IQD",
                    "description": "Banyo lavabo altında sızıntı"
                }
            ]
        },
        "visitorHistory": {
            "title": "Ziyaretçi Geçmişi",
            "icon": "👥",
            "period": "last_30_days",
            "count": 12,
            "data": [
                {
                    "id": "VIS-2025-0789",
                    "visitorName": "Fatima Al-Zahra",
                    "visitorPhone": "+964 750 555 9999",
                    "visitDate": "2025-07-28T15:30:00Z",
                    "exitDate": "2025-07-28T18:45:00Z",
                    "duration": "3h 15m",
                    "purpose": "Sosyal Ziyaret",
                    "authorizedBy": "Sara Hassan Al-Mahmoud",
                    "qrCode": "QR789456123",
                    "status": "completed"
                },
                {
                    "id": "VIS-2025-0756",
                    "visitorName": "Delivery - Talabat",
                    "visitDate": "2025-07-27T12:15:00Z",
                    "exitDate": "2025-07-27T12:25:00Z",
                    "duration": "10m",
                    "purpose": "Teslimat",
                    "authorizedBy": "Omar Hassan Al-Mahmoud",
                    "qrCode": "QR789123456",
                    "status": "completed"
                }
            ]
        },
        "notes": {
            "title": "Notlar ve Özel Durumlar",
            "icon": "📝",
            "data": {
                "generalNotes": {
                    "label": "Genel Notlar",
                    "value": "Bu daire kiralık olup, kira sözleşmesi 31/12/2024 tarihinde sona erecektir. Kiracı düzenli ödeme yapan güvenilir bir müşteridir.",
                    "type": "textarea",
                    "maxLength": 1000
                },
                "maintenanceNotes": {
                    "label": "Bakım Notları",
                    "value": "Elektrik sayacında geçen ay küçük bir arıza yaşanmış ancak giderilmiştir. Düzenli kontrol gerekli.",
                    "type": "textarea",
                    "maxLength": 1000
                },
                "specialRequests": {
                    "label": "Özel İstekler",
                    "value": "Sakin yaşlı annesi ile yaşadığı için acil durumlarda öncelik verilmeli.",
                    "type": "textarea",
                    "maxLength": 1000
                },
                "accessRestrictions": {
                    "label": "Erişim Kısıtlamaları",
                    "value": "",
                    "type": "textarea",
                    "maxLength": 500
                }
            }
        },
        "documents": {
            "title": "Belgeler",
            "icon": "📄",
            "data": [
                {
                    "id": "DOC-001",
                    "name": "Kira Sözleşmesi",
                    "type": "contract",
                    "format": "PDF",
                    "size": "2.3 MB",
                    "uploadDate": "2024-01-01T10:00:00Z",
                    "expiryDate": "2024-12-31",
                    "status": "active",
                    "downloadUrl": "/documents/lease-contract-a101.pdf"
                },
                {
                    "id": "DOC-002",
                    "name": "Malik Kimlik Fotokopisi",
                    "type": "identity",
                    "format": "PDF",
                    "size": "1.1 MB",
                    "uploadDate": "2024-01-01T10:00:00Z",
                    "status": "active",
                    "downloadUrl": "/documents/owner-id-a101.pdf"
                },
                {
                    "id": "DOC-003",
                    "name": "Daire Teslim Tutanağı",
                    "type": "handover",
                    "format": "PDF",
                    "size": "3.8 MB",
                    "uploadDate": "2024-01-01T10:00:00Z",
                    "status": "active",
                    "downloadUrl": "/documents/handover-a101.pdf"
                }
            ]
        },
        "permissions": {
            "canEdit": true,
            "canDelete": false,
            "canViewFinancials": true,
            "canManageResidents": true,
            "canAccessDocuments": true,
            "role": "admin"
        },
        "systemInfo": {
            "createdBy": "System Admin",
            "createdDate": "2024-01-15T10:30:00Z",
            "lastModifiedBy": "Apartment Manager",
            "lastModifiedDate": "2025-07-28T14:20:00Z",
            "version": "1.7",
            "syncStatus": "synced",
            "backupDate": "2025-07-28T02:00:00Z"
        }
    }
}
</file>

<file path="docs/page-structure/request-detail-view.json">
{
    "serviceRequestsList": {
        "pageInfo": {
            "title": "Hizmet Talepleri",
            "subtitle": "Bakım ve Arıza Yönetimi",
            "icon": "🔧",
            "lastUpdated": "2025-07-30T10:45:00Z"
        },
        "filters": {
            "search": {
                "placeholder": "Talep ID, açıklama veya daire numarası ile ara...",
                "value": "",
                "type": "text"
            },
            "status": {
                "label": "Durum",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Durumlar",
                        "count": 156
                    },
                    {
                        "value": "new",
                        "label": "Yeni",
                        "count": 23,
                        "color": "#3b82f6"
                    },
                    {
                        "value": "assigned",
                        "label": "Atandı",
                        "count": 18,
                        "color": "#f59e0b"
                    },
                    {
                        "value": "in_progress",
                        "label": "İşlemde",
                        "count": 31,
                        "color": "#8b5cf6"
                    },
                    {
                        "value": "waiting_parts",
                        "label": "Malzeme Bekliyor",
                        "count": 12,
                        "color": "#ef4444"
                    },
                    {
                        "value": "completed",
                        "label": "Tamamlandı",
                        "count": 67,
                        "color": "#10b981"
                    },
                    {
                        "value": "rejected",
                        "label": "Reddedildi",
                        "count": 5,
                        "color": "#6b7280"
                    }
                ]
            },
            "priority": {
                "label": "Öncelik",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Öncelikler",
                        "count": 156
                    },
                    {
                        "value": "emergency",
                        "label": "Acil",
                        "count": 8,
                        "color": "#dc2626",
                        "icon": "🚨"
                    },
                    {
                        "value": "high",
                        "label": "Yüksek",
                        "count": 24,
                        "color": "#ea580c",
                        "icon": "🔴"
                    },
                    {
                        "value": "medium",
                        "label": "Orta",
                        "count": 89,
                        "color": "#d97706",
                        "icon": "🟡"
                    },
                    {
                        "value": "low",
                        "label": "Düşük",
                        "count": 35,
                        "color": "#16a34a",
                        "icon": "🟢"
                    }
                ]
            },
            "category": {
                "label": "Kategori",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Kategoriler",
                        "count": 156
                    },
                    {
                        "value": "electrical",
                        "label": "Elektrik",
                        "count": 45,
                        "icon": "⚡"
                    },
                    {
                        "value": "plumbing",
                        "label": "Tesisatçı",
                        "count": 38,
                        "icon": "🚿"
                    },
                    {
                        "value": "hvac",
                        "label": "Klima/Havalandırma",
                        "count": 22,
                        "icon": "❄️"
                    },
                    {
                        "value": "general_maintenance",
                        "label": "Genel Bakım",
                        "count": 28,
                        "icon": "🔧"
                    },
                    {
                        "value": "cleaning",
                        "label": "Temizlik",
                        "count": 15,
                        "icon": "🧹"
                    },
                    {
                        "value": "security",
                        "label": "Güvenlik",
                        "count": 8,
                        "icon": "🔒"
                    }
                ]
            },
            "assignee": {
                "label": "Atanan Kişi",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Teknisyenler",
                        "count": 156
                    },
                    {
                        "value": "unassigned",
                        "label": "Atanmamış",
                        "count": 23,
                        "color": "#6b7280"
                    },
                    {
                        "value": "ali_hassan",
                        "label": "Ali Hassan",
                        "count": 34,
                        "company": "Mahmoud Electrical"
                    },
                    {
                        "value": "mohammed_ali",
                        "label": "Mohammed Ali",
                        "count": 28,
                        "company": "Baghdad Plumbing"
                    },
                    {
                        "value": "sara_ahmed",
                        "label": "Sara Ahmed",
                        "count": 19,
                        "company": "City HVAC Services"
                    },
                    {
                        "value": "omar_ibrahim",
                        "label": "Omar Ibrahim",
                        "count": 25,
                        "company": "General Maintenance Co."
                    }
                ]
            },
            "dateRange": {
                "label": "Tarih Aralığı",
                "startDate": "2025-07-01",
                "endDate": "2025-07-30",
                "type": "daterange",
                "presets": [
                    {
                        "value": "today",
                        "label": "Bugün"
                    },
                    {
                        "value": "yesterday",
                        "label": "Dün"
                    },
                    {
                        "value": "last_7_days",
                        "label": "Son 7 Gün"
                    },
                    {
                        "value": "last_30_days",
                        "label": "Son 30 Gün"
                    },
                    {
                        "value": "this_month",
                        "label": "Bu Ay"
                    },
                    {
                        "value": "last_month",
                        "label": "Geçen Ay"
                    }
                ]
            },
            "building": {
                "label": "Bina/Blok",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Bloklar",
                        "count": 156
                    },
                    {
                        "value": "block_a",
                        "label": "A Blok",
                        "count": 45
                    },
                    {
                        "value": "block_b",
                        "label": "B Blok",
                        "count": 38
                    },
                    {
                        "value": "block_c",
                        "label": "C Blok",
                        "count": 42
                    },
                    {
                        "value": "common_areas",
                        "label": "Ortak Alanlar",
                        "count": 31
                    }
                ]
            }
        },
        "summary": {
            "totalRequests": 156,
            "activeRequests": 84,
            "completedToday": 12,
            "overdueRequests": 8,
            "averageResponseTime": "4.2 saat",
            "averageCompletionTime": "2.3 gün",
            "satisfactionRate": 4.6
        },
        "quickStats": [
            {
                "label": "Yeni Talepler",
                "value": 23,
                "change": "+15%",
                "trend": "up",
                "color": "#3b82f6",
                "icon": "📝"
            },
            {
                "label": "İşlemde",
                "value": 31,
                "change": "+8%",
                "trend": "up",
                "color": "#8b5cf6",
                "icon": "⚙️"
            },
            {
                "label": "Tamamlanan",
                "value": 67,
                "change": "+23%",
                "trend": "up",
                "color": "#10b981",
                "icon": "✅"
            },
            {
                "label": "Gecikmiş",
                "value": 8,
                "change": "-12%",
                "trend": "down",
                "color": "#ef4444",
                "icon": "⏰"
            }
        ],
        "sortOptions": {
            "currentSort": "created_date_desc",
            "options": [
                {
                    "value": "created_date_desc",
                    "label": "En Yeni Önce"
                },
                {
                    "value": "created_date_asc",
                    "label": "En Eski Önce"
                },
                {
                    "value": "priority_desc",
                    "label": "Öncelik (Yüksek→Düşük)"
                },
                {
                    "value": "priority_asc",
                    "label": "Öncelik (Düşük→Yüksek)"
                },
                {
                    "value": "due_date_asc",
                    "label": "Vade Tarihi (Yakın→Uzak)"
                },
                {
                    "value": "status_asc",
                    "label": "Duruma Göre"
                },
                {
                    "value": "apartment_asc",
                    "label": "Daire Numarasına Göre"
                },
                {
                    "value": "last_updated_desc",
                    "label": "Son Güncelleme"
                }
            ]
        },
        "pagination": {
            "currentPage": 1,
            "totalPages": 8,
            "itemsPerPage": 20,
            "totalItems": 156,
            "showingFrom": 1,
            "showingTo": 20,
            "pageSizeOptions": [
                10,
                20,
                50,
                100
            ]
        },
        "bulkActions": {
            "enabled": true,
            "selectedCount": 0,
            "actions": [
                {
                    "id": "assign_technician",
                    "label": "Teknisyen Ata",
                    "icon": "👷",
                    "requiresSelection": true,
                    "confirmationRequired": false
                },
                {
                    "id": "change_priority",
                    "label": "Öncelik Değiştir",
                    "icon": "🔄",
                    "requiresSelection": true,
                    "confirmationRequired": false
                },
                {
                    "id": "export_selected",
                    "label": "Seçilenleri Dışa Aktar",
                    "icon": "📤",
                    "requiresSelection": true,
                    "confirmationRequired": false
                },
                {
                    "id": "mark_completed",
                    "label": "Tamamlandı Olarak İşaretle",
                    "icon": "✅",
                    "requiresSelection": true,
                    "confirmationRequired": true
                },
                {
                    "id": "delete_selected",
                    "label": "Seçilenleri Sil",
                    "icon": "🗑️",
                    "requiresSelection": true,
                    "confirmationRequired": true,
                    "dangerAction": true
                }
            ]
        },
        "tableColumns": [
            {
                "key": "select",
                "label": "",
                "width": "40px",
                "sortable": false,
                "type": "checkbox"
            },
            {
                "key": "requestId",
                "label": "Talep ID",
                "width": "120px",
                "sortable": true,
                "type": "link"
            },
            {
                "key": "title",
                "label": "Başlık",
                "width": "200px",
                "sortable": true,
                "type": "text"
            },
            {
                "key": "apartment",
                "label": "Daire",
                "width": "100px",
                "sortable": true,
                "type": "text"
            },
            {
                "key": "category",
                "label": "Kategori",
                "width": "120px",
                "sortable": true,
                "type": "badge"
            },
            {
                "key": "priority",
                "label": "Öncelik",
                "width": "100px",
                "sortable": true,
                "type": "badge"
            },
            {
                "key": "status",
                "label": "Durum",
                "width": "120px",
                "sortable": true,
                "type": "status"
            },
            {
                "key": "assignee",
                "label": "Teknisyen",
                "width": "150px",
                "sortable": true,
                "type": "user"
            },
            {
                "key": "createdDate",
                "label": "Oluşturma",
                "width": "120px",
                "sortable": true,
                "type": "datetime"
            },
            {
                "key": "dueDate",
                "label": "Vade",
                "width": "120px",
                "sortable": true,
                "type": "date"
            },
            {
                "key": "actions",
                "label": "İşlemler",
                "width": "100px",
                "sortable": false,
                "type": "actions"
            }
        ],
        "requests": [
            {
                "id": "TLP-2025-0156",
                "requestId": "TLP-2025-0156",
                "title": "Mutfak elektrik prizlerinde elektrik yok",
                "description": "Mutfaktaki elektrik prizlerinde elektrik yok. Dün akşamdan beri sorun devam ediyor.",
                "apartment": {
                    "number": "A-101",
                    "block": "A",
                    "floor": 1,
                    "owner": "Ahmed Mohammed Al-Rashid",
                    "tenant": "Sara Hassan Al-Mahmoud",
                    "phone": "+964 750 987 6543"
                },
                "category": {
                    "id": "electrical",
                    "label": "Elektrik",
                    "icon": "⚡",
                    "color": "#f59e0b"
                },
                "priority": {
                    "id": "high",
                    "label": "Yüksek",
                    "level": 3,
                    "color": "#ea580c",
                    "icon": "🔴"
                },
                "status": {
                    "id": "in_progress",
                    "label": "İşlemde",
                    "color": "#8b5cf6",
                    "bgColor": "#f3e8ff"
                },
                "assignee": {
                    "id": "ali_hassan",
                    "name": "Ali Hassan",
                    "company": "Mahmoud Electrical Services",
                    "phone": "+964 770 555 1234",
                    "avatar": "AH",
                    "rating": 4.8
                },
                "createdDate": "2025-07-25T14:30:00Z",
                "updatedDate": "2025-07-28T09:15:00Z",
                "dueDate": "2025-07-30T23:59:59Z",
                "estimatedCompletion": "2025-07-30T16:00:00Z",
                "responseTime": "18h 15m",
                "imagesCount": 3,
                "commentsCount": 4,
                "cost": {
                    "estimated": 125000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "acil",
                    "elektrik",
                    "mutfak"
                ],
                "isOverdue": false,
                "isUrgent": true,
                "hasImages": true,
                "hasComments": true
            },
            {
                "id": "TLP-2025-0155",
                "requestId": "TLP-2025-0155",
                "title": "Tuvalet sifonu çalışmıyor",
                "description": "Ana banyo tuvaletinde sifon çalışmıyor. Su gelmiyor.",
                "apartment": {
                    "number": "B-205",
                    "block": "B",
                    "floor": 2,
                    "owner": "Layla Omar Al-Najjar",
                    "tenant": null,
                    "phone": "+964 770 888 9999"
                },
                "category": {
                    "id": "plumbing",
                    "label": "Tesisatçı",
                    "icon": "🚿",
                    "color": "#06b6d4"
                },
                "priority": {
                    "id": "medium",
                    "label": "Orta",
                    "level": 2,
                    "color": "#d97706",
                    "icon": "🟡"
                },
                "status": {
                    "id": "assigned",
                    "label": "Atandı",
                    "color": "#f59e0b",
                    "bgColor": "#fef3c7"
                },
                "assignee": {
                    "id": "mohammed_ali",
                    "name": "Mohammed Ali",
                    "company": "Baghdad Plumbing Co.",
                    "phone": "+964 750 333 4444",
                    "avatar": "MA",
                    "rating": 4.9
                },
                "createdDate": "2025-07-28T08:20:00Z",
                "updatedDate": "2025-07-28T10:45:00Z",
                "dueDate": "2025-08-02T23:59:59Z",
                "estimatedCompletion": "2025-07-31T14:00:00Z",
                "responseTime": "2h 25m",
                "imagesCount": 2,
                "commentsCount": 1,
                "cost": {
                    "estimated": 85000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "tesisatçı",
                    "banyo",
                    "sifon"
                ],
                "isOverdue": false,
                "isUrgent": false,
                "hasImages": true,
                "hasComments": true
            },
            {
                "id": "TLP-2025-0154",
                "requestId": "TLP-2025-0154",
                "title": "Klima çalışmıyor - soğutma yok",
                "description": "Salon kliması açılıyor ama soğuk hava vermiyor. Gaz dolumu gerekebilir.",
                "apartment": {
                    "number": "C-308",
                    "block": "C",
                    "floor": 3,
                    "owner": "Hassan Ali Al-Mahmoud",
                    "tenant": "Maryam Hassan Al-Zahra",
                    "phone": "+964 750 111 2222"
                },
                "category": {
                    "id": "hvac",
                    "label": "Klima/Havalandırma",
                    "icon": "❄️",
                    "color": "#0ea5e9"
                },
                "priority": {
                    "id": "high",
                    "label": "Yüksek",
                    "level": 3,
                    "color": "#ea580c",
                    "icon": "🔴"
                },
                "status": {
                    "id": "completed",
                    "label": "Tamamlandı",
                    "color": "#10b981",
                    "bgColor": "#d1fae5"
                },
                "assignee": {
                    "id": "sara_ahmed",
                    "name": "Sara Ahmed",
                    "company": "City HVAC Services",
                    "phone": "+964 770 777 8888",
                    "avatar": "SA",
                    "rating": 4.7
                },
                "createdDate": "2025-07-26T11:15:00Z",
                "updatedDate": "2025-07-29T15:30:00Z",
                "dueDate": "2025-08-01T23:59:59Z",
                "estimatedCompletion": "2025-07-29T16:00:00Z",
                "completedDate": "2025-07-29T15:30:00Z",
                "responseTime": "4h 30m",
                "completionTime": "3d 4h 15m",
                "imagesCount": 1,
                "commentsCount": 6,
                "cost": {
                    "estimated": 200000,
                    "actual": 180000,
                    "currency": "IQD"
                },
                "customerRating": 5,
                "tags": [
                    "klima",
                    "gaz",
                    "salon"
                ],
                "isOverdue": false,
                "isUrgent": false,
                "hasImages": true,
                "hasComments": true
            },
            {
                "id": "TLP-2025-0153",
                "requestId": "TLP-2025-0153",
                "title": "Ortak alan temizliği - merdiven",
                "description": "3. kat merdivenlerinde temizlik gerekli. Leke ve kir birikimi var.",
                "apartment": {
                    "number": "Ortak Alan",
                    "block": "B",
                    "floor": 3,
                    "owner": null,
                    "tenant": null,
                    "phone": null
                },
                "category": {
                    "id": "cleaning",
                    "label": "Temizlik",
                    "icon": "🧹",
                    "color": "#84cc16"
                },
                "priority": {
                    "id": "low",
                    "label": "Düşük",
                    "level": 1,
                    "color": "#16a34a",
                    "icon": "🟢"
                },
                "status": {
                    "id": "new",
                    "label": "Yeni",
                    "color": "#3b82f6",
                    "bgColor": "#dbeafe"
                },
                "assignee": null,
                "createdDate": "2025-07-29T16:45:00Z",
                "updatedDate": "2025-07-29T16:45:00Z",
                "dueDate": "2025-08-05T23:59:59Z",
                "estimatedCompletion": null,
                "responseTime": null,
                "imagesCount": 0,
                "commentsCount": 0,
                "cost": {
                    "estimated": 50000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "temizlik",
                    "ortak alan",
                    "merdiven"
                ],
                "isOverdue": false,
                "isUrgent": false,
                "hasImages": false,
                "hasComments": false
            },
            {
                "id": "TLP-2025-0152",
                "requestId": "TLP-2025-0152",
                "title": "Giriş kapısı kilidi arızalı",
                "description": "Ana giriş kapısının elektronik kilidi çalışmıyor. Kart okuyucu yanıt vermiyor.",
                "apartment": {
                    "number": "Ortak Alan",
                    "block": "Giriş",
                    "floor": 0,
                    "owner": null,
                    "tenant": null,
                    "phone": null
                },
                "category": {
                    "id": "security",
                    "label": "Güvenlik",
                    "icon": "🔒",
                    "color": "#dc2626"
                },
                "priority": {
                    "id": "emergency",
                    "label": "Acil",
                    "level": 4,
                    "color": "#dc2626",
                    "icon": "🚨"
                },
                "status": {
                    "id": "waiting_parts",
                    "label": "Malzeme Bekliyor",
                    "color": "#ef4444",
                    "bgColor": "#fee2e2"
                },
                "assignee": {
                    "id": "omar_ibrahim",
                    "name": "Omar Ibrahim",
                    "company": "Security Systems Iraq",
                    "phone": "+964 770 444 5555",
                    "avatar": "OI",
                    "rating": 4.6
                },
                "createdDate": "2025-07-24T22:30:00Z",
                "updatedDate": "2025-07-28T14:20:00Z",
                "dueDate": "2025-07-26T23:59:59Z",
                "estimatedCompletion": "2025-08-02T10:00:00Z",
                "responseTime": "45m",
                "imagesCount": 2,
                "commentsCount": 8,
                "cost": {
                    "estimated": 350000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "güvenlik",
                    "kilit",
                    "acil",
                    "elektronik"
                ],
                "isOverdue": true,
                "isUrgent": true,
                "hasImages": true,
                "hasComments": true
            }
        ],
        "exportOptions": {
            "formats": [
                {
                    "value": "excel",
                    "label": "Excel (.xlsx)",
                    "icon": "📊"
                },
                {
                    "value": "pdf",
                    "label": "PDF Raporu",
                    "icon": "📄"
                },
                {
                    "value": "csv",
                    "label": "CSV Dosyası",
                    "icon": "📋"
                }
            ],
            "includeOptions": [
                {
                    "key": "basic_info",
                    "label": "Temel Bilgiler",
                    "default": true
                },
                {
                    "key": "assignee_info",
                    "label": "Teknisyen Bilgileri",
                    "default": true
                },
                {
                    "key": "cost_info",
                    "label": "Maliyet Bilgileri",
                    "default": false
                },
                {
                    "key": "comments",
                    "label": "Yorumlar",
                    "default": false
                },
                {
                    "key": "images",
                    "label": "Fotoğraflar",
                    "default": false
                }
            ]
        },
        "permissions": {
            "canCreate": true,
            "canEdit": true,
            "canDelete": true,
            "canAssign": true,
            "canExport": true,
            "canViewCosts": true,
            "canBulkEdit": true,
            "role": "admin"
        }
    }
}
</file>

<file path="docs/page-structure/request-list-view.json">
{
    "serviceRequestsList": {
        "pageInfo": {
            "title": "Hizmet Talepleri",
            "subtitle": "Bakım ve Arıza Yönetimi",
            "icon": "🔧",
            "lastUpdated": "2025-07-30T10:45:00Z"
        },
        "filters": {
            "search": {
                "placeholder": "Talep ID, açıklama veya daire numarası ile ara...",
                "value": "",
                "type": "text"
            },
            "status": {
                "label": "Durum",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Durumlar",
                        "count": 156
                    },
                    {
                        "value": "new",
                        "label": "Yeni",
                        "count": 23,
                        "color": "#3b82f6"
                    },
                    {
                        "value": "assigned",
                        "label": "Atandı",
                        "count": 18,
                        "color": "#f59e0b"
                    },
                    {
                        "value": "in_progress",
                        "label": "İşlemde",
                        "count": 31,
                        "color": "#8b5cf6"
                    },
                    {
                        "value": "waiting_parts",
                        "label": "Malzeme Bekliyor",
                        "count": 12,
                        "color": "#ef4444"
                    },
                    {
                        "value": "completed",
                        "label": "Tamamlandı",
                        "count": 67,
                        "color": "#10b981"
                    },
                    {
                        "value": "rejected",
                        "label": "Reddedildi",
                        "count": 5,
                        "color": "#6b7280"
                    }
                ]
            },
            "priority": {
                "label": "Öncelik",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Öncelikler",
                        "count": 156
                    },
                    {
                        "value": "emergency",
                        "label": "Acil",
                        "count": 8,
                        "color": "#dc2626",
                        "icon": "🚨"
                    },
                    {
                        "value": "high",
                        "label": "Yüksek",
                        "count": 24,
                        "color": "#ea580c",
                        "icon": "🔴"
                    },
                    {
                        "value": "medium",
                        "label": "Orta",
                        "count": 89,
                        "color": "#d97706",
                        "icon": "🟡"
                    },
                    {
                        "value": "low",
                        "label": "Düşük",
                        "count": 35,
                        "color": "#16a34a",
                        "icon": "🟢"
                    }
                ]
            },
            "category": {
                "label": "Kategori",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Kategoriler",
                        "count": 156
                    },
                    {
                        "value": "electrical",
                        "label": "Elektrik",
                        "count": 45,
                        "icon": "⚡"
                    },
                    {
                        "value": "plumbing",
                        "label": "Tesisatçı",
                        "count": 38,
                        "icon": "🚿"
                    },
                    {
                        "value": "hvac",
                        "label": "Klima/Havalandırma",
                        "count": 22,
                        "icon": "❄️"
                    },
                    {
                        "value": "general_maintenance",
                        "label": "Genel Bakım",
                        "count": 28,
                        "icon": "🔧"
                    },
                    {
                        "value": "cleaning",
                        "label": "Temizlik",
                        "count": 15,
                        "icon": "🧹"
                    },
                    {
                        "value": "security",
                        "label": "Güvenlik",
                        "count": 8,
                        "icon": "🔒"
                    }
                ]
            },
            "assignee": {
                "label": "Atanan Kişi",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Teknisyenler",
                        "count": 156
                    },
                    {
                        "value": "unassigned",
                        "label": "Atanmamış",
                        "count": 23,
                        "color": "#6b7280"
                    },
                    {
                        "value": "ali_hassan",
                        "label": "Ali Hassan",
                        "count": 34,
                        "company": "Mahmoud Electrical"
                    },
                    {
                        "value": "mohammed_ali",
                        "label": "Mohammed Ali",
                        "count": 28,
                        "company": "Baghdad Plumbing"
                    },
                    {
                        "value": "sara_ahmed",
                        "label": "Sara Ahmed",
                        "count": 19,
                        "company": "City HVAC Services"
                    },
                    {
                        "value": "omar_ibrahim",
                        "label": "Omar Ibrahim",
                        "count": 25,
                        "company": "General Maintenance Co."
                    }
                ]
            },
            "dateRange": {
                "label": "Tarih Aralığı",
                "startDate": "2025-07-01",
                "endDate": "2025-07-30",
                "type": "daterange",
                "presets": [
                    {
                        "value": "today",
                        "label": "Bugün"
                    },
                    {
                        "value": "yesterday",
                        "label": "Dün"
                    },
                    {
                        "value": "last_7_days",
                        "label": "Son 7 Gün"
                    },
                    {
                        "value": "last_30_days",
                        "label": "Son 30 Gün"
                    },
                    {
                        "value": "this_month",
                        "label": "Bu Ay"
                    },
                    {
                        "value": "last_month",
                        "label": "Geçen Ay"
                    }
                ]
            },
            "building": {
                "label": "Bina/Blok",
                "value": "all",
                "type": "select",
                "options": [
                    {
                        "value": "all",
                        "label": "Tüm Bloklar",
                        "count": 156
                    },
                    {
                        "value": "block_a",
                        "label": "A Blok",
                        "count": 45
                    },
                    {
                        "value": "block_b",
                        "label": "B Blok",
                        "count": 38
                    },
                    {
                        "value": "block_c",
                        "label": "C Blok",
                        "count": 42
                    },
                    {
                        "value": "common_areas",
                        "label": "Ortak Alanlar",
                        "count": 31
                    }
                ]
            }
        },
        "summary": {
            "totalRequests": 156,
            "activeRequests": 84,
            "completedToday": 12,
            "overdueRequests": 8,
            "averageResponseTime": "4.2 saat",
            "averageCompletionTime": "2.3 gün",
            "satisfactionRate": 4.6
        },
        "quickStats": [
            {
                "label": "Yeni Talepler",
                "value": 23,
                "change": "+15%",
                "trend": "up",
                "color": "#3b82f6",
                "icon": "📝"
            },
            {
                "label": "İşlemde",
                "value": 31,
                "change": "+8%",
                "trend": "up",
                "color": "#8b5cf6",
                "icon": "⚙️"
            },
            {
                "label": "Tamamlanan",
                "value": 67,
                "change": "+23%",
                "trend": "up",
                "color": "#10b981",
                "icon": "✅"
            },
            {
                "label": "Gecikmiş",
                "value": 8,
                "change": "-12%",
                "trend": "down",
                "color": "#ef4444",
                "icon": "⏰"
            }
        ],
        "sortOptions": {
            "currentSort": "created_date_desc",
            "options": [
                {
                    "value": "created_date_desc",
                    "label": "En Yeni Önce"
                },
                {
                    "value": "created_date_asc",
                    "label": "En Eski Önce"
                },
                {
                    "value": "priority_desc",
                    "label": "Öncelik (Yüksek→Düşük)"
                },
                {
                    "value": "priority_asc",
                    "label": "Öncelik (Düşük→Yüksek)"
                },
                {
                    "value": "due_date_asc",
                    "label": "Vade Tarihi (Yakın→Uzak)"
                },
                {
                    "value": "status_asc",
                    "label": "Duruma Göre"
                },
                {
                    "value": "apartment_asc",
                    "label": "Daire Numarasına Göre"
                },
                {
                    "value": "last_updated_desc",
                    "label": "Son Güncelleme"
                }
            ]
        },
        "pagination": {
            "currentPage": 1,
            "totalPages": 8,
            "itemsPerPage": 20,
            "totalItems": 156,
            "showingFrom": 1,
            "showingTo": 20,
            "pageSizeOptions": [
                10,
                20,
                50,
                100
            ]
        },
        "bulkActions": {
            "enabled": true,
            "selectedCount": 0,
            "actions": [
                {
                    "id": "assign_technician",
                    "label": "Teknisyen Ata",
                    "icon": "👷",
                    "requiresSelection": true,
                    "confirmationRequired": false
                },
                {
                    "id": "change_priority",
                    "label": "Öncelik Değiştir",
                    "icon": "🔄",
                    "requiresSelection": true,
                    "confirmationRequired": false
                },
                {
                    "id": "export_selected",
                    "label": "Seçilenleri Dışa Aktar",
                    "icon": "📤",
                    "requiresSelection": true,
                    "confirmationRequired": false
                },
                {
                    "id": "mark_completed",
                    "label": "Tamamlandı Olarak İşaretle",
                    "icon": "✅",
                    "requiresSelection": true,
                    "confirmationRequired": true
                },
                {
                    "id": "delete_selected",
                    "label": "Seçilenleri Sil",
                    "icon": "🗑️",
                    "requiresSelection": true,
                    "confirmationRequired": true,
                    "dangerAction": true
                }
            ]
        },
        "tableColumns": [
            {
                "key": "select",
                "label": "",
                "width": "40px",
                "sortable": false,
                "type": "checkbox"
            },
            {
                "key": "requestId",
                "label": "Talep ID",
                "width": "120px",
                "sortable": true,
                "type": "link"
            },
            {
                "key": "title",
                "label": "Başlık",
                "width": "200px",
                "sortable": true,
                "type": "text"
            },
            {
                "key": "apartment",
                "label": "Daire",
                "width": "100px",
                "sortable": true,
                "type": "text"
            },
            {
                "key": "category",
                "label": "Kategori",
                "width": "120px",
                "sortable": true,
                "type": "badge"
            },
            {
                "key": "priority",
                "label": "Öncelik",
                "width": "100px",
                "sortable": true,
                "type": "badge"
            },
            {
                "key": "status",
                "label": "Durum",
                "width": "120px",
                "sortable": true,
                "type": "status"
            },
            {
                "key": "assignee",
                "label": "Teknisyen",
                "width": "150px",
                "sortable": true,
                "type": "user"
            },
            {
                "key": "createdDate",
                "label": "Oluşturma",
                "width": "120px",
                "sortable": true,
                "type": "datetime"
            },
            {
                "key": "dueDate",
                "label": "Vade",
                "width": "120px",
                "sortable": true,
                "type": "date"
            },
            {
                "key": "actions",
                "label": "İşlemler",
                "width": "100px",
                "sortable": false,
                "type": "actions"
            }
        ],
        "requests": [
            {
                "id": "TLP-2025-0156",
                "requestId": "TLP-2025-0156",
                "title": "Mutfak elektrik prizlerinde elektrik yok",
                "description": "Mutfaktaki elektrik prizlerinde elektrik yok. Dün akşamdan beri sorun devam ediyor.",
                "apartment": {
                    "number": "A-101",
                    "block": "A",
                    "floor": 1,
                    "owner": "Ahmed Mohammed Al-Rashid",
                    "tenant": "Sara Hassan Al-Mahmoud",
                    "phone": "+964 750 987 6543"
                },
                "category": {
                    "id": "electrical",
                    "label": "Elektrik",
                    "icon": "⚡",
                    "color": "#f59e0b"
                },
                "priority": {
                    "id": "high",
                    "label": "Yüksek",
                    "level": 3,
                    "color": "#ea580c",
                    "icon": "🔴"
                },
                "status": {
                    "id": "in_progress",
                    "label": "İşlemde",
                    "color": "#8b5cf6",
                    "bgColor": "#f3e8ff"
                },
                "assignee": {
                    "id": "ali_hassan",
                    "name": "Ali Hassan",
                    "company": "Mahmoud Electrical Services",
                    "phone": "+964 770 555 1234",
                    "avatar": "AH",
                    "rating": 4.8
                },
                "createdDate": "2025-07-25T14:30:00Z",
                "updatedDate": "2025-07-28T09:15:00Z",
                "dueDate": "2025-07-30T23:59:59Z",
                "estimatedCompletion": "2025-07-30T16:00:00Z",
                "responseTime": "18h 15m",
                "imagesCount": 3,
                "commentsCount": 4,
                "cost": {
                    "estimated": 125000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "acil",
                    "elektrik",
                    "mutfak"
                ],
                "isOverdue": false,
                "isUrgent": true,
                "hasImages": true,
                "hasComments": true
            },
            {
                "id": "TLP-2025-0155",
                "requestId": "TLP-2025-0155",
                "title": "Tuvalet sifonu çalışmıyor",
                "description": "Ana banyo tuvaletinde sifon çalışmıyor. Su gelmiyor.",
                "apartment": {
                    "number": "B-205",
                    "block": "B",
                    "floor": 2,
                    "owner": "Layla Omar Al-Najjar",
                    "tenant": null,
                    "phone": "+964 770 888 9999"
                },
                "category": {
                    "id": "plumbing",
                    "label": "Tesisatçı",
                    "icon": "🚿",
                    "color": "#06b6d4"
                },
                "priority": {
                    "id": "medium",
                    "label": "Orta",
                    "level": 2,
                    "color": "#d97706",
                    "icon": "🟡"
                },
                "status": {
                    "id": "assigned",
                    "label": "Atandı",
                    "color": "#f59e0b",
                    "bgColor": "#fef3c7"
                },
                "assignee": {
                    "id": "mohammed_ali",
                    "name": "Mohammed Ali",
                    "company": "Baghdad Plumbing Co.",
                    "phone": "+964 750 333 4444",
                    "avatar": "MA",
                    "rating": 4.9
                },
                "createdDate": "2025-07-28T08:20:00Z",
                "updatedDate": "2025-07-28T10:45:00Z",
                "dueDate": "2025-08-02T23:59:59Z",
                "estimatedCompletion": "2025-07-31T14:00:00Z",
                "responseTime": "2h 25m",
                "imagesCount": 2,
                "commentsCount": 1,
                "cost": {
                    "estimated": 85000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "tesisatçı",
                    "banyo",
                    "sifon"
                ],
                "isOverdue": false,
                "isUrgent": false,
                "hasImages": true,
                "hasComments": true
            },
            {
                "id": "TLP-2025-0154",
                "requestId": "TLP-2025-0154",
                "title": "Klima çalışmıyor - soğutma yok",
                "description": "Salon kliması açılıyor ama soğuk hava vermiyor. Gaz dolumu gerekebilir.",
                "apartment": {
                    "number": "C-308",
                    "block": "C",
                    "floor": 3,
                    "owner": "Hassan Ali Al-Mahmoud",
                    "tenant": "Maryam Hassan Al-Zahra",
                    "phone": "+964 750 111 2222"
                },
                "category": {
                    "id": "hvac",
                    "label": "Klima/Havalandırma",
                    "icon": "❄️",
                    "color": "#0ea5e9"
                },
                "priority": {
                    "id": "high",
                    "label": "Yüksek",
                    "level": 3,
                    "color": "#ea580c",
                    "icon": "🔴"
                },
                "status": {
                    "id": "completed",
                    "label": "Tamamlandı",
                    "color": "#10b981",
                    "bgColor": "#d1fae5"
                },
                "assignee": {
                    "id": "sara_ahmed",
                    "name": "Sara Ahmed",
                    "company": "City HVAC Services",
                    "phone": "+964 770 777 8888",
                    "avatar": "SA",
                    "rating": 4.7
                },
                "createdDate": "2025-07-26T11:15:00Z",
                "updatedDate": "2025-07-29T15:30:00Z",
                "dueDate": "2025-08-01T23:59:59Z",
                "estimatedCompletion": "2025-07-29T16:00:00Z",
                "completedDate": "2025-07-29T15:30:00Z",
                "responseTime": "4h 30m",
                "completionTime": "3d 4h 15m",
                "imagesCount": 1,
                "commentsCount": 6,
                "cost": {
                    "estimated": 200000,
                    "actual": 180000,
                    "currency": "IQD"
                },
                "customerRating": 5,
                "tags": [
                    "klima",
                    "gaz",
                    "salon"
                ],
                "isOverdue": false,
                "isUrgent": false,
                "hasImages": true,
                "hasComments": true
            },
            {
                "id": "TLP-2025-0153",
                "requestId": "TLP-2025-0153",
                "title": "Ortak alan temizliği - merdiven",
                "description": "3. kat merdivenlerinde temizlik gerekli. Leke ve kir birikimi var.",
                "apartment": {
                    "number": "Ortak Alan",
                    "block": "B",
                    "floor": 3,
                    "owner": null,
                    "tenant": null,
                    "phone": null
                },
                "category": {
                    "id": "cleaning",
                    "label": "Temizlik",
                    "icon": "🧹",
                    "color": "#84cc16"
                },
                "priority": {
                    "id": "low",
                    "label": "Düşük",
                    "level": 1,
                    "color": "#16a34a",
                    "icon": "🟢"
                },
                "status": {
                    "id": "new",
                    "label": "Yeni",
                    "color": "#3b82f6",
                    "bgColor": "#dbeafe"
                },
                "assignee": null,
                "createdDate": "2025-07-29T16:45:00Z",
                "updatedDate": "2025-07-29T16:45:00Z",
                "dueDate": "2025-08-05T23:59:59Z",
                "estimatedCompletion": null,
                "responseTime": null,
                "imagesCount": 0,
                "commentsCount": 0,
                "cost": {
                    "estimated": 50000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "temizlik",
                    "ortak alan",
                    "merdiven"
                ],
                "isOverdue": false,
                "isUrgent": false,
                "hasImages": false,
                "hasComments": false
            },
            {
                "id": "TLP-2025-0152",
                "requestId": "TLP-2025-0152",
                "title": "Giriş kapısı kilidi arızalı",
                "description": "Ana giriş kapısının elektronik kilidi çalışmıyor. Kart okuyucu yanıt vermiyor.",
                "apartment": {
                    "number": "Ortak Alan",
                    "block": "Giriş",
                    "floor": 0,
                    "owner": null,
                    "tenant": null,
                    "phone": null
                },
                "category": {
                    "id": "security",
                    "label": "Güvenlik",
                    "icon": "🔒",
                    "color": "#dc2626"
                },
                "priority": {
                    "id": "emergency",
                    "label": "Acil",
                    "level": 4,
                    "color": "#dc2626",
                    "icon": "🚨"
                },
                "status": {
                    "id": "waiting_parts",
                    "label": "Malzeme Bekliyor",
                    "color": "#ef4444",
                    "bgColor": "#fee2e2"
                },
                "assignee": {
                    "id": "omar_ibrahim",
                    "name": "Omar Ibrahim",
                    "company": "Security Systems Iraq",
                    "phone": "+964 770 444 5555",
                    "avatar": "OI",
                    "rating": 4.6
                },
                "createdDate": "2025-07-24T22:30:00Z",
                "updatedDate": "2025-07-28T14:20:00Z",
                "dueDate": "2025-07-26T23:59:59Z",
                "estimatedCompletion": "2025-08-02T10:00:00Z",
                "responseTime": "45m",
                "imagesCount": 2,
                "commentsCount": 8,
                "cost": {
                    "estimated": 350000,
                    "actual": null,
                    "currency": "IQD"
                },
                "tags": [
                    "güvenlik",
                    "kilit",
                    "acil",
                    "elektronik"
                ],
                "isOverdue": true,
                "isUrgent": true,
                "hasImages": true,
                "hasComments": true
            }
        ],
        "exportOptions": {
            "formats": [
                {
                    "value": "excel",
                    "label": "Excel (.xlsx)",
                    "icon": "📊"
                },
                {
                    "value": "pdf",
                    "label": "PDF Raporu",
                    "icon": "📄"
                },
                {
                    "value": "csv",
                    "label": "CSV Dosyası",
                    "icon": "📋"
                }
            ],
            "includeOptions": [
                {
                    "key": "basic_info",
                    "label": "Temel Bilgiler",
                    "default": true
                },
                {
                    "key": "assignee_info",
                    "label": "Teknisyen Bilgileri",
                    "default": true
                },
                {
                    "key": "cost_info",
                    "label": "Maliyet Bilgileri",
                    "default": false
                },
                {
                    "key": "comments",
                    "label": "Yorumlar",
                    "default": false
                },
                {
                    "key": "images",
                    "label": "Fotoğraflar",
                    "default": false
                }
            ]
        },
        "permissions": {
            "canCreate": true,
            "canEdit": true,
            "canDelete": true,
            "canAssign": true,
            "canExport": true,
            "canViewCosts": true,
            "canBulkEdit": true,
            "role": "admin"
        }
    }
}
</file>

<file path="docs/api-requirements-resident-detail.md">
# Sakin Detay Sayfası - Eksik API Endpointleri

## 🎯 Genel Bakış
Sakin detay sayfası için yeni tasarım ile birlikte aşağıdaki API endpointleri geliştirilmelidir.

## 📋 Gerekli Endpointler

### 1. Aile Üyeleri Yönetimi

#### 1.1 Aile Üyelerini Listele
```http
GET /admin/residents/{residentId}/family
```

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id": "string",
      "fullName": "string",
      "firstName": "string", 
      "lastName": "string",
      "relationship": "string", // "Eş", "Çocuk", "Anne", "Baba", etc.
      "age": number,
      "birthDate": "string", // ISO date
      "phone": "string",
      "email": "string",
      "isMinor": boolean,
      "profileImage": "string", // URL
      "nationalId": "string",
      "createdAt": "string",
      "updatedAt": "string"
    }
  ]
}
```

#### 1.2 Aile Üyesi Ekle
```http
POST /admin/residents/{residentId}/family
```

**Request Body:**
```json
{
  "firstName": "string",
  "lastName": "string", 
  "relationship": "string",
  "birthDate": "string",
  "phone": "string",
  "email": "string",
  "nationalId": "string",
  "profileImage": "string"
}
```

#### 1.3 Aile Üyesi Güncelle
```http
PUT /admin/residents/{residentId}/family/{familyMemberId}
```

#### 1.4 Aile Üyesi Sil
```http
DELETE /admin/residents/{residentId}/family/{familyMemberId}
```

---

### 2. Villa Bilgileri

#### 2.1 Villa Bilgilerini Getir
```http
GET /admin/residents/{residentId}/villa
```

**Response:**
```json
{
  "success": true,
  "data": {
    "id": "string",
    "name": "string", // "VILLA-001"
    "block": "string", // "A Blok"
    "apartment": "string",
    "type": "string", // "Malik", "Kiracı"
    "startDate": "string", // "15.01.2023"
    "endDate": "string",
    "contractNumber": "string", // "KNT-2023-001"
    "contractStatus": "string", // "Aktif", "Sona Erdi", "İptal"
    "monthlyFee": number,
    "deposit": number,
    "unitDetails": {
      "roomCount": number,
      "floor": number,
      "area": number, // m²
      "hasBalcony": boolean,
      "hasGarden": boolean,
      "hasParkingSpace": boolean
    }
  }
}
```

---

### 3. Acil Durum Bilgileri

#### 3.1 Acil Durum Bilgilerini Getir
```http
GET /admin/residents/{residentId}/emergency-contact
```

**Response:**
```json
{
  "success": true,
  "data": {
    "id": "string",
    "name": "string",
    "relationship": "string", // "Eş", "Çocuk", "Anne", etc.
    "phone": "string",
    "alternativePhone": "string",
    "email": "string",
    "address": "string",
    "medicalInfo": {
      "allergies": "string",
      "medications": "string",
      "medicalConditions": "string",
      "bloodType": "string",
      "doctorName": "string",
      "doctorPhone": "string",
      "hospitalPreference": "string"
    },
    "specialNotes": "string",
    "createdAt": "string",
    "updatedAt": "string"
  }
}
```

#### 3.2 Acil Durum Bilgilerini Güncelle
```http
PUT /admin/residents/{residentId}/emergency-contact
```

**Request Body:** (Same as response data structure)

---

### 4. QR Kod Yönetimi

#### 4.1 Erişim QR Kodu Oluştur
```http
POST /admin/residents/{residentId}/generate-qr
```

**Request Body:**
```json
{
  "type": "string", // "access", "visitor", "emergency"
  "validUntil": "string", // ISO date, opsiyonel
  "purpose": "string", // "Daimi Erişim", "Ziyaretçi", etc.
  "restrictions": {
    "timeSlots": ["string"], // ["09:00-18:00"]
    "areas": ["string"], // ["pool", "gym", "garden"]
    "maxUsage": number
  }
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "qrCode": "string", // Base64 encoded QR image
    "qrCodeUrl": "string", // Direct URL to QR image
    "accessToken": "string",
    "validUntil": "string",
    "qrCodeData": "string", // The actual QR code data
    "downloadUrl": "string" // PDF download link
  }
}
```

#### 4.2 QR Kod Geçmişi
```http
GET /admin/residents/{residentId}/qr-codes
```

---

### 5. Ödeme Geçmişi

#### 5.1 Ödeme Geçmişini Getir
```http
GET /admin/residents/{residentId}/payment-history
```

**Query Parameters:**
- `page`: number (default: 1)
- `limit`: number (default: 20)
- `startDate`: string (ISO date)
- `endDate`: string (ISO date)
- `status`: string ("paid", "pending", "overdue")

**Response:**
```json
{
  "success": true,
  "data": {
    "payments": [
      {
        "id": "string",
        "date": "string",
        "amount": number,
        "description": "string",
        "type": "string", // "monthly_fee", "maintenance", "penalty"
        "status": "string", // "paid", "pending", "overdue"
        "paymentMethod": "string", // "credit_card", "bank_transfer", "cash"
        "referenceNumber": "string",
        "dueDate": "string",
        "paidDate": "string",
        "createdAt": "string"
      }
    ],
    "pagination": {
      "page": number,
      "limit": number,
      "total": number,
      "totalPages": number
    },
    "summary": {
      "totalPaid": number,
      "totalPending": number,
      "totalOverdue": number,
      "lastPaymentDate": "string",
      "nextDueDate": "string"
    }
  }
}
```

---

### 6. Belge Yönetimi

#### 6.1 Tüm Belgeleri Zip Olarak İndir
```http
GET /admin/residents/{residentId}/documents/download-all
```

**Response:** ZIP file download

#### 6.2 Belge Yükle
```http
POST /admin/residents/{residentId}/documents
```

**Request:** Multipart form data
- `file`: File
- `type`: string ("national_id", "ownership_document", "contract", "other")
- `description`: string

---

### 7. Aktivite ve Talep Yönetimi

#### 7.1 Bakım Talebi Oluştur
```http
POST /admin/residents/{residentId}/maintenance-requests
```

**Request Body:**
```json
{
  "title": "string",
  "description": "string",
  "category": "string", // "plumbing", "electrical", "general"
  "priority": "string", // "low", "medium", "high", "urgent"
  "location": "string", // "kitchen", "bathroom", "living_room"
  "images": ["string"], // Array of image URLs
  "preferredDate": "string",
  "contactPhone": "string"
}
```

#### 7.2 Sakin Aktivite Geçmişi
```http
GET /admin/residents/{residentId}/activity-log
```

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id": "string",
      "type": "string", // "login", "payment", "request", "document_upload"
      "description": "string",
      "details": "object", // Additional details
      "timestamp": "string",
      "ipAddress": "string",
      "userAgent": "string"
    }
  ]
}
```

---

### 8. Erişim Kontrolü

#### 8.1 Erişim Logları
```http
GET /admin/residents/{residentId}/access-logs
```

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id": "string",
      "entryTime": "string",
      "exitTime": "string",
      "accessPoint": "string", // "main_gate", "pool_area", "gym"
      "accessMethod": "string", // "qr_code", "card", "manual"
      "status": "string", // "granted", "denied"
      "notes": "string"
    }
  ]
}
```

---

## 🔧 Geliştirme Notları

### Öncelik Sırası:
1. **Yüksek Öncelik**: Aile üyeleri, Villa bilgileri, Acil durum bilgileri
2. **Orta Öncelik**: QR kod oluşturma, Ödeme geçmişi
3. **Düşük Öncelik**: Aktivite logları, Erişim kontrolü

### Güvenlik Gereksinimleri:
- Tüm endpointler admin authentication gerektirir
- Sensitive data için encryption kullanılmalı
- Rate limiting uygulanmalı
- Audit logging yapılmalı

### Performans Notları:
- Pagination tüm listeleme endpointlerinde zorunlu
- Image upload için file size limits
- Cache stratejisi belirlenmeliş (Redis recommended)

### Test Verileri:
Her endpoint için mock data hazırlanmalı ve test edilmelidir.
</file>

<file path="src/app/components/ui/BulkMessageModal.tsx">
import React, { useState } from 'react';
import { Mail, MessageSquare, X } from 'lucide-react';
import Modal from './Modal';
import Button from './Button';
import TextArea from './TextArea';

interface BulkMessageModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSend: (message: string) => void;
    type: 'email' | 'sms';
    recipientCount: number;
}

export default function BulkMessageModal({
    isOpen,
    onClose,
    onSend,
    type,
    recipientCount
}: BulkMessageModalProps) {
    const [message, setMessage] = useState('');

    const handleSend = () => {
        onSend(message);
        setMessage('');
        onClose();
    };

    const isEmail = type === 'email';
    const icon = isEmail ? Mail : MessageSquare;
    const title = isEmail ? 'Toplu E-posta Gönder' : 'Toplu SMS Gönder';
    const placeholder = isEmail 
        ? 'E-posta içeriğini buraya yazın...'
        : 'SMS içeriğini buraya yazın...';

    return (
        <Modal
            isOpen={isOpen}
            onClose={onClose}
            size="lg"
        >
            <div className="p-6">
                {/* Header */}
                <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center gap-3">
                        {React.createElement(icon, {
                            className: "w-5 h-5 text-primary-gold"
                        })}
                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                            {title}
                        </h3>
                    </div>
                    <button
                        onClick={onClose}
                        className="text-text-light-secondary dark:text-text-secondary hover:text-text-on-light dark:hover:text-text-on-dark transition-colors"
                    >
                        <X className="w-5 h-5" />
                    </button>
                </div>

                {/* Recipient Count */}
                <div className="mb-4">
                    <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                        {recipientCount} alıcıya {isEmail ? 'e-posta' : 'SMS'} gönderilecek
                    </p>
                </div>

                {/* Message Input */}
                <div className="mb-6">
                    <TextArea
                        value={message}
                        onChange={(e: any) => setMessage(e.target.value)}
                        placeholder={placeholder}
                        rows={6}
                        className="w-full"
                    />
                </div>

                {/* Actions */}
                <div className="flex justify-end gap-3">
                    <Button
                        variant="secondary"
                        onClick={onClose}
                    >
                        İptal
                    </Button>
                    <Button
                        variant="primary"
                        onClick={handleSend}
                        disabled={!message.trim()}
                        icon={icon}
                    >
                        Gönder
                    </Button>
                </div>
            </div>
        </Modal>
    );
}
</file>

<file path="src/app/components/ui/DataTable.tsx">
import React, { useState, useMemo } from 'react';
import { LucideIcon, ArrowUpDown, ArrowUp, ArrowDown, ChevronDown, ChevronRight } from 'lucide-react';
import { cn } from '@/lib/utils';
import Card from './Card';
import Button from './Button';
import TablePagination from './TablePagination';
import BulkActionsBar from './BulkActionsBar';
import Checkbox from './Checkbox';

export interface ColumnAction {
    id: string;
    label: string;
    icon: LucideIcon;
    onClick: (row: any) => void;
    variant?: 'default' | 'danger' | 'success' | 'warning';
    disabled?: (row: any) => boolean;
    visible?: (row: any) => boolean;
}

export interface Column {
    id: string;
    header: string;
    accessor: string | ((row: any) => any);
    sortable?: boolean;
    searchable?: boolean;
    filterable?: boolean;
    width?: string;
    minWidth?: string;
    maxWidth?: string;
    align?: 'left' | 'center' | 'right';
    render?: (value: any, row: any) => React.ReactNode;
    headerRender?: () => React.ReactNode;
    className?: string;
    headerClassName?: string;
}

export interface DataTableProps {
    columns: Column[];
    data: any[];
    loading?: boolean;
    selectable?: boolean;
    expandable?: boolean;
    onRowClick?: (row: any) => void;
    onRowDoubleClick?: (row: any) => void;
    onSelectionChange?: (selectedRows: any[]) => void;
    bulkActions?: Array<{
        id: string;
        label: string;
        icon: LucideIcon;
        onClick: (selectedRows: any[]) => void;
        variant?: 'default' | 'danger' | 'success' | 'warning';
    }>;
    rowActions?: ColumnAction[];
    pagination?: {
        currentPage: number;
        totalPages: number;
        totalRecords: number;
        recordsPerPage: number;
        onPageChange: (page: number) => void;
        onRecordsPerPageChange?: (recordsPerPage: number) => void;
    };
    sortConfig?: {
        key: string;
        direction: 'asc' | 'desc';
    };
    onSortChange?: (key: string, direction: 'asc' | 'desc') => void;
    className?: string;
    size?: 'sm' | 'md' | 'lg';
    variant?: 'default' | 'minimal' | 'bordered';
    emptyStateMessage?: string;
    rowClassName?: (row: any) => string;
    expandedContent?: (row: any) => React.ReactNode;
    stickyHeader?: boolean;
    maxHeight?: string;
    ActionMenuComponent?: React.ComponentType<{ row: any }>;
}

const DataTable: React.FC<DataTableProps> = ({
    columns,
    data,
    loading = false,
    selectable = false,
    expandable = false,
    onRowClick,
    onRowDoubleClick,
    onSelectionChange,
    bulkActions = [],
    rowActions = [],
    pagination,
    sortConfig,
    onSortChange,
    className,
    size = 'md',
    variant = 'default',
    emptyStateMessage = 'Veri bulunamadı',
    rowClassName,
    expandedContent,
    stickyHeader = false,
    maxHeight,
    ActionMenuComponent,
}) => {
    const [selectedRows, setSelectedRows] = useState<any[]>([]);
    const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());

    const sizeClasses = {
        sm: 'text-xs',
        md: 'text-sm',
        lg: 'text-base',
    };

    const paddingClasses = {
        sm: 'px-2 py-1.5',
        md: 'px-4 py-2',
        lg: 'px-6 py-3',
    };

    const variantClasses = {
        default: 'border border-gray-200 dark:border-gray-700',
        minimal: 'border-0 shadow-none',
        bordered: 'border-2 border-primary-gold/30',
    };

    // Selection logic
    const isAllSelected = useMemo(() => {
        return data.length > 0 && selectedRows.length === data.length;
    }, [data, selectedRows]);

    const isIndeterminate = useMemo(() => {
        return selectedRows.length > 0 && selectedRows.length < data.length;
    }, [data, selectedRows]);

    const handleSelectAll = () => {
        if (isAllSelected) {
            setSelectedRows([]);
        } else {
            setSelectedRows([...data]);
        }
    };

    const handleSelectRow = (row: any) => {
        const isSelected = selectedRows.some(selected => selected.id === row.id);
        if (isSelected) {
            setSelectedRows(selectedRows.filter(selected => selected.id !== row.id));
        } else {
            setSelectedRows([...selectedRows, row]);
        }
    };

    // Expand logic
    const handleExpandRow = (row: any) => {
        const newExpanded = new Set(expandedRows);
        const rowId = row.id || row.key;
        
        if (expandedRows.has(rowId)) {
            newExpanded.delete(rowId);
        } else {
            newExpanded.add(rowId);
        }
        
        setExpandedRows(newExpanded);
    };

    const isRowExpanded = (row: any) => {
        const rowId = row.id || row.key;
        return expandedRows.has(rowId);
    };

    // Update selection change callback
    React.useEffect(() => {
        onSelectionChange?.(selectedRows);
    }, [selectedRows, onSelectionChange]);

    // Get cell value
    const getCellValue = (row: any, column: Column) => {
        if (typeof column.accessor === 'function') {
            return column.accessor(row);
        }
        return row[column.accessor];
    };

    // Sort handler
    const handleSort = (columnId: string) => {
        if (!onSortChange) return;
        
        const column = columns.find(col => col.id === columnId);
        if (!column?.sortable) return;

        const newDirection = sortConfig?.key === columnId && sortConfig?.direction === 'asc' ? 'desc' : 'asc';
        onSortChange(columnId, newDirection);
    };

    // Render sort icon
    const renderSortIcon = (column: Column) => {
        if (!column.sortable) return null;
        
        const isActive = sortConfig?.key === column.id;
        const direction = sortConfig?.direction;
        
        if (isActive && direction === 'asc') {
            return <ArrowUp size={14} className="text-primary-gold" />;
        }
        if (isActive && direction === 'desc') {
            return <ArrowDown size={14} className="text-primary-gold" />;
        }
        
        return <ArrowUpDown size={14} className="text-text-light-muted dark:text-text-muted" />;
    };

    // Render row actions
    const renderRowActions = (row: any) => {
        if (ActionMenuComponent) {
            return <ActionMenuComponent row={row} />;
        }
        if (rowActions.length === 0) return null;
        const visibleActions = rowActions.filter(action => action.visible?.(row) ?? true);
        return (
            <div className="flex items-center gap-1">
                {visibleActions.map((action) => (
                    <Button
                        key={action.id}
                        variant="ghost"
                        size="sm"
                        icon={action.icon}
                        onClick={(e) => {
                            e.stopPropagation();
                            action.onClick(row);
                        }}
                        disabled={action.disabled?.(row)}
                        className={cn(
                            'h-8 w-8 p-1',
                            action.variant === 'danger' && 'hover:text-primary-red',
                            action.variant === 'success' && 'hover:text-semantic-success-600',
                            action.variant === 'warning' && 'hover:text-semantic-warning-600'
                        )}
                        title={action.label}
                    />
                ))}
            </div>
        );
    };

    // Loading row
    const renderLoadingRow = () => (
        <tr>
            <td colSpan={columns.length + (selectable ? 1 : 0) + (expandable ? 1 : 0) + (rowActions.length > 0 ? 1 : 0)}>
                <div className="flex items-center justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-2 border-primary-gold border-t-transparent" />
                    <span className="ml-2 text-text-light-secondary dark:text-text-secondary">Yükleniyor...</span>
                </div>
            </td>
        </tr>
    );

    // Empty state row
    const renderEmptyRow = () => (
        <tr>
            <td colSpan={columns.length + (selectable ? 1 : 0) + (expandable ? 1 : 0) + (rowActions.length > 0 ? 1 : 0)}>
                <div className="flex items-center justify-center py-8 text-text-light-secondary dark:text-text-secondary">
                    {emptyStateMessage}
                </div>
            </td>
        </tr>
    );

    // Render table header
    const renderTableHeader = () => (
        <thead className={cn(
            'bg-background-light-secondary dark:bg-background-secondary',
            stickyHeader && 'sticky top-0'
        )}>
            <tr>
                {selectable && (
                    <th className={cn('w-10', paddingClasses[size])}>
                        <Checkbox
                            checked={isAllSelected}
                            indeterminate={isIndeterminate}
                            onChange={handleSelectAll}
                            checkboxSize={size === 'sm' ? 'sm' : size === 'lg' ? 'lg' : 'md'}
                        />
                    </th>
                )}
                {expandable && <th className={cn('w-10', paddingClasses[size])} />}
                {columns.map((column, columnIndex) => (
                    <th
                        key={column.id || `column-${columnIndex}`}
                        className={cn(
                            'text-left font-medium text-text-light-secondary dark:text-text-secondary',
                            paddingClasses[size],
                            sizeClasses[size],
                            column.headerClassName,
                            column.sortable && 'cursor-pointer hover:bg-background-light-soft dark:hover:bg-background-soft'
                        )}
                        style={{
                            width: column.width,
                            minWidth: column.minWidth,
                            maxWidth: column.maxWidth,
                            textAlign: column.align || 'left'
                        }}
                        onClick={() => column.sortable && handleSort(column.id)}
                    >
                        <div className="flex items-center gap-2">
                            {column.headerRender ? column.headerRender() : column.header}
                            {renderSortIcon(column)}
                        </div>
                    </th>
                ))}
                {/* Actions column */}
                {(rowActions.length > 0 || ActionMenuComponent) && (
                    <th className={cn('w-20', paddingClasses[size])} />
                )}
            </tr>
        </thead>
    );

    // Render table body
    const renderTableBody = () => (
        <tbody>
            {loading ? (
                renderLoadingRow()
            ) : data.length === 0 ? (
                renderEmptyRow()
            ) : (
                data.map((row, rowIndex) => (
                    <React.Fragment key={row.id || rowIndex}>
                        <tr
                            className={cn(
                                'border-b border-gray-200 dark:border-gray-700 hover:bg-background-light-soft dark:hover:bg-background-soft transition-colors',
                                rowClassName?.(row),
                                (onRowClick || onRowDoubleClick) && 'cursor-pointer'
                            )}
                            onClick={(e) => onRowClick?.(row)}
                            onDoubleClick={(e) => onRowDoubleClick?.(row)}
                        >
                            {selectable && (
                                <td className={paddingClasses[size]} onClick={(e) => e.stopPropagation()}>
                                    <Checkbox
                                        checked={selectedRows.some(selected => selected.id === row.id)}
                                        onChange={() => handleSelectRow(row)}
                                        checkboxSize={size === 'sm' ? 'sm' : size === 'lg' ? 'lg' : 'md'}
                                    />
                                </td>
                            )}
                            {expandable && (
                                <td className={paddingClasses[size]} onClick={(e) => e.stopPropagation()}>
                                    <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => handleExpandRow(row)}
                                        className="p-1"
                                    >
                                        {isRowExpanded(row) ? (
                                            <ChevronDown size={16} />
                                        ) : (
                                            <ChevronRight size={16} />
                                        )}
                                    </Button>
                                </td>
                            )}
                            {columns.map((column, columnIndex) => {
                                const value = getCellValue(row, column);
                                return (
                                    <td
                                        key={column.id || `cell-${columnIndex}`}
                                        className={cn(
                                            'text-text-on-light dark:text-text-on-dark',
                                            paddingClasses[size],
                                            sizeClasses[size],
                                            column.className
                                        )}
                                        style={{
                                            textAlign: column.align || 'left'
                                        }}
                                    >
                                        {column.render ? column.render(value, row) : value}
                                    </td>
                                );
                            })}
                            {/* Actions column */}
                            {(rowActions.length > 0 || ActionMenuComponent) && (
                                <td className={paddingClasses[size]}>
                                    {renderRowActions(row)}
                                </td>
                            )}
                        </tr>
                        {expandable && isRowExpanded(row) && expandedContent && (
                            <tr>
                                <td colSpan={columns.length + (selectable ? 1 : 0) + (expandable ? 1 : 0) + ((rowActions.length > 0 || ActionMenuComponent) ? 1 : 0)}>
                                    <div className="bg-background-light-soft dark:bg-background-soft p-4 border-t border-gray-200 dark:border-gray-700">
                                        {expandedContent(row)}
                                    </div>
                                </td>
                            </tr>
                        )}
                    </React.Fragment>
                ))
            )}
        </tbody>
    );

    const tableContent = (
        <div className={cn(
            'overflow-x-auto',
            maxHeight && 'overflow-y-auto',
            maxHeight && `max-h-[${maxHeight}]`
        )}>
            <table className="w-full">
                {renderTableHeader()}
                {renderTableBody()}
            </table>
        </div>
    );

    return (
        <div className={cn('space-y-4', className)}>
            {/* Bulk Actions */}
            {bulkActions.length > 0 && (
                <BulkActionsBar
                    selectedCount={selectedRows.length}
                    actions={bulkActions.map(action => ({
                        ...action,
                        onClick: () => action.onClick(selectedRows)
                    }))}
                    onClearSelection={() => setSelectedRows([])}
                />
            )}

            {/* Table */}
            <Card className={cn(variantClasses[variant], 'overflow-hidden')}>
                {tableContent}
            </Card>

            {/* Pagination */}
            {pagination && (
                <TablePagination {...pagination} />
            )}
        </div>
    );
};

export default DataTable;
</file>

<file path="src/app/components/ui/DocumentUploadModal.tsx">
'use client';

import React, { useState } from 'react';
import Modal from './Modal';
import Button from './Button';
import FileUpload from './FileUpload';
import { FileText, Upload, CheckCircle, AlertCircle } from 'lucide-react';
import { UploadState } from '@/hooks/useResidentDocuments';

interface DocumentUploadModalProps {
    isOpen: boolean;
    onClose: () => void;
    onUploadNationalId: (file: File) => Promise<void>;
    onUploadOwnership: (file: File) => Promise<void>;
    uploadStates: {
        nationalId: UploadState;
        ownership: UploadState;
    };
}

export default function DocumentUploadModal({
    isOpen,
    onClose,
    onUploadNationalId,
    onUploadOwnership,
    uploadStates
}: DocumentUploadModalProps) {
    const [nationalIdFiles, setNationalIdFiles] = useState<File[]>([]);
    const [ownershipFiles, setOwnershipFiles] = useState<File[]>([]);

    const handleNationalIdFilesChange = (files: FileList | null) => {
        if (files) {
            setNationalIdFiles(Array.from(files));
        }
    };

    const handleOwnershipFilesChange = (files: FileList | null) => {
        if (files) {
            setOwnershipFiles(Array.from(files));
        }
    };

    const handleNationalIdUpload = async () => {
        if (nationalIdFiles.length > 0) {
            await onUploadNationalId(nationalIdFiles[0]);
            setNationalIdFiles([]);
        }
    };

    const handleOwnershipUpload = async () => {
        if (ownershipFiles.length > 0) {
            await onUploadOwnership(ownershipFiles[0]);
            setOwnershipFiles([]);
        }
    };

    const handleClose = () => {
        setNationalIdFiles([]);
        setOwnershipFiles([]);
        onClose();
    };

    const getUploadStatus = (uploadState: UploadState) => {
        if (uploadState.uploading) {
            return { icon: Upload, color: 'text-primary-gold', text: `Yükleniyor... %${uploadState.progress}` };
        }
        if (uploadState.error) {
            return { icon: AlertCircle, color: 'text-primary-red', text: uploadState.error };
        }
        if (uploadState.progress === 100) {
            return { icon: CheckCircle, color: 'text-semantic-success-500', text: 'Başarıyla yüklendi' };
        }
        return null;
    };

    return (
        <Modal
            isOpen={isOpen}
            onClose={handleClose}
            title="Belge Yükle"
            icon={FileText}
            size="lg"
        >
            <div className="space-y-8 max-h-[70vh] overflow-y-auto pr-2">
                {/* National ID Document Section */}
                <div className="space-y-4">
                    <div className="flex items-center justify-between">
                        <h4 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                            Kimlik Belgesi
                        </h4>
                        {getUploadStatus(uploadStates.nationalId) && (
                            <div className="flex items-center gap-2">
                                {React.createElement(getUploadStatus(uploadStates.nationalId)!.icon, {
                                    className: `h-4 w-4 ${getUploadStatus(uploadStates.nationalId)!.color}`
                                })}
                                <span className={`text-sm ${getUploadStatus(uploadStates.nationalId)!.color}`}>
                                    {getUploadStatus(uploadStates.nationalId)!.text}
                                </span>
                            </div>
                        )}
                    </div>

                    <FileUpload
                        acceptedTypes={['image/jpeg', 'image/png', 'image/jpg', 'application/pdf']}
                        maxSize={10}
                        multiple={false}
                        onFilesChange={handleNationalIdFilesChange}
                        selectedFiles={nationalIdFiles}
                        onFileRemove={(index) => {
                            setNationalIdFiles(prev => prev.filter((_, i) => i !== index));
                        }}
                        helperText="JPEG, PNG veya PDF formatında maksimum 10MB"
                        showPreview={true}
                    />

                    {nationalIdFiles.length > 0 && (
                        <div className="flex justify-end">
                            <Button
                                variant="primary"
                                onClick={handleNationalIdUpload}
                                disabled={uploadStates.nationalId.uploading}
                                isLoading={uploadStates.nationalId.uploading}
                                icon={Upload}
                            >
                                Kimlik Belgesini Yükle
                            </Button>
                        </div>
                    )}
                </div>

                <div className="border-t border-gray-200 dark:border-gray-700"></div>

                {/* Ownership Document Section */}
                <div className="space-y-4">
                    <div className="flex items-center justify-between">
                        <h4 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                            Tapu / Mülkiyet Belgesi
                        </h4>
                        {getUploadStatus(uploadStates.ownership) && (
                            <div className="flex items-center gap-2">
                                {React.createElement(getUploadStatus(uploadStates.ownership)!.icon, {
                                    className: `h-4 w-4 ${getUploadStatus(uploadStates.ownership)!.color}`
                                })}
                                <span className={`text-sm ${getUploadStatus(uploadStates.ownership)!.color}`}>
                                    {getUploadStatus(uploadStates.ownership)!.text}
                                </span>
                            </div>
                        )}
                    </div>

                    <FileUpload
                        acceptedTypes={['image/jpeg', 'image/png', 'image/jpg', 'application/pdf']}
                        maxSize={10}
                        multiple={false}
                        onFilesChange={handleOwnershipFilesChange}
                        selectedFiles={ownershipFiles}
                        onFileRemove={(index) => {
                            setOwnershipFiles(prev => prev.filter((_, i) => i !== index));
                        }}
                        helperText="JPEG, PNG veya PDF formatında maksimum 10MB"
                        showPreview={true}
                    />

                    {ownershipFiles.length > 0 && (
                        <div className="flex justify-end">
                            <Button
                                variant="primary"
                                onClick={handleOwnershipUpload}
                                disabled={uploadStates.ownership.uploading}
                                isLoading={uploadStates.ownership.uploading}
                                icon={Upload}
                            >
                                Mülkiyet Belgesini Yükle
                            </Button>
                        </div>
                    )}
                </div>

                {/* Modal Actions */}
                <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <Button 
                        variant="secondary" 
                        onClick={handleClose}
                        disabled={uploadStates.nationalId.uploading || uploadStates.ownership.uploading}
                    >
                        Kapat
                    </Button>
                </div>
            </div>
        </Modal>
    );
}
</file>

<file path="src/app/components/ui/DocumentViewer.tsx">
import React, { useState, useEffect } from 'react';
import Skeleton from './Skeleton';
import { AlertTriangle, FileText, Download, Eye } from 'lucide-react';

interface DocumentViewerProps {
    title: string;
    imageUrl?: string;
    alt: string;
    loading?: boolean;
    error?: boolean;
    onRetry?: () => void;
    className?: string;
}

export const DocumentViewer: React.FC<DocumentViewerProps> = ({
    title,
    imageUrl,
    alt,
    loading = false,
    error = false,
    onRetry,
    className = ''
}) => {
    const [imageLoading, setImageLoading] = useState(false);
    const [imageError, setImageError] = useState(false);

    useEffect(() => {
        if (imageUrl) {
            setImageLoading(true);
            setImageError(false);
        }
    }, [imageUrl]);

    const handleImageLoad = () => {
        setImageLoading(false);
    };

    const handleImageError = () => {
        setImageLoading(false);
        setImageError(true);
    };

    const handleDownload = () => {
        if (imageUrl) {
            const link = document.createElement('a');
            link.href = imageUrl;
            link.download = `${title.toLowerCase().replace(/\s+/g, '_')}.jpg`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };

    return (
        <div className={`space-y-4 ${className}`}>
            <div className="flex items-center justify-between">
                <h4 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark flex items-center gap-2">
                    <FileText className="w-5 h-5 text-primary-gold" />
                    {title}
                </h4>
                {imageUrl && !loading && !error && !imageError && (
                    <button
                        onClick={handleDownload}
                        className="flex items-center gap-2 px-3 py-1 text-sm text-primary-gold hover:text-primary-gold/80 transition-colors"
                    >
                        <Download className="w-4 h-4" />
                        İndir
                    </button>
                )}
            </div>

            <div className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden bg-background-light-card dark:bg-background-card">
                {loading ? (
                    <div className="p-6">
                        <Skeleton className="w-full h-64" />
                        <div className="mt-4 space-y-2">
                            <Skeleton className="h-4 w-3/4" />
                            <Skeleton className="h-4 w-1/2" />
                        </div>
                    </div>
                ) : error || imageError ? (
                    <div className="p-8 text-center">
                        <AlertTriangle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500 dark:text-gray-400 mb-4">
                            Belge yüklenemedi
                        </p>
                        {onRetry && (
                            <button
                                onClick={onRetry}
                                className="text-primary-gold hover:text-primary-gold/80 text-sm font-medium"
                            >
                                Tekrar Dene
                            </button>
                        )}
                    </div>
                ) : imageUrl ? (
                    <div className="relative">
                        {imageLoading && (
                            <div className="absolute inset-0 flex items-center justify-center bg-gray-50 dark:bg-gray-800">
                                <Skeleton className="w-full h-64" />
                            </div>
                        )}
                        <img
                            src={imageUrl}
                            alt={alt}
                            onLoad={handleImageLoad}
                            onError={handleImageError}
                            className={`w-full h-auto max-h-96 object-contain transition-opacity duration-300 ${
                                imageLoading ? 'opacity-0' : 'opacity-100'
                            }`}
                        />
                    </div>
                ) : (
                    <div className="p-8 text-center">
                        <Eye className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500 dark:text-gray-400">
                            Belge bulunamadı
                        </p>
                    </div>
                )}
            </div>
        </div>
    );
};
</file>

<file path="src/app/components/ui/index.ts">
// Form Components
export { default as Input } from './Input'
export { default as Select } from './Select'
export { default as Checkbox } from './Checkbox'
export { default as RadioButton } from './RadioButton'
export { default as TextArea } from './TextArea'
export { default as DatePicker } from './DatePicker'
export { default as FileUpload } from './FileUpload'

// Button Components
export { default as Button } from './Button'
export { default as IconButton } from './IconButton'
export { default as LoadingButton } from './LoadingButton'
export { default as FloatingActionButton } from './FloatingActionButton'

// Layout & Content Components
export { default as Card, CardHeader, CardBody, CardFooter, CardTitle, CardSubtitle } from './Card'
export { default as Modal, ModalHeader, ModalBody, ModalFooter, ModalTitle, ModalSubtitle } from './Modal'
export { default as ConfirmationModal } from './ConfirmationModal'
export { default as Drawer, DrawerHeader, DrawerBody, DrawerFooter, DrawerTitle, DrawerSubtitle } from './Drawer'
export { default as Tabs, TabList, Tab, TabPanel, TabPanels } from './Tabs'
export { default as Accordion, AccordionItem, AccordionTrigger, AccordionContent } from './Accordion'
export { default as Collapse, CollapseTrigger, CollapseContent } from './Collapse'

// Type exports
export type { default as InputProps } from './Input'
export type { default as SelectProps } from './Select'
export type { default as CheckboxProps } from './Checkbox'
export type { default as RadioButtonProps } from './RadioButton'
export type { default as TextAreaProps } from './TextArea'
export type { default as DatePickerProps } from './DatePicker'
export type { default as FileUploadProps } from './FileUpload'

// Button Component Types
export type { default as ButtonProps } from './Button'
export type { default as IconButtonProps } from './IconButton'
export type { default as LoadingButtonProps } from './LoadingButton'
export type { default as FloatingActionButtonProps } from './FloatingActionButton'

// Layout & Content Component Types
export type { default as CardProps } from './Card'
export type { default as ModalProps } from './Modal'
export type { default as DrawerProps } from './Drawer'
export type { default as TabsProps } from './Tabs'
export type { default as AccordionProps } from './Accordion'
export type { default as CollapseProps } from './Collapse'

// New data display components
export { default as Table } from './Table'
export { default as Pagination } from './Pagination'
export { default as DataList } from './DataList'
export { default as EmptyState } from './EmptyState'
export { default as ProgressBar } from './ProgressBar'
export { default as Badge } from './Badge'
export { default as Chip } from './Chip'

// Feedback components
export { default as Toast, ToastContainer } from './Toast'
export { default as Alert } from './Alert'
export { default as Tooltip } from './Tooltip'
export { default as Skeleton, SkeletonAvatar, SkeletonCard, SkeletonList, SkeletonTable, SkeletonText } from './Skeleton'
export { default as Spinner, SpinnerOverlay, SpinnerButton, SpinnerCard, SpinnerInline } from './Spinner'

// Navigation components
export { default as Navbar } from './Navbar'
export { default as Sidebar } from './Sidebar'
export { default as Breadcrumb, BreadcrumbPatterns } from './Breadcrumb'
export { default as Stepper, StepperPatterns } from './Stepper'

// User components
export { default as Avatar, AvatarGroup, AvatarPatterns } from './Avatar'
export { default as UserCard, UserCardPatterns } from './UserCard'
export { default as ProfileDropdown, ProfileDropdownPatterns } from './ProfileDropdown'

// Export components
export { default as ExportDropdown } from './ExportDropdown'
export { DocumentViewer } from './DocumentViewer'
</file>

<file path="src/app/components/ui/StatsCard.tsx">
import React from 'react';
import { LucideIcon, TrendingUp, TrendingDown, Minus } from 'lucide-react';
import { cn } from '@/lib/utils';
import Card from './Card';

interface StatsCardProps {
    title: string;
    value: string | number;
    subtitle?: string;
    icon?: LucideIcon;
    trend?: {
        value: number;
        isPositive?: boolean;
        isPercentage?: boolean;
    };
    color?: 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'gold';
    size?: 'sm' | 'md' | 'lg';
    variant?: 'default' | 'minimal' | 'bordered' | 'gradient';
    onClick?: () => void;
    className?: string;
    loading?: boolean;
    prefix?: string;
    suffix?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
    title,
    value,
    subtitle,
    icon: Icon,
    trend,
    color = 'primary',
    size = 'md',
    variant = 'default',
    onClick,
    className,
    loading = false,
    prefix = '',
    suffix = '',
}) => {
    const sizeClasses = {
        sm: 'p-3',
        md: 'p-4',
        lg: 'p-6',
    };

    const valueSizes = {
        sm: 'text-lg',
        md: 'text-2xl',
        lg: 'text-3xl',
    };

    const titleSizes = {
        sm: 'text-xs',
        md: 'text-sm',
        lg: 'text-base',
    };

    const iconSizes = {
        sm: 16,
        md: 20,
        lg: 24,
    };

    const colorClasses = {
        primary: {
            icon: 'text-primary-gold bg-primary-gold/10',
            value: 'text-text-on-light dark:text-text-on-dark',
            trend: 'text-primary-gold',
        },
        success: {
            icon: 'text-semantic-success-600 bg-semantic-success-100 dark:bg-semantic-success-900/20',
            value: 'text-semantic-success-600',
            trend: 'text-semantic-success-600',
        },
        warning: {
            icon: 'text-semantic-warning-600 bg-semantic-warning-100 dark:bg-semantic-warning-900/20',
            value: 'text-semantic-warning-600',
            trend: 'text-semantic-warning-600',
        },
        danger: {
            icon: 'text-primary-red bg-primary-red/10',
            value: 'text-primary-red',
            trend: 'text-primary-red',
        },
        info: {
            icon: 'text-primary-blue bg-primary-blue/10',
            value: 'text-primary-blue',
            trend: 'text-primary-blue',
        },
        gold: {
            icon: 'text-primary-gold bg-primary-gold/10',
            value: 'text-primary-gold',
            trend: 'text-primary-gold',
        },
    };

    const variantClasses = {
        default: 'bg-background-card border border-primary-gold/20',
        minimal: 'bg-transparent border-0 shadow-none',
        bordered: 'bg-background-card border-2 border-primary-gold/30',
        gradient: 'bg-gradient-to-br from-primary-gold/5 to-primary-gold/20 border border-primary-gold/30',
    };

    const getTrendIcon = () => {
        if (!trend) return null;
        
        if (trend.value > 0) return TrendingUp;
        if (trend.value < 0) return TrendingDown;
        return Minus;
    };

    const TrendIcon = getTrendIcon();

    const formatValue = (val: string | number) => {
        if (loading) return '---';
        
        if (typeof val === 'number') {
            return val.toLocaleString('tr-TR');
        }
        
        return val;
    };

    const formatTrendValue = (val: number) => {
        if (!trend) return '';
        const formatted = Math.abs(val).toLocaleString('tr-TR');
        return trend.isPercentage ? `${formatted}%` : formatted;
    };

    return (
        <Card
            className={cn(
                'transition-all duration-200 hover:shadow-lg',
                variantClasses[variant],
                sizeClasses[size],
                onClick && 'cursor-pointer hover:scale-[1.02]',
                className
            )}
            onClick={onClick}
        >
            <div className="flex items-start justify-between">
                <div className="flex-1">
                    {/* Title */}
                    <p className={cn(
                        'font-medium text-text-light-secondary dark:text-text-secondary mb-1',
                        titleSizes[size]
                    )}>
                        {title}
                    </p>

                    {/* Value */}
                    <div className="flex items-baseline gap-1 mb-1">
                        {loading ? (
                            <div className="animate-pulse">
                                <div className={cn('bg-gray-300 rounded h-6', 
                                    size === 'sm' ? 'w-12' : size === 'md' ? 'w-16' : 'w-20'
                                )} />
                            </div>
                        ) : (
                            <>
                                {prefix && (
                                    <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                        {prefix}
                                    </span>
                                )}
                                <span className={cn(
                                    'font-bold',
                                    valueSizes[size],
                                    colorClasses[color].value
                                )}>
                                    {formatValue(value)}
                                </span>
                                {suffix && (
                                    <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                        {suffix}
                                    </span>
                                )}
                            </>
                        )}
                    </div>

                    {/* Trend */}
                    {trend && !loading && (
                        <div className="flex items-center gap-1">
                            {TrendIcon && (
                                <TrendIcon 
                                    size={12} 
                                    className={cn(
                                        trend.value > 0 ? 'text-semantic-success-600' : 
                                        trend.value < 0 ? 'text-primary-red' : 'text-text-light-secondary dark:text-text-secondary'
                                    )}
                                />
                            )}
                            <span className={cn(
                                'text-xs font-medium',
                                trend.value > 0 ? 'text-semantic-success-600' : 
                                trend.value < 0 ? 'text-primary-red' : 'text-text-light-secondary dark:text-text-secondary'
                            )}>
                                {trend.value > 0 ? '+' : ''}{formatTrendValue(trend.value)}
                            </span>
                        </div>
                    )}

                    {/* Subtitle */}
                    {subtitle && (
                        <p className={cn(
                            'text-text-light-muted dark:text-text-muted mt-1',
                            titleSizes[size]
                        )}>
                            {subtitle}
                        </p>
                    )}
                </div>

                {/* Icon */}
                {Icon && (
                    <div className={cn(
                        'flex items-center justify-center rounded-lg flex-shrink-0',
                        colorClasses[color].icon,
                        size === 'sm' ? 'w-8 h-8' : size === 'md' ? 'w-10 h-10' : 'w-12 h-12'
                    )}>
                        <Icon size={iconSizes[size]} />
                    </div>
                )}
            </div>
        </Card>
    );
};

export default StatsCard;
</file>

<file path="src/app/components/ui/TablePagination.tsx">
import React from 'react';
import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react';
import { cn } from '@/lib/utils';
import Button from './Button';

interface TablePaginationProps {
    currentPage: number;
    totalPages: number;
    totalRecords: number;
    recordsPerPage: number;
    onPageChange: (page: number) => void;
    onRecordsPerPageChange?: (recordsPerPage: number) => void;
    showFirstLast?: boolean;
    showPrevNext?: boolean;
    showRecordsPerPage?: boolean;
    recordsPerPageOptions?: number[];
    maxVisiblePages?: number;
    size?: 'sm' | 'md' | 'lg';
    className?: string;
    itemName?: string;
    itemNamePlural?: string;
    showRecordInfo?: boolean;
}

const TablePagination: React.FC<TablePaginationProps> = ({
    currentPage,
    totalPages,
    totalRecords,
    recordsPerPage,
    onPageChange,
    onRecordsPerPageChange,
    showFirstLast = true,
    showPrevNext = true,
    showRecordsPerPage = true,
    recordsPerPageOptions = [10, 25, 50, 100],
    maxVisiblePages = 5,
    size = 'md',
    className,
    itemName = 'kayıt',
    itemNamePlural = 'kayıt',
    showRecordInfo = true,
}) => {
    const sizeClasses = {
        sm: 'h-8 px-2 text-xs',
        md: 'h-10 px-3 text-sm',
        lg: 'h-12 px-4 text-base',
    };

    const textSizes = {
        sm: 'text-xs',
        md: 'text-sm',
        lg: 'text-base',
    };

    const iconSizes = {
        sm: 14,
        md: 16,
        lg: 18,
    };

    const startRecord = (currentPage - 1) * recordsPerPage + 1;
    const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);

    const isFirstPage = currentPage === 1;
    const isLastPage = currentPage === totalPages;

    // Calculate visible pages
    const getVisiblePages = () => {
        const pages = [];
        const start = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        const end = Math.min(totalPages, start + maxVisiblePages - 1);

        for (let i = start; i <= end; i++) {
            pages.push(i);
        }

        return pages;
    };

    const visiblePages = getVisiblePages();

    console.log('🔍 TablePagination Debug:', {
        currentPage,
        totalPages,
        totalRecords,
        recordsPerPage,
        visiblePages,
        isFirstPage,
        isLastPage
    });

    const getItemName = (count: number) => {
        return count === 1 ? itemName : itemNamePlural;
    };

    const handleRecordsPerPageChange = (newRecordsPerPage: number) => {
        if (onRecordsPerPageChange) {
            onRecordsPerPageChange(newRecordsPerPage);
            // Reset to first page when changing records per page
            onPageChange(1);
        }
    };

    if (totalRecords === 0) {
        return null;
    }

    return (
        <div className={cn(
            'flex flex-col sm:flex-row justify-between items-center gap-4 p-4 border-t border-gray-200 dark:border-gray-700',
            className
        )}>
            {/* Left side - Record info and records per page */}
            <div className="flex flex-col sm:flex-row items-center gap-4">
                {/* Record info */}
                {showRecordInfo && (
                    <p className={cn(
                        'text-text-light-secondary dark:text-text-secondary',
                        textSizes[size]
                    )}>
                        {recordsPerPage} {getItemName(recordsPerPage)}tan {startRecord}-{endRecord} arası gösteriliyor.
                        Toplam {totalRecords.toLocaleString('tr-TR')} {getItemName(totalRecords)}.
                    </p>
                )}

                {/* Records per page selector */}
                {showRecordsPerPage && onRecordsPerPageChange && (
                    <div className="flex items-center gap-2">
                        <span className={cn(
                            'text-text-light-secondary dark:text-text-secondary',
                            textSizes[size]
                        )}>
                            Göster:
                        </span>
                        <select
                            value={recordsPerPage}
                            onChange={(e) => handleRecordsPerPageChange(Number(e.target.value))}
                            className={cn(
                                'border border-gray-200 dark:border-gray-700 rounded bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark',
                                'focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold focus:outline-none',
                                sizeClasses[size]
                            )}
                        >
                            {recordsPerPageOptions.map((option) => (
                                <option key={option} value={option}>
                                    {option}
                                </option>
                            ))}
                        </select>
                    </div>
                )}
            </div>

            {/* Right side - Pagination controls */}
            <div className="flex items-center gap-1">
                {/* First page */}
                {showFirstLast && !isFirstPage && (
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={ChevronsLeft}
                        onClick={() => onPageChange(1)}
                        className="h-8 w-8 p-0"
                        title="İlk sayfa"
                    />
                )}

                {/* Previous page */}
                {showPrevNext && !isFirstPage && (
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={ChevronLeft}
                        onClick={() => onPageChange(currentPage - 1)}
                        className="h-8 w-8 p-0"
                        title="Önceki sayfa"
                    />
                )}

                {/* Page numbers */}
                {visiblePages.map((page) => (
                    <Button
                        key={page}
                        variant={page === currentPage ? 'primary' : 'ghost'}
                        size="sm"
                        onClick={() => onPageChange(page)}
                        className={cn(
                            'h-8 w-8 p-0 font-medium',
                            page === currentPage && 'bg-primary-gold text-primary-dark-gray'
                        )}
                    >
                        {page}
                    </Button>
                ))}

                {/* Next page */}
                {showPrevNext && !isLastPage && (
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={ChevronRight}
                        onClick={() => onPageChange(currentPage + 1)}
                        className="h-8 w-8 p-0"
                        title="Sonraki sayfa"
                    />
                )}

                {/* Last page */}
                {showFirstLast && !isLastPage && (
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={ChevronsRight}
                        onClick={() => onPageChange(totalPages)}
                        className="h-8 w-8 p-0"
                        title="Son sayfa"
                    />
                )}
            </div>

            {/* Center - Page info for mobile */}
            <div className="sm:hidden flex items-center gap-2">
                <span className={cn(
                    'text-text-light-secondary dark:text-text-secondary',
                    textSizes[size]
                )}>
                    Sayfa {currentPage} / {totalPages}
                </span>
            </div>
        </div>
    );
};

export default TablePagination;
</file>

<file path="src/app/components/ui/TextArea.tsx">
import { forwardRef, TextareaHTMLAttributes } from 'react'

interface TextAreaProps extends Omit<TextareaHTMLAttributes<HTMLTextAreaElement>, 'onChange'> {
    label?: string
    error?: string
    helperText?: string
    variant?: 'default' | 'filled' | 'outlined'
    isRequired?: boolean
    resize?: 'none' | 'both' | 'horizontal' | 'vertical'
    maxLength?: number
    showCount?: boolean
    onChange?: (value: string) => void
}

const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(
    ({
        label,
        error,
        helperText,
        variant = 'default',
        isRequired = false,
        resize = 'vertical',
        maxLength,
        showCount = false,
        className = '',
        value,
        onChange,
        ...props
    }, ref) => {
        const baseClasses = 'w-full px-3 py-2 text-sm rounded-lg border transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50 min-h-[100px]'

        const variantClasses = {
            default: 'border-primary-gold/30 bg-background-secondary text-text-primary hover:border-primary-gold/50 focus:border-primary-gold placeholder:text-text-secondary',
            filled: 'border-primary-gold/20 bg-background-card text-text-primary hover:bg-background-secondary focus:bg-background-secondary focus:border-primary-gold placeholder:text-text-secondary',
            outlined: 'border-primary-gold/40 bg-transparent text-text-primary hover:border-primary-gold/60 focus:border-primary-gold placeholder:text-text-secondary'
        }

        const resizeClasses = {
            none: 'resize-none',
            both: 'resize',
            horizontal: 'resize-x',
            vertical: 'resize-y'
        }

        const errorClasses = error ? 'border-primary-red focus:ring-primary-red/50 focus:border-primary-red' : ''

        const currentLength = typeof value === 'string' ? value.length : 0
        const showCounter = showCount && maxLength

        return (
            <div className="space-y-1">
                {label && (
                    <label className="block text-sm font-medium text-text-primary font-inter">
                        {label}
                        {isRequired && <span className="text-primary-red ml-1">*</span>}
                    </label>
                )}

                <div className="relative">
                    <textarea
                        ref={ref}
                        maxLength={maxLength}
                        value={value}
                        onChange={(e) => onChange?.(e.target.value)}
                        className={`
              ${baseClasses}
              ${variantClasses[variant]}
              ${resizeClasses[resize]}
              ${errorClasses}
              ${className}
            `}
                        {...props}
                    />

                    {showCounter && (
                        <div className="absolute bottom-2 right-2 text-xs text-text-secondary bg-background-primary/80 px-2 py-1 rounded font-inter">
                            {currentLength}/{maxLength}
                        </div>
                    )}
                </div>

                {error && (
                    <p className="text-sm text-primary-red font-inter">{error}</p>
                )}

                {helperText && !error && (
                    <p className="text-sm text-text-secondary font-inter">{helperText}</p>
                )}
            </div>
        )
    }
)

TextArea.displayName = 'TextArea'

export default TextArea
</file>

<file path="src/app/dashboard/announcements/[id]/edit/page.tsx">
'use client';

import React, { useState, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Button from '@/app/components/ui/Button';
import Card from '@/app/components/ui/Card';
import Skeleton from '@/app/components/ui/Skeleton';
import { ToastContainer } from '@/app/components/ui/Toast';
import { useToast } from '@/hooks/useToast';
import AnnouncementForm from '../../components/AnnouncementForm';
import { useAnnouncementDetail } from '../../hooks/useAnnouncementDetail';
import { announcementService } from '@/services';
import { ArrowLeft, AlertTriangle } from 'lucide-react';
import type { 
    AnnouncementFormData, 
    UpdateAnnouncementDto 
} from '@/services/types/announcement.types';

/**
 * Edit Announcement Page Component
 * 
 * Provides form interface for editing existing announcements
 */
export default function EditAnnouncementPage() {
    const router = useRouter();
    const params = useParams();
    const { toasts, removeToast } = useToast();
    const [loading, setLoading] = useState(false);
    const [sidebarOpen, setSidebarOpen] = useState(false);
    
    const announcementId = params?.id as string;

    // Data hook
    const { announcement, loading: fetchLoading, error, refreshAnnouncement } = useAnnouncementDetail({
        announcementId
    });

    // Breadcrumb items
    const breadcrumbItems = [
        { label: 'Dashboard', href: '/dashboard' },
        { label: 'Duyurular', href: '/dashboard/announcements' },
        { label: announcement?.title || 'Duyuru', href: `/dashboard/announcements/${announcementId}` },
        { label: 'Düzenle', href: `/dashboard/announcements/${announcementId}/edit` }
    ];

    // Toast functions
    const showToast = useCallback((type: 'success' | 'error' | 'info', title: string, message: string) => {
        console.log(`${type === 'success' ? '✓' : type === 'error' ? '✗' : 'ℹ'} ${title}: ${message}`);
    }, []);

    // Form submission handler
    const handleSubmit = useCallback(async (formData: AnnouncementFormData) => {
        if (!announcement) return;

        setLoading(true);

        try {
            // Prepare data for API
            const updateData: UpdateAnnouncementDto = {
                title: formData.title,
                content: formData.content,
                type: formData.type,
                status: formData.status,
                publishDate: formData.publishDate?.toISOString(),
                expiryDate: formData.expiryDate?.toISOString(),
                isPinned: formData.isPinned,
                isEmergency: formData.isEmergency,
                propertyIds: formData.propertyIds.length > 0 ? formData.propertyIds : undefined,
            };

            // Update announcement
            await announcementService.updateAnnouncement(announcement.id, updateData);
            
            // Upload new image if provided
            if (formData.image) {
                try {
                    await announcementService.uploadAnnouncementImage(announcement.id, formData.image);
                } catch (imageError) {
                    console.warn('Image upload failed:', imageError);
                    showToast('info', 'Uyarı', 'Duyuru güncellendi ancak görsel yüklenemedi');
                }
            }

            showToast('success', 'Başarılı', 'Duyuru başarıyla güncellendi');
            
            // Redirect to announcement detail page
            router.push(`/dashboard/announcements/${announcement.id}`);
        } catch (error: any) {
            console.error('Failed to update announcement:', error);
            showToast('error', 'Hata', error?.message || 'Duyuru güncellenirken bir hata oluştu');
        } finally {
            setLoading(false);
        }
    }, [announcement, router, showToast]);

    // Cancel handler
    const handleCancel = useCallback(() => {
        if (announcement) {
            router.push(`/dashboard/announcements/${announcement.id}`);
        } else {
            router.push('/dashboard/announcements');
        }
    }, [announcement, router]);

    // Back handler
    const handleBack = useCallback(() => {
        if (announcement) {
            router.push(`/dashboard/announcements/${announcement.id}`);
        } else {
            router.push('/dashboard/announcements');
        }
    }, [announcement, router]);

    // Loading state
    if (fetchLoading) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Duyuru Düzenle" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <div className="mb-6">
                                <Skeleton className="h-10 w-48" />
                            </div>
                            <div className="mb-8">
                                <Skeleton className="h-8 w-64 mb-2" />
                                <Skeleton className="h-4 w-96" />
                            </div>
                            <div className="space-y-6">
                                <Card className="p-6">
                                    <Skeleton className="h-6 w-32 mb-6" />
                                    <div className="space-y-4">
                                        <Skeleton className="h-12 w-full" />
                                        <Skeleton className="h-32 w-full" />
                                        <div className="grid grid-cols-2 gap-4">
                                            <Skeleton className="h-12 w-full" />
                                            <Skeleton className="h-12 w-full" />
                                        </div>
                                    </div>
                                </Card>
                                <Card className="p-6">
                                    <Skeleton className="h-6 w-32 mb-6" />
                                    <div className="grid grid-cols-2 gap-4">
                                        <Skeleton className="h-12 w-full" />
                                        <Skeleton className="h-12 w-full" />
                                    </div>
                                </Card>
                            </div>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    // Error state
    if (error || !announcement) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Duyuru Bulunamadı" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="p-8 text-center">
                                <div className="mb-6">
                                    <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                                    <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                                        Duyuru Bulunamadı
                                    </h2>
                                    <p className="text-text-light-secondary dark:text-text-secondary">
                                        {error || 'Düzenlemek istediğiniz duyuru bulunamadı veya silinmiş olabilir.'}
                                    </p>
                                </div>
                                <div className="flex flex-col sm:flex-row gap-3 justify-center">
                                    <Button variant="ghost" size="md" onClick={() => router.push('/dashboard/announcements')}>
                                        Duyuru Listesine Dön
                                    </Button>
                                    <Button variant="primary" size="md" onClick={refreshAnnouncement}>
                                        Tekrar Dene
                                    </Button>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader title="Duyuru Düzenle" breadcrumbItems={breadcrumbItems} />

                    {/* Main Content */}
                    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Back Button */}
                        <div className="mb-6">
                            <Button variant="ghost" size="md" icon={ArrowLeft} onClick={handleBack}>
                                Duyuru Detayına Dön
                            </Button>
                        </div>

                        {/* Page Header */}
                        <div className="mb-8">
                            <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark mb-2">
                                Duyuru Düzenle
                            </h1>
                            <p className="text-text-light-secondary dark:text-text-secondary">
                                "{announcement.title}" duyurusunu düzenleyebilirsiniz. Değişiklikler kaydedildikten sonra
                                duyuru sakinler tarafından görülebilir.
                            </p>
                        </div>

                        {/* Announcement Form */}
                        <AnnouncementForm
                            mode="edit"
                            initialData={announcement}
                            onSubmit={handleSubmit}
                            onCancel={handleCancel}
                            loading={loading}
                        />
                    </main>
                </div>

                {/* Toast Container */}
                <ToastContainer toasts={toasts} onRemove={removeToast} />
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/announcements/[id]/page.tsx">
'use client';

import React, { useState, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Skeleton from '@/app/components/ui/Skeleton';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';
import { ToastContainer } from '@/app/components/ui/Toast';
import { useToast } from '@/hooks/useToast';
import { useAnnouncementDetail } from '../hooks/useAnnouncementDetail';
import { createAnnouncementActionHandlers } from '../actions/announcement-actions';
import {
    ArrowLeft, Edit, Trash2, Archive, Send, Pin, AlertTriangle, 
    Copy, Calendar, User, MapPin, Clock, Eye, Download
} from 'lucide-react';
import {
    getAnnouncementTypeLabel,
    getAnnouncementStatusLabel,
    getAnnouncementTypeColor,
    getAnnouncementStatusColor,
    isAnnouncementExpired,
    isAnnouncementExpiringSoon,
    getDaysUntilExpiry,
    AnnouncementStatus
} from '@/services/types/announcement.types';
import type { Announcement } from '@/services/types/announcement.types';

/**
 * Announcement Detail Page Component
 * 
 * Shows detailed view of a single announcement with action buttons
 */
export default function AnnouncementDetailPage() {
    const router = useRouter();
    const params = useParams();
    const { toasts, removeToast } = useToast();
    const announcementId = params?.id as string;

    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [confirmationState, setConfirmationState] = useState<{
        isOpen: boolean;
        action: string;
        loading: boolean;
    }>({
        isOpen: false,
        action: '',
        loading: false
    });

    // Data hook
    const { announcement, loading, error, refreshAnnouncement } = useAnnouncementDetail({
        announcementId
    });

    // Toast functions
    const toastFunctions = {
        success: useCallback((title: string, message: string) => {
            console.log(`✓ ${title}: ${message}`);
        }, []),
        info: useCallback((title: string, message: string) => {
            console.info(`${title}: ${message}`);
        }, []),
        error: useCallback((title: string, message: string) => {
            console.error(`✗ ${title}: ${message}`);
        }, [])
    };

    // Data update functions
    const dataUpdateFunctions = {
        setAnnouncements: () => {}, // Not needed for detail view
        refreshData: refreshAnnouncement
    };

    // Action handlers
    const actionHandlers = createAnnouncementActionHandlers(
        toastFunctions,
        dataUpdateFunctions,
        announcement ? [announcement] : []
    );

    // Breadcrumb items
    const breadcrumbItems = [
        { label: 'Dashboard', href: '/dashboard' },
        { label: 'Duyurular', href: '/dashboard/announcements' },
        { label: announcement?.title || 'Duyuru Detayı', href: `/dashboard/announcements/${announcementId}` }
    ];

    // Action handlers
    const handleBack = useCallback(() => {
        router.push('/dashboard/announcements');
    }, [router]);

    const handleEdit = useCallback(() => {
        if (announcement) {
            router.push(`/dashboard/announcements/${announcement.id}/edit`);
        }
    }, [announcement, router]);

    const handleDelete = useCallback(() => {
        setConfirmationState({
            isOpen: true,
            action: 'delete',
            loading: false
        });
    }, []);

    const handlePublish = useCallback(async () => {
        if (announcement) {
            await actionHandlers.handlePublishAnnouncement(announcement);
            await refreshAnnouncement();
        }
    }, [announcement, actionHandlers, refreshAnnouncement]);

    const handleArchive = useCallback(async () => {
        if (announcement) {
            await actionHandlers.handleArchiveAnnouncement(announcement);
            await refreshAnnouncement();
        }
    }, [announcement, actionHandlers, refreshAnnouncement]);

    const handleTogglePin = useCallback(async () => {
        if (announcement) {
            await actionHandlers.handleTogglePin(announcement);
            await refreshAnnouncement();
        }
    }, [announcement, actionHandlers, refreshAnnouncement]);

    const handleToggleEmergency = useCallback(async () => {
        if (announcement) {
            await actionHandlers.handleToggleEmergency(announcement);
            await refreshAnnouncement();
        }
    }, [announcement, actionHandlers, refreshAnnouncement]);

    const handleDuplicate = useCallback(async () => {
        if (announcement) {
            await actionHandlers.handleDuplicateAnnouncement(announcement);
        }
    }, [announcement, actionHandlers]);

    const handleConfirmAction = useCallback(async () => {
        if (!announcement) return;

        setConfirmationState(prev => ({ ...prev, loading: true }));

        try {
            switch (confirmationState.action) {
                case 'delete':
                    await actionHandlers.handleDeleteAnnouncement(announcement);
                    router.push('/dashboard/announcements');
                    break;
                default:
                    break;
            }
            setConfirmationState({ isOpen: false, action: '', loading: false });
        } catch (error) {
            setConfirmationState(prev => ({ ...prev, loading: false }));
        }
    }, [announcement, confirmationState.action, actionHandlers, router]);

    // Render helper functions
    const renderStatusBadge = (announcement: Announcement) => {
        const isExpired = isAnnouncementExpired(announcement);
        const isExpiringSoon = isAnnouncementExpiringSoon(announcement);
        
        let statusColor = getAnnouncementStatusColor(announcement.status);
        let statusLabel = getAnnouncementStatusLabel(announcement.status);
        
        if (isExpired) {
            statusColor = 'red';
            statusLabel += ' (Süresi Dolmuş)';
        } else if (isExpiringSoon) {
            statusColor = 'gold';
            statusLabel += ' (Yakında Bitiyor)';
        }
        
        return (
            <Badge
                variant="soft"
                color={statusColor as any}
                className="text-sm px-4 py-2 rounded-full font-medium"
            >
                {statusLabel}
            </Badge>
        );
    };

    const renderActionButtons = (announcement: Announcement) => {
        const buttons = [];

        // Edit button - always available
        buttons.push(
            <Button key="edit" variant="secondary" size="md" icon={Edit} onClick={handleEdit}>
                Düzenle
            </Button>
        );

        // Status-specific actions
        if (announcement.status === AnnouncementStatus.DRAFT) {
            buttons.push(
                <Button key="publish" variant="primary" size="md" icon={Send} onClick={handlePublish}>
                    Yayınla
                </Button>
            );
        }

        if (announcement.status === AnnouncementStatus.PUBLISHED) {
            buttons.push(
                <Button key="archive" variant="secondary" size="md" icon={Archive} onClick={handleArchive}>
                    Arşivle
                </Button>
            );
        }

        // Pin/Unpin button
        buttons.push(
            <Button 
                key="pin" 
                variant="ghost" 
                size="md" 
                icon={Pin} 
                onClick={handleTogglePin}
                className={announcement.isPinned ? 'text-primary-gold' : ''}
            >
                {announcement.isPinned ? 'Sabitlemeyi Kaldır' : 'Sabitle'}
            </Button>
        );

        // Emergency toggle
        buttons.push(
            <Button 
                key="emergency" 
                variant="ghost" 
                size="md" 
                icon={AlertTriangle} 
                onClick={handleToggleEmergency}
                className={announcement.isEmergency ? 'text-red-500' : ''}
            >
                {announcement.isEmergency ? 'Acil İşaretini Kaldır' : 'Acil Olarak İşaretle'}
            </Button>
        );

        // Duplicate button
        buttons.push(
            <Button key="duplicate" variant="ghost" size="md" icon={Copy} onClick={handleDuplicate}>
                Kopyala
            </Button>
        );

        // Delete button
        buttons.push(
            <Button key="delete" variant="danger" size="md" icon={Trash2} onClick={handleDelete}>
                Sil
            </Button>
        );

        return buttons;
    };

    if (loading) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Duyuru Detayı" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="p-8">
                                <Skeleton className="h-8 w-3/4 mb-4" />
                                <Skeleton className="h-4 w-1/2 mb-6" />
                                <Skeleton className="h-32 w-full mb-6" />
                                <div className="flex gap-4">
                                    <Skeleton className="h-10 w-24" />
                                    <Skeleton className="h-10 w-24" />
                                    <Skeleton className="h-10 w-24" />
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    if (error || !announcement) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Duyuru Bulunamadı" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="p-8 text-center">
                                <div className="mb-6">
                                    <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                                    <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                                        Duyuru Bulunamadı
                                    </h2>
                                    <p className="text-text-light-secondary dark:text-text-secondary">
                                        {error || 'Aradığınız duyuru bulunamadı veya silinmiş olabilir.'}
                                    </p>
                                </div>
                                <Button variant="primary" size="md" icon={ArrowLeft} onClick={handleBack}>
                                    Duyuru Listesine Dön
                                </Button>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    const isExpired = isAnnouncementExpired(announcement);
    const isExpiringSoon = isAnnouncementExpiringSoon(announcement);
    const daysUntilExpiry = getDaysUntilExpiry(announcement);

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader title="Duyuru Detayı" breadcrumbItems={breadcrumbItems} />

                    {/* Main Content */}
                    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Back Button */}
                        <div className="mb-6">
                            <Button variant="ghost" size="md" icon={ArrowLeft} onClick={handleBack}>
                                Duyuru Listesine Dön
                            </Button>
                        </div>

                        {/* Announcement Details */}
                        <Card className="mb-6">
                            <div className="p-8">
                                {/* Header with title and badges */}
                                <div className="mb-6">
                                    <div className="flex items-start justify-between gap-4 mb-4">
                                        <div className="flex-1">
                                            <div className="flex items-center gap-3 mb-2">
                                                <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                                    {announcement.title}
                                                </h1>
                                                {announcement.isPinned && (
                                                    <Pin className="w-6 h-6 text-primary-gold" />
                                                )}
                                                {announcement.isEmergency && (
                                                    <AlertTriangle className="w-6 h-6 text-red-500" />
                                                )}
                                            </div>
                                        </div>
                                    </div>

                                    {/* Status and Type Badges */}
                                    <div className="flex flex-wrap gap-3 mb-6">
                                        {renderStatusBadge(announcement)}
                                        <Badge
                                            variant="soft"
                                            color={getAnnouncementTypeColor(announcement.type) as any}
                                            className="text-sm px-4 py-2 rounded-full font-medium"
                                        >
                                            {getAnnouncementTypeLabel(announcement.type)}
                                        </Badge>
                                        {isExpired && (
                                            <Badge
                                                variant="soft"
                                                color="red"
                                                className="text-sm px-4 py-2 rounded-full font-medium"
                                            >
                                                Süresi Dolmuş
                                            </Badge>
                                        )}
                                        {isExpiringSoon && !isExpired && (
                                            <Badge
                                                variant="soft"
                                                color="gold"
                                                className="text-sm px-4 py-2 rounded-full font-medium"
                                            >
                                                Yakında Bitiyor
                                            </Badge>
                                        )}
                                    </div>

                                    {/* Action Buttons */}
                                    <div className="flex flex-wrap gap-3 mb-6">
                                        {renderActionButtons(announcement)}
                                    </div>
                                </div>

                                {/* Content */}
                                <div className="mb-8">
                                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                                        Duyuru İçeriği
                                    </h3>
                                    <div className="prose prose-gray dark:prose-invert max-w-none">
                                        <p className="text-text-light-primary dark:text-text-primary whitespace-pre-wrap">
                                            {announcement.content}
                                        </p>
                                    </div>
                                </div>

                                {/* Image */}
                                {announcement.imageUrl && (
                                    <div className="mb-8">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                                            Görsel
                                        </h3>
                                        <div className="rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700">
                                            <img
                                                src={announcement.imageUrl}
                                                alt={announcement.title}
                                                className="w-full h-auto"
                                            />
                                        </div>
                                    </div>
                                )}

                                {/* Metadata Grid */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    {/* Date Information */}
                                    <div className="space-y-4">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                                            Tarih Bilgileri
                                        </h3>
                                        <div className="space-y-3">
                                            <div className="flex items-center gap-3">
                                                <Calendar className="w-5 h-5 text-text-light-secondary dark:text-text-secondary" />
                                                <div>
                                                    <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                                        Oluşturulma Tarihi
                                                    </p>
                                                    <p className="text-text-on-light dark:text-text-on-dark">
                                                        {new Date(announcement.createdAt).toLocaleString('tr-TR')}
                                                    </p>
                                                </div>
                                            </div>
                                            {announcement.publishDate && (
                                                <div className="flex items-center gap-3">
                                                    <Send className="w-5 h-5 text-text-light-secondary dark:text-text-secondary" />
                                                    <div>
                                                        <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                                            Yayınlanma Tarihi
                                                        </p>
                                                        <p className="text-text-on-light dark:text-text-on-dark">
                                                            {new Date(announcement.publishDate).toLocaleString('tr-TR')}
                                                        </p>
                                                    </div>
                                                </div>
                                            )}
                                            {announcement.expiryDate && (
                                                <div className="flex items-center gap-3">
                                                    <Clock className="w-5 h-5 text-text-light-secondary dark:text-text-secondary" />
                                                    <div>
                                                        <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                                            Bitiş Tarihi
                                                        </p>
                                                        <p className="text-text-on-light dark:text-text-on-dark">
                                                            {new Date(announcement.expiryDate).toLocaleString('tr-TR')}
                                                            {daysUntilExpiry !== undefined && (
                                                                <span className={`ml-2 text-sm ${
                                                                    isExpired ? 'text-red-500' : 
                                                                    isExpiringSoon ? 'text-yellow-500' : 
                                                                    'text-text-light-secondary dark:text-text-secondary'
                                                                }`}>
                                                                    ({isExpired 
                                                                        ? `${Math.abs(daysUntilExpiry)} gün geçti`
                                                                        : `${daysUntilExpiry} gün kaldı`
                                                                    })
                                                                </span>
                                                            )}
                                                        </p>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {/* Author and Properties */}
                                    <div className="space-y-4">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                                            Diğer Bilgiler
                                        </h3>
                                        <div className="space-y-3">
                                            <div className="flex items-center gap-3">
                                                <User className="w-5 h-5 text-text-light-secondary dark:text-text-secondary" />
                                                <div>
                                                    <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                                        Oluşturan
                                                    </p>
                                                    <p className="text-text-on-light dark:text-text-on-dark">
                                                        {announcement.createdBy 
                                                            ? `${announcement.createdBy.firstName} ${announcement.createdBy.lastName}`
                                                            : 'Bilinmiyor'
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                            <div className="flex items-center gap-3">
                                                <MapPin className="w-5 h-5 text-text-light-secondary dark:text-text-secondary" />
                                                <div>
                                                    <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                                        Hedef Özellikler
                                                    </p>
                                                    <p className="text-text-on-light dark:text-text-on-dark">
                                                        {announcement.properties && announcement.properties.length > 0
                                                            ? `${announcement.properties.length} özellik seçildi`
                                                            : 'Tüm özellikler'
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* Properties List */}
                                {announcement.properties && announcement.properties.length > 0 && (
                                    <div className="mt-8">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                                            Hedef Özellikler
                                        </h3>
                                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                                            {announcement.properties.map(property => (
                                                <div key={property.id} className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                                                    <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                                        {property.name}
                                                    </p>
                                                    {property.address && (
                                                        <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                            {property.address}
                                                        </p>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                )}
                            </div>
                        </Card>
                    </main>
                </div>

                {/* Confirmation Modal */}
                <ConfirmationModal
                    isOpen={confirmationState.isOpen}
                    onClose={() => setConfirmationState({ isOpen: false, action: '', loading: false })}
                    onConfirm={handleConfirmAction}
                    title="Duyuru Silme"
                    variant="danger"
                    loading={confirmationState.loading}
                    itemName={announcement?.title}
                    itemType="duyuru"
                />

                {/* Toast Container */}
                <ToastContainer toasts={toasts} onRemove={removeToast} />
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/announcements/actions/announcement-actions.ts">
// Individual Announcement Actions
import { announcementService } from '@/services';
import type { Announcement } from '@/services/types/announcement.types';

interface ToastFunctions {
    success: (title: string, message: string) => void;
    error: (title: string, message: string) => void;
    info: (title: string, message: string) => void;
}

interface DataUpdateFunctions {
    setAnnouncements: (announcements: Announcement[]) => void;
    refreshData: () => Promise<void>;
}

export function createAnnouncementActionHandlers(
    toastFunctions: ToastFunctions,
    dataUpdateFunctions: DataUpdateFunctions,
    currentAnnouncements: Announcement[]
) {
    const handleViewAnnouncement = (announcement: Announcement) => {
        // Navigate to announcement detail page
        window.location.href = `/dashboard/announcements/${announcement.id}`;
    };

    const handleEditAnnouncement = (announcement: Announcement) => {
        // Navigate to announcement edit page
        window.location.href = `/dashboard/announcements/${announcement.id}/edit`;
    };

    const handleDeleteAnnouncement = async (announcement: Announcement) => {
        try {
            await announcementService.deleteAnnouncement(announcement.id);
            
            toastFunctions.success(
                'Başarılı',
                `"${announcement.title}" duyurusu silindi`
            );

            // Update local state by removing the deleted announcement
            const updatedAnnouncements = currentAnnouncements.filter(a => a.id !== announcement.id);
            dataUpdateFunctions.setAnnouncements(updatedAnnouncements);
            
            // Refresh data to ensure consistency
            await dataUpdateFunctions.refreshData();
        } catch (error: any) {
            console.error('Failed to delete announcement:', error);
            toastFunctions.error('Hata', error?.message || 'Duyuru silinirken bir hata oluştu');
        }
    };

    const handlePublishAnnouncement = async (announcement: Announcement) => {
        try {
            await announcementService.publishAnnouncement(announcement.id);
            
            toastFunctions.success(
                'Başarılı',
                `"${announcement.title}" duyurusu yayınlandı`
            );

            await dataUpdateFunctions.refreshData();
        } catch (error: any) {
            console.error('Failed to publish announcement:', error);
            toastFunctions.error('Hata', error?.message || 'Duyuru yayınlanırken bir hata oluştu');
        }
    };

    const handleArchiveAnnouncement = async (announcement: Announcement) => {
        try {
            await announcementService.archiveAnnouncement(announcement.id);
            
            toastFunctions.success(
                'Başarılı',
                `"${announcement.title}" duyurusu arşivlendi`
            );

            await dataUpdateFunctions.refreshData();
        } catch (error: any) {
            console.error('Failed to archive announcement:', error);
            toastFunctions.error('Hata', error?.message || 'Duyuru arşivlenirken bir hata oluştu');
        }
    };

    const handleTogglePin = async (announcement: Announcement) => {
        try {
            const newPinnedState = !announcement.isPinned;
            await announcementService.updateAnnouncement(announcement.id, {
                isPinned: newPinnedState
            });
            
            toastFunctions.success(
                'Başarılı',
                `"${announcement.title}" duyurusu ${newPinnedState ? 'sabitlendi' : 'sabitleme kaldırıldı'}`
            );

            await dataUpdateFunctions.refreshData();
        } catch (error: any) {
            console.error('Failed to toggle pin status:', error);
            toastFunctions.error('Hata', error?.message || 'Sabitleme durumu değiştirilemedi');
        }
    };

    const handleToggleEmergency = async (announcement: Announcement) => {
        try {
            const newEmergencyState = !announcement.isEmergency;
            await announcementService.updateAnnouncement(announcement.id, {
                isEmergency: newEmergencyState
            });
            
            toastFunctions.success(
                'Başarılı',
                `"${announcement.title}" duyurusu ${newEmergencyState ? 'acil olarak işaretlendi' : 'acil işareti kaldırıldı'}`
            );

            await dataUpdateFunctions.refreshData();
        } catch (error: any) {
            console.error('Failed to toggle emergency status:', error);
            toastFunctions.error('Hata', error?.message || 'Acil durum işareti değiştirilemedi');
        }
    };

    const handleDuplicateAnnouncement = async (announcement: Announcement) => {
        try {
            const duplicateData = {
                title: `${announcement.title} (Kopya)`,
                content: announcement.content,
                type: announcement.type,
                status: 'DRAFT' as any,
                isEmergency: announcement.isEmergency,
                isPinned: false, // Don't pin duplicates
                propertyIds: announcement.properties?.map(p => p.id) || [],
            };

            await announcementService.createAnnouncement(duplicateData);
            
            toastFunctions.success(
                'Başarılı',
                `"${announcement.title}" duyurusu kopyalandı`
            );

            await dataUpdateFunctions.refreshData();
        } catch (error: any) {
            console.error('Failed to duplicate announcement:', error);
            toastFunctions.error('Hata', error?.message || 'Duyuru kopyalanırken bir hata oluştu');
        }
    };

    return {
        handleViewAnnouncement,
        handleEditAnnouncement,
        handleDeleteAnnouncement,
        handlePublishAnnouncement,
        handleArchiveAnnouncement,
        handleTogglePin,
        handleToggleEmergency,
        handleDuplicateAnnouncement,
    };
}
</file>

<file path="src/app/dashboard/announcements/actions/bulk-actions.ts">
// Bulk Actions for Announcements
import { announcementService } from '@/services';
import type { 
    Announcement, 
    AnnouncementBulkActionDto 
} from '@/services/types/announcement.types';
import { ANNOUNCEMENT_BULK_ACTIONS } from '../constants';

interface ToastFunctions {
    success: (title: string, message: string) => void;
    error: (title: string, message: string) => void;
    info: (title: string, message: string) => void;
}

interface DataUpdateFunctions {
    setAnnouncements: (announcements: Announcement[]) => void;
    refreshData: () => Promise<void>;
}

interface BulkDeleteState {
    isOpen: boolean;
    announcements: Announcement[];
    loading: boolean;
}

type SetBulkDeleteState = React.Dispatch<React.SetStateAction<BulkDeleteState>>;

export function createBulkActionHandlers(
    toastFunctions: ToastFunctions,
    dataUpdateFunctions: DataUpdateFunctions,
    bulkDeleteState: BulkDeleteState,
    setBulkDeleteState: SetBulkDeleteState
) {
    const getBulkActions = (selectedAnnouncements: Announcement[]) => {
        if (selectedAnnouncements.length === 0) return [];

        return ANNOUNCEMENT_BULK_ACTIONS.map(action => ({
            ...action,
            disabled: false, // You can add logic here to disable specific actions based on selection
            onClick: () => handleBulkAction(action.id, selectedAnnouncements),
        }));
    };

    const handleBulkAction = async (actionId: string, selectedAnnouncements: Announcement[]) => {
        if (selectedAnnouncements.length === 0) {
            toastFunctions.error('Hata', 'Lütfen en az bir duyuru seçin');
            return;
        }

        const ids = selectedAnnouncements.map(announcement => announcement.id);

        try {
            let bulkActionData: AnnouncementBulkActionDto;

            switch (actionId) {
                case 'publish':
                    bulkActionData = {
                        ids,
                        action: 'publish',
                        data: { status: 'PUBLISHED' as any }
                    };
                    break;
                case 'archive':
                    bulkActionData = {
                        ids,
                        action: 'archive',
                        data: { status: 'ARCHIVED' as any }
                    };
                    break;
                case 'pin':
                    bulkActionData = {
                        ids,
                        action: 'pin',
                        data: { isPinned: true }
                    };
                    break;
                case 'unpin':
                    bulkActionData = {
                        ids,
                        action: 'unpin',
                        data: { isPinned: false }
                    };
                    break;
                case 'mark_emergency':
                    bulkActionData = {
                        ids,
                        action: 'mark_emergency',
                        data: { isEmergency: true }
                    };
                    break;
                case 'unmark_emergency':
                    bulkActionData = {
                        ids,
                        action: 'unmark_emergency',
                        data: { isEmergency: false }
                    };
                    break;
                case 'delete':
                    setBulkDeleteState({
                        isOpen: true,
                        announcements: selectedAnnouncements,
                        loading: false
                    });
                    return;
                default:
                    toastFunctions.error('Hata', 'Bilinmeyen işlem');
                    return;
            }

            const response = await announcementService.bulkAction(bulkActionData);
            
            if (response.data?.success) {
                toastFunctions.success(
                    'Başarılı',
                    `${response.data.affectedCount} duyuru güncellendi`
                );
                await dataUpdateFunctions.refreshData();
            } else {
                toastFunctions.error('Hata', response.data?.message || 'İşlem başarısız');
            }
        } catch (error: any) {
            console.error('Bulk action failed:', error);
            toastFunctions.error('Hata', error?.message || 'Toplu işlem başarısız');
        }
    };

    const executeBulkDelete = async () => {
        if (bulkDeleteState.announcements.length === 0) return;

        setBulkDeleteState(prev => ({ ...prev, loading: true }));

        try {
            const ids = bulkDeleteState.announcements.map(announcement => announcement.id);
            const bulkActionData: AnnouncementBulkActionDto = {
                ids,
                action: 'delete'
            };

            const response = await announcementService.bulkAction(bulkActionData);
            
            if (response.data?.success) {
                toastFunctions.success(
                    'Başarılı',
                    `${response.data.affectedCount} duyuru silindi`
                );
                await dataUpdateFunctions.refreshData();
                setBulkDeleteState({
                    isOpen: false,
                    announcements: [],
                    loading: false
                });
            } else {
                toastFunctions.error('Hata', response.data?.message || 'Silme işlemi başarısız');
                setBulkDeleteState(prev => ({ ...prev, loading: false }));
            }
        } catch (error: any) {
            console.error('Bulk delete failed:', error);
            toastFunctions.error('Hata', error?.message || 'Silme işlemi başarısız');
            setBulkDeleteState(prev => ({ ...prev, loading: false }));
        }
    };

    return {
        getBulkActions,
        handleBulkAction,
        executeBulkDelete,
    };
}
</file>

<file path="src/app/dashboard/announcements/add/page.tsx">
'use client';

import React, { useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Button from '@/app/components/ui/Button';
import { ToastContainer } from '@/app/components/ui/Toast';
import { useToast } from '@/hooks/useToast';
import AnnouncementForm from '../components/AnnouncementForm';
import { announcementService } from '@/services';
import { ArrowLeft } from 'lucide-react';
import type { 
    AnnouncementFormData, 
    CreateAnnouncementDto 
} from '@/services/types/announcement.types';

/**
 * Create Announcement Page Component
 * 
 * Provides form interface for creating new announcements
 */
export default function CreateAnnouncementPage() {
    const router = useRouter();
    const { toasts, removeToast } = useToast();
    const [loading, setLoading] = useState(false);
    const [sidebarOpen, setSidebarOpen] = useState(false);

    // Breadcrumb items
    const breadcrumbItems = [
        { label: 'Dashboard', href: '/dashboard' },
        { label: 'Duyurular', href: '/dashboard/announcements' },
        { label: 'Yeni Duyuru', href: '/dashboard/announcements/add' }
    ];

    // Toast functions
    const showToast = useCallback((type: 'success' | 'error' | 'info', title: string, message: string) => {
        console.log(`${type === 'success' ? '✓' : type === 'error' ? '✗' : 'ℹ'} ${title}: ${message}`);
    }, []);

    // Form submission handler
    const handleSubmit = useCallback(async (formData: AnnouncementFormData) => {
        setLoading(true);

        try {
            // Prepare data for API
            const createData: CreateAnnouncementDto = {
                title: formData.title,
                content: formData.content,
                type: formData.type,
                status: formData.status,
                publishDate: formData.publishDate?.toISOString(),
                expiryDate: formData.expiryDate?.toISOString(),
                isPinned: formData.isPinned,
                isEmergency: formData.isEmergency,
                propertyIds: formData.propertyIds.length > 0 ? formData.propertyIds : undefined,
            };

            // Create announcement
            const response = await announcementService.createAnnouncement(createData);
            
            let announcementId = response.data.id;

            // Upload image if provided
            if (formData.image && announcementId) {
                try {
                    await announcementService.uploadAnnouncementImage(announcementId, formData.image);
                } catch (imageError) {
                    console.warn('Image upload failed:', imageError);
                    showToast('info', 'Uyarı', 'Duyuru oluşturuldu ancak görsel yüklenemedi');
                }
            }

            showToast('success', 'Başarılı', 'Duyuru başarıyla oluşturuldu');
            
            // Redirect to announcement detail page
            router.push(`/dashboard/announcements/${announcementId}`);
        } catch (error: any) {
            console.error('Failed to create announcement:', error);
            showToast('error', 'Hata', error?.message || 'Duyuru oluşturulurken bir hata oluştu');
        } finally {
            setLoading(false);
        }
    }, [router, showToast]);

    // Cancel handler
    const handleCancel = useCallback(() => {
        router.push('/dashboard/announcements');
    }, [router]);

    // Back handler
    const handleBack = useCallback(() => {
        router.push('/dashboard/announcements');
    }, [router]);

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader title="Yeni Duyuru" breadcrumbItems={breadcrumbItems} />

                    {/* Main Content */}
                    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Back Button */}
                        <div className="mb-6">
                            <Button variant="ghost" size="md" icon={ArrowLeft} onClick={handleBack}>
                                Duyuru Listesine Dön
                            </Button>
                        </div>

                        {/* Page Header */}
                        <div className="mb-8">
                            <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark mb-2">
                                Yeni Duyuru Oluştur
                            </h1>
                            <p className="text-text-light-secondary dark:text-text-secondary">
                                Apartman sakinleri için yeni bir duyuru oluşturun. Duyurunuz oluşturulduktan sonra
                                gerektiğinde düzenleyebilir veya yayınlayabilirsiniz.
                            </p>
                        </div>

                        {/* Announcement Form */}
                        <AnnouncementForm
                            mode="create"
                            onSubmit={handleSubmit}
                            onCancel={handleCancel}
                            loading={loading}
                        />
                    </main>
                </div>

                {/* Toast Container */}
                <ToastContainer toasts={toasts} onRemove={removeToast} />
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/announcements/components/table-columns.tsx">
// Table Columns Configuration for Announcements
import React from 'react';
import Badge from '@/app/components/ui/Badge';
import { 
    getAnnouncementTypeLabel,
    getAnnouncementStatusLabel,
    getAnnouncementTypeColor,
    getAnnouncementStatusColor,
    isAnnouncementExpired,
    isAnnouncementExpiringSoon,
    getDaysUntilExpiry
} from '@/services/types/announcement.types';
import type { Announcement } from '@/services/types/announcement.types';
import { Calendar, AlertTriangle, Pin, User } from 'lucide-react';

interface TableActionHandlers {
    handleViewAnnouncement: (announcement: Announcement) => void;
}

export function getTableColumns(
    actionHandlers: TableActionHandlers,
    ActionMenuComponent?: React.ComponentType<{ row: Announcement }>
) {
    return [
        {
            id: 'title',
            label: 'Başlık',
            key: 'title' as keyof Announcement,
            sortable: true,
            render: (announcement: Announcement) => (
                <div className="flex flex-col">
                    <div className="flex items-center gap-2">
                        <span 
                            className="font-medium text-text-on-light dark:text-text-on-dark cursor-pointer hover:text-primary-gold"
                            onClick={() => actionHandlers.handleViewAnnouncement(announcement)}
                        >
                            {announcement.title}
                        </span>
                        {announcement.isPinned && (
                            <Pin className="w-4 h-4 text-primary-gold" />
                        )}
                        {announcement.isEmergency && (
                            <AlertTriangle className="w-4 h-4 text-red-500" />
                        )}
                    </div>
                    <span className="text-sm text-text-light-secondary dark:text-text-secondary line-clamp-2">
                        {announcement.content.substring(0, 100)}
                        {announcement.content.length > 100 && '...'}
                    </span>
                </div>
            ),
        },
        {
            id: 'type',
            label: 'Tip',
            key: 'type' as keyof Announcement,
            sortable: true,
            render: (announcement: Announcement) => (
                <Badge
                    variant="soft"
                    color={getAnnouncementTypeColor(announcement.type) as any}
                    className="text-xs px-3 py-1 rounded-full font-medium"
                >
                    {getAnnouncementTypeLabel(announcement.type)}
                </Badge>
            ),
        },
        {
            id: 'status',
            label: 'Durum',
            key: 'status' as keyof Announcement,
            sortable: true,
            render: (announcement: Announcement) => {
                const isExpired = isAnnouncementExpired(announcement);
                const isExpiringSoon = isAnnouncementExpiringSoon(announcement);
                
                let statusColor = getAnnouncementStatusColor(announcement.status);
                let statusLabel = getAnnouncementStatusLabel(announcement.status);
                
                if (isExpired) {
                    statusColor = 'red';
                    statusLabel += ' (Süresi Dolmuş)';
                } else if (isExpiringSoon) {
                    statusColor = 'gold';
                    statusLabel += ' (Yakında)';
                }
                
                return (
                    <Badge
                        variant="soft"
                        color={statusColor as any}
                        className="text-xs px-3 py-1 rounded-full font-medium"
                    >
                        {statusLabel}
                    </Badge>
                );
            },
        },
        {
            id: 'createdBy',
            label: 'Oluşturan',
            key: 'createdBy' as keyof Announcement,
            sortable: false,
            render: (announcement: Announcement) => (
                <div className="flex items-center gap-2">
                    <User className="w-4 h-4 text-text-light-secondary dark:text-text-secondary" />
                    <span className="text-sm">
                        {announcement.createdBy 
                            ? `${announcement.createdBy.firstName} ${announcement.createdBy.lastName}`
                            : 'Bilinmiyor'
                        }
                    </span>
                </div>
            ),
        },
        {
            id: 'publishDate',
            label: 'Yayın Tarihi',
            key: 'publishDate' as keyof Announcement,
            sortable: true,
            render: (announcement: Announcement) => (
                <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4 text-text-light-secondary dark:text-text-secondary" />
                    <span className="text-sm">
                        {announcement.publishDate 
                            ? new Date(announcement.publishDate).toLocaleDateString('tr-TR')
                            : '-'
                        }
                    </span>
                </div>
            ),
        },
        {
            id: 'expiryDate',
            label: 'Bitiş Tarihi',
            key: 'expiryDate' as keyof Announcement,
            sortable: true,
            render: (announcement: Announcement) => {
                if (!announcement.expiryDate) {
                    return <span className="text-sm text-text-light-secondary dark:text-text-secondary">-</span>;
                }
                
                const daysUntilExpiry = getDaysUntilExpiry(announcement);
                const isExpired = isAnnouncementExpired(announcement);
                const isExpiringSoon = isAnnouncementExpiringSoon(announcement);
                
                return (
                    <div className="flex flex-col">
                        <div className="flex items-center gap-2">
                            <Calendar className="w-4 h-4 text-text-light-secondary dark:text-text-secondary" />
                            <span className="text-sm">
                                {new Date(announcement.expiryDate).toLocaleDateString('tr-TR')}
                            </span>
                        </div>
                        {daysUntilExpiry !== undefined && (
                            <span className={`text-xs ${
                                isExpired ? 'text-red-500' : 
                                isExpiringSoon ? 'text-yellow-500' : 
                                'text-text-light-secondary dark:text-text-secondary'
                            }`}>
                                {isExpired 
                                    ? `${Math.abs(daysUntilExpiry)} gün geçti`
                                    : `${daysUntilExpiry} gün kaldı`
                                }
                            </span>
                        )}
                    </div>
                );
            },
        },
        {
            id: 'properties',
            label: 'Hedef Özellikler',
            key: 'properties' as keyof Announcement,
            sortable: false,
            render: (announcement: Announcement) => (
                <span className="text-sm">
                    {announcement.properties && announcement.properties.length > 0
                        ? `${announcement.properties.length} özellik`
                        : 'Tüm özellikler'
                    }
                </span>
            ),
        },
        {
            id: 'createdAt',
            label: 'Oluşturma Tarihi',
            key: 'createdAt' as keyof Announcement,
            sortable: true,
            render: (announcement: Announcement) => (
                <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4 text-text-light-secondary dark:text-text-secondary" />
                    <span className="text-sm">
                        {new Date(announcement.createdAt).toLocaleDateString('tr-TR')}
                    </span>
                </div>
            ),
        },
        ...(ActionMenuComponent ? [{
            id: 'actions',
            label: '',
            key: 'actions' as keyof Announcement,
            sortable: false,
            render: (announcement: Announcement) => <ActionMenuComponent row={announcement} />,
        }] : []),
    ];
}
</file>

<file path="src/app/dashboard/announcements/constants/index.ts">
// Announcements Constants
import { Users, AlertTriangle, Calendar, Settings, BookOpen, MessageSquare, Hash } from 'lucide-react';

export const VIEW_OPTIONS = [
    { id: 'table', label: 'Tablo', icon: Users },
    { id: 'grid', label: 'Kart', icon: Users }
];

export const BREADCRUMB_ITEMS = [
    { label: 'Dashboard', href: '/dashboard' },
    { label: 'Duyurular', href: '/dashboard/announcements' }
];

export const DEFAULT_VALUES = {
    recordsPerPage: 10,
    currentPage: 1,
    selectedView: 'table' as const,
    sortConfig: {
        key: 'createdAt' as const,
        direction: 'desc' as const
    }
} as const;

export const ANNOUNCEMENT_FILTER_GROUPS = [
    {
        id: 'status',
        label: 'Durum',
        type: 'multiselect' as const,
        icon: Settings,
        options: [
            { id: 'DRAFT', label: 'Taslak', value: 'DRAFT' },
            { id: 'PUBLISHED', label: 'Yayında', value: 'PUBLISHED' },
            { id: 'ARCHIVED', label: 'Arşiv', value: 'ARCHIVED' },
        ],
    },
    {
        id: 'type',
        label: 'Tip',
        type: 'multiselect' as const,
        icon: Hash,
        options: [
            { id: 'GENERAL', label: 'Genel', value: 'GENERAL' },
            { id: 'MAINTENANCE', label: 'Bakım', value: 'MAINTENANCE' },
            { id: 'EMERGENCY', label: 'Acil Durum', value: 'EMERGENCY' },
            { id: 'EVENT', label: 'Etkinlik', value: 'EVENT' },
            { id: 'RULE', label: 'Kural', value: 'RULE' },
            { id: 'MEETING', label: 'Toplantı', value: 'MEETING' },
            { id: 'OTHER', label: 'Diğer', value: 'OTHER' },
        ],
    },
    {
        id: 'emergency',
        label: 'Acil Durumlar',
        type: 'checkbox' as const,
        icon: AlertTriangle,
        options: [
            { id: 'emergency', label: 'Sadece Acil Duyurular', value: 'true' },
        ],
    },
    {
        id: 'pinned',
        label: 'Sabitlenmiş',
        type: 'checkbox' as const,
        icon: BookOpen,
        options: [
            { id: 'pinned', label: 'Sadece Sabitlenmiş', value: 'true' },
        ],
    },
];

export const ANNOUNCEMENT_BULK_ACTIONS = [
    { id: 'publish', label: 'Yayınla', icon: MessageSquare, variant: 'primary' as const },
    { id: 'archive', label: 'Arşivle', icon: BookOpen, variant: 'secondary' as const },
    { id: 'pin', label: 'Sabitle', icon: BookOpen, variant: 'secondary' as const },
    { id: 'unpin', label: 'Sabitlemeyi Kaldır', icon: BookOpen, variant: 'secondary' as const },
    { id: 'mark_emergency', label: 'Acil Olarak İşaretle', icon: AlertTriangle, variant: 'gold' as const },
    { id: 'unmark_emergency', label: 'Acil İşaretini Kaldır', icon: AlertTriangle, variant: 'secondary' as const },
    { id: 'delete', label: 'Sil', icon: Users, variant: 'danger' as const },
];

export const STATS_CONFIG = [
    {
        key: 'total',
        title: 'Toplam',
        color: 'primary' as const,
        icon: MessageSquare,
    },
    {
        key: 'published',
        title: 'Yayında',
        color: 'primary' as const,
        icon: MessageSquare,
    },
    {
        key: 'draft',
        title: 'Taslak',
        color: 'secondary' as const,
        icon: MessageSquare,
    },
    {
        key: 'emergency',
        title: 'Acil',
        color: 'red' as const,
        icon: AlertTriangle,
    },
    {
        key: 'expiringSoon',
        title: 'Yakında Sona Erecek',
        color: 'gold' as const,
        icon: Calendar,
    },
];
</file>

<file path="src/app/dashboard/announcements/hooks/useAnnouncementDetail.ts">
// useAnnouncementDetail Hook
import { useState, useEffect, useCallback } from 'react';
import { announcementService } from '@/services';
import type { Announcement } from '@/services/types/announcement.types';

interface UseAnnouncementDetailProps {
    announcementId: string;
}

interface UseAnnouncementDetailReturn {
    announcement: Announcement | null;
    loading: boolean;
    error: string | null;
    refreshAnnouncement: () => Promise<void>;
    updateAnnouncement: (updates: Partial<Announcement>) => void;
}

export function useAnnouncementDetail({ announcementId }: UseAnnouncementDetailProps): UseAnnouncementDetailReturn {
    const [announcement, setAnnouncement] = useState<Announcement | null>(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const fetchAnnouncement = useCallback(async () => {
        if (!announcementId) return;

        setLoading(true);
        setError(null);

        try {
            const response = await announcementService.getAnnouncementById(announcementId);
            setAnnouncement(response.data);
        } catch (err: any) {
            console.error('Failed to fetch announcement:', err);
            setError(err?.message || 'Duyuru yüklenirken bir hata oluştu');
            setAnnouncement(null);
        } finally {
            setLoading(false);
        }
    }, [announcementId]);

    const refreshAnnouncement = useCallback(async () => {
        await fetchAnnouncement();
    }, [fetchAnnouncement]);

    const updateAnnouncement = useCallback((updates: Partial<Announcement>) => {
        if (announcement) {
            setAnnouncement(prev => prev ? { ...prev, ...updates } : null);
        }
    }, [announcement]);

    // Initial load and refetch when id changes  
    useEffect(() => {
        if (announcementId) {
            fetchAnnouncement();
        }
    }, [fetchAnnouncement, announcementId]);

    return {
        announcement,
        loading,
        error,
        refreshAnnouncement,
        updateAnnouncement,
    };
}
</file>

<file path="src/app/dashboard/announcements/hooks/useAnnouncementsData.ts">
// useAnnouncementsData Hook
import { useState, useEffect, useCallback } from 'react';
import { announcementService } from '@/services';
import type { 
    Announcement, 
    AnnouncementFilterParams,
    AnnouncementSortConfig 
} from '@/services/types/announcement.types';

interface UseAnnouncementsDataProps {
    currentPage: number;
    recordsPerPage: number;
    searchQuery: string;
    sortConfig: AnnouncementSortConfig;
    filters: Record<string, any>;
}

interface UseAnnouncementsDataReturn {
    announcements: Announcement[];
    loading: boolean;
    apiError: string | null;
    totalRecords: number;
    totalPages: number;
    lastUpdated: Date;
    refreshData: () => Promise<void>;
    setAnnouncements: (announcements: Announcement[]) => void;
}

export function useAnnouncementsData({
    currentPage,
    recordsPerPage,
    searchQuery,
    sortConfig,
    filters,
}: UseAnnouncementsDataProps): UseAnnouncementsDataReturn {
    const [announcements, setAnnouncements] = useState<Announcement[]>([]);
    const [loading, setLoading] = useState(false);
    const [apiError, setApiError] = useState<string | null>(null);
    const [totalRecords, setTotalRecords] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [lastUpdated, setLastUpdated] = useState(new Date());

    const fetchAnnouncements = useCallback(async () => {
        setLoading(true);
        setApiError(null);

        try {
            const params: AnnouncementFilterParams = {
                page: currentPage,
                limit: recordsPerPage,
                search: searchQuery || undefined,
                orderColumn: sortConfig.key,
                orderBy: sortConfig.direction?.toUpperCase() as 'ASC' | 'DESC',
                ...filters,
            };

            // Clean up empty params
            Object.keys(params).forEach(key => {
                const value = params[key as keyof AnnouncementFilterParams];
                if (value === undefined || value === null || value === '') {
                    delete params[key as keyof AnnouncementFilterParams];
                }
            });

            let response;
            if (searchQuery) {
                response = await announcementService.searchAnnouncements(searchQuery, params);
            } else {
                response = await announcementService.getAllAnnouncements(params);
            }

            setAnnouncements(response.data || []);
            setTotalRecords(response.total || 0);
            setTotalPages(response.totalPages || 0);
            setLastUpdated(new Date());
        } catch (error: any) {
            console.error('Failed to fetch announcements:', error);
            setApiError(error?.message || 'Duyurular yüklenirken bir hata oluştu');
            setAnnouncements([]);
            setTotalRecords(0);
            setTotalPages(0);
        } finally {
            setLoading(false);
        }
    }, [currentPage, recordsPerPage, searchQuery, sortConfig, filters]);

    const refreshData = useCallback(async () => {
        await fetchAnnouncements();
    }, [fetchAnnouncements]);

    // Initial load and refetch when dependencies change
    useEffect(() => {
        fetchAnnouncements();
    }, [fetchAnnouncements]);

    return {
        announcements,
        loading,
        apiError,
        totalRecords,
        totalPages,
        lastUpdated,
        refreshData,
        setAnnouncements,
    };
}
</file>

<file path="src/app/dashboard/announcements/hooks/useAnnouncementsFilters.ts">
// useAnnouncementsFilters Hook
import { useState, useCallback, useMemo } from 'react';
import type { Announcement, AnnouncementSortConfig } from '@/services/types/announcement.types';
import { DEFAULT_VALUES } from '../constants';

interface UseAnnouncementsFiltersReturn {
    currentPage: number;
    recordsPerPage: number;
    searchQuery: string;
    sortConfig: AnnouncementSortConfig;
    filters: Record<string, any>;
    selectedView: 'table' | 'grid';
    selectedAnnouncements: Announcement[];
    showFilterPanel: boolean;
    drawerClosing: boolean;
    
    // Actions
    handlePageChange: (page: number) => void;
    handleRecordsPerPageChange: (recordsPerPage: number) => void;
    handleSearch: (query: string) => void;
    handleSort: (config: AnnouncementSortConfig) => void;
    handleFiltersApply: (newFilters: Record<string, any>) => void;
    handleFiltersReset: () => void;
    handleViewChange: (view: 'table' | 'grid') => void;
    handleSelectionChange: (announcements: Announcement[]) => void;
    handleOpenDrawer: () => void;
    handleCloseDrawer: () => void;
    setSelectedAnnouncements: (announcements: Announcement[]) => void;
}

export function useAnnouncementsFilters(): UseAnnouncementsFiltersReturn {
    // Pagination
    const [currentPage, setCurrentPage] = useState<number>(DEFAULT_VALUES.currentPage);
    const [recordsPerPage, setRecordsPerPage] = useState<number>(DEFAULT_VALUES.recordsPerPage);
    
    // Search and Filters
    const [searchQuery, setSearchQuery] = useState('');
    const [filters, setFilters] = useState<Record<string, any>>({});
    
    // Sorting
    const [sortConfig, setSortConfig] = useState<AnnouncementSortConfig>(DEFAULT_VALUES.sortConfig);
    
    // View and Selection
    const [selectedView, setSelectedView] = useState<'table' | 'grid'>(DEFAULT_VALUES.selectedView);
    const [selectedAnnouncements, setSelectedAnnouncements] = useState<Announcement[]>([]);
    
    // UI State
    const [showFilterPanel, setShowFilterPanel] = useState(false);
    const [drawerClosing, setDrawerClosing] = useState(false);

    // Pagination handlers
    const handlePageChange = useCallback((page: number) => {
        setCurrentPage(page);
    }, []);

    const handleRecordsPerPageChange = useCallback((newRecordsPerPage: number) => {
        setRecordsPerPage(newRecordsPerPage);
        setCurrentPage(1); // Reset to first page
    }, []);

    // Search handler
    const handleSearch = useCallback((query: string) => {
        setSearchQuery(query);
        setCurrentPage(1); // Reset to first page
        setSelectedAnnouncements([]); // Clear selection
    }, []);

    // Sort handler
    const handleSort = useCallback((config: AnnouncementSortConfig) => {
        setSortConfig(config);
        setCurrentPage(1); // Reset to first page
    }, []);

    // Filter handlers
    const handleFiltersApply = useCallback((newFilters: Record<string, any>) => {
        setFilters(newFilters);
        setCurrentPage(1); // Reset to first page
        setSelectedAnnouncements([]); // Clear selection
        handleCloseDrawer();
    }, []);

    const handleFiltersReset = useCallback(() => {
        setFilters({});
        setCurrentPage(1); // Reset to first page
        setSelectedAnnouncements([]); // Clear selection
    }, []);

    // View handler
    const handleViewChange = useCallback((view: 'table' | 'grid') => {
        setSelectedView(view);
        setSelectedAnnouncements([]); // Clear selection when changing views
    }, []);

    // Selection handler
    const handleSelectionChange = useCallback((announcements: Announcement[]) => {
        setSelectedAnnouncements(announcements);
    }, []);

    // Drawer handlers
    const handleOpenDrawer = useCallback(() => {
        setShowFilterPanel(true);
        setDrawerClosing(false);
    }, []);

    const handleCloseDrawer = useCallback(() => {
        setDrawerClosing(true);
        setTimeout(() => {
            setShowFilterPanel(false);
            setDrawerClosing(false);
        }, 300); // Match transition duration
    }, []);

    return {
        currentPage,
        recordsPerPage,
        searchQuery,
        sortConfig,
        filters,
        selectedView,
        selectedAnnouncements,
        showFilterPanel,
        drawerClosing,
        
        handlePageChange,
        handleRecordsPerPageChange,
        handleSearch,
        handleSort,
        handleFiltersApply,
        handleFiltersReset,
        handleViewChange,
        handleSelectionChange,
        handleOpenDrawer,
        handleCloseDrawer,
        setSelectedAnnouncements,
    };
}
</file>

<file path="src/app/dashboard/announcements/hooks/useAnnouncementsStats.ts">
// useAnnouncementsStats Hook
import { useState, useEffect, useCallback } from 'react';
import { announcementService } from '@/services';
import type { AnnouncementStats } from '@/services/types/announcement.types';

interface UseAnnouncementsStatsReturn {
    stats: AnnouncementStats | null;
    loading: boolean;
    error: string | null;
    refreshStats: () => Promise<void>;
}

const DEFAULT_STATS: AnnouncementStats = {
    total: 0,
    draft: 0,
    published: 0,
    archived: 0,
    emergency: 0,
    pinned: 0,
    expiringSoon: 0,
    byType: {
        GENERAL: 0,
        MAINTENANCE: 0,
        EMERGENCY: 0,
        EVENT: 0,
        RULE: 0,
        MEETING: 0,
        OTHER: 0,
    },
};

export function useAnnouncementsStats(): UseAnnouncementsStatsReturn {
    const [stats, setStats] = useState<AnnouncementStats | null>(DEFAULT_STATS);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const fetchStats = useCallback(async () => {
        setLoading(true);
        setError(null);

        try {
            const response = await announcementService.getAnnouncementStats();
            setStats(response.data || DEFAULT_STATS);
        } catch (err: any) {
            console.warn('Failed to fetch announcement stats, using defaults:', err);
            setError(null); // Don't show error to user, just use defaults
            setStats(DEFAULT_STATS); // Fallback to default stats
        } finally {
            setLoading(false);
        }
    }, []);

    const refreshStats = useCallback(async () => {
        await fetchStats();
    }, [fetchStats]);

    // Initial load
    useEffect(() => {
        fetchStats();
    }, [fetchStats]);

    return {
        stats,
        loading,
        error,
        refreshStats,
    };
}
</file>

<file path="src/app/dashboard/announcements/page.tsx">
'use client';

import React, { useCallback, useEffect, useState, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import SearchBar from '@/app/components/ui/SearchBar';
import StatsCard from '@/app/components/ui/StatsCard';
import ViewToggle from '@/app/components/ui/ViewToggle';
import FilterPanel from '@/app/components/ui/FilterPanel';
import ExportDropdown from '@/app/components/ui/ExportDropdown';
import { ToastContainer } from '@/app/components/ui/Toast';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';
import { useToast } from '@/hooks/useToast';
import {
    Filter, Download, Plus, RefreshCw, ChevronRight, Eye, Edit, 
    AlertTriangle, Pin, Archive, Send, Copy, Trash2, 
    MessageSquare, Calendar, Hash, Settings
} from 'lucide-react';
import type { Announcement } from '@/services/types/announcement.types';

// Import view components
import GenericListView from '@/app/components/templates/GenericListView';
import GenericGridView from '@/app/components/templates/GenericGridView';
import Checkbox from '@/app/components/ui/Checkbox';
import TablePagination from '@/app/components/ui/TablePagination';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import BulkActionsBar from '@/app/components/ui/BulkActionsBar';

// Import our hooks and configurations
import { useAnnouncementsData } from './hooks/useAnnouncementsData';
import { useAnnouncementsFilters } from './hooks/useAnnouncementsFilters';
import { useAnnouncementsStats } from './hooks/useAnnouncementsStats';
import { createBulkActionHandlers } from './actions/bulk-actions';
import { createAnnouncementActionHandlers } from './actions/announcement-actions';
import { getTableColumns } from './components/table-columns';
import {
    VIEW_OPTIONS,
    BREADCRUMB_ITEMS,
    ANNOUNCEMENT_FILTER_GROUPS,
    STATS_CONFIG
} from './constants';
import {
    getAnnouncementTypeLabel,
    getAnnouncementStatusLabel,
    getAnnouncementTypeColor,
    getAnnouncementStatusColor,
    isAnnouncementExpired,
    isAnnouncementExpiringSoon,
    getDaysUntilExpiry
} from '@/services/types/announcement.types';

/**
 * Main Announcements Page Component
 * 
 * This component follows SOLID principles and the established architecture:
 * - Single Responsibility: Only handles orchestration of the announcements page
 * - Open/Closed: Extensible through configuration and dependency injection
 * - Dependency Inversion: Depends on abstractions (hooks, services) not concrete implementations
 */
export default function AnnouncementsPage() {
    const router = useRouter();
    const { toasts, removeToast } = useToast();

    // UI State for modals and bulk actions
    const [bulkDeleteState, setBulkDeleteState] = useState<{
        isOpen: boolean;
        announcements: Announcement[];
        loading: boolean;
    }>({
        isOpen: false,
        announcements: [],
        loading: false
    });

    const [confirmationState, setConfirmationState] = useState<{
        isOpen: boolean;
        announcement: Announcement | null;
        loading: boolean;
    }>({
        isOpen: false,
        announcement: null,
        loading: false
    });

    const [sidebarOpen, setSidebarOpen] = useState(false);

    // Initialize all hooks for data management
    const filtersHook = useAnnouncementsFilters();
    const dataHook = useAnnouncementsData({
        currentPage: filtersHook.currentPage,
        recordsPerPage: filtersHook.recordsPerPage,
        searchQuery: filtersHook.searchQuery,
        sortConfig: filtersHook.sortConfig,
        filters: filtersHook.filters
    });
    const statsHook = useAnnouncementsStats();

    // Create action handlers with dependency injection
    const toastFunctions = {
        success: useCallback((title: string, message: string) => {
            console.log(`✓ ${title}: ${message}`);
        }, []),
        info: useCallback((title: string, message: string) => {
            console.info(`${title}: ${message}`);
        }, []),
        error: useCallback((title: string, message: string) => {
            console.error(`✗ ${title}: ${message}`);
        }, [])
    };

    const dataUpdateFunctions = {
        setAnnouncements: dataHook.setAnnouncements,
        refreshData: dataHook.refreshData
    };

    // Initialize action handlers
    const bulkActionHandlers = createBulkActionHandlers(
        toastFunctions,
        dataUpdateFunctions,
        bulkDeleteState,
        setBulkDeleteState
    );
    const announcementActionHandlers = createAnnouncementActionHandlers(
        toastFunctions,
        dataUpdateFunctions,
        dataHook.announcements
    );

    // Generate configuration data - regenerate when selected announcements change
    const bulkActions = useMemo(() => 
        bulkActionHandlers.getBulkActions(filtersHook.selectedAnnouncements),
        [filtersHook.selectedAnnouncements, bulkActionHandlers]
    );

    // Create wrapper for table actions
    const tableActionHandlers = {
        handleViewAnnouncement: announcementActionHandlers.handleViewAnnouncement,
    };

    const tableColumns = getTableColumns(tableActionHandlers);

    // Generate stats data
    const statsData = useMemo(() => {
        if (!statsHook.stats) return [];
        
        return STATS_CONFIG.map(config => {
            const statValue = statsHook.stats![config.key as keyof typeof statsHook.stats];
            // Handle both simple numbers and nested objects
            const value = typeof statValue === 'object' ? 0 : (statValue || 0);
            
            return {
                title: config.title,
                value: value,
                color: config.color === 'red' ? 'danger' : 
                       config.color === 'secondary' ? 'info' : 
                       config.color,
                icon: config.icon,
                loading: statsHook.loading
            };
        });
    }, [statsHook.stats, statsHook.loading]);

    // Handle delete confirmation
    const handleDeleteConfirmation = useCallback(async () => {
        if (!confirmationState.announcement) return;

        setConfirmationState(prev => ({ ...prev, loading: true }));

        try {
            await announcementActionHandlers.handleDeleteAnnouncement(confirmationState.announcement);
            setConfirmationState({ isOpen: false, announcement: null, loading: false });
        } catch (error) {
            setConfirmationState(prev => ({ ...prev, loading: false }));
        }
    }, [confirmationState.announcement, announcementActionHandlers]);

    // Handle bulk delete confirmation
    const handleBulkDeleteConfirmation = useCallback(async () => {
        await bulkActionHandlers.executeBulkDelete();
    }, [bulkActionHandlers]);

    // Create unified action handler for view components
    const handleAnnouncementAction = useCallback(async (action: string, announcement: Announcement) => {
        switch (action) {
            case 'view':
                announcementActionHandlers.handleViewAnnouncement(announcement);
                break;
            case 'edit':
                announcementActionHandlers.handleEditAnnouncement(announcement);
                break;
            case 'delete':
                // Open confirmation modal instead of direct deletion
                setConfirmationState({
                    isOpen: true,
                    announcement: announcement,
                    loading: false
                });
                break;
            case 'publish':
                announcementActionHandlers.handlePublishAnnouncement(announcement);
                break;
            case 'archive':
                announcementActionHandlers.handleArchiveAnnouncement(announcement);
                break;
            case 'toggle_pin':
                announcementActionHandlers.handleTogglePin(announcement);
                break;
            case 'toggle_emergency':
                announcementActionHandlers.handleToggleEmergency(announcement);
                break;
            case 'duplicate':
                announcementActionHandlers.handleDuplicateAnnouncement(announcement);
                break;
            case 'more':
                // Handle more actions menu
                console.log('More actions for announcement:', announcement.title);
                break;
            default:
                console.warn('Unknown action:', action);
        }
    }, [announcementActionHandlers]);

    // Event handlers (orchestration only)
    const handleAddNewAnnouncement = useCallback(() => {
        router.push('/dashboard/announcements/add');
    }, [router]);

    const handleRefresh = useCallback(() => {
        dataHook.refreshData();
        statsHook.refreshStats();
    }, [dataHook, statsHook]);

    // Search input state management
    const [searchInput, setSearchInput] = useState(filtersHook.searchQuery || "");

    const handleSearchInputChange = useCallback((value: string) => {
        setSearchInput(value);
    }, []);

    const handleSearchSubmit = useCallback((value: string) => {
        filtersHook.handleSearch(value);
    }, [filtersHook]);

    // Lifecycle effects
    useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && filtersHook.showFilterPanel) {
                filtersHook.handleCloseDrawer();
            }
        };

        document.addEventListener('keydown', handleEscape);
        return () => document.removeEventListener('keydown', handleEscape);
    }, [filtersHook.showFilterPanel, filtersHook.handleCloseDrawer]);

    useEffect(() => {
        if (filtersHook.showFilterPanel) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = 'unset';
        }

        return () => {
            document.body.style.overflow = 'unset';
        };
    }, [filtersHook.showFilterPanel]);

    // Announcement card renderer for grid view
    const renderAnnouncementCard = (announcement: Announcement, selectedItems: Array<string | number>, onSelect: (id: string | number) => void, ui: any, ActionMenu?: React.ComponentType<{ row: Announcement }>) => {
        const isExpired = isAnnouncementExpired(announcement);
        const isExpiringSoon = isAnnouncementExpiringSoon(announcement);
        const daysUntilExpiry = getDaysUntilExpiry(announcement);

        return (
            <ui.Card
                key={announcement.id}
                className="p-6 rounded-2xl shadow-md bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 transition-transform hover:scale-[1.01] hover:shadow-lg group"
            >
                {/* Header: Checkbox + Title + Menu */}
                <div className="flex items-start justify-between gap-2">
                    <div className="flex items-center gap-4">
                        <ui.Checkbox
                            checked={selectedItems.includes(announcement.id)}
                            onChange={() => onSelect(announcement.id)}
                            className="focus:ring-2 focus:ring-primary-gold/30"
                        />
                        <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                                <h3 className="text-xl font-semibold text-on-dark tracking-tight">
                                    {announcement.title}
                                </h3>
                                {announcement.isPinned && (
                                    <Pin className="w-4 h-4 text-primary-gold" />
                                )}
                                {announcement.isEmergency && (
                                    <AlertTriangle className="w-4 h-4 text-red-500" />
                                )}
                            </div>
                            <p className="text-sm text-text-light-secondary dark:text-text-secondary font-medium line-clamp-3">
                                {announcement.content}
                            </p>
                        </div>
                    </div>
                    {ActionMenu && <ActionMenu row={announcement} />}
                </div>
                
                {/* Status and Type Badges */}
                <div className="mt-4 flex flex-wrap gap-2 items-center">
                    <ui.Badge
                        variant="soft"
                        color={getAnnouncementStatusColor(announcement.status)}
                        className="text-xs px-3 py-1 rounded-full font-medium"
                    >
                        {getAnnouncementStatusLabel(announcement.status)}
                    </ui.Badge>
                    
                    <ui.Badge
                        variant="soft"
                        color={getAnnouncementTypeColor(announcement.type)}
                        className="text-xs px-3 py-1 rounded-full font-medium"
                    >
                        {getAnnouncementTypeLabel(announcement.type)}
                    </ui.Badge>

                    {isExpired && (
                        <ui.Badge
                            variant="soft"
                            color="red"
                            className="text-xs px-3 py-1 rounded-full font-medium"
                        >
                            Süresi Dolmuş
                        </ui.Badge>
                    )}

                    {isExpiringSoon && !isExpired && (
                        <ui.Badge
                            variant="soft"
                            color="gold"
                            className="text-xs px-3 py-1 rounded-full font-medium"
                        >
                            Yakında Bitiyor
                        </ui.Badge>
                    )}
                </div>
                
                {/* Date Information */}
                <div className="mt-4 flex flex-col gap-1 text-sm text-text-light-secondary dark:text-text-secondary">
                    <div className="flex items-center gap-2">
                        <Calendar className="w-4 h-4" />
                        <span>Oluşturulma: {new Date(announcement.createdAt).toLocaleDateString('tr-TR')}</span>
                    </div>
                    {announcement.publishDate && (
                        <div className="flex items-center gap-2">
                            <Send className="w-4 h-4" />
                            <span>Yayınlanma: {new Date(announcement.publishDate).toLocaleDateString('tr-TR')}</span>
                        </div>
                    )}
                    {announcement.expiryDate && (
                        <div className="flex items-center gap-2">
                            <AlertTriangle className="w-4 h-4" />
                            <span>
                                Bitiş: {new Date(announcement.expiryDate).toLocaleDateString('tr-TR')}
                                {daysUntilExpiry !== undefined && (
                                    <span className={`ml-1 ${
                                        isExpired ? 'text-red-500' : 
                                        isExpiringSoon ? 'text-yellow-500' : 
                                        ''
                                    }`}>
                                        ({isExpired 
                                            ? `${Math.abs(daysUntilExpiry)} gün geçti`
                                            : `${daysUntilExpiry} gün kaldı`
                                        })
                                    </span>
                                )}
                            </span>
                        </div>
                    )}
                </div>
                
                {/* Creator Information */}
                <div className="mt-4 flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                    <span>
                        Oluşturan: {announcement.createdBy 
                            ? `${announcement.createdBy.firstName} ${announcement.createdBy.lastName}`
                            : 'Bilinmiyor'
                        }
                    </span>
                </div>
            </ui.Card>
        );
    };

    // Announcement Action Menu Component
    const AnnouncementActionMenu: React.FC<{ announcement: Announcement; onAction: (action: string, announcement: Announcement) => void }> = ({ announcement, onAction }) => {
        const handleDetailView = (e: React.MouseEvent) => {
            e.stopPropagation();
            onAction('view', announcement);
        };

        return (
            <div className="flex items-center justify-center">
                <button
                    className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
                    onClick={handleDetailView}
                    type="button"
                >
                    <ChevronRight className="w-5 h-5" />
                </button>
            </div>
        );
    };

    // Wrapper: ActionMenuComponent tipi { row: Announcement }
    const AnnouncementActionMenuWrapper: React.FC<{ row: Announcement }> = ({ row }) => (
        <AnnouncementActionMenu announcement={row} onAction={handleAnnouncementAction} />
    );

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title="Duyuru Listesi"
                        breadcrumbItems={BREADCRUMB_ITEMS}
                    />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Actions */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                                    Duyurular <span className="text-primary-gold">
                                        ({dataHook.totalRecords.toLocaleString()} {filtersHook.searchQuery ? 'filtrelenmiş' : 'toplam'})
                                    </span>
                                </h2>
                                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    Son güncelleme: {dataHook.lastUpdated.toLocaleTimeString('tr-TR')}
                                </p>
                            </div>

                            <div className="flex gap-3">
                                <Button variant="ghost" size="md" icon={RefreshCw} onClick={handleRefresh}>
                                    Yenile
                                </Button>
                                <ExportDropdown
                                    onExportExcel={() => {
                                        console.log('Export Excel');
                                        toastFunctions.info('Bilgi', 'Excel export özelliği yakında gelecek');
                                    }}
                                    onExportCSV={() => {
                                        console.log('Export CSV');
                                        toastFunctions.info('Bilgi', 'CSV export özelliği yakında gelecek');
                                    }}
                                    variant="secondary"
                                    size="md"
                                />
                                <Button variant="primary" size="md" icon={Plus} onClick={handleAddNewAnnouncement}>
                                    Yeni Duyuru
                                </Button>
                            </div>
                        </div>

                        {/* Search and Filters */}
                        <Card className="mb-6">
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    {/* Search Bar */}
                                    <div className="flex-1">
                                        <SearchBar
                                            placeholder="Başlık, içerik ile ara..."
                                            value={searchInput}
                                            onChange={handleSearchInputChange}
                                            onSearch={handleSearchSubmit}
                                            showAdvancedFilter={true}
                                            onAdvancedFilterClick={filtersHook.handleOpenDrawer}
                                            debounceMs={500}
                                        />
                                    </div>

                                    {/* Filter and View Toggle */}
                                    <div className="flex gap-2 items-center">
                                        <div className="relative">
                                            <Button
                                                variant="secondary"
                                                size="md"
                                                icon={Filter}
                                                onClick={filtersHook.handleOpenDrawer}
                                            >
                                                Filtreler
                                            </Button>
                                            {Object.keys(filtersHook.filters).length > 0 && (
                                                <span className="absolute -top-2 -right-2 bg-primary-gold text-primary-dark-gray text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium">
                                                    {Object.keys(filtersHook.filters).length}
                                                </span>
                                            )}
                                        </div>
                                        <ViewToggle
                                            options={VIEW_OPTIONS}
                                            activeView={filtersHook.selectedView}
                                            onViewChange={(viewId) => filtersHook.handleViewChange(viewId as 'table' | 'grid')}
                                            size="sm"
                                        />
                                    </div>
                                </div>
                            </div>
                        </Card>

                        {/* Stats Cards */}
                        <div className="grid grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
                            {statsData.map((stat) => (
                                <StatsCard
                                    key={stat.title}
                                    title={stat.title}
                                    value={stat.value}
                                    color={stat.color as 'primary' | 'gold' | 'danger' | 'success' | 'warning' | 'info'}
                                    icon={stat.icon}
                                    size="md"
                                    loading={stat.loading}
                                />
                            ))}
                        </div>

                        {/* Error Message */}
                        {dataHook.apiError && (
                            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                                <p className="text-red-800 text-sm">{dataHook.apiError}</p>
                            </div>
                        )}

                        {/* Announcements Views */}
                        {filtersHook.selectedView === 'table' && (
                            <GenericListView
                                data={dataHook.announcements}
                                loading={dataHook.loading}
                                error={dataHook.apiError}
                                onSelectionChange={filtersHook.handleSelectionChange}
                                bulkActions={bulkActions.map(action => ({
                                    ...action,
                                    variant: action.variant === 'primary' ? 'default' : action.variant as any,
                                    onClick: (items: Announcement[]) => action.onClick()
                                }))}
                                columns={getTableColumns(tableActionHandlers, AnnouncementActionMenuWrapper)}
                                sortConfig={filtersHook.sortConfig}
                                onSortChange={(key, direction) => filtersHook.handleSort({ key: key as keyof Announcement, direction })}
                                pagination={{
                                    currentPage: filtersHook.currentPage,
                                    totalPages: dataHook.totalPages,
                                    totalRecords: dataHook.totalRecords,
                                    recordsPerPage: filtersHook.recordsPerPage,
                                    onPageChange: filtersHook.handlePageChange,
                                    onRecordsPerPageChange: filtersHook.handleRecordsPerPageChange,
                                }}
                                emptyStateMessage={
                                    filtersHook.searchQuery ?
                                        `"${filtersHook.searchQuery}" araması için sonuç bulunamadı.` :
                                        'Henüz duyuru kaydı bulunmuyor.'
                                }
                                ActionMenuComponent={AnnouncementActionMenuWrapper}
                            />
                        )}

                        {filtersHook.selectedView === 'grid' && (
                            <GenericGridView
                                data={dataHook.announcements}
                                loading={dataHook.loading}
                                error={dataHook.apiError}
                                onSelectionChange={(selectedIds) => {
                                    const selectedAnnouncements = dataHook.announcements.filter(a => selectedIds.includes(a.id));
                                    filtersHook.handleSelectionChange(selectedAnnouncements);
                                }}
                                bulkActions={bulkActions.map(action => ({
                                    ...action,
                                    variant: action.variant === 'primary' ? 'default' : action.variant as any,
                                    onClick: (items: Announcement[]) => action.onClick()
                                }))}
                                onAction={handleAnnouncementAction}
                                selectedItems={filtersHook.selectedAnnouncements.map(a => a.id)}
                                pagination={{
                                    currentPage: filtersHook.currentPage,
                                    totalPages: dataHook.totalPages,
                                    totalRecords: dataHook.totalRecords,
                                    recordsPerPage: filtersHook.recordsPerPage,
                                    onPageChange: filtersHook.handlePageChange,
                                    onRecordsPerPageChange: filtersHook.handleRecordsPerPageChange,
                                }}
                                emptyStateMessage={
                                    filtersHook.searchQuery ?
                                        `"${filtersHook.searchQuery}" araması için sonuç bulunamadı.` :
                                        'Henüz duyuru kaydı bulunmuyor.'
                                }
                                ui={{
                                    Card,
                                    Button,
                                    Checkbox,
                                    TablePagination,
                                    Badge,
                                    EmptyState,
                                    Skeleton,
                                    BulkActionsBar,
                                }}
                                ActionMenu={AnnouncementActionMenuWrapper}
                                renderCard={renderAnnouncementCard}
                                getItemId={(announcement) => announcement.id}
                            />
                        )}
                    </main>
                </div>

                {/* Filter Panel Drawer */}
                <div className={`fixed inset-0 z-50 ${filtersHook.showFilterPanel ? 'pointer-events-auto' : 'pointer-events-none'}`}>
                    {/* Backdrop */}
                    <div
                        className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${filtersHook.showFilterPanel && !filtersHook.drawerClosing ? 'opacity-50' : 'opacity-0'
                            }`}
                        onClick={filtersHook.handleCloseDrawer}
                    />

                    {/* Drawer */}
                    <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-background-light-card dark:bg-background-card shadow-2xl transform transition-transform duration-300 ease-in-out ${filtersHook.showFilterPanel && !filtersHook.drawerClosing ? 'translate-x-0' : 'translate-x-full'
                        }`}>
                        <FilterPanel
                            filterGroups={ANNOUNCEMENT_FILTER_GROUPS}
                            onApplyFilters={filtersHook.handleFiltersApply}
                            onResetFilters={filtersHook.handleFiltersReset}
                            onClose={filtersHook.handleCloseDrawer}
                            variant="sidebar"
                        />
                    </div>
                </div>

                {/* Confirmation Modal */}
                <ConfirmationModal
                    isOpen={confirmationState.isOpen}
                    onClose={() => setConfirmationState({ isOpen: false, announcement: null, loading: false })}
                    onConfirm={handleDeleteConfirmation}
                    title="Duyuru Silme"
                    variant="danger"
                    loading={confirmationState.loading}
                    itemName={confirmationState.announcement?.title}
                    itemType="duyuru"
                />

                {/* Bulk Delete Confirmation Modal */}
                <ConfirmationModal
                    isOpen={bulkDeleteState.isOpen}
                    onClose={() => setBulkDeleteState({ isOpen: false, announcements: [], loading: false })}
                    onConfirm={handleBulkDeleteConfirmation}
                    title="Toplu Silme İşlemi"
                    description={`${bulkDeleteState.announcements.length} duyuru kalıcı olarak silinecektir. Bu işlem geri alınamaz.`}
                    confirmText="Hepsini Sil"
                    variant="danger"
                    loading={bulkDeleteState.loading}
                    itemType="duyurular"
                />

                {/* Toast Container */}
                <ToastContainer toasts={toasts} onRemove={removeToast} />
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/financial/[id]/components/TransactionActions.tsx">
'use client';

import React, { useState } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import { 
  Edit,
  Trash2,
  Download,
  Printer,
  CheckCircle,
  XCircle,
  MoreVertical,
  FileText,
  RefreshCw,
  Mail
} from 'lucide-react';
import { useRouter } from 'next/navigation';
import { TransactionDetail, isBillTransaction, isPaymentTransaction } from '../hooks/useTransactionDetail';
import { billingService, paymentService } from '@/services';

interface TransactionActionsProps {
  transaction: TransactionDetail;
  onUpdate: () => void;
}

const TransactionActions: React.FC<TransactionActionsProps> = ({ 
  transaction,
  onUpdate 
}) => {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showMoreActions, setShowMoreActions] = useState(false);

  // Check if transaction can be edited
  const canEdit = () => {
    if (isBillTransaction(transaction)) {
      return transaction.data.status !== 'PAID';
    }
    return transaction.data.status === 'PENDING';
  };

  // Check if transaction can be deleted
  const canDelete = () => {
    if (isBillTransaction(transaction)) {
      return transaction.data.status === 'PENDING';
    }
    return transaction.data.status === 'PENDING';
  };

  // Check if bill can be marked as paid
  const canMarkAsPaid = () => {
    return isBillTransaction(transaction) && 
           ['PENDING', 'OVERDUE'].includes(transaction.data.status);
  };

  // Handle edit action
  const handleEdit = () => {
    if (isBillTransaction(transaction)) {
      router.push(`/dashboard/financial/create/bill?edit=${transaction.id}`);
    } else {
      router.push(`/dashboard/financial/create/payment?edit=${transaction.id}`);
    }
  };

  // Handle delete action
  const handleDelete = async () => {
    if (!confirm('Bu işlemi silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.')) {
      return;
    }

    setIsSubmitting(true);
    try {
      if (isBillTransaction(transaction)) {
        await billingService.deleteBill(transaction.id);
      } else {
        await paymentService.deletePayment(transaction.id);
      }
      
      // Redirect to financial list after successful deletion
      router.push('/dashboard/financial');
    } catch (error) {
      console.error('Error deleting transaction:', error);
      alert('İşlem silinirken bir hata oluştu. Lütfen tekrar deneyin.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle mark as paid
  const handleMarkAsPaid = async () => {
    if (!isBillTransaction(transaction)) return;

    if (!confirm('Bu faturayı ödendi olarak işaretlemek istediğinizden emin misiniz?')) {
      return;
    }

    setIsSubmitting(true);
    try {
      await billingService.markBillAsPaid(transaction.id);
      onUpdate(); // Refresh the transaction data
    } catch (error) {
      console.error('Error marking bill as paid:', error);
      alert('Fatura güncellenirken bir hata oluştu. Lütfen tekrar deneyin.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle print receipt
  const handlePrintReceipt = () => {
    // In a real app, this would generate and print a receipt
    console.log('Printing receipt for transaction:', transaction.id);
    alert('Makbuz yazdırma özelliği yakında aktif olacak.');
  };

  // Handle download receipt
  const handleDownloadReceipt = () => {
    // In a real app, this would generate and download a PDF receipt
    console.log('Downloading receipt for transaction:', transaction.id);
    alert('Makbuz indirme özelliği yakında aktif olacak.');
  };

  // Handle email receipt
  const handleEmailReceipt = () => {
    // In a real app, this would send receipt via email
    console.log('Emailing receipt for transaction:', transaction.id);
    alert('E-posta gönderme özelliği yakında aktif olacak.');
  };

  return (
    <Card className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-purple-100 dark:bg-purple-900/20 rounded-lg">
          <MoreVertical className="h-5 w-5 text-purple-600 dark:text-purple-400" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            İşlemler
          </h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            Bu işlem için mevcut aksiyonlar
          </p>
        </div>
      </div>

      <div className="space-y-4">
        {/* Primary Actions */}
        <div className="space-y-3">
          {canEdit() && (
            <Button
              variant="primary"
              size="md"
              icon={Edit}
              onClick={handleEdit}
              disabled={isSubmitting}
              className="w-full justify-start"
            >
              Düzenle
            </Button>
          )}

          {canMarkAsPaid() && (
            <Button
              variant="primary"
              size="md"
              icon={CheckCircle}
              onClick={handleMarkAsPaid}
              disabled={isSubmitting}
              isLoading={isSubmitting}
              className="w-full justify-start bg-green-600 hover:bg-green-700"
            >
              Ödendi Olarak İşaretle
            </Button>
          )}

          <Button
            variant="secondary"
            size="md"
            icon={Download}
            onClick={handleDownloadReceipt}
            disabled={isSubmitting}
            className="w-full justify-start"
          >
            Makbuz İndir
          </Button>
        </div>

        {/* Secondary Actions */}
        <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
          <div className="space-y-3">
            <Button
              variant="ghost"
              size="md"
              icon={Printer}
              onClick={handlePrintReceipt}
              disabled={isSubmitting}
              className="w-full justify-start"
            >
              Makbuz Yazdır
            </Button>

            <Button
              variant="ghost"
              size="md"
              icon={Mail}
              onClick={handleEmailReceipt}
              disabled={isSubmitting}
              className="w-full justify-start"
            >
              E-posta Gönder
            </Button>

            <Button
              variant="ghost"
              size="md"
              icon={RefreshCw}
              onClick={onUpdate}
              disabled={isSubmitting}
              className="w-full justify-start"
            >
              Yenile
            </Button>
          </div>
        </div>

        {/* More Actions */}
        <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
          <Button
            variant="ghost"
            size="sm"
            icon={MoreVertical}
            onClick={() => setShowMoreActions(!showMoreActions)}
            className="w-full justify-center text-gray-500 dark:text-gray-400"
          >
            {showMoreActions ? 'Daha Az' : 'Daha Fazla'}
          </Button>

          {showMoreActions && (
            <div className="mt-3 space-y-3">
              <Button
                variant="ghost"
                size="md"
                icon={FileText}
                onClick={() => router.push(`/dashboard/financial/${transaction.id}/audit`)}
                disabled={isSubmitting}
                className="w-full justify-start text-gray-600 dark:text-gray-400"
              >
                İşlem Geçmişi
              </Button>

              {canDelete() && (
                <Button
                  variant="ghost"
                  size="md"
                  icon={Trash2}
                  onClick={handleDelete}
                  disabled={isSubmitting}
                  isLoading={isSubmitting}
                  className="w-full justify-start text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20"
                >
                  Sil
                </Button>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Status Information */}
      <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
        <div className="space-y-2 text-xs text-gray-500 dark:text-gray-400">
          <div className="flex justify-between">
            <span>Son Güncelleme:</span>
            <span>
              {new Date(transaction.data.updatedAt || transaction.data.createdAt).toLocaleDateString('tr-TR')}
            </span>
          </div>
          <div className="flex justify-between">
            <span>İşlem Türü:</span>
            <span>
              {isBillTransaction(transaction) ? 'Fatura' : 'Ödeme'}
            </span>
          </div>
        </div>
      </div>

      {/* Warning Messages */}
      {!canEdit() && !canDelete() && (
        <div className="mt-4 p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg">
          <div className="flex items-center gap-2">
            <XCircle className="h-4 w-4 text-amber-600 dark:text-amber-400" />
            <div className="text-sm text-amber-800 dark:text-amber-200">
              Bu işlem tamamlandığı için düzenlenemez veya silinemez.
            </div>
          </div>
        </div>
      )}
    </Card>
  );
};

export default TransactionActions;
</file>

<file path="src/app/dashboard/financial/create/bill/page.tsx">
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Button from '@/app/components/ui/Button';
import { FileText, ArrowLeft, CheckCircle } from 'lucide-react';
import CreateBillForm from '../../components/CreateBillForm';

export default function CreateBillPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const router = useRouter();

  // Breadcrumb items
  const breadcrumbItems = [
    { label: 'Ana Sayfa', href: '/dashboard' },
    { label: 'Finansal İşlemler', href: '/dashboard/financial' },
    { label: 'Yeni İşlem', href: '/dashboard/financial/create' },
    { label: 'Fatura Oluştur', active: true }
  ];

  const handleCancel = () => {
    router.push('/dashboard/financial/create');
  };

  const handleSuccess = (bill: any) => {
    console.log('Bill created successfully:', bill);
    
    // Show success message and redirect
    // In a real app, you might want to show a toast notification here
    setTimeout(() => {
      router.push('/dashboard/financial');
    }, 1000);
  };

  const handleGoBack = () => {
    router.back();
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        <div className="lg:ml-72">
          <DashboardHeader
            title="Fatura Oluştur"
            breadcrumbItems={breadcrumbItems}
          />

          <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <div className="flex items-center gap-3 mb-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    icon={ArrowLeft}
                    onClick={handleGoBack}
                    className="p-2"
                  />
                  <div className="p-2 bg-primary-gold/10 rounded-lg">
                    <FileText className="h-5 w-5 text-primary-gold" />
                  </div>
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                    Yeni Fatura Oluştur
                  </h1>
                </div>
                <p className="text-gray-600 dark:text-gray-400 ml-14">
                  Aidat, bakım, fayda veya ceza faturası oluşturun
                </p>
              </div>
            </div>

            {/* Bill Creation Form */}
            <div className="space-y-6">
              <CreateBillForm
                onSuccess={handleSuccess}
                onCancel={handleCancel}
                loading={isSubmitting}
              />
            </div>

            {/* Help Text */}
            <div className="mt-6 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <div className="flex items-start gap-3">
                <CheckCircle className="h-5 w-5 text-green-600 dark:text-green-400 flex-shrink-0 mt-0.5" />
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  <p className="font-medium text-gray-900 dark:text-white mb-1">
                    Fatura Oluşturma İpuçları:
                  </p>
                  <ul className="space-y-1 list-disc list-inside ml-2">
                    <li>Fatura türünü doğru seçtiğinizden emin olun</li>
                    <li>Vade tarihini gelecek bir tarih olarak belirleyin</li>
                    <li>Mülk ve sorumlu kişi bilgilerini kontrol edin</li>
                    <li>Belge numarası isteğe bağlıdır ancak takip için yararlıdır</li>
                  </ul>
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/dashboard/financial/create/components/TransactionTypeSelector.tsx">
'use client';

import React from 'react';
import { useRouter } from 'next/navigation';
import {
  FileText,
  CreditCard,
  ArrowRight
} from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';

interface TransactionTypeOption {
  id: 'bill' | 'payment';
  title: string;
  description: string;
  icon: React.ComponentType<any>;
  color: string;
  route: string;
}

const transactionTypes: TransactionTypeOption[] = [
  {
    id: 'bill',
    title: 'Fatura Oluştur',
    description: 'Aidat, bakım, fayda veya ceza faturası oluşturun',
    icon: FileText,
    color: 'bg-primary-gold/10 text-primary-gold',
    route: '/dashboard/financial/create/bill'
  },
  {
    id: 'payment',
    title: 'Ödeme Kaydet',
    description: 'Mevcut bir faturaya ödeme kaydedin',
    icon: CreditCard,
    color: 'bg-green-100 dark:bg-green-900/20 text-green-600 dark:text-green-400',
    route: '/dashboard/financial/create/payment'
  }
];

interface TransactionTypeSelectorProps {
  onTypeSelect?: (type: 'bill' | 'payment') => void;
}

const TransactionTypeSelector: React.FC<TransactionTypeSelectorProps> = ({
  onTypeSelect
}) => {
  const router = useRouter();

  const handleTypeSelect = (option: TransactionTypeOption) => {
    if (onTypeSelect) {
      onTypeSelect(option.id);
    } else {
      router.push(option.route);
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          Yeni İşlem Türü Seçin
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          Oluşturmak istediğiniz işlem türünü seçin
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {transactionTypes.map((option) => {
          const IconComponent = option.icon;
          
          return (
            <Card 
              key={option.id}
              className="p-6 hover:shadow-lg transition-all duration-200 cursor-pointer border-2 hover:border-primary-gold/30"
              onClick={() => handleTypeSelect(option)}
            >
              <div className="flex flex-col items-center text-center space-y-4">
                <div className={`p-4 rounded-2xl ${option.color}`}>
                  <IconComponent className="h-8 w-8" />
                </div>
                
                <div className="space-y-2">
                  <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                    {option.title}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 text-sm leading-relaxed">
                    {option.description}
                  </p>
                </div>

                <Button
                  variant="secondary"
                  size="sm"
                  icon={ArrowRight}
                  className="mt-4"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleTypeSelect(option);
                  }}
                >
                  Devam Et
                </Button>
              </div>
            </Card>
          );
        })}
      </div>

      <div className="mt-8 text-center">
        <p className="text-sm text-gray-500 dark:text-gray-400">
          Bu sayfadan finansal işlemlerinizi kolayca yönetebilirsiniz.
        </p>
      </div>
    </div>
  );
};

export default TransactionTypeSelector;
</file>

<file path="src/app/dashboard/financial/create/payment/page.tsx">
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Button from '@/app/components/ui/Button';
import { CreditCard, ArrowLeft, CheckCircle } from 'lucide-react';
import CreatePaymentForm from '../../components/CreatePaymentForm';

export default function CreatePaymentPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const router = useRouter();

  // Breadcrumb items
  const breadcrumbItems = [
    { label: 'Ana Sayfa', href: '/dashboard' },
    { label: 'Finansal İşlemler', href: '/dashboard/financial' },
    { label: 'Yeni İşlem', href: '/dashboard/financial/create' },
    { label: 'Ödeme Kaydet', active: true }
  ];

  const handleCancel = () => {
    router.push('/dashboard/financial/create');
  };

  const handleSuccess = (payment: any) => {
    console.log('Payment created successfully:', payment);
    
    // Show success message and redirect
    // In a real app, you might want to show a toast notification here
    setTimeout(() => {
      router.push('/dashboard/financial');
    }, 1000);
  };

  const handleGoBack = () => {
    router.back();
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        <div className="lg:ml-72">
          <DashboardHeader
            title="Ödeme Kaydet"
            breadcrumbItems={breadcrumbItems}
          />

          <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <div className="flex items-center gap-3 mb-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    icon={ArrowLeft}
                    onClick={handleGoBack}
                    className="p-2"
                  />
                  <div className="p-2 bg-green-100 dark:bg-green-900/20 rounded-lg">
                    <CreditCard className="h-5 w-5 text-green-600 dark:text-green-400" />
                  </div>
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                    Ödeme Kaydet
                  </h1>
                </div>
                <p className="text-gray-600 dark:text-gray-400 ml-14">
                  Mevcut bir faturaya ödeme kaydedin
                </p>
              </div>
            </div>

            {/* Payment Creation Form */}
            <div className="space-y-6">
              <CreatePaymentForm
                onSuccess={handleSuccess}
                onCancel={handleCancel}
                loading={isSubmitting}
              />
            </div>

            {/* Help Text */}
            <div className="mt-6 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <div className="flex items-start gap-3">
                <CheckCircle className="h-5 w-5 text-green-600 dark:text-green-400 flex-shrink-0 mt-0.5" />
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  <p className="font-medium text-gray-900 dark:text-white mb-1">
                    Ödeme Kaydetme İpuçları:
                  </p>
                  <ul className="space-y-1 list-disc list-inside ml-2">
                    <li>Sadece bekleyen veya gecikmiş faturalar görüntülenir</li>
                    <li>Ödeme tutarı fatura tutarından farklı olabilir (kısmi/fazla ödeme)</li>
                    <li>Ödeme yöntemini doğru seçtiğinizden emin olun</li>
                    <li>İşlem ID ve makbuz numarası takip için önemlidir</li>
                    <li>Ödeme tarihi geçmiş bir tarih olabilir</li>
                  </ul>
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/dashboard/financial/create/page.tsx">
'use client';

import React, { useState } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import { Plus } from 'lucide-react';
import TransactionTypeSelector from './components/TransactionTypeSelector';

export default function CreateTransactionPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);

  // Breadcrumb items
  const breadcrumbItems = [
    { label: 'Ana Sayfa', href: '/dashboard' },
    { label: 'Finansal İşlemler', href: '/dashboard/financial' },
    { label: 'Yeni İşlem', active: true }
  ];

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        <div className="lg:ml-72">
          <DashboardHeader
            title="Yeni İşlem Oluştur"
            breadcrumbItems={breadcrumbItems}
          />

          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <div className="flex items-center gap-3 mb-2">
                  <div className="p-2 bg-primary-gold/10 rounded-lg">
                    <Plus className="h-5 w-5 text-primary-gold" />
                  </div>
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                    Yeni İşlem Oluştur
                  </h1>
                </div>
                <p className="text-gray-600 dark:text-gray-400">
                  Fatura oluşturun veya mevcut bir faturaya ödeme kaydedin
                </p>
              </div>
            </div>

            {/* Transaction Type Selection */}
            <Card className="p-8">
              <TransactionTypeSelector />
            </Card>

            {/* Help Section */}
            <Card className="mt-6 p-6 bg-blue-50 dark:bg-blue-900/10 border-blue-200 dark:border-blue-800">
              <div className="flex items-start gap-3">
                <div className="p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex-shrink-0">
                  <Plus className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                </div>
                <div>
                  <h3 className="font-medium text-blue-900 dark:text-blue-100 mb-1">
                    İşlem Türleri Hakkında
                  </h3>
                  <div className="text-sm text-blue-800 dark:text-blue-200 space-y-1">
                    <p>
                      <strong>Fatura Oluştur:</strong> Yeni aidat, bakım, fayda veya ceza faturası oluşturmak için kullanın.
                    </p>
                    <p>
                      <strong>Ödeme Kaydet:</strong> Daha önce oluşturulmuş bekleyen veya gecikmiş faturalara ödeme kaydetmek için kullanın.
                    </p>
                  </div>
                </div>
              </div>
            </Card>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/dashboard/financial/hooks/useFinancialList.ts">
import { useState, useEffect, useCallback, useMemo } from 'react';
import { 
  FinancialTransactionsList, 
  FinancialFilters, 
  FinancialTransaction,
  UseFinancialListReturn,
  ExportIncludeOption
} from '@/services/types/financial-list.types';
import billingService from '@/services/billing.service';

// Mock data generator for development
const generateMockData = (): FinancialTransactionsList => {
  const mockData = {
    pageInfo: {
      title: "Finansal İşlemler",
      subtitle: "Fatura ve Ödeme Yönetimi",
      icon: "💰",
      lastUpdated: new Date().toISOString()
    },
    filters: {
      search: {
        placeholder: "İşlem ID, daire numarası veya açıklama ile ara...",
        value: "",
        type: "text" as const
      },
      transactionType: {
        label: "İşlem Türü",
        value: "all",
        type: "select" as const,
        options: [
          { value: "all", label: "Tüm İşlemler", count: 1247 },
          { value: "payment", label: "Ödeme", count: 856, color: "#10b981", icon: "💳" },
          { value: "bill", label: "Fatura", count: 234, color: "#f59e0b", icon: "📄" },
          { value: "due", label: "Aidat", count: 98, color: "#3b82f6", icon: "🏠" },
          { value: "refund", label: "İade", count: 12, color: "#8b5cf6", icon: "↩️" },
          { value: "penalty", label: "Gecikme Cezası", count: 34, color: "#ef4444", icon: "⚠️" },
          { value: "deposit", label: "Depozit", count: 13, color: "#06b6d4", icon: "🏦" }
        ]
      },
      paymentStatus: {
        label: "Ödeme Durumu",
        value: "all",
        type: "select" as const,
        options: [
          { value: "all", label: "Tüm Durumlar", count: 1247 },
          { value: "paid", label: "Ödendi", count: 856, color: "#10b981" },
          { value: "pending", label: "Bekliyor", count: 198, color: "#f59e0b" },
          { value: "overdue", label: "Gecikmiş", count: 156, color: "#ef4444" },
          { value: "partial", label: "Kısmi Ödeme", count: 23, color: "#8b5cf6" },
          { value: "cancelled", label: "İptal", count: 14, color: "#6b7280" }
        ]
      },
      paymentMethod: {
        label: "Ödeme Yöntemi",
        value: "all",
        type: "select" as const,
        options: [
          { value: "all", label: "Tüm Yöntemler", count: 1247 },
          { value: "zaincash", label: "ZainCash", count: 423, icon: "📱", color: "#e11d48" },
          { value: "asiacell", label: "AsiaCell Pay", count: 298, icon: "📱", color: "#0ea5e9" },
          { value: "bank_transfer", label: "Banka Havalesi", count: 234, icon: "🏦", color: "#059669" },
          { value: "cash", label: "Nakit", count: 187, icon: "💵", color: "#d97706" },
          { value: "credit_card", label: "Kredi Kartı", count: 89, icon: "💳", color: "#7c3aed" },
          { value: "check", label: "Çek", count: 16, icon: "📝", color: "#64748b" }
        ]
      },
      serviceType: {
        label: "Hizmet Türü",
        value: "all",
        type: "select" as const,
        options: [
          { value: "all", label: "Tüm Hizmetler", count: 1247 },
          { value: "monthly_dues", label: "Aylık Aidat", count: 345, icon: "🏠" },
          { value: "electricity", label: "Elektrik", count: 298, icon: "⚡" },
          { value: "water", label: "Su", count: 267, icon: "💧" },
          { value: "gas", label: "Gaz", count: 156, icon: "🔥" },
          { value: "internet", label: "İnternet", count: 89, icon: "🌐" },
          { value: "maintenance", label: "Bakım", count: 67, icon: "🔧" },
          { value: "parking", label: "Otopark", count: 25, icon: "🚗" }
        ]
      },
      dateRange: {
        label: "Tarih Aralığı",
        startDate: "2025-07-01",
        endDate: "2025-07-30",
        type: "daterange" as const,
        presets: [
          { value: "today", label: "Bugün" },
          { value: "yesterday", label: "Dün" },
          { value: "last_7_days", label: "Son 7 Gün" },
          { value: "last_30_days", label: "Son 30 Gün" },
          { value: "this_month", label: "Bu Ay" },
          { value: "last_month", label: "Geçen Ay" },
          { value: "this_quarter", label: "Bu Çeyrek" },
          { value: "this_year", label: "Bu Yıl" },
          { value: "custom", label: "Özel Tarih" }
        ]
      },
      amountRange: {
        label: "Tutar Aralığı (IQD)",
        minAmount: 0,
        maxAmount: 2000000,
        type: "range" as const,
        presets: [
          { value: "0-100000", label: "0 - 100,000 IQD" },
          { value: "100000-500000", label: "100,000 - 500,000 IQD" },
          { value: "500000-1000000", label: "500,000 - 1,000,000 IQD" },
          { value: "1000000+", label: "1,000,000+ IQD" }
        ]
      },
      building: {
        label: "Bina/Blok",
        value: "all",
        type: "select" as const,
        options: [
          { value: "all", label: "Tüm Bloklar", count: 1247 },
          { value: "block_a", label: "A Blok", count: 356 },
          { value: "block_b", label: "B Blok", count: 298 },
          { value: "block_c", label: "C Blok", count: 334 },
          { value: "block_d", label: "D Blok", count: 259 }
        ]
      }
    },
    financialSummary: {
      totalTransactions: 1247,
      totalRevenue: {
        amount: 187500000,
        currency: "IQD",
        formatted: "187,500,000 IQD"
      },
      totalPending: {
        amount: 23400000,
        currency: "IQD",
        formatted: "23,400,000 IQD"
      },
      totalOverdue: {
        amount: 8900000,
        currency: "IQD",
        formatted: "8,900,000 IQD"
      },
      collectionRate: 94.2,
      averageTransactionAmount: {
        amount: 150240,
        currency: "IQD",
        formatted: "150,240 IQD"
      },
      monthlyGrowth: {
        percentage: 12.5,
        trend: "up" as const
      }
    },
    quickStats: [
      {
        label: "Bugün Toplanan",
        value: "12,450,000 IQD",
        count: 34,
        change: "+18%",
        trend: "up" as const,
        color: "#10b981",
        icon: "💰"
      },
      {
        label: "Bekleyen Ödemeler",
        value: "23,400,000 IQD",
        count: 198,
        change: "-5%",
        trend: "down" as const,
        color: "#f59e0b",
        icon: "⏳"
      },
      {
        label: "Gecikmiş Borçlar",
        value: "8,900,000 IQD",
        count: 156,
        change: "-12%",
        trend: "down" as const,
        color: "#ef4444",
        icon: "⚠️"
      },
      {
        label: "Bu Ay Toplam",
        value: "187,500,000 IQD",
        count: 1247,
        change: "+12.5%",
        trend: "up" as const,
        color: "#3b82f6",
        icon: "📊"
      }
    ],
    paymentMethodStats: [
      {
        method: "ZainCash",
        amount: 63450000,
        percentage: 33.8,
        count: 423,
        color: "#e11d48",
        icon: "📱"
      },
      {
        method: "AsiaCell Pay",
        amount: 55860000,
        percentage: 29.8,
        count: 298,
        color: "#0ea5e9",
        icon: "📱"
      },
      {
        method: "Banka Havalesi",
        amount: 39000000,
        percentage: 20.8,
        count: 234,
        color: "#059669",
        icon: "🏦"
      },
      {
        method: "Nakit",
        amount: 18720000,
        percentage: 10.0,
        count: 187,
        color: "#d97706",
        icon: "💵"
      },
      {
        method: "Diğer",
        amount: 10470000,
        percentage: 5.6,
        count: 105,
        color: "#6b7280",
        icon: "💳"
      }
    ],
    sortOptions: {
      currentSort: "transaction_date_desc",
      options: [
        { value: "transaction_date_desc", label: "En Yeni Önce" },
        { value: "transaction_date_asc", label: "En Eski Önce" },
        { value: "amount_desc", label: "Tutar (Yüksek→Düşük)" },
        { value: "amount_asc", label: "Tutar (Düşük→Yüksek)" },
        { value: "due_date_asc", label: "Vade Tarihi (Yakın→Uzak)" },
        { value: "status_asc", label: "Duruma Göre" },
        { value: "apartment_asc", label: "Daire Numarasına Göre" },
        { value: "payment_method_asc", label: "Ödeme Yöntemine Göre" }
      ]
    },
    pagination: {
      currentPage: 1,
      totalPages: 25,
      itemsPerPage: 50,
      totalItems: 1247,
      showingFrom: 1,
      showingTo: 50,
      pageSizeOptions: [25, 50, 100, 200]
    },
    bulkActions: {
      enabled: true,
      selectedCount: 0,
      selectedAmount: {
        amount: 0,
        currency: "IQD",
        formatted: "0 IQD"
      },
      actions: [
        {
          id: "mark_paid",
          label: "Ödendi Olarak İşaretle",
          icon: "✅",
          requiresSelection: true,
          confirmationRequired: true,
          restrictedTo: ["pending", "overdue"]
        },
        {
          id: "send_reminder",
          label: "Ödeme Hatırlatması Gönder",
          icon: "📢",
          requiresSelection: true,
          confirmationRequired: false,
          restrictedTo: ["pending", "overdue"]
        },
        {
          id: "apply_penalty",
          label: "Gecikme Cezası Uygula",
          icon: "⚠️",
          requiresSelection: true,
          confirmationRequired: true,
          restrictedTo: ["overdue"]
        },
        {
          id: "generate_receipt",
          label: "Makbuz Oluştur",
          icon: "🧾",
          requiresSelection: true,
          confirmationRequired: false,
          restrictedTo: ["paid"]
        },
        {
          id: "export_selected",
          label: "Seçilenleri Dışa Aktar",
          icon: "📤",
          requiresSelection: true,
          confirmationRequired: false
        },
        {
          id: "cancel_transaction",
          label: "İşlemi İptal Et",
          icon: "❌",
          requiresSelection: true,
          confirmationRequired: true,
          dangerAction: true,
          restrictedTo: ["pending"]
        }
      ]
    },
    tableColumns: [
      { key: "select", label: "", width: "40px", sortable: false, type: "checkbox" as const },
      { key: "transactionId", label: "İşlem ID", width: "120px", sortable: true, type: "link" as const },
      { key: "apartment", label: "Daire", width: "100px", sortable: true, type: "text" as const },
      { key: "resident", label: "Sakin", width: "150px", sortable: true, type: "user" as const },
      { key: "transactionType", label: "İşlem Türü", width: "120px", sortable: true, type: "badge" as const },
      { key: "serviceType", label: "Hizmet", width: "120px", sortable: true, type: "badge" as const },
      { key: "amount", label: "Tutar", width: "120px", sortable: true, type: "currency" as const, align: "right" as const },
      { key: "paymentMethod", label: "Ödeme Yöntemi", width: "130px", sortable: true, type: "badge" as const },
      { key: "status", label: "Durum", width: "100px", sortable: true, type: "status" as const },
      { key: "transactionDate", label: "İşlem Tarihi", width: "120px", sortable: true, type: "datetime" as const },
      { key: "dueDate", label: "Vade", width: "100px", sortable: true, type: "date" as const },
      { key: "actions", label: "İşlemler", width: "100px", sortable: false, type: "actions" as const }
    ],
    transactions: [], // Will be populated from API
    exportOptions: {
      formats: [
        { value: "excel", label: "Excel (.xlsx)", icon: "📊" },
        { value: "pdf", label: "PDF Raporu", icon: "📄" },
        { value: "csv", label: "CSV Dosyası", icon: "📋" },
        { value: "financial_report", label: "Mali Rapor (PDF)", icon: "💼" }
      ],
      includeOptions: [
        { key: "basic_info", label: "Temel Bilgiler", default: true },
        { key: "resident_info", label: "Sakin Bilgileri", default: true },
        { key: "payment_details", label: "Ödeme Detayları", default: true },
        { key: "consumption_data", label: "Tüketim Verileri", default: false },
        { key: "penalty_info", label: "Ceza Bilgileri", default: false },
        { key: "receipt_numbers", label: "Makbuz Numaraları", default: true },
        { key: "financial_summary", label: "Mali Özet", default: false }
      ],
      dateRangeRequired: true
    },
    reportingOptions: {
      availableReports: [
        {
          id: "monthly_collection",
          label: "Aylık Tahsilat Raporu",
          description: "Detaylı gelir analizi ve tahsilat oranları",
          icon: "📊"
        },
        {
          id: "overdue_analysis",
          label: "Gecikmiş Ödemeler Analizi",
          description: "Borçlu daireler ve gecikme trendleri",
          icon: "⚠️"
        },
        {
          id: "payment_method_breakdown",
          label: "Ödeme Yöntemi Dağılımı",
          description: "Kullanılan ödeme kanalları ve performans",
          icon: "💳"
        },
        {
          id: "consumption_trends",
          label: "Tüketim Trend Analizi",
          description: "Elektrik, su, gaz tüketim analizleri",
          icon: "⚡"
        }
      ]
    },
    permissions: {
      canCreate: true,
      canEdit: true,
      canDelete: false,
      canApprove: true,
      canRefund: true,
      canExport: true,
      canViewCosts: true,
      canManagePenalties: true,
      canGenerateReports: true,
      canBulkEdit: true,
      role: "financial_admin"
    },
    integrations: {
      paymentGateways: {
        zaincash: {
          enabled: true,
          status: "active" as const,
          lastSync: new Date().toISOString()
        },
        asiacell: {
          enabled: true,
          status: "active" as const,
          lastSync: new Date().toISOString()
        },
        bankTransfer: {
          enabled: true,
          status: "active" as const,
          accounts: ["Al-Rashid Bank", "Commercial Bank of Iraq"],
          autoReconciliation: true
        }
      },
      accountingSystem: {
        enabled: false,
        provider: null,
        lastSync: null
      }
    }
  };

  return mockData;
};

// Generate mock transactions
const generateMockTransactions = (count: number = 50): FinancialTransaction[] => {
  const transactions: FinancialTransaction[] = [];
  const blocks = ['A', 'B', 'C', 'D'];
  const transactionTypes = ['payment', 'bill', 'due', 'refund', 'penalty', 'deposit'];
  const paymentStatuses = ['paid', 'pending', 'overdue', 'partial', 'cancelled'];
  const paymentMethods = ['zaincash', 'asiacell', 'bank_transfer', 'cash', 'credit_card'];
  const serviceTypes = ['monthly_dues', 'electricity', 'water', 'gas', 'internet', 'maintenance', 'parking'];

  for (let i = 0; i < count; i++) {
    const block = blocks[Math.floor(Math.random() * blocks.length)];
    const floor = Math.floor(Math.random() * 4) + 1;
    const unit = Math.floor(Math.random() * 10) + 1;
    const transactionType = transactionTypes[Math.floor(Math.random() * transactionTypes.length)];
    const status = paymentStatuses[Math.floor(Math.random() * paymentStatuses.length)];
    const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];
    const serviceType = serviceTypes[Math.floor(Math.random() * serviceTypes.length)];
    const amount = Math.floor(Math.random() * 500000) + 50000;
    const isOverdue = status === 'overdue';
    const daysOverdue = isOverdue ? Math.floor(Math.random() * 30) + 1 : 0;

    transactions.push({
      id: `TXN-2025-${String(i + 1).padStart(4, '0')}`,
      transactionId: `TXN-2025-${String(i + 1).padStart(4, '0')}`,
      apartment: {
        number: `${block}-${floor}${String(unit).padStart(2, '0')}`,
        block,
        floor,
        owner: `Owner ${i + 1}`,
        tenant: Math.random() > 0.3 ? `Tenant ${i + 1}` : null
      },
      resident: {
        name: `Resident ${i + 1}`,
        phone: `+964 7${Math.floor(Math.random() * 10)}0 ${Math.floor(Math.random() * 900) + 100} ${Math.floor(Math.random() * 9000) + 1000}`,
        email: `resident${i + 1}@email.com`,
        avatar: `R${i + 1}`,
        type: Math.random() > 0.5 ? 'owner' : 'tenant'
      },
      transactionType: {
        id: transactionType,
        label: transactionType.charAt(0).toUpperCase() + transactionType.slice(1),
        icon: transactionType === 'payment' ? '💳' : '📄',
        color: transactionType === 'payment' ? '#10b981' : '#f59e0b'
      },
      serviceType: {
        id: serviceType,
        label: serviceType.split('_').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' '),
        icon: serviceType === 'electricity' ? '⚡' : '🏠',
        color: '#3b82f6'
      },
      amount: {
        amount: amount,
        currency: 'IQD',
        formatted: `${amount.toLocaleString()} IQD`
      },
      paymentMethod: status === 'paid' ? {
        id: paymentMethod,
        label: paymentMethod.split('_').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' '),
        icon: '💳',
        color: '#10b981'
      } : null,
      status: {
        id: status,
        label: status.charAt(0).toUpperCase() + status.slice(1),
        color: status === 'paid' ? '#10b981' : status === 'pending' ? '#f59e0b' : '#ef4444',
        bgColor: status === 'paid' ? '#d1fae5' : status === 'pending' ? '#fef3c7' : '#fee2e2'
      },
      transactionDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
      dueDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
      paidDate: status === 'paid' ? new Date(Date.now() - Math.random() * 10 * 24 * 60 * 60 * 1000).toISOString() : null,
      period: '2025-07',
      description: `${serviceType} payment for period 2025-07`,
      isOverdue,
      daysOverdue,
      tags: [transactionType, serviceType, block.toLowerCase()]
    });
  }

  return transactions;
};

export const useFinancialList = (): UseFinancialListReturn => {
  const [data, setData] = useState<FinancialTransactionsList | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedTransactions, setSelectedTransactions] = useState<string[]>([]);
  const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');

  // Initialize filters from mock data
  const [filters, setFilters] = useState<FinancialFilters>(() => {
    const mock = generateMockData();
    return mock.filters;
  });

  // Memoize filters to prevent infinite re-renders
  const memoizedFilters = useMemo(() => filters, [
    filters.search.value,
    filters.transactionType.value,
    filters.paymentStatus.value,
    filters.paymentMethod.value,
    filters.serviceType.value,
    filters.dateRange.startDate,
    filters.dateRange.endDate,
    filters.amountRange.minAmount,
    filters.amountRange.maxAmount,
    filters.building.value
  ]);

  // Fetch financial data
  const fetchFinancialData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Generate mock data with transactions
      const mockData = generateMockData();
      const transactions = generateMockTransactions(50);
      mockData.transactions = transactions;

      // Apply filters
      let filteredTransactions = transactions;

      // Search filter
      if (memoizedFilters.search.value) {
        const searchTerm = memoizedFilters.search.value.toLowerCase();
        filteredTransactions = filteredTransactions.filter(t =>
          t.transactionId.toLowerCase().includes(searchTerm) ||
          t.apartment.number.toLowerCase().includes(searchTerm) ||
          t.description.toLowerCase().includes(searchTerm) ||
          t.resident.name.toLowerCase().includes(searchTerm)
        );
      }

      // Transaction type filter
      if (memoizedFilters.transactionType.value !== 'all') {
        filteredTransactions = filteredTransactions.filter(t =>
          t.transactionType.id === memoizedFilters.transactionType.value
        );
      }

      // Payment status filter
      if (memoizedFilters.paymentStatus.value !== 'all') {
        filteredTransactions = filteredTransactions.filter(t =>
          t.status.id === memoizedFilters.paymentStatus.value
        );
      }

      // Payment method filter
      if (memoizedFilters.paymentMethod.value !== 'all') {
        filteredTransactions = filteredTransactions.filter(t =>
          t.paymentMethod?.id === memoizedFilters.paymentMethod.value
        );
      }

      // Service type filter
      if (memoizedFilters.serviceType.value !== 'all') {
        filteredTransactions = filteredTransactions.filter(t =>
          t.serviceType.id === memoizedFilters.serviceType.value
        );
      }

      // Amount range filter
      filteredTransactions = filteredTransactions.filter(t =>
        t.amount.amount >= memoizedFilters.amountRange.minAmount &&
        t.amount.amount <= memoizedFilters.amountRange.maxAmount
      );

      // Update data with filtered transactions
      mockData.transactions = filteredTransactions;
      mockData.pagination.totalItems = filteredTransactions.length;
      mockData.pagination.totalPages = Math.ceil(filteredTransactions.length / mockData.pagination.itemsPerPage);

      setData(mockData);
    } catch (err) {
      console.error('Error fetching financial data:', err);
      setError('Finansal veriler yüklenirken bir hata oluştu');
    } finally {
      setLoading(false);
    }
  }, [memoizedFilters]);

  // Initial data fetch
  useEffect(() => {
    fetchFinancialData();
  }, [fetchFinancialData]);

  // Update filter
  const updateFilter = useCallback((filterKey: string, value: any) => {
    setFilters(prev => ({
      ...prev,
      [filterKey]: {
        ...prev[filterKey as keyof FinancialFilters],
        value
      }
    }));
  }, []);

  // Reset filters
  const resetFilters = useCallback(() => {
    const mockData = generateMockData();
    setFilters(mockData.filters);
  }, []);

  // Handle bulk actions
  const handleBulkAction = useCallback(async (actionId: string) => {
    try {
      console.log('Bulk action:', actionId, 'Selected:', selectedTransactions);
      // TODO: Implement bulk action API calls
      
      // Refresh data after action
      await fetchFinancialData();
      setSelectedTransactions([]);
    } catch (err) {
      console.error('Bulk action error:', err);
    }
  }, [selectedTransactions, fetchFinancialData]);

  // Handle export
  const handleExport = useCallback(async (format: string, options: ExportIncludeOption[]) => {
    try {
      console.log('Export:', format, 'Options:', options);
      // TODO: Implement export functionality
    } catch (err) {
      console.error('Export error:', err);
    }
  }, []);

  // Calculate selected amount
  useEffect(() => {
    if (data && selectedTransactions.length > 0) {
      const selectedAmount = data.transactions
        .filter(t => selectedTransactions.includes(t.id))
        .reduce((sum, t) => sum + t.amount.amount, 0);

      setData(prev => {
        if (!prev) return null;
        return {
          ...prev,
          bulkActions: {
            ...prev.bulkActions,
            selectedCount: selectedTransactions.length,
            selectedAmount: {
              amount: selectedAmount,
              currency: 'IQD',
              formatted: `${selectedAmount.toLocaleString()} IQD`
            }
          }
        };
      });
    }
  }, [selectedTransactions, data]);

  return {
    data,
    loading,
    error,
    filters,
    selectedTransactions,
    viewMode,
    setViewMode,
    updateFilter,
    resetFilters,
    setSelectedTransactions,
    handleBulkAction,
    handleExport,
    refetch: fetchFinancialData
  };
};
</file>

<file path="src/app/dashboard/financial/page.tsx">
'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import {
    DollarSign,
    CreditCard,
    Receipt,
    AlertTriangle,
    Target,
    Calculator,
    Activity,
    Plus,
    RefreshCw,
    Filter,
    List,
    Grid3X3,
    Download,
    Eye,
    Edit,
    MoreVertical,
    TrendingUp,
    TrendingDown,
    Home,
    User,
    Calendar,
    Building
} from 'lucide-react';
import GenericListView from '@/app/components/templates/GenericListView';
import GenericGridView from '@/app/components/templates/GenericGridView';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import FilterPanel from '@/app/components/ui/FilterPanel';
import StatsCard from '@/app/components/ui/StatsCard';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import BulkActionsBar from '@/app/components/ui/BulkActionsBar';
import TablePagination from '@/app/components/ui/TablePagination';
import Checkbox from '@/app/components/ui/Checkbox';
import Avatar from '@/app/components/ui/Avatar';
import Portal from '@/app/components/ui/Portal';
import { useRouter } from 'next/navigation';
import { useFinancialList } from './hooks/useFinancialList';

export default function FinancialListPage() {
    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [searchInput, setSearchInput] = useState('');
    const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
    const [showFilters, setShowFilters] = useState(false);
    const [selectedTransactions, setSelectedTransactions] = useState<string[]>([]);

    const router = useRouter();

    // Use the financial list hook
    const {
        data,
        loading,
        error,
        filters,
        updateFilter,
        resetFilters,
        handleBulkAction,
        refetch
    } = useFinancialList();

    // Breadcrumb items
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Finansal İşlemler', active: true }
    ];

    // Format currency
    const formatCurrency = useCallback((amount: number) => {
        return new Intl.NumberFormat('tr-TR').format(amount);
    }, []);

    // Financial statistics from data
    const financialStats = useMemo(() => {
        if (!data) return {
            totalRevenue: 0,
            totalPending: 0,
            totalOverdue: 0,
            totalTransactions: 0,
            collectionRate: 0,
            averageTransaction: 0
        };

        return {
            totalRevenue: data.financialSummary.totalRevenue.amount,
            totalPending: data.financialSummary.totalPending.amount,
            totalOverdue: data.financialSummary.totalOverdue.amount,
            totalTransactions: data.financialSummary.totalTransactions,
            collectionRate: data.financialSummary.collectionRate,
            averageTransaction: data.financialSummary.averageTransactionAmount.amount
        };
    }, [data]);

    // Handle actions
    const handleTransactionAction = useCallback((action: string, transaction: any) => {
        switch (action) {
            case 'view':
                router.push(`/dashboard/financial/${transaction.id}`);
                break;
            case 'edit':
                console.log('Edit transaction:', transaction);
                break;
            case 'delete':
                console.log('Delete transaction:', transaction);
                break;
            default:
                console.log('Unknown action:', action);
        }
    }, [router]);

    // Table columns configuration
    const tableColumns = useMemo(() => [
        {
            key: 'transactionId',
            header: 'İşlem ID',
            render: (_value: any, transaction: any) => (
                <button
                    onClick={() => handleTransactionAction('view', transaction)}
                    className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium"
                >
                    {transaction.transactionId}
                </button>
            ),
        },
        {
            key: 'apartment',
            header: 'Daire',
            render: (_value: any, transaction: any) => (
                <div>
                    <div className="font-medium text-gray-900 dark:text-white">
                        {transaction.apartment.number}
                    </div>
                    <div className="text-sm text-gray-500 dark:text-gray-400">
                        {transaction.apartment.floor}. Kat
                    </div>
                </div>
            ),
        },
        {
            key: 'resident',
            header: 'Sakin',
            render: (_value: any, transaction: any) => (
                <div className="flex items-center gap-3">
                    <Avatar
                        fallback={transaction.resident.name}
                        size="sm"
                        className="flex-shrink-0"
                    />
                    <div className="min-w-0">
                        <div className="font-medium text-gray-900 dark:text-white truncate">
                            {transaction.resident.name}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400 truncate">
                            {transaction.resident.type === 'owner' ? 'Malik' : 'Kiracı'}
                        </div>
                    </div>
                </div>
            ),
        },
        {
            key: 'transactionType',
            header: 'İşlem Türü',
            render: (_value: any, transaction: any) => (
                <Badge variant="soft" className="flex items-center gap-1">
                    <span>{transaction.transactionType.icon}</span>
                    {transaction.transactionType.label}
                </Badge>
            ),
        },
        {
            key: 'amount',
            header: 'Tutar',
            render: (_value: any, transaction: any) => (
                <div className="text-right">
                    <div className="font-semibold text-gray-900 dark:text-white">
                        {formatCurrency(transaction.amount.amount)} IQD
                    </div>
                    {transaction.penalty && transaction.penalty.amount > 0 && (
                        <div className="text-sm text-red-600 dark:text-red-400">
                            +{formatCurrency(transaction.penalty.amount)} ceza
                        </div>
                    )}
                </div>
            ),
        },
        {
            key: 'status',
            header: 'Durum',
            render: (_value: any, transaction: any) => (
                <div className="flex items-center gap-2">
                    <Badge 
                        variant={
                            transaction.status.id === 'paid' ? 'success' :
                            transaction.status.id === 'pending' ? 'warning' :
                            transaction.status.id === 'overdue' ? 'danger' : 'info'
                        }
                    >
                        {transaction.status.label}
                    </Badge>
                    {transaction.isOverdue && (
                        <div className="flex items-center gap-1 text-red-600 dark:text-red-400">
                            <AlertTriangle className="h-3 w-3" />
                            <span className="text-xs">{transaction.daysOverdue}g</span>
                        </div>
                    )}
                </div>
            ),
        },
        {
            key: 'transactionDate',
            header: 'İşlem Tarihi',
            render: (_value: any, transaction: any) => (
                <div>
                    <div className="text-gray-900 dark:text-white">
                        {new Date(transaction.transactionDate).toLocaleDateString('tr-TR')}
                    </div>
                    <div className="text-sm text-gray-500 dark:text-gray-400">
                        {new Date(transaction.transactionDate).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}
                    </div>
                </div>
            ),
        },
    ], [handleTransactionAction, formatCurrency]);

    // Transaction Action Menu
    const TransactionActionMenu: React.FC<{ transaction: any; onAction: (action: string, transaction: any) => void }> = React.memo(({ transaction, onAction }) => {
        const [isOpen, setIsOpen] = React.useState(false);
        const buttonRef = React.useRef<HTMLButtonElement>(null);
        const [menuStyle, setMenuStyle] = React.useState<React.CSSProperties>({});

        React.useEffect(() => {
            if (isOpen && buttonRef.current) {
                const rect = buttonRef.current.getBoundingClientRect();
                const menuHeight = 150;
                const menuWidth = 200;
                const padding = 8;
                let top = rect.bottom + window.scrollY + padding;
                let left = rect.right + window.scrollX - menuWidth;
                if (top + menuHeight > window.innerHeight + window.scrollY) {
                    top = rect.top + window.scrollY - menuHeight - padding;
                }
                if (left < 0) {
                    left = padding;
                }
                setMenuStyle({
                    position: 'absolute',
                    top,
                    left,
                    zIndex: 9999,
                    minWidth: menuWidth,
                });
            }
        }, [isOpen]);

        React.useEffect(() => {
            if (!isOpen) return;
            const handleClick = (e: MouseEvent) => {
                if (buttonRef.current && !buttonRef.current.contains(e.target as Node)) {
                    setIsOpen(false);
                }
            };
            document.addEventListener('click', handleClick);
            return () => document.removeEventListener('click', handleClick);
        }, [isOpen]);

        const handleDropdownToggle = (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(!isOpen);
        };

        const handleAction = (action: string) => (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(false);
            onAction(action, transaction);
        };

        return (
            <div className="flex items-center justify-center">
                <button
                    ref={buttonRef}
                    className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
                    onClick={handleDropdownToggle}
                    type="button"
                >
                    <MoreVertical className="w-5 h-5" />
                </button>
                {isOpen && (
                    <Portal>
                        <div
                            style={menuStyle}
                            className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 py-1 max-h-72 overflow-auto"
                        >
                            <button onClick={handleAction('view')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <Eye className="w-4 h-4" /> Detay
                            </button>
                            <button 
                                onClick={handleAction('edit')} 
                                className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
                                disabled={!['pending', 'overdue'].includes(transaction.status.id)}
                            >
                                <Edit className="w-4 h-4" /> Düzenle
                            </button>
                            <button onClick={handleAction('download')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <Download className="w-4 h-4" /> Makbuz İndir
                            </button>
                        </div>
                    </Portal>
                )}
            </div>
        );
    });

    const TransactionActionMenuWrapper: React.FC<{ row: any }> = useMemo(() =>
        ({ row }) => <TransactionActionMenu transaction={row} onAction={handleTransactionAction} />
        , [handleTransactionAction]);

    // Card renderer for grid view
    const renderTransactionCard = useCallback((transaction: any, selectedItems: Array<string | number>, onSelect: (id: string | number) => void, ui: any, ActionMenu?: React.ComponentType<{ row: any }>) => {
        if (!transaction) return null;

        const isOverdue = transaction.isOverdue;

        return (
            <ui.Card key={transaction.id} className={`p-4 rounded-2xl shadow-md bg-white dark:bg-gray-800 border transition-transform hover:scale-[1.01] hover:shadow-lg ${isOverdue ? 'border-l-4 border-l-red-500' : 'border-gray-200 dark:border-gray-700'}`}>
                <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                        <ui.Checkbox
                            checked={selectedItems.includes(transaction.id)}
                            onChange={() => onSelect(transaction.id)}
                        />
                        <div>
                            <h4 className="font-semibold text-gray-900 dark:text-white">
                                {transaction.transactionId}
                            </h4>
                            <p className="text-sm text-gray-500 dark:text-gray-400">
                                {new Date(transaction.transactionDate).toLocaleDateString('tr-TR')}
                            </p>
                        </div>
                    </div>
                    <div className="flex items-center gap-2">
                        <ui.Badge 
                            variant={
                                transaction.status.id === 'paid' ? 'success' :
                                transaction.status.id === 'pending' ? 'warning' :
                                transaction.status.id === 'overdue' ? 'danger' : 'secondary'
                            }
                        >
                            {transaction.status.label}
                        </ui.Badge>
                        {ActionMenu && <ActionMenu row={transaction} />}
                    </div>
                </div>

                <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                        <Home className="h-4 w-4" />
                        <span>{transaction.apartment.number} - {transaction.apartment.floor}. Kat</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                        <User className="h-4 w-4" />
                        <span>{transaction.resident.name}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                        <span>{transaction.transactionType.icon}</span>
                        <span>{transaction.transactionType.label} - {transaction.serviceType.label}</span>
                    </div>
                </div>

                <div className="text-right mb-3">
                    <p className="text-xl font-bold text-gray-900 dark:text-white">
                        {formatCurrency(transaction.amount.amount)} IQD
                    </p>
                    {transaction.penalty && transaction.penalty.amount > 0 && (
                        <p className="text-sm text-red-600 dark:text-red-400">
                            +{formatCurrency(transaction.penalty.amount)} IQD ceza
                        </p>
                    )}
                </div>

                {transaction.isOverdue && (
                    <div className="flex items-center gap-1 text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 px-2 py-1 rounded-full text-sm">
                        <AlertTriangle className="h-3 w-3" />
                        <span>{transaction.daysOverdue} gün gecikmiş</span>
                    </div>
                )}
            </ui.Card>
        );
    }, [formatCurrency]);

    // Search handlers
    const handleSearchInputChange = useCallback((value: string) => {
        setSearchInput(value);
    }, []);

    const handleSearchSubmit = useCallback((value: string) => {
        updateFilter('search', value);
    }, [updateFilter]);

    // Selection handlers
    const handleSelectionChange = useCallback((selected: any[]) => {
        setSelectedTransactions(selected.map(t => t.id));
    }, []);

    const handleGridSelectionChange = useCallback((selectedIds: Array<string | number>) => {
        setSelectedTransactions(selectedIds as string[]);
    }, []);

    // Filter configuration
    const filterGroups = useMemo(() => [
        {
            id: 'transactionType',
            label: 'İşlem Türü',
            type: 'select' as const,
            options: data?.filters.transactionType.options.map(option => ({
                id: option.value,
                label: option.label,
                value: option.value
            })) || [],
        },
        {
            id: 'paymentStatus',
            label: 'Ödeme Durumu',
            type: 'select' as const,
            options: data?.filters.paymentStatus.options.map(option => ({
                id: option.value,
                label: option.label,
                value: option.value
            })) || [],
        },
        {
            id: 'paymentMethod',
            label: 'Ödeme Yöntemi',
            type: 'select' as const,
            options: data?.filters.paymentMethod.options.map(option => ({
                id: option.value,
                label: option.label,
                value: option.value
            })) || [],
        },
    ], [data]);

    const handleApplyFilters = useCallback((newFilters: any) => {
        Object.keys(newFilters).forEach(key => {
            if (newFilters[key] !== '' && newFilters[key] !== undefined && newFilters[key] !== null) {
                updateFilter(key, newFilters[key]);
            }
        });
        setShowFilters(false);
    }, [updateFilter]);

    const handleResetFilters = useCallback(() => {
        resetFilters();
        setSearchInput('');
    }, [resetFilters]);

    // Grid UI
    const gridUI = useMemo(() => ({
        Card,
        Button,
        Checkbox,
        TablePagination,
        Badge,
        EmptyState,
        Skeleton,
        BulkActionsBar,
    }), []);

    const getItemId = useCallback((transaction: any) => transaction.id, []);

    // New Transaction Navigation Handler
    const handleNewTransactionClick = useCallback(() => {
        router.push('/dashboard/financial/create');
    }, [router]);

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                
                <div className="lg:ml-72">
                    <DashboardHeader
                        title="Finansal İşlemler"
                        breadcrumbItems={breadcrumbItems}
                    />

                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Summary */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-1">
                                    Finansal İşlemler <span className="text-primary-gold">({financialStats.totalTransactions.toLocaleString()} İşlem)</span>
                                </h2>
                                <p className="text-gray-600 dark:text-gray-400">
                                    Toplam Gelir: {formatCurrency(financialStats.totalRevenue)} IQD | 
                                    Bekleyen: {formatCurrency(financialStats.totalPending)} IQD | 
                                    Gecikmiş: {formatCurrency(financialStats.totalOverdue)} IQD
                                </p>
                            </div>
                            <div className="flex gap-3">
                                <Button variant="ghost" size="md" icon={RefreshCw} onClick={refetch}>
                                    Yenile
                                </Button>
                                <Button 
                                    variant="primary" 
                                    size="md" 
                                    icon={Plus}
                                    onClick={handleNewTransactionClick}
                                >
                                    Yeni İşlem
                                </Button>
                            </div>
                        </div>

                        {/* Search and Filters */}
                        <Card className="mb-6">
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    <div className="flex-1">
                                        <SearchBar
                                            placeholder="İşlem ID, daire numarası veya açıklama ile ara..."
                                            value={searchInput}
                                            onChange={handleSearchInputChange}
                                            onSearch={handleSearchSubmit}
                                            debounceMs={500}
                                        />
                                    </div>
                                    <div className="flex gap-2 items-center">
                                        <Button
                                            variant={showFilters ? "primary" : "secondary"}
                                            size="md"
                                            icon={Filter}
                                            onClick={() => setShowFilters(true)}
                                        >
                                            Filtreler
                                        </Button>
                                        <ViewToggle
                                            options={[
                                                { id: 'table', label: 'Tablo', icon: List },
                                                { id: 'grid', label: 'Kart', icon: Grid3X3 }
                                            ]}
                                            activeView={viewMode}
                                            onViewChange={(viewId) => setViewMode(viewId as typeof viewMode)}
                                            size="sm"
                                        />
                                    </div>
                                </div>
                            </div>
                        </Card>

                        {/* Filter Sidebar */}
                        <div className={`fixed inset-0 z-50 ${showFilters ? 'pointer-events-auto' : 'pointer-events-none'}`}>
                            <div
                                className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${showFilters ? 'opacity-50' : 'opacity-0'}`}
                                onClick={() => setShowFilters(false)}
                            />
                            <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-white dark:bg-gray-800 shadow-2xl transform transition-transform duration-300 ease-in-out ${showFilters ? 'translate-x-0' : 'translate-x-full'}`}>
                                <FilterPanel
                                    filterGroups={filterGroups}
                                    onApplyFilters={handleApplyFilters}
                                    onResetFilters={handleResetFilters}
                                    onClose={() => setShowFilters(false)}
                                    variant="sidebar"
                                />
                            </div>
                        </div>

                        {/* Quick Stats Cards */}
                        <div className="mb-8">
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4">
                                <StatsCard
                                    title="Toplam Gelir"
                                    value={`${formatCurrency(financialStats.totalRevenue)} IQD`}
                                    icon={DollarSign}
                                    color="success"
                                    loading={loading}
                                    size="md"
                                />
                                <StatsCard
                                    title="Bekleyen Ödemeler"
                                    value={`${formatCurrency(financialStats.totalPending)} IQD`}
                                    icon={Receipt}
                                    color="warning"
                                    loading={loading}
                                    size="md"
                                />
                                <StatsCard
                                    title="Gecikmiş Borçlar"
                                    value={`${formatCurrency(financialStats.totalOverdue)} IQD`}
                                    icon={AlertTriangle}
                                    color="danger"
                                    loading={loading}
                                    size="md"
                                />
                                <StatsCard
                                    title="Tahsilat Oranı"
                                    value={`%${financialStats.collectionRate.toFixed(1)}`}
                                    icon={Target}
                                    color="info"
                                    loading={loading}
                                    size="md"
                                />
                                <StatsCard
                                    title="Ortalama İşlem"
                                    value={`${formatCurrency(financialStats.averageTransaction)} IQD`}
                                    icon={Calculator}
                                    color="info"
                                    loading={loading}
                                    size="md"
                                />
                                <StatsCard
                                    title="Toplam İşlem"
                                    value={financialStats.totalTransactions.toLocaleString()}
                                    icon={Activity}
                                    color="primary"
                                    loading={loading}
                                    size="md"
                                />
                            </div>
                        </div>

                        {/* Data Display */}
                        <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
                            <div className="lg:col-span-1">
                                {viewMode === 'table' && (
                                    <GenericListView
                                        data={data?.transactions || []}
                                        loading={loading}
                                        error={error}
                                        onSelectionChange={handleSelectionChange}
                                        bulkActions={[]}
                                        columns={tableColumns}
                                        pagination={{
                                            currentPage: data?.pagination.currentPage || 1,
                                            totalPages: data?.pagination.totalPages || 1,
                                            totalRecords: data?.pagination.totalItems || 0,
                                            recordsPerPage: data?.pagination.itemsPerPage || 50,
                                            onPageChange: () => {},
                                            onRecordsPerPageChange: () => {},
                                        }}
                                        emptyStateMessage="Henüz finansal işlem kaydı bulunmuyor."
                                        selectable={true}
                                        showPagination={true}
                                        ActionMenuComponent={TransactionActionMenuWrapper}
                                    />
                                )}
                                {viewMode === 'grid' && (
                                    <GenericGridView
                                        data={data?.transactions || []}
                                        loading={loading}
                                        error={error}
                                        onSelectionChange={handleGridSelectionChange}
                                        bulkActions={[]}
                                        onAction={handleTransactionAction}
                                        selectedItems={selectedTransactions}
                                        pagination={{
                                            currentPage: data?.pagination.currentPage || 1,
                                            totalPages: data?.pagination.totalPages || 1,
                                            totalRecords: data?.pagination.totalItems || 0,
                                            recordsPerPage: data?.pagination.itemsPerPage || 50,
                                            onPageChange: () => {},
                                            onRecordsPerPageChange: () => {},
                                        }}
                                        emptyStateMessage="Henüz finansal işlem kaydı bulunmuyor."
                                        ui={gridUI}
                                        ActionMenu={TransactionActionMenuWrapper}
                                        renderCard={renderTransactionCard}
                                        getItemId={getItemId}
                                        gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
                                    />
                                )}
                            </div>
                        </div>
                    </main>
                </div>

            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/requests/actions/bulk-actions.ts">
import React from 'react';
import { Ticket, ticketService } from '@/services/ticket.service';
import { 
    RotateCcw, 
    CheckCircle, 
    XCircle, 
    X 
} from 'lucide-react';

export interface BulkActionHandlers {
    getBulkActions: (selectedRequests: Ticket[]) => Array<{
        id: string;
        label: string;
        icon: any;
        variant: 'default' | 'danger' | 'warning' | 'success';
        onClick: (items: Ticket[]) => void;
        disabled?: boolean;
        loading?: boolean;
    }>;
    executeBulkStatusChange: (action: string) => Promise<void>;
}

export interface ToastFunctions {
    success: (title: string, message: string) => void;
    info: (title: string, message: string) => void;
    error: (title: string, message: string) => void;
}

export interface DataUpdateFunctions {
    setRequests: React.Dispatch<React.SetStateAction<Ticket[]>>;
    refreshData: () => void;
}



export function createRequestBulkActionHandlers(
    toastFunctions: ToastFunctions,
    dataUpdateFunctions: DataUpdateFunctions,
    selectedRequests: Ticket[]
): BulkActionHandlers {
    const { success, info, error } = toastFunctions;
    const { setRequests, refreshData } = dataUpdateFunctions;

    const getBulkActions = (selectedRequests: Ticket[]) => [
        {
            id: 'start-progress',
            label: `İşleme Al (${selectedRequests.length})`,
            icon: RotateCcw,
            variant: 'warning' as const,
            onClick: (items: Ticket[]) => executeBulkStatusChange('start-progress'),
            disabled: selectedRequests.every(req => req.status === 'IN_PROGRESS')
        },
        {
            id: 'resolve',
            label: `Tamamlandı Olarak İşaretle (${selectedRequests.length})`,
            icon: CheckCircle,
            variant: 'success' as const,
            onClick: (items: Ticket[]) => executeBulkStatusChange('resolve'),
            disabled: selectedRequests.every(req => req.status === 'COMPLETED')
        },
        {
            id: 'close',
            label: `Kapat (${selectedRequests.length})`,
            icon: XCircle,
            variant: 'danger' as const,
            onClick: (items: Ticket[]) => executeBulkStatusChange('close'),
            disabled: selectedRequests.every(req => req.status === 'CLOSED')
        },
        {
            id: 'cancel',
            label: `İptal Et (${selectedRequests.length})`,
            icon: X,
            variant: 'danger' as const,
            onClick: (items: Ticket[]) => executeBulkStatusChange('cancel'),
            disabled: selectedRequests.every(req => req.status === 'CANCELLED')
        }
    ];



    const executeBulkStatusChange = async (action: string) => {
        try {
            const actionLabels = {
                'start-progress': 'işleme alındı',
                'resolve': 'tamamlandı olarak işaretlendi',
                'close': 'kapatıldı',
                'cancel': 'iptal edildi'
            };

            // Call ticket service for each selected request
            const promises = selectedRequests.map(async (request) => {
                switch (action) {
                    case 'start-progress':
                        return await ticketService.startProgress(request.id);
                    case 'resolve':
                        return await ticketService.resolve(request.id);
                    case 'close':
                        return await ticketService.close(request.id);
                    case 'cancel':
                        return await ticketService.cancel(request.id);
                    default:
                        throw new Error(`Unknown action: ${action}`);
                }
            });

            await Promise.all(promises);
            
            // Refresh data after bulk operation
            refreshData();
            
            success(
                'Başarılı',
                `${selectedRequests.length} talep ${actionLabels[action as keyof typeof actionLabels]}`
            );
        } catch (err) {
            error(
                'Hata',
                'Talep durumları güncellenirken bir hata oluştu.'
            );
        }
    };



    return {
        getBulkActions,
        executeBulkStatusChange
    };
}
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailApartment.tsx">
import React from 'react';
import { MapPin, User, Users, Phone, Building, Hash } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import { RequestDetailApartmentProps } from '@/services/types/request-detail.types';

const RequestDetailApartment: React.FC<RequestDetailApartmentProps> = ({ apartment }) => {
  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center gap-2 mb-4">
          <Building className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
          <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
            Mülk Bilgileri
          </h2>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {/* Apartment Number */}
          <div className="flex items-center gap-3">
            <Hash className="h-4 w-4 text-text-light-muted dark:text-text-muted flex-shrink-0" />
            <div>
              <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Daire No
              </p>
              <p className="text-base font-semibold text-text-on-light dark:text-text-on-dark">
                {apartment.number}
              </p>
            </div>
          </div>

          {/* Block */}
          <div className="flex items-center gap-3">
            <Building className="h-4 w-4 text-text-light-muted dark:text-text-muted flex-shrink-0" />
            <div>
              <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Blok
              </p>
              <p className="text-base text-text-on-light dark:text-text-on-dark">
                {apartment.block}
              </p>
            </div>
          </div>

          {/* Floor */}
          <div className="flex items-center gap-3">
            <MapPin className="h-4 w-4 text-text-light-muted dark:text-text-muted flex-shrink-0" />
            <div>
              <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Kat
              </p>
              <p className="text-base text-text-on-light dark:text-text-on-dark">
                {apartment.floor}. Kat
              </p>
            </div>
          </div>

          {/* Owner */}
          <div className="flex items-center gap-3">
            <User className="h-4 w-4 text-text-light-muted dark:text-text-muted flex-shrink-0" />
            <div>
              <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Mülk Sahibi
              </p>
              <p className="text-base text-text-on-light dark:text-text-on-dark">
                {apartment.owner}
              </p>
            </div>
          </div>
        </div>

        {/* Tenant (if exists) */}
        {apartment.tenant && (
          <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
            <div className="flex items-center gap-3">
              <Users className="h-4 w-4 text-text-light-muted dark:text-text-muted flex-shrink-0" />
              <div>
                <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                  Kiracı
                </p>
                <p className="text-base text-text-on-light dark:text-text-on-dark">
                  {apartment.tenant}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Phone Contact */}
        {apartment.phone && (
          <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
            <div className="flex items-center gap-3">
              <Phone className="h-4 w-4 text-text-light-muted dark:text-text-muted flex-shrink-0" />
              <div>
                <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                  İletişim
                </p>
                <a 
                  href={`tel:${apartment.phone}`}
                  className="text-base text-primary-gold hover:underline font-medium"
                >
                  {apartment.phone}
                </a>
              </div>
            </div>
          </div>
        )}

        {/* Address Summary */}
        <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <div className="bg-background-light-soft dark:bg-background-soft rounded-lg p-3">
            <div className="flex items-start gap-2">
              <MapPin className="h-4 w-4 text-primary-gold flex-shrink-0 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-1">
                  Tam Adres
                </p>
                <p className="text-sm text-text-on-light dark:text-text-on-dark">
                  {apartment.block} Blok, {apartment.number} Daire, {apartment.floor}. Kat
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default RequestDetailApartment;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailAssignee.tsx">
import React from 'react';
import { User, Building2, Phone, Star, UserX } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { RequestDetailAssigneeProps } from '@/services/types/request-detail.types';

const RequestDetailAssignee: React.FC<RequestDetailAssigneeProps> = ({ assignee }) => {
  // Render rating stars
  const renderRating = (rating: number) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 !== 0;

    for (let i = 0; i < fullStars; i++) {
      stars.push(
        <Star key={i} className="h-3 w-3 fill-yellow-400 text-yellow-400" />
      );
    }

    if (hasHalfStar) {
      stars.push(
        <Star key="half" className="h-3 w-3 fill-yellow-400/50 text-yellow-400" />
      );
    }

    const emptyStars = 5 - Math.ceil(rating);
    for (let i = 0; i < emptyStars; i++) {
      stars.push(
        <Star key={`empty-${i}`} className="h-3 w-3 text-gray-300 dark:text-gray-600" />
      );
    }

    return stars;
  };

  // If no assignee, show unassigned state
  if (!assignee) {
    return (
      <Card className="p-6">
        <div className="space-y-4">
          <div className="flex items-center gap-2 mb-4">
            <UserX className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
            <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              Teknisyen
            </h2>
          </div>

          <div className="text-center py-8">
            <UserX className="mx-auto h-12 w-12 text-text-light-muted dark:text-text-muted mb-3" />
            <p className="text-text-light-secondary dark:text-text-secondary mb-2">
              Henüz teknisyen atanmamış
            </p>
            <Badge variant="soft" color="secondary">
              Atama Bekleniyor
            </Badge>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center gap-2 mb-4">
          <User className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
          <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
            Atanan Teknisyen
          </h2>
        </div>

        {/* Assignee Profile */}
        <div className="flex items-start gap-4">
          {/* Avatar */}
          <div className="w-12 h-12 bg-primary-gold/10 rounded-full flex items-center justify-center text-lg font-bold text-primary-gold flex-shrink-0">
            {assignee.avatar}
          </div>

          {/* Info */}
          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-1">
              {assignee.name}
            </h3>
            
            {/* Rating */}
            <div className="flex items-center gap-2 mb-2">
              <div className="flex gap-0.5">
                {renderRating(assignee.rating)}
              </div>
              <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                ({assignee.rating.toFixed(1)})
              </span>
            </div>

            {/* Company */}
            <div className="flex items-center gap-2 mb-2">
              <Building2 className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
              <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                {assignee.company}
              </span>
            </div>

            {/* Phone */}
            {assignee.phone && (
              <div className="flex items-center gap-2">
                <Phone className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                <a 
                  href={`tel:${assignee.phone}`}
                  className="text-sm text-primary-gold hover:underline font-medium"
                >
                  {assignee.phone}
                </a>
              </div>
            )}
          </div>
        </div>

        {/* Status Badge */}
        <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <Badge variant="soft" color="success" className="text-sm">
            ✅ Atanmış
          </Badge>
        </div>

        {/* Quick Actions */}
        <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <div className="flex flex-wrap gap-2">
            {assignee.phone && (
              <a
                href={`tel:${assignee.phone}`}
                className="inline-flex items-center gap-2 px-3 py-2 text-sm bg-primary-gold/10 text-primary-gold rounded-lg hover:bg-primary-gold/20 transition-colors"
              >
                <Phone className="h-4 w-4" />
                Ara
              </a>
            )}
            <button className="inline-flex items-center gap-2 px-3 py-2 text-sm bg-background-light-soft dark:bg-background-soft text-text-light-secondary dark:text-text-secondary rounded-lg hover:bg-background-light-secondary dark:hover:bg-background-secondary transition-colors">
              <User className="h-4 w-4" />
              Profil
            </button>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default RequestDetailAssignee;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailComments.tsx">
import React from 'react';
import { MessageCircle, MessageSquare } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { RequestDetailCommentsProps } from '@/services/types/request-detail.types';

const RequestDetailComments: React.FC<RequestDetailCommentsProps> = ({
  requestId,
  commentsCount
}) => {
  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <MessageCircle className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
            <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              Yorumlar & Aktivite
            </h2>
          </div>
          <Badge variant="soft" color="secondary" className="text-sm">
            {commentsCount} Yorum
          </Badge>
        </div>

        {commentsCount > 0 ? (
          <div className="space-y-4">
            {/* Comments would be loaded here */}
            <div className="text-center py-8">
              <MessageSquare className="mx-auto h-12 w-12 text-text-light-muted dark:text-text-muted mb-3" />
              <p className="text-text-light-secondary dark:text-text-secondary mb-2">
                Yorumlar yükleniyor...
              </p>
              <p className="text-sm text-text-light-muted dark:text-text-muted">
                Bu özellik yakında aktif olacak
              </p>
            </div>
          </div>
        ) : (
          <div className="text-center py-8">
            <MessageSquare className="mx-auto h-12 w-12 text-text-light-muted dark:text-text-muted mb-3" />
            <p className="text-text-light-secondary dark:text-text-secondary mb-2">
              Henüz yorum yok
            </p>
            <p className="text-sm text-text-light-muted dark:text-text-muted">
              Bu talep için henüz yorum veya aktivite kaydı bulunmuyor
            </p>
          </div>
        )}
      </div>
    </Card>
  );
};

export default RequestDetailComments;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailCost.tsx">
import React from 'react';
import { DollarSign, TrendingUp, TrendingDown, AlertTriangle } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { RequestDetailCostProps } from '@/services/types/request-detail.types';

const RequestDetailCost: React.FC<RequestDetailCostProps> = ({
  cost,
  canViewCosts = true
}) => {
  // Format currency
  const formatCurrency = (amount: number, currency: string) => {
    return new Intl.NumberFormat('tr-TR', {
      style: 'currency',
      currency: currency === 'IQD' ? 'USD' : currency, // Fallback for IQD
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount).replace('$', cost.currency === 'IQD' ? 'IQD ' : '$');
  };

  // Calculate difference between estimated and actual
  const getDifference = () => {
    if (!cost.actual || !cost.estimated) return null;
    
    const diff = cost.actual - cost.estimated;
    const percentage = ((diff / cost.estimated) * 100).toFixed(1);
    
    return {
      amount: Math.abs(diff),
      percentage: Math.abs(parseFloat(percentage)),
      isOverBudget: diff > 0,
      isUnderBudget: diff < 0,
      isOnBudget: diff === 0
    };
  };

  const difference = getDifference();

  // No permission to view costs
  if (!canViewCosts) {
    return (
      <Card className="p-6">
        <div className="space-y-4">
          <div className="flex items-center gap-2 mb-4">
            <DollarSign className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
            <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              Maliyet Bilgileri
            </h2>
          </div>

          <div className="text-center py-8">
            <AlertTriangle className="mx-auto h-12 w-12 text-text-light-muted dark:text-text-muted mb-3" />
            <p className="text-text-light-secondary dark:text-text-secondary mb-2">
              Maliyet bilgilerini görüntüleme yetkiniz yok
            </p>
            <p className="text-sm text-text-light-muted dark:text-text-muted">
              Bu bilgileri görmek için yönetici ile iletişime geçin
            </p>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center gap-2 mb-4">
          <DollarSign className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
          <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
            Maliyet Bilgileri
          </h2>
        </div>

        {/* Cost breakdown */}
        <div className="space-y-4">
          {/* Estimated Cost */}
          <div className="flex items-center justify-between p-4 bg-background-light-soft dark:bg-background-soft rounded-lg">
            <div>
              <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Tahmini Maliyet
              </p>
              <p className="text-sm text-text-light-muted dark:text-text-muted">
                Başlangıç tahmini
              </p>
            </div>
            <div className="text-right">
              <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                {cost.estimated > 0 ? formatCurrency(cost.estimated, cost.currency) : '--'}
              </p>
            </div>
          </div>

          {/* Actual Cost */}
          <div className="flex items-center justify-between p-4 bg-background-light-soft dark:bg-background-soft rounded-lg">
            <div>
              <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Gerçek Maliyet
              </p>
              <p className="text-sm text-text-light-muted dark:text-text-muted">
                {cost.actual ? 'Final maliyet' : 'Henüz belirlenmedi'}
              </p>
            </div>
            <div className="text-right">
              <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                {cost.actual ? formatCurrency(cost.actual, cost.currency) : '--'}
              </p>
              {!cost.actual && (
                <Badge variant="soft" color="warning" className="text-xs mt-1">
                  Bekleniyor
                </Badge>
              )}
            </div>
          </div>

          {/* Difference Analysis */}
          {difference && (
            <div className={`
              p-4 rounded-lg border
              ${difference.isOverBudget 
                ? 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800' 
                : difference.isUnderBudget 
                ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800'
                : 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800'
              }
            `}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  {difference.isOverBudget ? (
                    <TrendingUp className="h-4 w-4 text-red-500" />
                  ) : difference.isUnderBudget ? (
                    <TrendingDown className="h-4 w-4 text-green-500" />
                  ) : (
                    <DollarSign className="h-4 w-4 text-blue-500" />
                  )}
                  <span className={`
                    text-sm font-medium
                    ${difference.isOverBudget 
                      ? 'text-red-800 dark:text-red-200' 
                      : difference.isUnderBudget 
                      ? 'text-green-800 dark:text-green-200'
                      : 'text-blue-800 dark:text-blue-200'
                    }
                  `}>
                    {difference.isOverBudget 
                      ? 'Bütçe Aşımı' 
                      : difference.isUnderBudget 
                      ? 'Bütçe Altında'
                      : 'Bütçe Uygunluğu'
                    }
                  </span>
                </div>
                <div className="text-right">
                  <p className={`
                    text-sm font-semibold
                    ${difference.isOverBudget 
                      ? 'text-red-600 dark:text-red-400' 
                      : difference.isUnderBudget 
                      ? 'text-green-600 dark:text-green-400'
                      : 'text-blue-600 dark:text-blue-400'
                    }
                  `}>
                    {difference.isOverBudget ? '+' : difference.isUnderBudget ? '-' : ''}
                    {formatCurrency(difference.amount, cost.currency)}
                  </p>
                  <p className={`
                    text-xs
                    ${difference.isOverBudget 
                      ? 'text-red-500 dark:text-red-400' 
                      : difference.isUnderBudget 
                      ? 'text-green-500 dark:text-green-400'
                      : 'text-blue-500 dark:text-blue-400'
                    }
                  `}>
                    %{difference.percentage}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* No cost info */}
          {cost.estimated === 0 && !cost.actual && (
            <div className="text-center py-6">
              <DollarSign className="mx-auto h-12 w-12 text-text-light-muted dark:text-text-muted mb-3" />
              <p className="text-text-light-secondary dark:text-text-secondary mb-2">
                Maliyet bilgisi henüz girilmemiş
              </p>
              <p className="text-sm text-text-light-muted dark:text-text-muted">
                Talep ilerledikçe maliyet bilgileri güncellenecek
              </p>
            </div>
          )}
        </div>

        {/* Currency info */}
        <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <p className="text-xs text-text-light-muted dark:text-text-muted">
            Para birimi: {cost.currency} • Tüm fiyatlar KDV dahildir
          </p>
        </div>
      </div>
    </Card>
  );
};

export default RequestDetailCost;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailHeader.tsx">
import React from 'react';
import { ArrowLeft, Edit, Trash2 } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import { RequestDetailHeaderProps, STATUS_CONFIGS } from '@/services/types/request-detail.types';

// Icon mapping for status
const getStatusIcon = (iconName: string) => {
  const icons: { [key: string]: React.ComponentType<any> } = {
    'AlertCircle': require('lucide-react').AlertCircle,
    'RotateCcw': require('lucide-react').RotateCcw,
    'PauseCircle': require('lucide-react').PauseCircle,
    'CheckCircle': require('lucide-react').CheckCircle,
    'X': require('lucide-react').X,
    'Calendar': require('lucide-react').Calendar
  };
  return icons[iconName] || icons['AlertCircle'];
};

const RequestDetailHeader: React.FC<RequestDetailHeaderProps> = ({
  request,
  onEdit,
  onDelete,
  onBack,
  loading = false
}) => {
  const statusConfig = STATUS_CONFIGS[request.status.id] || STATUS_CONFIGS['OPEN'];
  const StatusIcon = getStatusIcon(statusConfig.icon);

  // Get badge color based on status
  const getBadgeColor = (status: string) => {
    const colorMap: { [key: string]: any } = {
      'OPEN': 'info',
      'IN_PROGRESS': 'warning', 
      'WAITING': 'secondary',
      'RESOLVED': 'success',
      'CLOSED': 'secondary',
      'CANCELLED': 'red'
    };
    return colorMap[status] || 'secondary';
  };

  return (
    <Card className="p-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div className="flex-1">
          <div className="flex items-center gap-3 mb-2">
            <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
              {request.title}
            </h1>
            <StatusIcon className="h-6 w-6" style={{ color: request.status.color }} />
            <Badge 
              variant="soft" 
              color={getBadgeColor(request.status.id)}
            >
              {request.status.label}
            </Badge>
            {request.isUrgent && (
              <Badge variant="solid" color="red" className="text-xs">
                Acil
              </Badge>
            )}
            {request.isOverdue && (
              <Badge variant="solid" color="red" className="text-xs">
                Gecikmiş
              </Badge>
            )}
          </div>
          <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4 text-text-light-secondary dark:text-text-secondary">
            <p>
              Talep No: <span className="font-medium">{request.requestId}</span>
            </p>
            <p className="hidden sm:block">•</p>
            <p>
              Daire: <span className="font-medium">{request.apartment.number}</span>
            </p>
            <p className="hidden sm:block">•</p>
            <p>
              Kategori: <span className="font-medium flex items-center gap-1">
                <span>{request.category.icon}</span>
                {request.category.label}
              </span>
            </p>
          </div>
        </div>
        
        <div className="flex gap-3">
          <Button
            variant="ghost"
            icon={ArrowLeft}
            onClick={onBack}
            disabled={loading}
          >
            Geri
          </Button>
          <Button
            variant="secondary"
            icon={Edit}
            onClick={onEdit}
            disabled={loading}
          >
            Düzenle
          </Button>
          <Button
            variant="danger"
            icon={Trash2}
            onClick={onDelete}
            disabled={loading}
          >
            Sil
          </Button>
        </div>
      </div>
    </Card>
  );
};

export default RequestDetailHeader;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailImages.tsx">
import React from 'react';
import { Image, Camera, Eye } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import Button from '@/app/components/ui/Button';
import { RequestDetailImagesProps } from '@/services/types/request-detail.types';

const RequestDetailImages: React.FC<RequestDetailImagesProps> = ({
  requestId,
  imagesCount
}) => {
  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <Image className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
            <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              Fotoğraflar
            </h2>
          </div>
          <Badge variant="soft" color="secondary" className="text-sm">
            {imagesCount} Fotoğraf
          </Badge>
        </div>

        {imagesCount > 0 ? (
          <div className="space-y-4">
            {/* Image grid placeholder */}
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
              {[...Array(Math.min(imagesCount, 6))].map((_, index) => (
                <div
                  key={index}
                  className="aspect-square bg-background-light-soft dark:bg-background-soft rounded-lg flex items-center justify-center border-2 border-dashed border-background-light-secondary dark:border-background-secondary"
                >
                  <div className="text-center">
                    <Camera className="mx-auto h-6 w-6 text-text-light-muted dark:text-text-muted mb-1" />
                    <p className="text-xs text-text-light-muted dark:text-text-muted">
                      Fotoğraf {index + 1}
                    </p>
                  </div>
                </div>
              ))}
            </div>

            {/* Show more button if there are more images */}
            {imagesCount > 6 && (
              <div className="text-center">
                <Button variant="ghost" icon={Eye} className="text-sm">
                  {imagesCount - 6} Fotoğraf Daha Göster
                </Button>
              </div>
            )}

            {/* Actions */}
            <div className="flex gap-2 pt-4 border-t border-background-light-secondary dark:border-background-secondary">
              <Button variant="secondary" size="sm">
                Tümünü Göster
              </Button>
              <Button variant="ghost" size="sm">
                İndir
              </Button>
            </div>

            {/* Info message */}
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3">
              <p className="text-sm text-blue-800 dark:text-blue-200">
                📷 Fotoğraf görüntüleme özelliği yakında aktif olacak
              </p>
            </div>
          </div>
        ) : (
          <div className="text-center py-8">
            <Camera className="mx-auto h-12 w-12 text-text-light-muted dark:text-text-muted mb-3" />
            <p className="text-text-light-secondary dark:text-text-secondary mb-2">
              Henüz fotoğraf yok
            </p>
            <p className="text-sm text-text-light-muted dark:text-text-muted">
              Bu talep için henüz fotoğraf eklenmemiş
            </p>
          </div>
        )}
      </div>
    </Card>
  );
};

export default RequestDetailImages;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailInfo.tsx">
import React from 'react';
import { FileText, AlertCircle, Tag } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { RequestDetailInfoProps } from '@/services/types/request-detail.types';

const RequestDetailInfo: React.FC<RequestDetailInfoProps> = ({ request }) => {
  // Get priority badge color
  const getPriorityBadgeColor = (level: number) => {
    switch (level) {
      case 4: return 'red'; // Emergency/Urgent
      case 3: return 'gold'; // High
      case 2: return 'warning'; // Medium
      case 1: return 'success'; // Low
      default: return 'secondary';
    }
  };

  return (
    <Card className="p-6">
      <div className="space-y-6">
        {/* Description Section */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <FileText className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
            <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              Açıklama
            </h2>
          </div>
          <p className="text-text-light-secondary dark:text-text-secondary whitespace-pre-wrap leading-relaxed">
            {request.description || 'Açıklama bulunmuyor.'}
          </p>
        </div>

        {/* Priority & Category Info */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <div className="flex items-center gap-2 mb-2">
              <AlertCircle className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
              <span className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Öncelik
              </span>
            </div>
            <Badge 
              variant="soft" 
              color={getPriorityBadgeColor(request.priority.level)}
              className="text-sm"
            >
              <span className="mr-1">{request.priority.icon}</span>
              {request.priority.label}
            </Badge>
          </div>

          <div>
            <div className="flex items-center gap-2 mb-2">
              <Tag className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
              <span className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Kategori
              </span>
            </div>
            <Badge 
              variant="soft" 
              color="secondary"
              className="text-sm"
            >
              <span className="mr-1">{request.category.icon}</span>
              {request.category.label}
            </Badge>
          </div>
        </div>

        {/* Tags Section */}
        {request.tags && request.tags.length > 0 && (
          <div>
            <div className="flex items-center gap-2 mb-3">
              <Tag className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
              <span className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Etiketler
              </span>
            </div>
            <div className="flex flex-wrap gap-2">
              {request.tags.map((tag, index) => (
                <Badge 
                  key={index} 
                  variant="outline" 
                  color="secondary"
                  className="text-xs"
                >
                  {tag}
                </Badge>
              ))}
            </div>
          </div>
        )}

        {/* Stats Summary */}
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <div className="text-center">
            <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              {request.imagesCount}
            </p>
            <p className="text-xs text-text-light-muted dark:text-text-muted">
              Fotoğraf
            </p>
          </div>
          <div className="text-center">
            <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              {request.commentsCount}
            </p>
            <p className="text-xs text-text-light-muted dark:text-text-muted">
              Yorum
            </p>
          </div>
          <div className="text-center">
            <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              {request.responseTime || '--'}
            </p>
            <p className="text-xs text-text-light-muted dark:text-text-muted">
              Yanıt Süresi
            </p>
          </div>
          <div className="text-center">
            <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              {request.completionTime || '--'}
            </p>
            <p className="text-xs text-text-light-muted dark:text-text-muted">
              Tamamlanma Süresi
            </p>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default RequestDetailInfo;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailTimeline.tsx">
import React from 'react';
import { Clock, Calendar, AlertCircle, CheckCircle, Target } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { RequestDetailTimelineProps } from '@/services/types/request-detail.types';

const RequestDetailTimeline: React.FC<RequestDetailTimelineProps> = ({ request }) => {
  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Format relative time
  const formatRelativeTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    if (diffHours < 1) {
      return 'Az önce';
    } else if (diffHours < 24) {
      return `${diffHours} saat önce`;
    } else if (diffDays === 1) {
      return 'Dün';
    } else {
      return `${diffDays} gün önce`;
    }
  };

  // Check if date is overdue
  const isOverdue = (dateString: string) => {
    return new Date(dateString) < new Date();
  };

  // Timeline events
  const timelineEvents = [
    {
      id: 'created',
      title: 'Talep Oluşturuldu',
      date: request.createdDate,
      icon: Calendar,
      status: 'completed',
      description: 'Talep sisteme kaydedildi'
    },
    {
      id: 'updated',
      title: 'Son Güncelleme',
      date: request.updatedDate,
      icon: Clock,
      status: 'completed',
      description: 'Talep bilgileri güncellendi'
    }
  ];

  // Add estimated completion if exists
  if (request.estimatedCompletion) {
    timelineEvents.push({
      id: 'estimated',
      title: 'Tahmini Bitiş',
      date: request.estimatedCompletion,
      icon: Target,
      status: isOverdue(request.estimatedCompletion) ? 'overdue' : 'pending',
      description: 'Tahmini tamamlanma tarihi'
    });
  }

  // Add completion date if exists
  if (request.completedDate) {
    timelineEvents.push({
      id: 'completed',
      title: 'Tamamlandı',
      date: request.completedDate,
      icon: CheckCircle,
      status: 'completed',
      description: 'Talep başarıyla tamamlandı'
    });
  }

  // Add due date
  timelineEvents.push({
    id: 'due',
    title: 'Vade Tarihi',
    date: request.dueDate,
    icon: AlertCircle,
    status: request.isOverdue ? 'overdue' : 'pending',
    description: 'Talebin tamamlanması gereken tarih'
  });

  // Sort events by date
  const sortedEvents = timelineEvents.sort((a, b) => 
    new Date(a.date).getTime() - new Date(b.date).getTime()
  );

  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center gap-2 mb-4">
          <Clock className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
          <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
            Zaman Çizelgesi
          </h2>
        </div>

        {/* Timeline */}
        <div className="space-y-4">
          {sortedEvents.map((event, index) => {
            const IconComponent = event.icon;
            const isLast = index === sortedEvents.length - 1;
            
            return (
              <div key={event.id} className="relative">
                {/* Timeline line */}
                {!isLast && (
                  <div className="absolute left-6 top-12 w-0.5 h-6 bg-background-light-secondary dark:bg-background-secondary" />
                )}
                
                <div className="flex items-start gap-4">
                  {/* Icon */}
                  <div className={`
                    w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0
                    ${event.status === 'completed' ? 'bg-green-100 text-green-600' : 
                      event.status === 'overdue' ? 'bg-red-100 text-red-600' : 
                      'bg-blue-100 text-blue-600'}
                  `}>
                    <IconComponent className="h-5 w-5" />
                  </div>

                  {/* Content */}
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <h3 className="text-base font-medium text-text-on-light dark:text-text-on-dark">
                        {event.title}
                      </h3>
                      {event.status === 'overdue' && (
                        <Badge variant="solid" color="red" className="text-xs">
                          Gecikmiş
                        </Badge>
                      )}
                    </div>
                    
                    <p className="text-sm text-text-light-secondary dark:text-text-secondary mb-2">
                      {event.description}
                    </p>
                    
                    <div className="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-4 text-xs text-text-light-muted dark:text-text-muted">
                      <span>{formatDate(event.date)}</span>
                      <span className="hidden sm:block">•</span>
                      <span>{formatRelativeTime(event.date)}</span>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* Summary Stats */}
        <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <div className="grid grid-cols-2 gap-4">
            <div className="text-center">
              <p className="text-sm text-text-light-muted dark:text-text-muted mb-1">
                Yanıt Süresi
              </p>
              <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                {request.responseTime || '--'}
              </p>
            </div>
            <div className="text-center">
              <p className="text-sm text-text-light-muted dark:text-text-muted mb-1">
                Tamamlanma Süresi
              </p>
              <p className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
                {request.completionTime || '--'}
              </p>
            </div>
          </div>
        </div>

        {/* Status indicators */}
        <div className="flex flex-wrap gap-2">
          {request.isOverdue && (
            <Badge variant="soft" color="red" className="text-xs">
              🚨 Gecikmiş
            </Badge>
          )}
          {request.isUrgent && (
            <Badge variant="soft" color="red" className="text-xs">
              ⚡ Acil
            </Badge>
          )}
          {request.completedDate && (
            <Badge variant="soft" color="success" className="text-xs">
              ✅ Tamamlandı
            </Badge>
          )}
        </div>
      </div>
    </Card>
  );
};

export default RequestDetailTimeline;
</file>

<file path="src/app/dashboard/requests/components/RequestsFiltersBar.tsx">
import React from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import Badge from '@/app/components/ui/Badge';
import { RequestsFiltersBarProps } from '@/services/types/request-list.types';
import { Filter, List, Grid3X3, X } from 'lucide-react';

export default function RequestsFiltersBar({
  searchValue,
  onSearchChange,
  onSearchSubmit,
  activeFiltersCount,
  onShowFilters,
  viewMode,
  onViewModeChange
}: RequestsFiltersBarProps) {
  return (
    <Card className="mb-6">
      <div className="p-6">
        <div className="flex flex-col lg:flex-row justify-between gap-4">
          {/* Left side - Search Bar */}
          <div className="flex-1 max-w-lg">
            <SearchBar
              placeholder="Talep ID, açıklama veya daire numarası ile ara..."
              value={searchValue}
              onChange={onSearchChange}
              onSearch={onSearchSubmit}
              debounceMs={500}
            />
          </div>

          {/* Right side - Filters and View Toggle */}
          <div className="flex items-center gap-3">
            {/* Active Filters Indicator */}
            {activeFiltersCount > 0 && (
              <div className="flex items-center gap-2">
                <Badge variant="soft" color="primary" className="text-xs">
                  {activeFiltersCount} filtre aktif
                </Badge>
              </div>
            )}

            {/* Filters Button */}
            <Button
              variant={activeFiltersCount > 0 ? "primary" : "secondary"}
              size="md"
              icon={Filter}
              onClick={onShowFilters}
              className="relative"
            >
              Filtreler
              {activeFiltersCount > 0 && (
                <Badge 
                  variant="solid" 
                  color="gold" 
                  className="absolute -top-2 -right-2 min-w-[20px] h-5 text-xs px-1"
                >
                  {activeFiltersCount}
                </Badge>
              )}
            </Button>

            {/* View Toggle */}
            <ViewToggle
              options={[
                { id: 'table', label: 'Tablo', icon: List },
                { id: 'grid', label: 'Kart', icon: Grid3X3 },
              ]}
              activeView={viewMode}
              onViewChange={(viewId) => onViewModeChange(viewId as 'table' | 'grid')}
              size="sm"
            />
          </div>
        </div>

        {/* Active Filters Tags (if any) */}
        {activeFiltersCount > 0 && (
          <div className="mt-4 pt-4 border-t border-background-light-secondary dark:border-background-secondary">
            <div className="flex items-center gap-2 flex-wrap">
              <span className="text-sm text-text-light-muted dark:text-text-muted">
                Aktif filtreler:
              </span>
              {/* This would be populated by the parent component with actual filter values */}
              <div className="flex gap-2 flex-wrap">
                {/* Filter tags would be rendered here */}
              </div>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
}
</file>

<file path="src/app/dashboard/requests/components/RequestsPageHeader.tsx">
import React from 'react';
import Button from '@/app/components/ui/Button';
import { RequestsPageHeaderProps } from '@/services/types/request-list.types';
import { Plus, RefreshCw, Wrench } from 'lucide-react';

export default function RequestsPageHeader({
  summary,
  onRefresh,
  onCreateRequest,
  loading = false
}: RequestsPageHeaderProps) {
  return (
    <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
      {/* Left side - Title and Summary */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <div className="w-10 h-10 bg-primary-gold/10 rounded-lg flex items-center justify-center">
            <Wrench className="h-6 w-6 text-primary-gold" />
          </div>
          <div>
            <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
              Hizmet Talepleri
            </h1>
            <p className="text-sm text-text-light-secondary dark:text-text-secondary">
              Bakım ve Arıza Yönetimi
            </p>
          </div>
        </div>
        
        {/* Summary Stats */}
        <div className="flex flex-wrap items-center gap-4 text-sm">
          <div>
            <span className="text-text-light-muted dark:text-text-muted">Toplam: </span>
            <span className="font-semibold text-primary-gold">
              {loading ? '...' : summary.totalRequests}
            </span>
          </div>
          <div className="w-1 h-1 bg-text-light-muted dark:bg-text-muted rounded-full"></div>
          <div>
            <span className="text-text-light-muted dark:text-text-muted">Aktif: </span>
            <span className="font-semibold text-semantic-info-600">
              {loading ? '...' : summary.activeRequests}
            </span>
          </div>
          <div className="w-1 h-1 bg-text-light-muted dark:bg-text-muted rounded-full"></div>
          <div>
            <span className="text-text-light-muted dark:text-text-muted">Bugün Tamamlanan: </span>
            <span className="font-semibold text-semantic-success-600">
              {loading ? '...' : summary.completedToday}
            </span>
          </div>
          {summary.overdueRequests > 0 && (
            <>
              <div className="w-1 h-1 bg-text-light-muted dark:bg-text-muted rounded-full"></div>
              <div>
                <span className="text-text-light-muted dark:text-text-muted">Gecikmiş: </span>
                <span className="font-semibold text-primary-red">
                  {loading ? '...' : summary.overdueRequests}
                </span>
              </div>
            </>
          )}
        </div>
      </div>

      {/* Right side - Action Buttons */}
      <div className="flex gap-3">
        <Button 
          variant="secondary" 
          size="md" 
          icon={RefreshCw} 
          onClick={onRefresh}
          disabled={loading}
          className={loading ? 'animate-spin' : ''}
        >
          Yenile
        </Button>
        <Button
          variant="primary"
          size="md"
          icon={Plus}
          onClick={onCreateRequest}
          disabled={loading}
        >
          Yeni Talep
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="src/app/dashboard/requests/components/RequestsQuickStats.tsx">
import React from 'react';
import Card from '@/app/components/ui/Card';
import Skeleton from '@/app/components/ui/Skeleton';
import { RequestsQuickStatsProps } from '@/services/types/request-list.types';
import { TrendingUp, TrendingDown } from 'lucide-react';

export default function RequestsQuickStats({
  quickStats,
  loading = false
}: RequestsQuickStatsProps) {
  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        {[...Array(4)].map((_, index) => (
          <Card key={index} className="p-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <Skeleton className="h-5 w-5 rounded" />
                <Skeleton className="h-4 w-12" />
              </div>
              <div>
                <Skeleton className="h-8 w-16 mb-2" />
                <Skeleton className="h-4 w-20" />
              </div>
            </div>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      {quickStats.map((stat, index) => {
        const isPositiveTrend = stat.trend === 'up';
        const TrendIcon = isPositiveTrend ? TrendingUp : TrendingDown;

        return (
          <Card key={index} className="p-6 hover:shadow-lg transition-shadow">
            <div className="space-y-4">
              {/* Header with Icon and Trend */}
              <div className="flex items-center justify-between">
                <div
                  className="w-10 h-10 rounded-lg flex items-center justify-center text-lg"
                  style={{ backgroundColor: `${stat.color}20` }}
                >
                  <span>{stat.icon}</span>
                </div>
                <div className="flex items-center gap-1">
                  <TrendIcon
                    className={`h-4 w-4 ${isPositiveTrend
                        ? 'text-semantic-success-600'
                        : 'text-primary-red'
                      }`}
                  />
                  <span
                    className={`text-sm font-medium ${isPositiveTrend
                        ? 'text-semantic-success-600'
                        : 'text-primary-red'
                      }`}
                  >
                    {stat.change}
                  </span>
                </div>
              </div>

              {/* Value and Label */}
              <div>
                <div
                  className="text-3xl font-bold mb-1"
                  style={{ color: stat.color }}
                >
                  {stat.value}
                </div>
                <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                  {stat.label}
                </p>
              </div>
            </div>

            {/* Optional Progress Bar for Visual Enhancement */}
            <div className="mt-4">
              <div className="w-full bg-background-light-secondary dark:bg-background-secondary rounded-full h-1">
                <div
                  className="h-1 rounded-full transition-all duration-300"
                  style={{
                    backgroundColor: stat.color,
                    width: `${Math.min((stat.value / 100) * 100, 100)}%`
                  }}
                />
              </div>
            </div>
          </Card>
        );
      })}
    </div>
  );
}
</file>

<file path="src/app/dashboard/requests/components/RequestsSummaryStats.tsx">
import React from 'react';
import Card from '@/app/components/ui/Card';
import Skeleton from '@/app/components/ui/Skeleton';
import { RequestsSummaryStatsProps } from '@/services/types/request-list.types';
import { 
  Clock, 
  Calendar, 
  Star, 
  TrendingUp, 
  CheckCircle, 
  AlertCircle,
  Activity
} from 'lucide-react';

export default function RequestsSummaryStats({
  summary,
  loading = false
}: RequestsSummaryStatsProps) {
  if (loading) {
    return (
      <Card className="mb-6">
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[...Array(4)].map((_, index) => (
              <div key={index} className="space-y-3">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-8 w-16" />
                <Skeleton className="h-3 w-20" />
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }

  const stats = [
    {
      label: 'Ortalama Yanıt Süresi',
      value: summary.averageResponseTime,
      icon: Clock,
      color: 'text-semantic-info-600',
      bgColor: 'bg-semantic-info/10',
      description: 'İlk yanıt süresi'
    },
    {
      label: 'Ortalama Tamamlanma',
      value: summary.averageCompletionTime,
      icon: Calendar,
      color: 'text-semantic-warning-600',
      bgColor: 'bg-semantic-warning/10',
      description: 'Çözüm süresi'
    },
    {
      label: 'Memnuniyet Oranı',
      value: `${summary.satisfactionRate}/5.0`,
      icon: Star,
      color: 'text-primary-gold',
      bgColor: 'bg-primary-gold/10',
      description: 'Müşteri değerlendirmesi'
    },
    {
      label: 'Başarı Oranı',
      value: summary.totalRequests > 0 
        ? `%${Math.round(((summary.totalRequests - summary.overdueRequests) / summary.totalRequests) * 100)}`
        : '%0',
      icon: TrendingUp,
      color: 'text-semantic-success-600',
      bgColor: 'bg-semantic-success/10',
      description: 'Zamanında tamamlanan'
    }
  ];

  return (
    <Card className="mb-6">
      <div className="p-6">
        <div className="flex items-center gap-3 mb-6">
          <div className="w-8 h-8 bg-primary-gold/10 rounded-lg flex items-center justify-center">
            <Activity className="h-5 w-5 text-primary-gold" />
          </div>
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
            Performans Özeti
          </h3>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {stats.map((stat, index) => (
            <div key={index} className="space-y-3">
              <div className="flex items-center gap-3">
                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${stat.bgColor}`}>
                  <stat.icon className={`h-5 w-5 ${stat.color}`} />
                </div>
                <div className="flex-1">
                  <p className="text-sm text-text-light-muted dark:text-text-muted">
                    {stat.label}
                  </p>
                  <p className={`text-2xl font-bold ${stat.color}`}>
                    {stat.value}
                  </p>
                </div>
              </div>
              <p className="text-xs text-text-light-secondary dark:text-text-secondary">
                {stat.description}
              </p>
            </div>
          ))}
        </div>

        {/* Additional Summary Info */}
        <div className="mt-6 pt-6 border-t border-background-light-secondary dark:border-background-secondary">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex items-center gap-3 p-3 bg-semantic-success/5 rounded-lg">
              <CheckCircle className="h-5 w-5 text-semantic-success-600" />
              <div>
                <p className="text-sm font-medium text-semantic-success-700 dark:text-semantic-success-400">
                  Bugün Tamamlanan
                </p>
                <p className="text-lg font-bold text-semantic-success-600">
                  {summary.completedToday}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3 p-3 bg-semantic-info/5 rounded-lg">
              <Activity className="h-5 w-5 text-semantic-info-600" />
              <div>
                <p className="text-sm font-medium text-semantic-info-700 dark:text-semantic-info-400">
                  Aktif Talepler
                </p>
                <p className="text-lg font-bold text-semantic-info-600">
                  {summary.activeRequests}
                </p>
              </div>
            </div>

            {summary.overdueRequests > 0 && (
              <div className="flex items-center gap-3 p-3 bg-primary-red/5 rounded-lg">
                <AlertCircle className="h-5 w-5 text-primary-red" />
                <div>
                  <p className="text-sm font-medium text-red-700 dark:text-red-400">
                    Gecikmiş Talepler
                  </p>
                  <p className="text-lg font-bold text-primary-red">
                    {summary.overdueRequests}
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
}
</file>

<file path="src/app/dashboard/requests/hooks/useRequestDetail.ts">
import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { 
  ServiceRequestDetail, 
  UseRequestDetailResult,
  RequestDetailAction,
  STATUS_CONFIGS,
  PRIORITY_CONFIGS,
  CATEGORY_CONFIGS
} from '@/services/types/request-detail.types';
import { ticketService, Ticket } from '@/services/ticket.service';
import { useRequestsActions } from './useRequestsActions';

// Transform Ticket to ServiceRequestDetail
const transformTicketToRequestDetail = (ticket: Ticket): ServiceRequestDetail => {
  // Helper functions for getting config info
  const getStatusInfo = (status: string) => {
    const config = STATUS_CONFIGS[status] || STATUS_CONFIGS['OPEN'];
    return {
      id: status,
      label: config.label,
      color: getStatusColor(status),
      bgColor: getStatusBgColor(status)
    };
  };

  const getPriorityInfo = (priority: string) => {
    const config = PRIORITY_CONFIGS[priority] || PRIORITY_CONFIGS['MEDIUM'];
    return {
      id: priority,
      label: priority.charAt(0).toUpperCase() + priority.slice(1).toLowerCase(),
      level: config.level,
      color: getPriorityColor(priority),
      icon: getPriorityIcon(priority)
    };
  };

  const getCategoryInfo = (type: string) => {
    const config = CATEGORY_CONFIGS[type] || CATEGORY_CONFIGS['OTHER'];
    return {
      id: type,
      label: getCategoryLabel(type),
      icon: config.icon,
      color: getCategoryColor(type)
    };
  };

  return {
    id: ticket.id,
    requestId: ticket.ticketNumber,
    title: ticket.title,
    description: ticket.description,
    apartment: {
      number: ticket.property?.propertyNumber || 'N/A',
      block: ticket.property?.building || 'N/A',
      floor: ticket.property?.floor || 0,
      owner: `${ticket.creator?.firstName || ''} ${ticket.creator?.lastName || ''}`.trim() || 'N/A',
      tenant: ticket.property?.tenant || undefined,
      phone: ticket.creator?.phone || ticket.property?.phone || ''
    },
    category: getCategoryInfo(ticket.type),
    priority: getPriorityInfo(ticket.priority),
    status: getStatusInfo(ticket.status),
    assignee: ticket.assignee ? {
      id: ticket.assignee.id,
      name: `${ticket.assignee.firstName || ''} ${ticket.assignee.lastName || ''}`.trim(),
      company: ticket.assignee.company || 'N/A',
      phone: ticket.assignee.phone || '',
      avatar: getInitials(`${ticket.assignee.firstName || ''} ${ticket.assignee.lastName || ''}`),
      rating: 4.5
    } : undefined,
    createdDate: ticket.createdAt,
    updatedDate: ticket.updatedAt,
    dueDate: ticket.dueDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
    estimatedCompletion: undefined,
    completedDate: ticket.status === 'RESOLVED' || ticket.status === 'CLOSED' ? ticket.updatedAt : undefined,
    responseTime: undefined,
    completionTime: undefined,
    imagesCount: ticket.attachments?.length || 0,
    commentsCount: ticket.comments?.length || 0,
    cost: {
      estimated: 0,
      actual: undefined,
      currency: 'IQD'
    },
    customerRating: undefined,
    tags: [ticket.type, ticket.priority].filter(Boolean),
    isOverdue: ticket.dueDate ? new Date(ticket.dueDate) < new Date() : false,
    isUrgent: ticket.priority === 'HIGH' || ticket.priority === 'URGENT',
    hasImages: (ticket.attachments?.length || 0) > 0,
    hasComments: (ticket.comments?.length || 0) > 0
  };
};

// Helper functions
const getStatusColor = (status: string): string => {
  const colors: { [key: string]: string } = {
    'OPEN': '#3b82f6',
    'IN_PROGRESS': '#8b5cf6',
    'WAITING': '#f59e0b',
    'RESOLVED': '#10b981',
    'CLOSED': '#6b7280',
    'CANCELLED': '#ef4444'
  };
  return colors[status] || '#6b7280';
};

const getStatusBgColor = (status: string): string => {
  const colors: { [key: string]: string } = {
    'OPEN': '#dbeafe',
    'IN_PROGRESS': '#f3e8ff',
    'WAITING': '#fef3c7',
    'RESOLVED': '#d1fae5',
    'CLOSED': '#f3f4f6',
    'CANCELLED': '#fee2e2'
  };
  return colors[status] || '#f3f4f6';
};

const getPriorityColor = (priority: string): string => {
  const colors: { [key: string]: string } = {
    'LOW': '#16a34a',
    'MEDIUM': '#d97706',
    'HIGH': '#ea580c',
    'URGENT': '#dc2626'
  };
  return colors[priority] || '#d97706';
};

const getPriorityIcon = (priority: string): string => {
  const icons: { [key: string]: string } = {
    'LOW': '🟢',
    'MEDIUM': '🟡',
    'HIGH': '🔴',
    'URGENT': '🚨'
  };
  return icons[priority] || '🟡';
};

const getCategoryColor = (type: string): string => {
  const colors: { [key: string]: string } = {
    'FAULT_REPAIR': '#ef4444',
    'MAINTENANCE': '#f59e0b',
    'CLEANING': '#06b6d4',
    'SECURITY': '#dc2626',
    'COMPLAINT': '#f59e0b',
    'SUGGESTION': '#10b981',
    'OTHER': '#6b7280'
  };
  return colors[type] || '#6b7280';
};

const getCategoryLabel = (type: string): string => {
  const labels: { [key: string]: string } = {
    'FAULT_REPAIR': 'Arıza',
    'MAINTENANCE': 'Bakım',
    'CLEANING': 'Temizlik',
    'SECURITY': 'Güvenlik',
    'COMPLAINT': 'Şikayet',
    'SUGGESTION': 'Öneri',
    'OTHER': 'Diğer'
  };
  return labels[type] || type;
};

const getInitials = (name: string): string => {
  const parts = name.split(' ').filter(part => part.length > 0);
  return parts.map(part => part.charAt(0)).join('').toUpperCase().slice(0, 2) || 'NA';
};

export function useRequestDetail(requestId: string): UseRequestDetailResult {
  const router = useRouter();
  const [request, setRequest] = useState<ServiceRequestDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Use the existing actions hook
  const {
    handleEditRequest,
    handleDeleteRequest,
    handleUpdateRequestStatus
  } = useRequestsActions({
    refreshData: () => fetchRequest(),
    setSelectedRequests: () => {},
    setRequests: () => {}
  });

  // Fetch request data
  const fetchRequest = useCallback(async () => {
    if (!requestId) return;

    try {
      setLoading(true);
      setError(null);
      const ticket = await ticketService.getTicketById(requestId);
      const transformedRequest = transformTicketToRequestDetail(ticket);
      setRequest(transformedRequest);
    } catch (err) {
      console.error('Error fetching request:', err);
      setError('Talep verisi yüklenirken hata oluştu.');
    } finally {
      setLoading(false);
    }
  }, [requestId]);

  useEffect(() => {
    fetchRequest();
  }, [fetchRequest]);

  // Handle edit action
  const handleEdit = useCallback(() => {
    if (request) {
      // Navigate to edit page
      router.push(`/dashboard/requests/${request.id}/edit`);
    }
  }, [request, router]);

  // Handle delete action
  const handleDelete = useCallback(() => {
    if (request) {
      // Use the existing delete handler which will show confirmation
      const mockTicket = {
        id: request.id,
        title: request.title,
        ticketNumber: request.requestId
      } as Ticket;
      handleDeleteRequest(mockTicket);
    }
  }, [request, handleDeleteRequest]);

  // Handle status change
  const handleStatusChange = useCallback(async (action: RequestDetailAction) => {
    if (!request) return;

    try {
      const mockTicket = {
        id: request.id,
        title: request.title,
        ticketNumber: request.requestId,
        status: request.status.id
      } as Ticket;

      await handleUpdateRequestStatus(mockTicket, action);
      // Refresh the request data after status change
      await fetchRequest();
    } catch (err) {
      console.error('Error updating request status:', err);
      throw err;
    }
  }, [request, handleUpdateRequestStatus, fetchRequest]);

  // Refetch data
  const refetch = useCallback(async () => {
    await fetchRequest();
  }, [fetchRequest]);

  return {
    request,
    loading,
    error,
    handleEdit,
    handleDelete,
    handleStatusChange,
    refetch
  };
}
</file>

<file path="src/app/dashboard/requests/RequestDetailModal.tsx">
import React from 'react';
import Modal from '@/app/components/ui/Modal';
import Badge from '@/app/components/ui/Badge';
import Button from '@/app/components/ui/Button';
import { AlertCircle, RotateCcw, CheckCircle, Calendar, User, Wrench, Flag, Paperclip, MessageCircle, PauseCircle, Image, File, Download, Eye } from 'lucide-react';
import type { Ticket } from '@/services/ticket.service';
import { ticketService } from '@/services/ticket.service';
import { useState } from 'react';
import { handleModalAction } from '@/lib/handleModalAction';

const statusConfig = {
  OPEN: { label: 'Açık', color: 'info', icon: AlertCircle },
  IN_PROGRESS: { label: 'İşlemde', color: 'success', icon: RotateCcw },
  WAITING: { label: 'Beklemede', color: 'warning', icon: PauseCircle },
  COMPLETED: { label: 'Tamamlandı', color: 'success', icon: CheckCircle },
  SCHEDULED: { label: 'Planlandı', color: 'primary', icon: Calendar },
};

const priorityConfig: Record<string, { label: string; color: string }> = {
  LOW: { label: 'Düşük', color: 'secondary' },
  MEDIUM: { label: 'Orta', color: 'warning' },
  HIGH: { label: 'Yüksek', color: 'red' },
};

interface RequestDetailModalProps {
  open: boolean;
  onClose: () => void;
  item: Ticket | null;
  onActionComplete?: () => void;
  toast?: {
    success: (title: string, message?: string) => void;
    error: (title: string, message?: string) => void;
    warning: (title: string, message?: string) => void;
    info: (title: string, message?: string) => void;
  };
}

const RequestDetailModal: React.FC<RequestDetailModalProps> = ({ open, onClose, item, onActionComplete, toast }) => {
  const [loadingAction, setLoadingAction] = useState<string | null>(null);
  const [currentItem, setCurrentItem] = useState<Ticket | null>(item);
  const [comments, setComments] = useState<any[]>([]);
  const [commentsLoading, setCommentsLoading] = useState(false);
  const [newComment, setNewComment] = useState('');
  const [postingComment, setPostingComment] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  // Fetch comments when modal opens or item changes
  React.useEffect(() => {
    setCurrentItem(item);
    if (item && item.id) {
      setCommentsLoading(true);
      ticketService.getComments(item.id)
        .then(setComments)
        .finally(() => setCommentsLoading(false));
    } else {
      setComments([]);
    }
  }, [item]);

  if (!currentItem) return null;
  const statusInfo = statusConfig[currentItem.status as keyof typeof statusConfig] || statusConfig.OPEN;
  const StatusIcon = statusInfo.icon;
  const priorityInfo = priorityConfig[currentItem.priority?.toUpperCase?.() || ''] || { label: currentItem.priority, color: 'secondary' };

  // Action handlers
  const handleStatusChange = async (action: string, label: string) => {
    if (!currentItem) return;
    setLoadingAction(action);
    const actionMap: Record<string, () => Promise<Ticket | null>> = {
      'start-progress': () => ticketService.startProgress(currentItem.id),
      'mark-waiting': () => ticketService.markWaiting(currentItem.id),
      'resolve': () => ticketService.resolve(currentItem.id),
      'close': () => ticketService.close(currentItem.id),
      'cancel': () => ticketService.cancel(currentItem.id),
    };
    const apiAction = actionMap[action];
    if (!apiAction) return;
    await handleModalAction({
      action: apiAction,
      onClose,
      onActionComplete,
      toast: toast!,
      label,
      setLoading: (loading) => setLoadingAction(loading ? action : null),
    });
  };

  // Button visibility logic
  const status = currentItem.status;
  const actionButtons = [
    status === 'OPEN' && {
      label: 'İşleme Al',
      action: 'start-progress',
      toastLabel: 'Talep',
      variant: 'primary',
    },
    status === 'IN_PROGRESS' && {
      label: 'Beklemeye Al',
      action: 'mark-waiting',
      toastLabel: 'Talep',
      variant: 'secondary',
    },
    (status === 'IN_PROGRESS' || status === 'OPEN') && {
      label: 'Tamamlandı',
      action: 'resolve',
      toastLabel: 'Onay',
      variant: 'success',
    },
    (status === 'IN_PROGRESS' || status === 'OPEN') && {
      label: 'Kapat',
      action: 'close',
      toastLabel: 'Talep',
      variant: 'warning',
    },
    (status !== 'COMPLETED' && status !== 'CLOSED' && status !== 'CANCELLED') && {
      label: 'İptal Et',
      action: 'cancel',
      toastLabel: 'Reddet',
      variant: 'danger',
    },
  ].filter(Boolean);

  // Add comment handler
  const handleAddComment = async () => {
    if (!newComment.trim() || !currentItem) return;
    setPostingComment(true);
    try {
      await ticketService.addComment(currentItem.id, newComment.trim());
      setNewComment('');
      // Refresh comments
      setCommentsLoading(true);
      const updated = await ticketService.getComments(currentItem.id);
      setComments(updated);
      setCommentsLoading(false);
    } catch (e) {
      // TODO: Show error toast
      setCommentsLoading(false);
    } finally {
      setPostingComment(false);
    }
  };

  return (
    <Modal isOpen={open} onClose={onClose} title="Talep Detayı" size="lg" variant="glass" scrollable>
      <div className="flex flex-col h-[70vh]">
        {/* Scrollable Content (Info + Comments) */}
        <div className="flex-1 overflow-y-auto pr-1 space-y-8">
          {/* Header */}
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 border-b border-gray-200 dark:border-gray-700 pb-4">
            <div className="flex items-center gap-3">
              <StatusIcon className={`h-6 w-6 text-semantic-${statusInfo.color}-500`} />
              <Badge variant="soft" color={statusInfo.color as any}>{statusInfo.label}</Badge>
              <span className="text-xs text-text-light-secondary dark:text-text-secondary ml-2">Talep No: <span className="font-semibold">{currentItem.ticketNumber}</span></span>
            </div>
            <div className="flex items-center gap-2">
              <Flag className="h-4 w-4 text-primary-gold" />
              <Badge variant="soft" color={priorityInfo.color as any}>{priorityInfo.label}</Badge>
              {currentItem.dueDate && (
                <>
                  <Calendar className="h-4 w-4 text-primary-gold ml-4" />
                  <span className="text-xs text-text-light-secondary dark:text-text-secondary">Son Tarih: <span className="font-semibold">{new Date(currentItem.dueDate).toLocaleDateString('tr-TR')}</span></span>
                </>
              )}
            </div>
          </div>

          {/* Title & Description */}
          <div>
            <h3 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark mb-2 leading-tight">{currentItem.title}</h3>
            <p className="text-base text-text-light-secondary dark:text-text-secondary mb-2 leading-relaxed whitespace-pre-line">{currentItem.description || 'Açıklama yok.'}</p>
          </div>

          {/* Info Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <div className="font-medium text-text-on-light dark:text-text-on-dark mb-1">Talep Tipi</div>
              <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                <Wrench className="h-4 w-4" />
                <span>{currentItem.type || 'Tip Yok'}</span>
              </div>
            </div>
            <div>
              <div className="font-medium text-text-on-light dark:text-text-on-dark mb-1">Sakin</div>
              <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                <User className="h-4 w-4" />
                <span>{currentItem.creator?.firstName || ''} {currentItem.creator?.lastName || ''}</span>
              </div>
              <div className="text-xs text-text-soft">
                {currentItem.creator?.property?.ownershipType || '--'}
              </div>
            </div>
            <div>
              <div className="font-medium text-text-on-light dark:text-text-on-dark mb-1">Daire</div>
              <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                {currentItem.property?.name || currentItem.property?.propertyNumber || '--'}
              </div>
            </div>
            <div>
              <div className="font-medium text-text-on-light dark:text-text-on-dark mb-1">Oluşturulma</div>
              <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                {currentItem.createdAt ? new Date(currentItem.createdAt).toLocaleString('tr-TR') : '--'}
              </div>
            </div>
          </div>

          {/* Attachments */}
          {currentItem.attachments && currentItem.attachments.length > 0 && (
            <div className="mt-4">
              <div className="flex items-center gap-2 mb-2">
                <Paperclip className="h-5 w-5 text-primary-gold" />
                <span className="font-semibold text-text-on-light dark:text-text-on-dark">Ekler</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {currentItem.attachments.map((att: any) => {
                  const isImage = att.fileType?.startsWith('image/') || att.fileName?.match(/\.(jpg|jpeg|png|gif|webp)$/i);
                  const fileUrl = att.fileUrl || att.url;
                  
                  return (
                    <div key={att.id} className="bg-background-light-soft dark:bg-background-soft rounded-lg border border-primary-gold/10 overflow-hidden">
                      {isImage ? (
                        <div className="relative group">
                          <img 
                            src={fileUrl} 
                            alt={att.fileName || 'Resim'} 
                            className="w-full h-48 object-cover cursor-pointer transition-transform hover:scale-105"
                            onClick={() => setSelectedImage(fileUrl)}
                          />
                          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all flex items-center justify-center">
                            <Eye className="h-6 w-6 text-white opacity-0 group-hover:opacity-100 transition-opacity" />
                          </div>
                        </div>
                      ) : (
                        <div className="p-4 flex items-center justify-center h-32 bg-gray-50 dark:bg-gray-800">
                          <File className="h-12 w-12 text-gray-400" />
                        </div>
                      )}
                      <div className="p-3">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-2">
                            {isImage ? <Image className="h-4 w-4 text-primary-gold" /> : <File className="h-4 w-4 text-gray-500" />}
                            <span className="text-sm font-medium text-text-on-light dark:text-text-on-dark truncate">
                              {att.fileName || att.name || 'Dosya'}
                            </span>
                          </div>
                          <a 
                            href={fileUrl} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
                          >
                            <Download className="h-4 w-4 text-primary-gold" />
                          </a>
                        </div>
                        {att.fileSize && (
                          <div className="text-xs text-text-light-secondary dark:text-text-secondary">
                            {(att.fileSize / 1024 / 1024).toFixed(2)} MB
                          </div>
                        )}
                        {att.uploadedAt && (
                          <div className="text-xs text-text-light-secondary dark:text-text-secondary">
                            {new Date(att.uploadedAt).toLocaleString('tr-TR')}
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* Comments */}
          <div className="mt-4">
            <div className="flex items-center gap-2 mb-2">
              <MessageCircle className="h-5 w-5 text-primary-gold" />
              <span className="font-semibold text-text-on-light dark:text-text-on-dark">Yorumlar</span>
            </div>
            {commentsLoading ? (
              <div className="text-sm text-text-light-secondary">Yorumlar yükleniyor...</div>
            ) : comments.length === 0 ? (
              <div className="text-sm text-text-light-secondary">Henüz yorum yok.</div>
            ) : (
              <div className="max-h-64 overflow-y-auto pr-1">
                <ul className="space-y-4">
                  {comments.map((comment: any) => (
                    <li key={comment.id} className="p-3 rounded-xl bg-background-light-soft dark:bg-background-soft border border-primary-gold/10">
                      <div className="flex items-center gap-2 mb-1">
                        <User className="h-4 w-4 text-primary-gold" />
                        <span className="font-medium text-text-on-light dark:text-text-on-dark">{comment.author?.name || comment.authorName || 'Kullanıcı'}</span>
                        <span className="text-xs text-text-light-secondary ml-2">{comment.createdAt ? new Date(comment.createdAt).toLocaleString('tr-TR') : ''}</span>
                      </div>
                      <div className="text-sm text-text-light-secondary dark:text-text-secondary whitespace-pre-line">{comment.text || comment.content}</div>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>


        </div>
        {/* Add comment input - always visible above footer */}
        <div className="flex items-center gap-2 mt-4 px-2 mb-4">
          <input
            type="text"
            className="flex-1 rounded-lg border border-gray-200 dark:border-gray-700 bg-background-light-soft dark:bg-background-soft px-3 py-2 text-sm text-on-dark placeholder:text-text-soft focus:outline-none focus:ring-2 focus:ring-primary-gold/30"
            placeholder="Yorum ekle..."
            value={newComment}
            onChange={e => setNewComment(e.target.value)}
            disabled={postingComment}
            onKeyDown={e => { if (e.key === 'Enter') handleAddComment(); }}
          />
          <Button
            variant="primary"
            size="sm"
            onClick={handleAddComment}
            isLoading={postingComment}
            disabled={postingComment || !newComment.trim()}
          >
            Gönder
          </Button>
        </div>
        {/* Modal Actions (Footer) */}
        <div className="flex flex-wrap justify-end gap-2 pt-4 border-t border-gray-200 dark:border-gray-700 bg-background-light-card dark:bg-background-card">
          {actionButtons.map((btn: any) => (
            <Button
              key={btn.action}
              variant={btn.variant}
              onClick={() => handleStatusChange(btn.action, btn.toastLabel)}
              isLoading={loadingAction === btn.action}
              disabled={!!loadingAction}
            >
              {btn.label}
            </Button>
          ))}

        </div>
      </div>
      
      {/* Image Preview Modal */}
      {selectedImage && (
        <div className="fixed inset-0 z-[9999] bg-black bg-opacity-90 flex items-center justify-center p-4">
          <div className="relative max-w-4xl max-h-full">
            <button
              onClick={() => setSelectedImage(null)}
              className="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors"
            >
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <img 
              src={selectedImage} 
              alt="Büyütülmüş resim" 
              className="max-w-full max-h-full object-contain rounded-lg"
            />
          </div>
        </div>
      )}
    </Modal>
  );
};

export default RequestDetailModal;
</file>

<file path="src/app/dashboard/residents/components/table-columns.tsx">
import React from 'react';
import { Resident } from '@/app/components/ui/ResidentRow';
import { TableColumn } from '../types';
import { TABLE_COLUMN_IDS } from '../constants';
import { maskNationalId } from '../utils/transformations';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import { 
    Phone, 
    ChevronRight, 
    Eye, 
    Edit, 
    Trash2, 
    MessageSquare, 
    QrCode, 
    StickyNote, 
    History, 
    CreditCard as PaymentHistory 
} from 'lucide-react';

/**
 * Action menu component for table rows
 */
interface ActionMenuProps {
    resident: Resident;
    onViewResident: (resident: Resident) => void;
}

const ActionMenu: React.FC<ActionMenuProps> = ({
    resident,
    onViewResident,
}) => {
    const handleDetailView = (e: React.MouseEvent) => {
        e.stopPropagation();
        onViewResident(resident);
    };

    return (
        <div className="flex items-center justify-center">
            <Button
                variant="ghost"
                size="sm"
                icon={ChevronRight}
                className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700"
                onClick={handleDetailView}
            />
        </div>
    );
};

/**
 * Get table columns configuration
 */
export const getTableColumns = (
  actionHandlers: {
    handleViewResident: (resident: Resident) => void;
  },
  ActionMenuComponent?: React.ComponentType<{ row: Resident }>
): TableColumn[] => {
  const columns: TableColumn[] = [
        {
            id: TABLE_COLUMN_IDS.PHOTO,
            header: 'Fotoğraf',
            accessor: 'avatar',
            width: '80px',
            render: (value: string, row: Resident) => (
                <div className="w-10 h-10 bg-primary-gold rounded-full flex items-center justify-center text-white font-medium overflow-hidden">
                    {value ? (
                        <img src={value} alt={row.fullName} className="w-full h-full object-cover" />
                    ) : (
                        <span>{row.firstName?.charAt(0)}{row.lastName?.charAt(0)}</span>
                    )}
                </div>
            ),
        },
        {
            id: TABLE_COLUMN_IDS.NAME,
            header: 'Ad Soyad',
            accessor: 'fullName',
            sortable: true,
            render: (value: string, row: Resident) => (
                <div>
                    <p className="font-medium text-text-on-light dark:text-text-on-dark">{value}</p>
                    <p className="text-sm text-text-light-muted dark:text-text-muted">
                        Kimlik: {maskNationalId(row.nationalId)}
                    </p>
                </div>
            ),
        },
        {
            id: TABLE_COLUMN_IDS.LOCATION,
            header: 'Konut',
            accessor: 'address',
            render: (value: { building: string; apartment: string } | any) => {
                // Handle case where value might not be structured correctly
                if (!value || typeof value !== 'object') {
                    return <span className="text-gray-500">-</span>;
                }
                const building = value.building || 'Belirtilmemiş';
                const apartment = value.apartment || 'Belirtilmemiş';
                return (
                    <div>
                        <p className="font-medium text-text-on-light dark:text-text-on-dark">
                            {building} Blok - {apartment} Daire
                        </p>
                    </div>
                );
            },
        },
        {
            id: TABLE_COLUMN_IDS.TYPE,
            header: 'Mülkiyet Türü',
            accessor: 'residentType',
            render: (value: { type: 'owner' | 'tenant'; label: string } | any) => {
                // Handle case where value might not be structured correctly
                if (!value || typeof value !== 'object') {
                    return <span className="text-gray-500">-</span>;
                }
                const label = value.label || value.toString();
                const type = value.type || 'unknown';
                return (
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        type === 'owner' 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-blue-100 text-blue-800'
                    }`}>
                        {label}
                    </span>
                );
            },
        },
        {
            id: TABLE_COLUMN_IDS.CONTACT,
            header: 'İletişim',
            accessor: 'contact',
            render: (value: { phone: string; email?: string; formattedPhone?: string } | any, row: Resident) => {
                // Handle case where value might not be structured correctly
                if (!value || typeof value !== 'object') {
                    return <span className="text-gray-500">-</span>;
                }
                const phone = value.formattedPhone || value.phone || 'Belirtilmemiş';
                const email = value.email;
                return (
                    <div className="flex items-center gap-2">
                        <div>
                            <span className="text-sm text-text-on-light dark:text-text-on-dark">
                                {phone}
                            </span>
                            {email && email !== 'Belirtilmemiş' && (
                                <p className="text-xs text-text-light-muted dark:text-text-muted">
                                    {email}
                                </p>
                            )}
                        </div>
                        {/* <Button 
                            variant="ghost" 
                            size="sm" 
                            icon={Phone} 
                            className="h-8 w-8 p-1" 
                            onClick={() => actionHandlers.handleCallResident(row)}
                        /> */}
                    </div>
                );
            },
        },
        {
            id: TABLE_COLUMN_IDS.MEMBERSHIP,
            header: 'Üyelik Türü',
            accessor: 'membershipTier',
            render: (value: string | any) => {
                // Handle case where value might not be a string
                const membershipTier = typeof value === 'string' ? value : 'Standart';
                if (membershipTier === 'Altın') {
                    return (
                        <Badge
                            variant="soft"
                            color="gold"
                            className="min-w-[88px] text-center justify-center"
                        >
                            {membershipTier}
                        </Badge>
                    );
                } else if (membershipTier === 'Gümüş') {
                    return (
                        <Badge
                            variant="soft"
                            color="secondary"
                            className="min-w-[88px] text-center justify-center"
                        >
                            {membershipTier}
                        </Badge>
                    );
                } else {
                    return (
                        <Badge className="min-w-[88px] text-center justify-center">
                            {membershipTier}
                        </Badge>
                    );
                }
            },
        },
        {
            id: TABLE_COLUMN_IDS.VERIFICATION,
            header: 'Doğrulama',
            accessor: 'verificationStatus',
            render: (value: any) => {
                if (!value || typeof value !== 'object') {
                    return <span className="text-gray-500">-</span>;
                }
                return (
                    <div className="flex items-center gap-2">
                        <div className={`w-2 h-2 rounded-full ${
                            value.color === 'green' ? 'bg-green-500' :
                            value.color === 'red' ? 'bg-red-500' :
                            value.color === 'yellow' ? 'bg-yellow-500' :
                            'bg-gray-500'
                        }`} />
                        <span className="text-sm text-text-on-light dark:text-text-on-dark">
                            {value.label}
                        </span>
                    </div>
                );
            },
        },
        {
            id: TABLE_COLUMN_IDS.STATUS,
            header: 'Durum',
            accessor: 'status',
            render: (value: any) => {
                // Handle case where value might not be structured correctly
                if (!value || typeof value !== 'object') {
                    return <span className="text-gray-500">-</span>;
                }
                const label = value.label || 'Bilinmiyor';
                const color = value.color || 'gray';
                return (
                    <div className="flex items-center gap-2">
                        <div className={`w-2 h-2 rounded-full ${
                            color === 'green' ? 'bg-green-500' :
                            color === 'red' ? 'bg-red-500' :
                                color === 'yellow' ? 'bg-yellow-500' :
                                    'bg-gray-500'
                        }`} />
                        <span className="text-sm text-text-on-light dark:text-text-on-dark">
                            {label}
                        </span>
                    </div>
                );
            },
        },
    ];
  // Eğer ActionMenuComponent varsa, aksiyon sütunu ekleme gerekmiyor, çünkü DataTable bunu kendisi ekleyecek.
  // Eğer yoksa, eski aksiyon sütununu ekle.
  if (!ActionMenuComponent) {
    columns.push({
      id: 'actions',
      header: '',
      accessor: '',
      width: '60px',
      render: (_: any, row: Resident) => (
        <ActionMenu
          resident={row}
          onViewResident={actionHandlers.handleViewResident}
        />
      ),
    });
  }
  return columns;
};
</file>

<file path="src/app/dashboard/residents/constants/index.ts">
import { 
    Grid, 
    Layers, 
    Mail, 
    MessageSquare, 
    FileText, 
    Tag, 
    Trash2, 
    UserCheck, 
    UserX, 
    Users, 
    Home, 
    CreditCard, 
    List
} from 'lucide-react';
import { StatusConfig, MembershipConfig, ViewOption } from '../types';

// Status Configuration
export const STATUS_CONFIG: Record<string, StatusConfig> = {
    'ACTIVE': { label: 'Aktif', color: 'green' },
    'INACTIVE': { label: 'Pasif', color: 'gray' },
    'PENDING': { label: 'Beklemede', color: 'yellow' },
    'BANNED': { label: 'Yasaklı', color: 'red' },
    'SUSPENDED': { label: 'Askıya Alınmış', color: 'red' },
    'default': { label: 'Bilinmeyen', color: 'gray' }
};

// Membership Configuration
export const MEMBERSHIP_CONFIG: Record<string, MembershipConfig> = {
    'GOLD': { label: 'Altın', color: 'gold' },
    'SILVER': { label: 'Gümüş', color: 'gray' },
    'STANDARD': { label: 'Standart', color: 'blue' },
    'default': { label: 'Standart', color: 'blue' }
};

// Verification Configuration
export const VERIFICATION_CONFIG: Record<string, StatusConfig> = {
    'APPROVED': { label: 'Onaylandı', color: 'green' },
    'REJECTED': { label: 'Reddedildi', color: 'red' },
    'PENDING': { label: 'İnceleniyor', color: 'yellow' },
    'UNDER_REVIEW': { label: 'İnceleniyor', color: 'yellow' },
    'default': { label: 'İnceleniyor', color: 'yellow' }
};

// View Options
export const VIEW_OPTIONS: ViewOption[] = [
    { id: 'grid', label: 'Kart Görünümü', icon: Grid },
    { id: 'table', label: 'Tablo Görünümü', icon: List },
];

// Breadcrumb Items
export const BREADCRUMB_ITEMS = [
    { label: 'Ana Sayfa', href: '/dashboard' },
    { label: 'Sakinler', href: '/dashboard/residents' },
    { label: 'Sakin Listesi', active: true }
];

// Stats Configuration
export const STATS_CONFIG = {
    colors: {
        PRIMARY: 'primary' as const,
        SUCCESS: 'success' as const,
        INFO: 'info' as const,
        DANGER: 'danger' as const,
        GOLD: 'gold' as const,
        WARNING: 'warning' as const,
    },
    icons: {
        USERS: Users,
        HOME: Home,
        CREDIT_CARD: CreditCard,
    }
};

// Bulk Action IDs
export const BULK_ACTION_IDS = {
    MAIL: 'mail',
    SMS: 'sms',
    PDF: 'pdf',
    TAG: 'tag',
    ACTIVATE: 'activate',
    DEACTIVATE: 'deactivate',
    DELETE: 'delete',
} as const;

// Table Column IDs
export const TABLE_COLUMN_IDS = {
    PHOTO: 'photo',
    NAME: 'firstName',
    LOCATION: 'location',
    TYPE: 'type',
    CONTACT: 'contact',
    MEMBERSHIP: 'membership',
    VERIFICATION: 'verification',
    STATUS: 'status',
    ACTIONS: 'actions',
} as const;

// Filter Group Names
export const FILTER_GROUPS = {
    RESIDENT_STATUS: 'residentStatus',
    RESIDENT_TYPE: 'residentType',
    BUILDING: 'building',
    DEBT_RANGE: 'debtRange',
    REGISTRATION_DATE: 'registrationDate',
} as const;

// Export Formats
export const EXPORT_FORMATS = {
    PDF: 'pdf',
    EXCEL: 'excel',
    CSV: 'csv',
    JSON: 'json',
} as const;

// Default Values
export const DEFAULT_VALUES = {
    RECORDS_PER_PAGE: 25,
    CURRENT_PAGE: 1,
    SELECTED_VIEW: 'table',
    SEARCH_DEBOUNCE_MS: 500,
    NATIONAL_ID_MASK_LENGTH: 3,
} as const;

// API Configuration
export const API_CONFIG = {
    DEFAULT_ORDER_COLUMN: 'firstName',
    DEFAULT_ORDER_DIRECTION: 'ASC' as const,
    SORT_FIELD_MAPPING: {
        fullName: 'firstName',
        debt: 'createdAt',
        default: 'firstName'
    }
} as const;
</file>

<file path="src/app/dashboard/residents/utils/stats.ts">
import { Resident } from '@/app/components/ui/ResidentRow';
import { ResidentStatsResponse } from '@/services/types/resident.types';
import { StatsData } from '../types';
import { STATS_CONFIG } from '../constants';

/**
 * Calculate stats from residents data
 * @param residents - Array of residents
 * @param totalRecords - Total number of records
 * @returns Stats response object
 */
export const calculateStatsFromResidents = (residents: Resident[], totalRecords: number): ResidentStatsResponse => {
    const activeResidents = residents.filter(r => r.status.type === 'active').length;
    const pendingResidents = residents.filter(r => r.status.type === 'pending').length;
    const owners = residents.filter(r => r.residentType.type === 'owner').length;
    const tenants = residents.filter(r => r.residentType.type === 'tenant').length;
    const goldMembers = residents.filter(r => r.isGoldMember).length;
    const standardMembers = residents.filter(r => !r.isGoldMember).length;
    const inactiveResidents = residents.filter(r => r.status.type === 'inactive').length;

    return {
        totalResidents: totalRecords,
        activeResidents,
        pendingApproval: pendingResidents,
        newRegistrationsThisMonth: 0, // This would come from API
        approvedThisMonth: 0, // This would come from API
        rejectedThisMonth: 0, // This would come from API
        byMembershipTier: {
            gold: goldMembers,
            silver: 0, // Not currently tracked
            standard: standardMembers
        },
        byOwnershipType: {
            owner: owners,
            tenant: tenants
        },
        byStatus: {
            active: activeResidents,
            inactive: inactiveResidents,
            pending: pendingResidents,
            suspended: 0, // Not currently tracked
            banned: 0 // Not currently tracked
        }
    };
};

/**
 * Generate stats cards data from stats response
 * @param stats - Stats response object
 * @returns Array of stats card data
 */
export const generateStatsCardsData = (stats: ResidentStatsResponse | null): StatsData[] => {
    if (!stats) {
        return [
            { 
                title: 'Toplam Sakin', 
                value: '0', 
                color: STATS_CONFIG.colors.PRIMARY, 
                icon: STATS_CONFIG.icons.USERS 
            },
            { 
                title: 'Malik', 
                value: '0', 
                subtitle: '%0', 
                color: STATS_CONFIG.colors.SUCCESS, 
                icon: STATS_CONFIG.icons.HOME 
            },
            { 
                title: 'Kiracı', 
                value: '0', 
                subtitle: '%0', 
                color: STATS_CONFIG.colors.INFO, 
                icon: STATS_CONFIG.icons.USERS 
            },
            { 
                title: 'Aktif', 
                value: '0', 
                subtitle: '%0', 
                color: STATS_CONFIG.colors.DANGER, 
                icon: STATS_CONFIG.icons.CREDIT_CARD 
            },
            { 
                title: 'Gold Üye', 
                value: '0', 
                subtitle: '%0', 
                color: STATS_CONFIG.colors.GOLD, 
                icon: STATS_CONFIG.icons.USERS 
            },
        ];
    }

    const totalResidents = stats.totalResidents || 0;
    const owners = stats.byOwnershipType?.owner || 0;
    const tenants = stats.byOwnershipType?.tenant || 0;
    const active = stats.byStatus?.active || 0;
    const gold = stats.byMembershipTier?.gold || 0;

    return [
        {
            title: 'Toplam Sakin',
            value: totalResidents.toLocaleString('tr-TR'),
            color: STATS_CONFIG.colors.PRIMARY,
            icon: STATS_CONFIG.icons.USERS
        },
        {
            title: 'Malik',
            value: owners.toLocaleString('tr-TR'),
            subtitle: totalResidents > 0 ? `%${Math.round((owners / totalResidents) * 100)}` : '%0',
            color: STATS_CONFIG.colors.SUCCESS,
            icon: STATS_CONFIG.icons.HOME
        },
        {
            title: 'Kiracı',
            value: tenants.toLocaleString('tr-TR'),
            subtitle: totalResidents > 0 ? `%${Math.round((tenants / totalResidents) * 100)}` : '%0',
            color: STATS_CONFIG.colors.INFO,
            icon: STATS_CONFIG.icons.USERS
        },
        {
            title: 'Onay Bekleyen',
            value: active.toLocaleString('tr-TR'),
            subtitle: totalResidents > 0 ? `%${Math.round((active / totalResidents) * 100)}` : '%0',
            color: STATS_CONFIG.colors.INFO,
            icon: STATS_CONFIG.icons.USERS
        },
        {
            title: 'Gold Üye',
            value: gold.toLocaleString('tr-TR'),
            subtitle: totalResidents > 0 ? `%${Math.round((gold / totalResidents) * 100)}` : '%0',
            color: STATS_CONFIG.colors.GOLD,
            icon: STATS_CONFIG.icons.USERS
        },
    ];
};

export const generateStatsCardsDataFromCounts = ({
  goldCount,
  totalCount,
  activeCount,
  tenantsCount,
  ownersCount,
  loading,
  error,
}: {
  goldCount: number;
  totalCount: number;
  activeCount: number;
  tenantsCount: number;
  ownersCount: number;
  loading: boolean;
  error: string | null;
}): StatsData[] => {
  if (loading || error) {
    return [
      { title: 'Toplam Sakin', value: '---', color: STATS_CONFIG.colors.PRIMARY, icon: STATS_CONFIG.icons.USERS },
      { title: 'Malik', value: '---', subtitle: '%0', color: STATS_CONFIG.colors.SUCCESS, icon: STATS_CONFIG.icons.HOME },
      { title: 'Kiracı', value: '---', subtitle: '%0', color: STATS_CONFIG.colors.INFO, icon: STATS_CONFIG.icons.USERS },
      { title: 'Onay Bekleyen', value: '---', color: STATS_CONFIG.colors.INFO, icon: STATS_CONFIG.icons.USERS },
      { title: 'Gold Üye', value: '---', subtitle: '%0', color: STATS_CONFIG.colors.GOLD, icon: STATS_CONFIG.icons.USERS },
    ];
  }
  return [
    {
      title: 'Toplam Sakin',
      value: totalCount.toLocaleString('tr-TR'),
      color: STATS_CONFIG.colors.PRIMARY,
      icon: STATS_CONFIG.icons.USERS,
    },
    {
      title: 'Malik',
      value: ownersCount.toLocaleString('tr-TR'),
      subtitle: totalCount > 0 ? `%${Math.round((ownersCount / totalCount) * 100)}` : '%0',
      color: STATS_CONFIG.colors.SUCCESS,
      icon: STATS_CONFIG.icons.HOME,
    },
    {
      title: 'Kiracı',
      value: tenantsCount.toLocaleString('tr-TR'),
      subtitle: totalCount > 0 ? `%${Math.round((tenantsCount / totalCount) * 100)}` : '%0',
      color: STATS_CONFIG.colors.INFO,
      icon: STATS_CONFIG.icons.USERS,
    },
    {
      title: 'Onay Bekleyen',
      value: activeCount.toLocaleString('tr-TR'),
      subtitle: totalCount > 0 ? `%${Math.round((activeCount / totalCount) * 100)}` : '%0',
      color: STATS_CONFIG.colors.WARNING,
      icon: STATS_CONFIG.icons.USERS,
    },
    {
      title: 'Gold Üye',
      value: goldCount.toLocaleString('tr-TR'),
      subtitle: totalCount > 0 ? `%${Math.round((goldCount / totalCount) * 100)}` : '%0',
      color: STATS_CONFIG.colors.GOLD,
      icon: STATS_CONFIG.icons.USERS,
    },
  ];
};

/**
 * Calculate percentage
 * @param value - Numerator
 * @param total - Denominator
 * @returns Percentage string
 */
export const calculatePercentage = (value: number, total: number): string => {
    if (total === 0) return '%0';
    return `%${Math.round((value / total) * 100)}`;
};

/**
 * Format number with Turkish locale
 * @param value - Number to format
 * @returns Formatted number string
 */
export const formatNumber = (value: number): string => {
    return value.toLocaleString('tr-TR');
};
</file>

<file path="src/app/dashboard/units/[id]/components/FinancialSummarySection.tsx">
import React from 'react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import Button from '@/app/components/ui/Button';
import { FinancialSummary } from '@/services/types/unit-detail.types';
import { 
  DollarSign, 
  TrendingUp, 
  TrendingDown, 
  Calendar, 
  Clock,
  AlertTriangle,
  CheckCircle,
  CreditCard,
  History
} from 'lucide-react';

interface FinancialSummaryProps {
  financialSummary: FinancialSummary;
  loading?: boolean;
  onViewDetails?: () => void;
  onAddPayment?: () => void;
}

export default function FinancialSummarySection({ 
  financialSummary, 
  loading = false,
  onViewDetails,
  onAddPayment
}: FinancialSummaryProps) {
  const formatCurrency = (amount: number, currency: string = 'IQD') => {
    const isNegative = amount < 0;
    const absAmount = Math.abs(amount);
    return (isNegative ? '-' : '') + new Intl.NumberFormat('tr-TR').format(absAmount) + ' ' + currency;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getBalanceStatus = (balance: number, status?: string) => {
    if (status === 'debt' || balance < 0) {
      return { color: 'red' as const, icon: AlertTriangle, label: 'Borç' };
    } else if (balance > 0) {
      return { color: 'primary' as const, icon: CheckCircle, label: 'Kredi' };
    } else {
      return { color: 'secondary' as const, icon: CheckCircle, label: 'Sıfır' };
    }
  };

  const currentBalance = financialSummary.data.currentBalance;
  const balanceStatus = getBalanceStatus(currentBalance.value, currentBalance.status);

  const getDueStatus = () => {
    if (!financialSummary.data.nextDueDate?.value) return null;
    
    const dueDate = new Date(financialSummary.data.nextDueDate.value);
    const today = new Date();
    const diffTime = dueDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays < 0) {
      return { color: 'red' as const, label: `${Math.abs(diffDays)} gün gecikmiş`, urgent: true };
    } else if (diffDays <= 5) {
      return { color: 'gold' as const, label: `${diffDays} gün kaldı`, urgent: true };
    } else if (diffDays <= 15) {
      return { color: 'gold' as const, label: `${diffDays} gün kaldı`, urgent: false };
    } else {
      return { color: 'primary' as const, label: `${diffDays} gün kaldı`, urgent: false };
    }
  };

  const dueStatus = getDueStatus();

  return (
    <Card>
      <div className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-primary-gold/10 rounded-lg flex items-center justify-center">
              <DollarSign className="h-5 w-5 text-primary-gold" />
            </div>
            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              {financialSummary.title}
            </h3>
          </div>
          <div className="flex gap-2">
            {onViewDetails && (
              <Button 
                variant="ghost" 
                size="sm" 
                icon={History}
                onClick={onViewDetails}
              >
                Geçmiş
              </Button>
            )}
            {onAddPayment && (
              <Button 
                variant="primary" 
                size="sm" 
                icon={CreditCard}
                onClick={onAddPayment}
              >
                Ödeme Ekle
              </Button>
            )}
          </div>
        </div>

        <div className="space-y-6">
          {/* Current Balance - Main Display */}
          <div className="bg-background-light-soft dark:bg-background-soft rounded-xl p-6 border border-primary-gold/10">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <balanceStatus.icon className={`h-6 w-6 ${
                  balanceStatus.color === 'red' ? 'text-primary-red' :
                  balanceStatus.color === 'primary' ? 'text-primary-gold' :
                  'text-text-light-muted dark:text-text-muted'
                }`} />
                <div>
                  <p className="text-sm text-text-light-muted dark:text-text-muted">
                    {currentBalance.label}
                  </p>
                  <p className={`text-2xl font-bold ${
                    balanceStatus.color === 'red' ? 'text-primary-red' :
                    balanceStatus.color === 'primary' ? 'text-primary-gold' :
                    'text-text-on-light dark:text-text-on-dark'
                  }`}>
                    {formatCurrency(currentBalance.value, currentBalance.currency)}
                  </p>
                </div>
              </div>
              <Badge 
                variant="soft" 
                color={balanceStatus.color}
                className="text-sm"
              >
                {balanceStatus.label}
              </Badge>
            </div>

            {/* Next Due Date */}
            {financialSummary.data.nextDueDate && dueStatus && (
              <div className="flex items-center justify-between pt-4 border-t border-background-light-secondary dark:border-background-secondary">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                  <span className="text-sm text-text-light-muted dark:text-text-muted">
                    Sonraki Vade: {formatDate(financialSummary.data.nextDueDate.value)}
                  </span>
                </div>
                <Badge 
                  variant={dueStatus.urgent ? "solid" : "soft"} 
                  color={dueStatus.color}
                  className="text-xs"
                >
                  {dueStatus.label}
                </Badge>
              </div>
            )}
          </div>

          {/* Financial Details Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Last Payment */}
            {financialSummary.data.lastPaymentDate && financialSummary.data.lastPaymentAmount && (
              <div className="bg-background-light-soft dark:bg-background-soft rounded-lg p-4 border border-primary-gold/5">
                <div className="flex items-center gap-2 mb-2">
                  <CheckCircle className="h-4 w-4 text-primary-gold" />
                  <p className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                    Son Ödeme
                  </p>
                </div>
                <p className="text-lg font-semibold text-primary-gold mb-1">
                  {formatCurrency(
                    financialSummary.data.lastPaymentAmount.value, 
                    financialSummary.data.lastPaymentAmount.currency
                  )}
                </p>
                <p className="text-xs text-text-light-muted dark:text-text-muted">
                  {formatDateTime(financialSummary.data.lastPaymentDate.value)}
                </p>
              </div>
            )}

            {/* Overdue Amount */}
            {financialSummary.data.overdueAmount && financialSummary.data.overdueAmount.value > 0 && (
              <div className="bg-primary-red/5 rounded-lg p-4 border border-primary-red/20">
                <div className="flex items-center gap-2 mb-2">
                  <AlertTriangle className="h-4 w-4 text-primary-red" />
                  <p className="text-sm font-medium text-primary-red">
                    Gecikmiş Tutar
                  </p>
                </div>
                <p className="text-lg font-semibold text-primary-red mb-1">
                  {formatCurrency(
                    financialSummary.data.overdueAmount.value, 
                    financialSummary.data.overdueAmount.currency
                  )}
                </p>
                <p className="text-xs text-primary-red/70">
                  Ödeme gerekli
                </p>
              </div>
            )}
          </div>

          {/* Payment Status Summary */}
          {(currentBalance.value < 0 || (financialSummary.data.overdueAmount && financialSummary.data.overdueAmount.value > 0)) && (
            <div className="bg-primary-red/5 border border-primary-red/20 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <AlertTriangle className="h-5 w-5 text-primary-red mt-0.5" />
                <div className="flex-1">
                  <h4 className="text-sm font-medium text-primary-red mb-1">
                    Ödeme Gerekli
                  </h4>
                  <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                    Bu konut için ödenmemiş tutarlar bulunuyor. 
                    {dueStatus?.urgent && ' Ödeme süresi yaklaşıyor veya geçmiş.'}
                  </p>
                  {onAddPayment && (
                    <Button 
                      variant="primary" 
                      size="sm" 
                      className="mt-3"
                      onClick={onAddPayment}
                    >
                      Hemen Öde
                    </Button>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Success State */}
          {currentBalance.value >= 0 && (!financialSummary.data.overdueAmount || financialSummary.data.overdueAmount.value === 0) && (
            <div className="bg-semantic-success/10 border border-semantic-success/20 rounded-lg p-4">
              <div className="flex items-center gap-3">
                <CheckCircle className="h-5 w-5 text-semantic-success-600" />
                <div>
                  <h4 className="text-sm font-medium text-semantic-success-600 mb-1">
                    Ödemeler Güncel
                  </h4>
                  <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                    Bu konut için tüm ödemeler güncel durumda.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
}
</file>

<file path="src/app/dashboard/units/add/page.tsx">
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { ProtectedRoute } from "@/app/components/auth/ProtectedRoute";
import DashboardHeader from "@/app/dashboard/components/DashboardHeader";
import Sidebar from "@/app/components/ui/Sidebar";
import Card from "@/app/components/ui/Card";
import Button from "@/app/components/ui/Button";
import Badge from "@/app/components/ui/Badge";
import Checkbox from "@/app/components/ui/Checkbox";
import {
  ArrowLeft,
  Check,
  Info,
  Building,
  Home,
  Map,
  User,
  Store,
  Car,
  AlertCircle,
  Hash,
  FileText,
  Camera,
  Settings,
  MapPin,
  Layers,
} from "lucide-react";

// Mock data for asset management
const mockAssetTypes = [
  { value: "RESIDENCE", label: "Konut" },
  { value: "COMMERCIAL", label: "Ticari Alan" },
];

const mockStatusOptions = [
  { value: "ACTIVE", label: "Aktif" },
  { value: "INACTIVE", label: "Pasif" },
  { value: "RESERVED", label: "Rezerve" },
];

const mockBlocks = ["A", "B", "C", "D", "Villa"];
const mockFloors = ["Zemin", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"];
const mockAssetSizeTypes = [
  "200m²",
  "400m²", 
  "400+200m²",
  "600m²",
  "800m²",
  "1000m²",
  "1200m²",
  "1500m²",
  "2000m²+"
];

const mockNeighborhoods = ["Mahalle 1", "Mahalle 2", "Mahalle 3", "Mahalle 4", "Mahalle 5"];

interface FormData {
  // Varlık Temel Bilgileri
  assetNumber: string;
  assetNumberAuto: boolean;
  assetName: string;
  assetType: "RESIDENCE" | "COMMERCIAL";
  status: "ACTIVE" | "INACTIVE" | "RESERVED";
  block: string;
  floor: string;
  unitNumber: string;
  mapLocation: string;
  planLocation: string;
  
  // Varlık Detay Bilgileri
  area: string;
  roomCount: string;
  assetSizeType: string;
  groupingBlock: string;
  groupingNeighborhood: string;
  specialNotes: string;
  
  // Varlık İçerik Bilgileri (Opsiyonel)
  inventoryList: string;
  currentPhotos: string;
  technicalSpecs: string;
}

export default function AddAssetPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    assetNumber: "",
    assetNumberAuto: true,
    assetName: "",
    assetType: "RESIDENCE",
    status: "ACTIVE",
    block: "",
    floor: "",
    unitNumber: "",
    mapLocation: "",
    planLocation: "",
    area: "",
    roomCount: "",
    assetSizeType: "",
    groupingBlock: "",
    groupingNeighborhood: "",
    specialNotes: "",
    inventoryList: "",
    currentPhotos: "",
    technicalSpecs: "",
  });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const breadcrumbItems = [
    { label: "Ana Sayfa", href: "/dashboard" },
    { label: "Varlıklar", href: "/dashboard/units" },
    { label: "Yeni Varlık Ekle", active: true },
  ];

  // Auto-generate asset number
  React.useEffect(() => {
    if (formData.assetNumberAuto) {
      const autoNumber = `VRLK-${Math.floor(Math.random() * 99999).toString().padStart(5, "0")}`;
      setFormData(prev => ({ ...prev, assetNumber: autoNumber }));
    }
  }, [formData.assetNumberAuto]);

  // Validation
  const validateForm = (): boolean => {
    const newErrors: { [key: string]: string } = {};
    
    if (!formData.assetNumberAuto && !formData.assetNumber) {
      newErrors.assetNumber = "Varlık numarası zorunludur";
    }
    if (!formData.assetName) newErrors.assetName = "Varlık adı zorunludur";
    if (!formData.assetType) newErrors.assetType = "Varlık türü zorunludur";
    if (!formData.status) newErrors.status = "Durum seçimi zorunludur";
    if (!formData.block) newErrors.block = "Blok seçimi zorunludur";
    if (!formData.floor) newErrors.floor = "Kat seçimi zorunludur";
    if (!formData.unitNumber) newErrors.unitNumber = "Daire/Villa No zorunludur";
    if (!formData.area) newErrors.area = "Alan zorunludur";
    if (!formData.assetSizeType) newErrors.assetSizeType = "Varlık tipi zorunludur";
    if (!formData.groupingBlock) newErrors.groupingBlock = "Gruplama blok no zorunludur";
    if (!formData.groupingNeighborhood) newErrors.groupingNeighborhood = "Gruplama mahalle no zorunludur";
    
    // Conditional validation for residence
    if (formData.assetType === "RESIDENCE" && !formData.roomCount) {
      newErrors.roomCount = "Oda sayısı zorunludur";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle input changes
  const handleInputChange = (field: keyof FormData, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    if (errors[field]) setErrors((prev) => ({ ...prev, [field]: "" }));
  };

  // Handle form submit
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      setShowSuccess(true);
    }
  };

  // Success modal/message
  if (showSuccess) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-background-primary">
          <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
          <div className="lg:ml-72">
            <DashboardHeader title="Başarılı!" breadcrumbItems={breadcrumbItems} />
            <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              <Card className="text-center">
                <div className="p-8">
                  <div className="w-16 h-16 bg-semantic-success-500/10 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Check className="h-8 w-8 text-semantic-success-500" />
                  </div>
                  <h2 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark mb-2">
                    Varlık başarıyla kaydedildi!
                  </h2>
                  <p className="text-text-light-secondary dark:text-text-secondary mb-2">
                    {formData.assetName} - {mockAssetTypes.find(t => t.value === formData.assetType)?.label}
                  </p>
                  <p className="text-sm text-text-light-muted dark:text-text-muted mb-6">
                    Varlık No: {formData.assetNumber}
                  </p>
                  <div className="bg-background-light-soft dark:bg-background-soft rounded-lg p-4 mb-6">
                    <p className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                      Şimdi ne yapmak istersiniz?
                    </p>
                  </div>
                  <div className="flex flex-col sm:flex-row gap-3 justify-center">
                    <Link href="/dashboard/units">
                      <Button variant="primary">Varlık Listesine Dön</Button>
                    </Link>
                    <Button variant="secondary" onClick={() => setShowSuccess(false)}>
                      Yeni Varlık Ekle
                    </Button>
                  </div>
                </div>
              </Card>
            </main>
          </div>
        </div>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        {/* Sidebar */}
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        {/* Main Content Area */}
        <div className="lg:ml-72">
          {/* Header */}
          <DashboardHeader title="Yeni Varlık Ekle" breadcrumbItems={breadcrumbItems} />
          {/* Main Content */}
          <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header Actions */}
            <div className="flex justify-between items-center mb-6">
              <Link href="/dashboard/units">
                <Button variant="ghost" icon={ArrowLeft}>
                  Geri Dön
                </Button>
              </Link>
              <div className="flex gap-3">
                <Link href="/dashboard/units">
                  <Button variant="secondary">İptal</Button>
                </Link>
                <Button variant="primary" onClick={handleSubmit}>
                  Kaydet
                </Button>
              </div>
            </div>

            {/* Info Banner */}
            <div className="bg-primary-gold/10 dark:bg-primary-gold/20 border border-primary-gold/20 rounded-lg p-4 mb-6">
              <div className="flex items-start gap-3">
                <Info className="h-5 w-5 text-primary-gold mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                    Varlık bilgilerini detaylı olarak girerek sisteme kaydedin
                  </p>
                  <p className="text-xs text-text-light-muted dark:text-text-muted mt-1">
                    Varlık kaydedildikten sonra detay sayfasından tüm bilgileri ekleyebilir ve düzenleyebilirsiniz.
                  </p>
                </div>
              </div>
            </div>

            {/* Main Form */}
            <form onSubmit={handleSubmit} className="space-y-6">
              
              {/* Varlık Temel Bilgileri */}
              <Card>
                <div className="p-6">
                  <div className="text-center mb-8">
                    <h2 className="text-xl font-bold text-text-on-light dark:text-text-on-dark flex items-center justify-center gap-2">
                      <Hash className="h-6 w-6 text-primary-gold" />
                      VARLIK TEMEL BİLGİLERİ
                    </h2>
                    <div className="w-24 h-1 bg-primary-gold rounded mx-auto mt-2"></div>
                  </div>
                  
                  <div className="space-y-6">
                    {/* Varlık Numarası */}
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Varlık Numarası *
                      </label>
                      <div className="flex items-center gap-4">
                        <Checkbox
                          checked={formData.assetNumberAuto}
                          onChange={e => handleInputChange("assetNumberAuto", e.target.checked)}
                          label="Otomatik oluştur"
                        />
                        <input
                          type="text"
                          className={`flex-1 px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.assetNumber ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                          placeholder="Varlık numarası"
                          value={formData.assetNumber}
                          onChange={e => handleInputChange("assetNumber", e.target.value)}
                          disabled={formData.assetNumberAuto}
                        />
                      </div>
                      {errors.assetNumber && (
                        <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.assetNumber}</p>
                      )}
                    </div>

                    {/* Varlık Adı */}
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Varlık Adı/Tanımı *
                      </label>
                      <input
                        type="text"
                        className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.assetName ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                        placeholder="Örn: A Blok 3. Kat 12 No'lu Daire"
                        value={formData.assetName}
                        onChange={e => handleInputChange("assetName", e.target.value)}
                      />
                      {errors.assetName && (
                        <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.assetName}</p>
                      )}
                    </div>

                    {/* Varlık Türü ve Durum */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                          Ana Varlık Türü *
                        </label>
                        <div className="space-y-2">
                          {mockAssetTypes.map(type => (
                            <label key={type.value} className="flex items-center gap-2">
                              <input
                                type="radio"
                                name="assetType"
                                value={type.value}
                                checked={formData.assetType === type.value}
                                onChange={e => handleInputChange("assetType", e.target.value)}
                                className="text-primary-gold focus:ring-primary-gold"
                              />
                              <span className="text-text-on-light dark:text-text-on-dark">{type.label}</span>
                            </label>
                          ))}
                        </div>
                        {errors.assetType && (
                          <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.assetType}</p>
                        )}
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                          Durum *
                        </label>
                        <select
                          className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.status ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                          value={formData.status}
                          onChange={e => handleInputChange("status", e.target.value)}
                        >
                          <option value="">Seçiniz</option>
                          {mockStatusOptions.map(status => (
                            <option key={status.value} value={status.value}>{status.label}</option>
                          ))}
                        </select>
                        {errors.status && (
                          <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.status}</p>
                        )}
                      </div>
                    </div>

                    {/* Adres Bilgileri */}
                    <div>
                      <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                        <MapPin className="h-5 w-5 text-primary-gold" />
                        Adres ve Konum Bilgileri
                      </h3>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                            Blok *
                          </label>
                          <select
                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.block ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                            value={formData.block}
                            onChange={e => handleInputChange("block", e.target.value)}
                          >
                            <option value="">Seçiniz</option>
                            {mockBlocks.map(block => (
                              <option key={block} value={block}>{block} Blok</option>
                            ))}
                          </select>
                          {errors.block && (
                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.block}</p>
                          )}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                            Kat *
                          </label>
                          <select
                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.floor ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                            value={formData.floor}
                            onChange={e => handleInputChange("floor", e.target.value)}
                          >
                            <option value="">Seçiniz</option>
                            {mockFloors.map(floor => (
                              <option key={floor} value={floor}>{floor}</option>
                            ))}
                          </select>
                          {errors.floor && (
                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.floor}</p>
                          )}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                            Daire/Villa No *
                          </label>
                          <input
                            type="text"
                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.unitNumber ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                            placeholder="Örn: 12"
                            value={formData.unitNumber}
                            onChange={e => handleInputChange("unitNumber", e.target.value)}
                          />
                          {errors.unitNumber && (
                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.unitNumber}</p>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Harita ve Plan Konumları */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                          Harita Üzerinde Konum
                        </label>
                        <div className="w-full h-32 bg-background-light-soft dark:bg-background-soft border border-gray-200 dark:border-gray-700 rounded-lg flex items-center justify-center">
                          <div className="text-center">
                            <Map className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                            <p className="text-sm text-text-light-muted dark:text-text-muted">
                              Harita konum işaretleme
                            </p>
                            <p className="text-xs text-text-light-muted dark:text-text-muted">
                              (Yakında eklenecek)
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                          Plan/Kroki Üzerinde Konum
                        </label>
                        <div className="w-full h-32 bg-background-light-soft dark:bg-background-soft border border-gray-200 dark:border-gray-700 rounded-lg flex items-center justify-center">
                          <div className="text-center">
                            <Layers className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                            <p className="text-sm text-text-light-muted dark:text-text-muted">
                              Plan konum işaretleme
                            </p>
                            <p className="text-xs text-text-light-muted dark:text-text-muted">
                              (Yakında eklenecek)
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>

              {/* Varlık Detay Bilgileri */}
              <Card>
                <div className="p-6">
                  <div className="text-center mb-8">
                    <h2 className="text-xl font-bold text-text-on-light dark:text-text-on-dark flex items-center justify-center gap-2">
                      <Home className="h-6 w-6 text-primary-gold" />
                      VARLIK DETAY BİLGİLERİ
                    </h2>
                    <div className="w-24 h-1 bg-primary-gold rounded mx-auto mt-2"></div>
                  </div>
                  
                  <div className="space-y-6">
                    {/* Alan ve Oda Sayısı */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                          Alan (m²) *
                        </label>
                        <input
                          type="number"
                          min="0"
                          className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.area ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                          placeholder="Örn: 145"
                          value={formData.area}
                          onChange={e => handleInputChange("area", e.target.value)}
                        />
                        {errors.area && (
                          <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.area}</p>
                        )}
                      </div>
                      
                      {formData.assetType === "RESIDENCE" && (
                        <div>
                          <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                            Oda Sayısı *
                          </label>
                          <select
                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.roomCount ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                            value={formData.roomCount}
                            onChange={e => handleInputChange("roomCount", e.target.value)}
                          >
                            <option value="">Seçiniz</option>
                            <option value="1+1">1+1</option>
                            <option value="2+1">2+1</option>
                            <option value="3+1">3+1</option>
                            <option value="4+1">4+1</option>
                            <option value="5+1">5+1</option>
                            <option value="6+1">6+1</option>
                          </select>
                          {errors.roomCount && (
                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.roomCount}</p>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Varlık Tipi */}
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Varlık Tipi *
                      </label>
                      <select
                        className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.assetSizeType ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                        value={formData.assetSizeType}
                        onChange={e => handleInputChange("assetSizeType", e.target.value)}
                      >
                        <option value="">Seçiniz</option>
                        {mockAssetSizeTypes.map(type => (
                          <option key={type} value={type}>{type}</option>
                        ))}
                      </select>
                      {errors.assetSizeType && (
                        <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.assetSizeType}</p>
                      )}
                    </div>

                    {/* Gruplama Alanları */}
                    <div>
                      <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                        <Building className="h-5 w-5 text-primary-gold" />
                        Gruplama Alanları
                      </h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                            Gruplama Blok No *
                          </label>
                          <input
                            type="text"
                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.groupingBlock ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                            placeholder="Örn: A-1"
                            value={formData.groupingBlock}
                            onChange={e => handleInputChange("groupingBlock", e.target.value)}
                          />
                          {errors.groupingBlock && (
                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.groupingBlock}</p>
                          )}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                            Gruplama Mahalle No *
                          </label>
                          <select
                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.groupingNeighborhood ? "border-red-300 dark:border-red-600" : "border-gray-200 dark:border-gray-700"}`}
                            value={formData.groupingNeighborhood}
                            onChange={e => handleInputChange("groupingNeighborhood", e.target.value)}
                          >
                            <option value="">Seçiniz</option>
                            {mockNeighborhoods.map(neighborhood => (
                              <option key={neighborhood} value={neighborhood}>{neighborhood}</option>
                            ))}
                          </select>
                          {errors.groupingNeighborhood && (
                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.groupingNeighborhood}</p>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Özel Notlar */}
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Özel Notlar
                      </label>
                      <textarea
                        className="w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold min-h-[80px]"
                        placeholder="Varlık hakkında özel notlar..."
                        value={formData.specialNotes}
                        onChange={e => handleInputChange("specialNotes", e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </Card>

              {/* Varlık İçerik Bilgileri (Opsiyonel) */}
              <Card>
                <div className="p-6">
                  <div className="text-center mb-8">
                    <h2 className="text-xl font-bold text-text-on-light dark:text-text-on-dark flex items-center justify-center gap-2">
                      <FileText className="h-6 w-6 text-primary-gold" />
                      VARLIK İÇERİK BİLGİLERİ
                    </h2>
                    <div className="w-24 h-1 bg-primary-gold rounded mx-auto mt-2"></div>
                    <p className="text-sm text-text-light-muted dark:text-text-muted mt-2">
                      Bu bölüm opsiyoneldir, varlık kaydedildikten sonra da eklenebilir
                    </p>
                  </div>
                  
                  <div className="space-y-6">
                    {/* Demirbaş Listesi */}
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Demirbaş Listesi
                      </label>
                      <textarea
                        className="w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold min-h-[80px]"
                        placeholder="Varlıkta bulunan demirbaş listesi..."
                        value={formData.inventoryList}
                        onChange={e => handleInputChange("inventoryList", e.target.value)}
                      />
                    </div>

                    {/* Mevcut Durumu Fotoğrafları */}
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Mevcut Durumu (Fotoğraflar)
                      </label>
                      <div className="w-full h-32 bg-background-light-soft dark:bg-background-soft border border-gray-200 dark:border-gray-700 rounded-lg flex items-center justify-center">
                        <div className="text-center">
                          <Camera className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                          <p className="text-sm text-text-light-muted dark:text-text-muted">
                            Fotoğraf yükleme
                          </p>
                          <p className="text-xs text-text-light-muted dark:text-text-muted">
                            (Yakında eklenecek)
                          </p>
                        </div>
                      </div>
                    </div>

                    {/* Teknik Özellikler */}
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Teknik Özellikler
                      </label>
                      <textarea
                        className="w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold min-h-[80px]"
                        placeholder="Teknik özellikler, sistemler, ekipmanlar..."
                        value={formData.technicalSpecs}
                        onChange={e => handleInputChange("technicalSpecs", e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </Card>

              {/* Submit Button */}
              <div className="flex justify-center">
                <Button variant="primary" size="lg" type="submit" className="px-12">
                  Varlığı Kaydet
                </Button>
              </div>
            </form>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/dashboard/units/components/UnitsFilters.tsx">
import React from 'react';
import { PropertyFilterParams } from '@/services/types/property.types';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import { Filter, Grid3X3, List, Building, Map } from 'lucide-react';

interface UnitsFiltersProps {
    searchQuery: string;
    onSearchChange: (query: string) => void;
    filters: PropertyFilterParams;
    onFiltersChange: (filters: PropertyFilterParams) => void;
    showFilters: boolean;
    onToggleFilters: () => void;
    viewMode: 'table' | 'grid' | 'block' | 'map';
    onViewModeChange: (mode: 'table' | 'grid' | 'block' | 'map') => void;
}

const viewModeOptions = [
    { id: 'table', value: 'table', label: 'Tablo', icon: List },
    { id: 'grid', value: 'grid', label: 'Kart', icon: Grid3X3 },
    { id: 'block', value: 'block', label: 'Blok', icon: Building },
    { id: 'map', value: 'map', label: 'Harita', icon: Map }
];

export const UnitsFilters: React.FC<UnitsFiltersProps> = ({
    searchQuery,
    onSearchChange,
    filters,
    onFiltersChange,
    showFilters,
    onToggleFilters,
    viewMode,
    onViewModeChange
}) => {
    const handleFilterChange = (key: keyof PropertyFilterParams, value: string) => {
        onFiltersChange({
            ...filters,
            [key]: value === 'all' ? undefined : value,
            page: 1 // Reset to first page when filter changes
        });
    };

    if (!showFilters) return null;

    return (
        <div className="mt-6 pt-6 border-t border-border-light dark:border-border-dark">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Konut Tipi
                    </label>
                    <select
                        className="w-full px-3 py-2 bg-background-light-soft dark:bg-background-soft border border-border-light dark:border-border-dark rounded-lg text-text-on-light dark:text-text-on-dark"
                        value={filters.type || 'all'}
                        onChange={(e: any) => handleFilterChange('type', e.target.value)}
                    >
                        <option value="all">Tümü</option>
                        <option value="RESIDENCE">Daire</option>
                        <option value="VILLA">Villa</option>
                        <option value="COMMERCIAL">Ticari</option>
                    </select>
                </div>

                <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Durum
                    </label>
                    <select
                        className="w-full px-3 py-2 bg-background-light-soft dark:bg-background-soft border border-border-light dark:border-border-dark rounded-lg text-text-on-light dark:text-text-on-dark"
                        value={filters.status || 'all'}
                        onChange={(e: any) => handleFilterChange('status', e.target.value)}
                    >
                        <option value="all">Tümü</option>
                        <option value="OCCUPIED">Dolu</option>
                        <option value="AVAILABLE">Boş</option>
                        <option value="UNDER_MAINTENANCE">Bakımda</option>
                        <option value="RESERVED">Rezerve</option>
                    </select>
                </div>

                <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Blok
                    </label>
                    <select
                        className="w-full px-3 py-2 bg-background-light-soft dark:bg-background-soft border border-border-light dark:border-border-dark rounded-lg text-text-on-light dark:text-text-on-dark"
                        value={filters.blockNumber || 'all'}
                        onChange={(e: any) => handleFilterChange('blockNumber', e.target.value)}
                    >
                        <option value="all">Tümü</option>
                        <option value="A">A Blok</option>
                        <option value="B">B Blok</option>
                        <option value="C">C Blok</option>
                        <option value="D">D Blok</option>
                        <option value="Villa">Villa</option>
                    </select>
                </div>

                <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Oda Sayısı
                    </label>
                    <select
                        className="w-full px-3 py-2 bg-background-light-soft dark:bg-background-soft border border-border-light dark:border-border-dark rounded-lg text-text-on-light dark:text-text-on-dark"
                        value={filters.rooms || 'all'}
                        onChange={(e: any) => handleFilterChange('rooms', e.target.value)}
                    >
                        <option value="all">Tümü</option>
                        <option value="1+1">1+1</option>
                        <option value="2+1">2+1</option>
                        <option value="3+1">3+1</option>
                        <option value="4+1">4+1</option>
                    </select>
                </div>

                <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Borç Durumu
                    </label>
                    <select
                        className="w-full px-3 py-2 bg-background-light-soft dark:bg-background-soft border border-border-light dark:border-border-dark rounded-lg text-text-on-light dark:text-text-on-dark"
                        value={filters.debtStatus || 'all'}
                        onChange={(e: any) => handleFilterChange('debtStatus', e.target.value)}
                    >
                        <option value="all">Tümü</option>
                        <option value="clean">Temiz Hesap</option>
                        <option value="indebted">Borçlu</option>
                    </select>
                </div>
            </div>
        </div>
    );
};
</file>

<file path="src/app/dashboard/units/empty/page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import { Building, Map, Plus, RefreshCw, Filter, List, Grid3X3, Home, Store, Car, AlertCircle, CheckCircle, RotateCcw, Calendar } from 'lucide-react';
import StatsCard from '@/app/components/ui/StatsCard';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import FilterPanel from '@/app/components/ui/FilterPanel';
import Link from 'next/link';
import GenericListView from '@/app/components/templates/GenericListView';
import { unitsService, Property } from '@/services';

export default function EmptyUnitsPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [searchInput, setSearchInput] = useState("");
  const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
  const [showFilters, setShowFilters] = useState(false);
  const [units, setUnits] = useState<Property[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [pagination, setPagination] = useState({
    total: 0,
    page: 1,
    limit: 20,
    totalPages: 0
  });

  const breadcrumbItems = [
    { label: 'Ana Sayfa', href: '/dashboard' },
    { label: 'Konutlar', href: '/dashboard/units' },
    { label: 'Boş Konutlar', active: true }
  ];

  // Status config for table
  const statusConfig = {
    AVAILABLE: { label: 'Boş', color: 'info', icon: AlertCircle },
    OCCUPIED: { label: 'Dolu', color: 'success', icon: CheckCircle },
    UNDER_MAINTENANCE: { label: 'Bakımda', color: 'warning', icon: RotateCcw },
    RESERVED: { label: 'Rezerve', color: 'primary', icon: Calendar }
  };

  // Table columns (sadeleştirilmiş)
  const getTableColumns = () => [
    {
      key: 'property',
      header: 'Konut',
      render: (_value: any, unit: Property) => (
        <div>
          <div className="font-medium text-text-on-light dark:text-text-on-dark">
            {unit?.propertyNumber || unit?.name || 'N/A'}
          </div>
          <div className="text-sm text-text-light-secondary dark:text-text-secondary">
            {unit?.blockNumber && `Blok ${unit.blockNumber}`}
            {unit?.floor && ` • ${unit.floor}. kat`}
          </div>
        </div>
      ),
    },
    {
      key: 'type',
      header: 'Tip',
      render: (_value: any, unit: Property) => (
        <Badge variant="soft" color="secondary">
          {unit?.type ? unitsService.getTypeInfo(unit.type).label : 'N/A'}
        </Badge>
      ),
    },
    {
      key: 'area',
      header: 'm²',
      render: (_value: any, unit: Property) => unit?.area || '--',
    },
    {
      key: 'status',
      header: 'Durum',
      render: (_value: any, unit: Property) => {
        const statusInfo = statusConfig[unit?.status as keyof typeof statusConfig];
        if (!statusInfo) {
          return <span className="text-text-light-muted dark:text-text-muted">N/A</span>;
        }
        const StatusIcon = statusInfo.icon;
        return (
          <div className="flex items-center gap-2">
            <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
            <Badge variant="soft" color={statusInfo.color as any}>
              {statusInfo.label}
            </Badge>
          </div>
        );
      },
    },
  ];

  // API'den boş konutları çek
  const fetchUnits = async (page = 1, limit = 20, search = "") => {
    setLoading(true);
    setError(null);
    try {
      const filters: any = { status: 'AVAILABLE', page, limit };
      if (search) filters.search = search;
      const response = await unitsService.getAllUnits(filters);
      setUnits(response.data);
      setPagination(response.pagination);
    } catch (err: any) {
      setError('Boş konutlar yüklenirken bir hata oluştu.');
      setUnits([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUnits(pagination.page, pagination.limit, searchInput);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pagination.page, pagination.limit, searchInput]);

  const handleRefresh = () => {
    fetchUnits(pagination.page, pagination.limit, searchInput);
  };

  const handleSearchInputChange = (value: string) => {
    setSearchInput(value);
    setPagination((prev) => ({ ...prev, page: 1 }));
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        <div className="lg:ml-72">
          <DashboardHeader title="Boş Konutlar" breadcrumbItems={breadcrumbItems} />
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                  Boş Konutlar <span className="text-primary-gold">({units.length} Konut)</span>
                </h2>
                <p className="text-text-light-secondary dark:text-text-secondary">
                  Sadece boş durumdaki daire, villa ve ticari alanlar listelenir.
                </p>
              </div>
              <div className="flex gap-3">
                <Button variant="ghost" size="md" icon={RefreshCw} onClick={handleRefresh}>
                  Yenile
                </Button>
                {/* <Link href="/dashboard/units/add">
                  <Button variant="primary" size="md" icon={Plus}>
                    Yeni Konut
                  </Button>
                </Link> */}
              </div>
            </div>
            <Card className="mb-6">
              <div className="p-6">
                <div className="flex flex-col lg:flex-row gap-4">
                  <div className="flex-1">
                    <SearchBar
                      placeholder="Blok, daire no, sakin adı, telefon veya özellik ile ara..."
                      value={searchInput}
                      onChange={(e: any) => handleSearchInputChange(e.target.value)}
                      onSearch={handleSearchInputChange}
                      debounceMs={500}
                    />
                  </div>
                  <div className="flex gap-2 items-center">
                    {/* <Button
                      variant={showFilters ? "primary" : "secondary"}
                      size="md"
                      icon={Filter}
                      onClick={() => setShowFilters(true)}
                    >
                      Filtreler
                    </Button> */}
                    <ViewToggle
                      options={[
                        { id: 'table', label: 'Tablo', icon: List },
                        { id: 'grid', label: 'Kart', icon: Grid3X3 }
                      ]}
                      activeView={viewMode}
                      onViewChange={(viewId) => setViewMode(viewId as typeof viewMode)}
                      size="sm"
                    />
                  </div>
                </div>
              </div>
            </Card>
            <div className={`fixed inset-0 z-50 ${showFilters ? 'pointer-events-auto' : 'pointer-events-none'}`}> 
              <div
                className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${showFilters ? 'opacity-50' : 'opacity-0'}`}
                onClick={() => setShowFilters(false)}
              />
              <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-background-light-card dark:bg-background-card shadow-2xl transform transition-transform duration-300 ease-in-out ${showFilters ? 'translate-x-0' : 'translate-x-full'}`}>
                <FilterPanel
                  filterGroups={[]}
                  onApplyFilters={() => setShowFilters(false)}
                  onResetFilters={() => {}}
                  onClose={() => setShowFilters(false)}
                  variant="sidebar"
                />
              </div>
            </div>
            <div className="mb-8">
              <div className="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-3 gap-4">
                <StatsCard title="Apartman Dairesi" value={units.filter(u => u.type === 'RESIDENCE').length} icon={Building} color="primary" loading={loading} size="md" />
                <StatsCard title="Villa" value={units.filter(u => u.type === 'VILLA').length} icon={Home} color="success" loading={loading} size="md" />
                <StatsCard title="Ticari Alan" value={units.filter(u => u.type === 'COMMERCIAL').length} icon={Store} color="info" loading={loading} size="md" />
              </div>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
              <div className="lg:col-span-1">
                {viewMode === 'table' && (
                  <GenericListView
                    data={units}
                    loading={loading}
                    error={error}
                    columns={getTableColumns()}
                    pagination={{
                      currentPage: pagination.page,
                      totalPages: pagination.totalPages,
                      totalRecords: pagination.total,
                      recordsPerPage: pagination.limit,
                      onPageChange: (page) => setPagination(prev => ({ ...prev, page })),
                      onRecordsPerPageChange: (limit) => setPagination(prev => ({ ...prev, limit, page: 1 })),
                    }}
                    emptyStateMessage="Şu anda boş durumda olan konut kaydı bulunmuyor."
                    selectable={false}
                    showPagination={true}
                  />
                )}
                {/* Grid görünümü ileride eklenebilir */}
              </div>
            </div>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/dashboard/units/maintenance/page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import { Building, Map, Plus, RefreshCw, Filter, List, Grid3X3, Home, Store, Car, RotateCcw, CheckCircle, Calendar } from 'lucide-react';
import StatsCard from '@/app/components/ui/StatsCard';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import FilterPanel from '@/app/components/ui/FilterPanel';
import Link from 'next/link';
import GenericListView from '@/app/components/templates/GenericListView';
import { unitsService, Property } from '@/services';

export default function MaintenanceUnitsPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [searchInput, setSearchInput] = useState("");
  const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
  const [showFilters, setShowFilters] = useState(false);
  const [units, setUnits] = useState<Property[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [pagination, setPagination] = useState({
    total: 0,
    page: 1,
    limit: 20,
    totalPages: 0
  });

  const breadcrumbItems = [
    { label: 'Ana Sayfa', href: '/dashboard' },
    { label: 'Konutlar', href: '/dashboard/units' },
    { label: 'Bakım Durumu', active: true }
  ];

  // Status config for table
  const statusConfig = {
    AVAILABLE: { label: 'Boş', color: 'info', icon: RotateCcw },
    OCCUPIED: { label: 'Dolu', color: 'success', icon: CheckCircle },
    UNDER_MAINTENANCE: { label: 'Bakımda', color: 'warning', icon: RotateCcw },
    RESERVED: { label: 'Rezerve', color: 'primary', icon: Calendar }
  };

  // Table columns (sadeleştirilmiş)
  const getTableColumns = () => [
    {
      key: 'property',
      header: 'Konut',
      render: (_value: any, unit: Property) => (
        <div>
          <div className="font-medium text-text-on-light dark:text-text-on-dark">
            {unit?.propertyNumber || unit?.name || 'N/A'}
          </div>
          <div className="text-sm text-text-light-secondary dark:text-text-secondary">
            {unit?.blockNumber && `Blok ${unit.blockNumber}`}
            {unit?.floor && ` • ${unit.floor}. kat`}
          </div>
        </div>
      ),
    },
    {
      key: 'type',
      header: 'Tip',
      render: (_value: any, unit: Property) => (
        <Badge variant="soft" color="secondary">
          {unit?.type ? unitsService.getTypeInfo(unit.type).label : 'N/A'}
        </Badge>
      ),
    },
    {
      key: 'area',
      header: 'm²',
      render: (_value: any, unit: Property) => unit?.area || '--',
    },
    {
      key: 'status',
      header: 'Durum',
      render: (_value: any, unit: Property) => {
        const statusInfo = statusConfig[unit?.status as keyof typeof statusConfig];
        if (!statusInfo) {
          return <span className="text-text-light-muted dark:text-text-muted">N/A</span>;
        }
        const StatusIcon = statusInfo.icon;
        return (
          <div className="flex items-center gap-2">
            <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
            <Badge variant="soft" color={statusInfo.color as any}>
              {statusInfo.label}
            </Badge>
          </div>
        );
      },
    },
  ];

  // API'den bakımda olan konutları çek
  const fetchUnits = async (page = 1, limit = 20, search = "") => {
    setLoading(true);
    setError(null);
    try {
      const filters: any = { status: 'UNDER_MAINTENANCE', page, limit };
      if (search) filters.search = search;
      const response = await unitsService.getAllUnits(filters);
      setUnits(response.data);
      setPagination(response.pagination);
    } catch (err: any) {
      setError('Bakımda olan konutlar yüklenirken bir hata oluştu.');
      setUnits([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUnits(pagination.page, pagination.limit, searchInput);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pagination.page, pagination.limit, searchInput]);

  const handleRefresh = () => {
    fetchUnits(pagination.page, pagination.limit, searchInput);
  };

  const handleSearchInputChange = (value: string) => {
    setSearchInput(value);
    setPagination((prev) => ({ ...prev, page: 1 }));
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        <div className="lg:ml-72">
          <DashboardHeader title="Bakım Durumu" breadcrumbItems={breadcrumbItems} />
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                  Bakımda Olan Konutlar <span className="text-primary-gold">({units.length} Konut)</span>
                </h2>
                <p className="text-text-light-secondary dark:text-text-secondary">
                  Sadece bakımda olan daire, villa ve ticari alanlar listelenir.
                </p>
              </div>
              <div className="flex gap-3">
                <Button variant="ghost" size="md" icon={RefreshCw} onClick={handleRefresh}>
                  Yenile
                </Button>
                {/* <Link href="/dashboard/units/add">
                  <Button variant="primary" size="md" icon={Plus}>
                    Yeni Konut
                  </Button>
                </Link> */}
              </div>
            </div>
            <Card className="mb-6">
              <div className="p-6">
                <div className="flex flex-col lg:flex-row gap-4">
                  <div className="flex-1">
                    <SearchBar
                      placeholder="Blok, daire no, sakin adı, telefon veya özellik ile ara..."
                      value={searchInput}
                      onChange={(e: any) => handleSearchInputChange(e.target.value)}
                      onSearch={handleSearchInputChange}
                      debounceMs={500}
                    />
                  </div>
                  <div className="flex gap-2 items-center">
                    {/* <Button
                      variant={showFilters ? "primary" : "secondary"}
                      size="md"
                      icon={Filter}
                      onClick={() => setShowFilters(true)}
                    >
                      Filtreler
                    </Button> */}
                    <ViewToggle
                      options={[
                        { id: 'table', label: 'Tablo', icon: List },
                        { id: 'grid', label: 'Kart', icon: Grid3X3 }
                      ]}
                      activeView={viewMode}
                      onViewChange={(viewId) => setViewMode(viewId as typeof viewMode)}
                      size="sm"
                    />
                  </div>
                </div>
              </div>
            </Card>
            <div className={`fixed inset-0 z-50 ${showFilters ? 'pointer-events-auto' : 'pointer-events-none'}`}> 
              <div
                className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${showFilters ? 'opacity-50' : 'opacity-0'}`}
                onClick={() => setShowFilters(false)}
              />
              <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-background-light-card dark:bg-background-card shadow-2xl transform transition-transform duration-300 ease-in-out ${showFilters ? 'translate-x-0' : 'translate-x-full'}`}>
                <FilterPanel
                  filterGroups={[]}
                  onApplyFilters={() => setShowFilters(false)}
                  onResetFilters={() => {}}
                  onClose={() => setShowFilters(false)}
                  variant="sidebar"
                />
              </div>
            </div>
            <div className="mb-8">
              <div className="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-4 gap-4">
                 <StatsCard title="Apartman Dairesi" value={units.filter(u => u.type === 'RESIDENCE').length} icon={Building} color="primary" loading={loading} size="md" />
                 <StatsCard title="Villa" value={units.filter(u => u.type === 'VILLA').length} icon={Home} color="success" loading={loading} size="md" />
                 <StatsCard title="Ticari Alan" value={units.filter(u => u.type === 'COMMERCIAL').length} icon={Store} color="info" loading={loading} size="md" />
                 <StatsCard title="Ofis Alanı" value={units.filter(u => u.type === 'OFFICE').length} icon={Car} color="danger" loading={loading} size="md" />
              </div>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
              <div className="lg:col-span-1">
                {viewMode === 'table' && (
                  <GenericListView
                    data={units}
                    loading={loading}
                    error={error}
                    columns={getTableColumns()}
                    pagination={{
                      currentPage: pagination.page,
                      totalPages: pagination.totalPages,
                      totalRecords: pagination.total,
                      recordsPerPage: pagination.limit,
                      onPageChange: (page) => setPagination(prev => ({ ...prev, page })),
                      onRecordsPerPageChange: (limit) => setPagination(prev => ({ ...prev, limit, page: 1 })),
                    }}
                    emptyStateMessage="Şu anda bakımda olan konut kaydı bulunmuyor."
                    selectable={false}
                    showPagination={true}
                  />
                )}
                {/* Grid görünümü ileride eklenebilir */}
              </div>
            </div>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/demo/page.tsx">
'use client'

import { useState } from 'react'
import { Input, Select, Checkbox, RadioButton, TextArea, DatePicker, FileUpload } from '../components/ui'
import { Mail, Lock, User } from 'lucide-react'

export default function Demo() {
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        password: '',
        country: '',
        message: '',
        birthdate: '',
        newsletter: false,
        gender: '',
        files: null as FileList | null
    })

    const countries = [
        { value: 'tr', label: 'Türkiye' },
        { value: 'us', label: 'Amerika' },
        { value: 'uk', label: 'İngiltere' },
        { value: 'de', label: 'Almanya' },
        { value: 'fr', label: 'Fransa' }
    ]

    const genderOptions = [
        { value: 'male', label: 'Erkek' },
        { value: 'female', label: 'Kadın' },
        { value: 'other', label: 'Diğer' }
    ]

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault()
        console.log('Form Data:', formData)
        alert('Form gönderildi! Konsolu kontrol edin.')
    }

    return (
        <div className="min-h-screen bg-background-primary py-10">
            <div className="max-w-4xl mx-auto px-6">
                {/* Header Section */}
                <div className="text-center mb-10">
                    <h1 className="text-4xl font-bold text-text-primary font-helvetica mb-4">
                        Form Component'leri Demo
                    </h1>
                    <div className="w-24 h-1 bg-gradient-gold mx-auto rounded-full mb-6"></div>
                    <p className="text-text-secondary text-lg font-inter max-w-2xl mx-auto">
                        Modern ve kullanıcı dostu form elementlerinin kapsamlı demo sayfası.
                        Tüm component'leri test edebilir ve özelliklerini keşfedebilirsiniz.
                    </p>
                </div>

                {/* Main Form Container */}
                <div className="bg-background-card rounded-xl shadow-card border border-primary-gold/20 overflow-hidden">
                    {/* Form Header */}
                    <div className="bg-gradient-gold p-6 text-center">
                        <h2 className="text-2xl font-semibold text-primary-dark-gray font-helvetica">
                            Kullanıcı Bilgileri Formu
                        </h2>
                        <p className="text-primary-dark-gray/70 mt-2 font-inter">
                            Aşağıdaki formu doldurarak tüm component'leri test edebilirsiniz
                        </p>
                    </div>

                    {/* Form Content */}
                    <div className="p-8">
                        <form onSubmit={handleSubmit} className="space-y-8">
                            {/* Personal Information Section */}
                            <div className="space-y-6">
                                <div className="flex items-center space-x-3 mb-6">
                                    <div className="w-2 h-8 bg-primary-gold rounded-full"></div>
                                    <h3 className="text-xl font-semibold text-text-primary font-helvetica">
                                        Kişisel Bilgiler
                                    </h3>
                                </div>

                                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                    <Input
                                        label="Ad Soyad"
                                        placeholder="Adınızı ve soyadınızı girin"
                                        value={formData.name}
                                        onChange={(e: any) => setFormData({ ...formData, name: e.target.value })}
                                        icon={User}
                                        isRequired
                                        className="bg-background-secondary border-primary-gold/30 text-text-primary placeholder:text-text-secondary"
                                    />

                                    <Input
                                        label="E-posta"
                                        type="email"
                                        placeholder="example@email.com"
                                        value={formData.email}
                                        onChange={(e: any) => setFormData({ ...formData, email: e.target.value })}
                                        icon={Mail}
                                        isRequired
                                        className="bg-background-secondary border-primary-gold/30 text-text-primary placeholder:text-text-secondary"
                                    />
                                </div>

                                <Input
                                    label="Şifre"
                                    type="password"
                                    placeholder="Güçlü bir şifre girin"
                                    value={formData.password}
                                    onChange={(e: any) => setFormData({ ...formData, password: e.target.value })}
                                    icon={Lock}
                                    variant="filled"
                                    helperText="En az 8 karakter, büyük harf, küçük harf ve rakam içermelidir"
                                    isRequired
                                    className="bg-background-secondary border-primary-gold/30 text-text-primary placeholder:text-text-secondary"
                                />

                                <DatePicker
                                    label="Doğum Tarihi"
                                    value={formData.birthdate}
                                    onChange={(e: any) => setFormData({ ...formData, birthdate: e.target.value })}
                                    maxDate={new Date().toISOString().split('T')[0]}
                                    className="bg-background-secondary border-primary-gold/30 text-text-primary"
                                />
                            </div>

                            {/* Location & Preferences Section */}
                            <div className="space-y-6">
                                <div className="flex items-center space-x-3 mb-6">
                                    <div className="w-2 h-8 bg-primary-gold rounded-full"></div>
                                    <h3 className="text-xl font-semibold text-text-primary font-helvetica">
                                        Konum ve Tercihler
                                    </h3>
                                </div>

                                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                    <Select
                                        label="Ülke"
                                        placeholder="Ülkenizi seçin"
                                        options={countries}
                                        value={formData.country}
                                        onChange={(e: any) => setFormData({ ...formData, country: e.target.value })}
                                        isRequired
                                        className="bg-background-secondary border-primary-gold/30 text-text-primary"
                                    />

                                    <div className="space-y-4">
                                        <RadioButton
                                            label="Cinsiyet"
                                            options={genderOptions}
                                            name="gender"
                                            value={formData.gender}
                                            onChange={(e: any) => setFormData({ ...formData, gender: e.target.value })}
                                            direction="horizontal"
                                            className="text-text-primary"
                                        />
                                    </div>
                                </div>
                            </div>

                            {/* Message Section */}
                            <div className="space-y-6">
                                <div className="flex items-center space-x-3 mb-6">
                                    <div className="w-2 h-8 bg-primary-gold rounded-full"></div>
                                    <h3 className="text-xl font-semibold text-text-primary font-helvetica">
                                        Mesaj ve Dosyalar
                                    </h3>
                                </div>

                                <TextArea
                                    label="Mesaj"
                                    placeholder="Mesajınızı yazın..."
                                    value={formData.message}
                                    onChange={(e: any) => setFormData({ ...formData, message: e.target.value })}
                                    maxLength={500}
                                    showCount
                                    helperText="Geri bildirimlerinizi, sorularınızı veya önerilerinizi paylaşın"
                                    className="bg-background-secondary border-primary-gold/30 text-text-primary placeholder:text-text-secondary"
                                />

                                <FileUpload
                                    label="Dosya Yükle"
                                    acceptedTypes={['.pdf', '.doc', '.docx', '.jpg', '.png']}
                                    maxSize={10}
                                    multiple
                                    onFilesChange={(files) => setFormData({ ...formData, files })}
                                    helperText="CV, portfolyo veya diğer belgelerinizi yükleyebilirsiniz (PDF, Word, Resim)"
                                    className="bg-background-secondary border-primary-gold/30"
                                />
                            </div>

                            {/* Agreements Section */}
                            <div className="space-y-4 pt-6 border-t border-primary-gold/20">
                                <Checkbox
                                    label="E-posta bültenine abone olmak istiyorum"
                                    checked={formData.newsletter}
                                    onChange={(e) => setFormData({ ...formData, newsletter: e.target.checked })}
                                    helperText="Haftalık güncellemeler, yeni özellikler ve özel fırsatlar hakkında bilgi alın"
                                    className="text-text-primary"
                                />

                                <Checkbox
                                    label="Kullanım koşullarını ve gizlilik politikasını okudum, kabul ediyorum"
                                    helperText="Devam etmek için bu alanı işaretlemeniz gerekmektedir"
                                    className="text-text-primary"
                                />
                            </div>

                            {/* Submit Section */}
                            <div className="pt-8 border-t border-primary-gold/20">
                                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                                    <button
                                        type="button"
                                        className="px-8 py-3 bg-transparent border border-primary-gold text-text-accent hover:bg-primary-gold hover:text-primary-dark-gray transition-all duration-300 rounded-lg font-semibold font-helvetica"
                                    >
                                        Önizleme
                                    </button>
                                    <button
                                        type="submit"
                                        className="px-8 py-3 bg-gradient-gold text-primary-dark-gray hover:opacity-90 transition-all duration-300 rounded-lg font-semibold font-helvetica shadow-lg"
                                    >
                                        Formu Gönder
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                {/* Footer Info */}
                <div className="mt-12 text-center">
                    <p className="text-text-secondary font-inter">
                        Bu demo sayfası, NinetyNineAdmin projesinin form component'lerini göstermektedir
                    </p>
                    <div className="flex justify-center items-center space-x-2 mt-4">
                        <div className="w-2 h-2 bg-primary-gold rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/60 rounded-full"></div>
                        <div className="w-2 h-2 bg-primary-gold/30 rounded-full"></div>
                    </div>
                </div>
            </div>
        </div>
    )
}
</file>

<file path="src/hooks/useFamilyMembers.ts">
import { useState, useCallback, useEffect } from 'react';
import { familyMemberService } from '@/services/family-member.service';
import { FamilyMember, CreateFamilyMemberDto, UpdateFamilyMemberDto } from '@/services/types/family-member.types';

interface UseFamilyMembersProps {
    userId?: string;
    autoFetch?: boolean;
}

interface UseFamilyMembersReturn {
    familyMembers: FamilyMember[];
    loading: boolean;
    error: string | null;
    saving: boolean;
    saveError: string | null;
    fetchFamilyMembers: (userId: string) => Promise<void>;
    createFamilyMember: (userId: string, data: CreateFamilyMemberDto) => Promise<FamilyMember>;
    updateFamilyMember: (id: string, data: UpdateFamilyMemberDto) => Promise<FamilyMember>;
    deleteFamilyMember: (id: string) => Promise<void>;
    refreshData: () => Promise<void>;
    clearError: () => void;
    clearSaveError: () => void;
}

export const useFamilyMembers = ({
    userId,
    autoFetch = true
}: UseFamilyMembersProps = {}): UseFamilyMembersReturn => {
    const [familyMembers, setFamilyMembers] = useState<FamilyMember[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [saving, setSaving] = useState(false);
    const [saveError, setSaveError] = useState<string | null>(null);

    const fetchFamilyMembers = useCallback(async (userIdParam: string) => {
        try {
            setLoading(true);
            setError(null);

            const response = await familyMemberService.getFamilyMembersByUserId(userIdParam);
            
            if (response?.data) {
                // Transform isMinor based on age if not provided by API
                const transformedData = response.data.map(member => ({
                    ...member,
                    isMinor: member.isMinor ?? member.age < 18
                }));
                setFamilyMembers(transformedData);
            } else {
                setFamilyMembers([]);
            }

        } catch (error: unknown) {
            console.error('Failed to fetch family members:', error);
            setError(error instanceof Error ? error.message : 'Aile üyeleri yüklenirken bir hata oluştu.');
            setFamilyMembers([]); // Clear data on error
        } finally {
            setLoading(false);
        }
    }, []);

    const createFamilyMember = useCallback(async (userIdParam: string, data: CreateFamilyMemberDto): Promise<FamilyMember> => {
        try {
            setSaving(true);
            setSaveError(null);

            const response = await familyMemberService.createFamilyMemberForUser(userIdParam, data);
            
            if (response?.data) {
                const newMember = {
                    ...response.data,
                    isMinor: response.data.isMinor ?? response.data.age < 18
                };
                
                // Add new family member to the list
                setFamilyMembers(prevMembers => [...prevMembers, newMember]);
                return newMember;
            }

            throw new Error('Aile üyesi oluşturulamadı');

        } catch (error: unknown) {
            console.error('Failed to create family member:', error);
            setSaveError(error instanceof Error ? error.message : 'Aile üyesi oluşturulurken bir hata oluştu.');
            throw error;
        } finally {
            setSaving(false);
        }
    }, []);

    const updateFamilyMember = useCallback(async (id: string, data: UpdateFamilyMemberDto): Promise<FamilyMember> => {
        try {
            setSaving(true);
            setSaveError(null);

            const response = await familyMemberService.updateFamilyMember(id, data);
            
            if (response?.data) {
                const updatedMember = {
                    ...response.data,
                    isMinor: response.data.isMinor ?? response.data.age < 18
                };
                
                // Update family member in the list
                setFamilyMembers(prevMembers => 
                    prevMembers.map(member => 
                        member.id === id ? updatedMember : member
                    )
                );
                return updatedMember;
            }

            throw new Error('Aile üyesi güncellenemedi');

        } catch (error: unknown) {
            console.error('Failed to update family member:', error);
            setSaveError(error instanceof Error ? error.message : 'Aile üyesi güncellenirken bir hata oluştu.');
            throw error;
        } finally {
            setSaving(false);
        }
    }, []);

    const deleteFamilyMember = useCallback(async (id: string): Promise<void> => {
        try {
            setSaving(true);
            setSaveError(null);

            await familyMemberService.deleteFamilyMember(id);
            
            // Remove family member from the list
            setFamilyMembers(prevMembers => 
                prevMembers.filter(member => member.id !== id)
            );

        } catch (error: unknown) {
            console.error('Failed to delete family member:', error);
            setSaveError(error instanceof Error ? error.message : 'Aile üyesi silinirken bir hata oluştu.');
            throw error;
        } finally {
            setSaving(false);
        }
    }, []);

    const refreshData = useCallback(async () => {
        if (userId) {
            await fetchFamilyMembers(userId);
        }
    }, [userId, fetchFamilyMembers]);

    const clearError = useCallback(() => {
        setError(null);
    }, []);

    const clearSaveError = useCallback(() => {
        setSaveError(null);
    }, []);

    // Auto-fetch when userId changes
    useEffect(() => {
        if (autoFetch && userId) {
            fetchFamilyMembers(userId);
        }
    }, [userId, autoFetch, fetchFamilyMembers]);

    return {
        familyMembers,
        loading,
        error,
        saving,
        saveError,
        fetchFamilyMembers,
        createFamilyMember,
        updateFamilyMember,
        deleteFamilyMember,
        refreshData,
        clearError,
        clearSaveError
    };
};
</file>

<file path="src/hooks/useMyProperties.ts">
import { useState, useCallback, useEffect } from 'react';
import propertyService from '@/services/property.service';
import { Property } from '@/services/types/property.types';

interface UseMyPropertiesProps {
    ownerId?: string;
    autoFetch?: boolean;
}

interface UseMyPropertiesReturn {
    properties: Property[];
    loading: boolean;
    error: string | null;
    fetchProperties: (ownerIdParam?: string) => Promise<void>;
    refreshData: () => Promise<void>;
    clearError: () => void;
}

export const useMyProperties = ({
    ownerId,
    autoFetch = true
}: UseMyPropertiesProps = {}): UseMyPropertiesReturn => {
    const [properties, setProperties] = useState<Property[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const fetchProperties = useCallback(async (ownerIdParam?: string) => {
        try {
            setLoading(true);
            setError(null);

            const targetOwnerId = ownerIdParam || ownerId;
            
            if (targetOwnerId) {
                const properties = await propertyService.getPropertiesByOwner(targetOwnerId);
                setProperties(properties || []);
            } else {
                const response = await propertyService.getMyProperties();
                if (response?.data) {
                    setProperties(response.data);
                } else {
                    setProperties([]);
                }
            }

        } catch (error: unknown) {
            console.error('Failed to fetch properties:', error);
            setError(error instanceof Error ? error.message : 'Konut bilgileri yüklenirken bir hata oluştu.');
            setProperties([]); // Clear data on error
        } finally {
            setLoading(false);
        }
    }, [ownerId]);

    const refreshData = useCallback(async () => {
        await fetchProperties();
    }, [fetchProperties]);

    const clearError = useCallback(() => {
        setError(null);
    }, []);

    // Auto-fetch when ownerId changes or on mount if enabled
    useEffect(() => {
        if (autoFetch && (ownerId || !ownerId)) {
            fetchProperties();
        }
    }, [autoFetch, ownerId, fetchProperties]);

    return {
        properties,
        loading,
        error,
        fetchProperties,
        refreshData,
        clearError
    };
};
</file>

<file path="src/hooks/useResidentTickets.ts">
'use client';

import { useState, useEffect, useCallback } from 'react';
import { ticketService, Ticket } from '@/services/ticket.service';

export interface UseResidentTicketsOptions {
    residentId: string;
    autoFetch?: boolean;
}

export interface UseResidentTicketsReturn {
    tickets: Ticket[];
    loading: boolean;
    error: string | null;
    refreshTickets: () => Promise<void>;
}

export function useResidentTickets({
    residentId,
    autoFetch = true
}: UseResidentTicketsOptions): UseResidentTicketsReturn {
    const [tickets, setTickets] = useState<Ticket[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const fetchTickets = useCallback(async () => {
        if (!residentId) {
            setError('Resident ID is required');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            console.log(`🎫 Fetching tickets for resident: ${residentId}`);
            
            // API returns direct array without data wrapper
            const response = await ticketService.getTicketsByUserId(residentId);
            
            // Response is already an array, not wrapped in data field
            const ticketsArray = Array.isArray(response) ? response : [];
            
            setTickets(ticketsArray);
            
            console.log(`✅ Fetched ${ticketsArray.length} tickets for resident ${residentId}`, ticketsArray);
        } catch (err: any) {
            const errorMessage = err?.message || 'Talepler alınamadı';
            setError(errorMessage);
            console.error('❌ Error fetching resident tickets:', err);
            setTickets([]);
        } finally {
            setLoading(false);
        }
    }, [residentId]);

    const refreshTickets = useCallback(async () => {
        await fetchTickets();
    }, [fetchTickets]);

    // Auto-fetch on mount and when residentId changes
    useEffect(() => {
        if (autoFetch && residentId) {
            fetchTickets();
        }
    }, [autoFetch, residentId, fetchTickets]);

    return {
        tickets,
        loading,
        error,
        refreshTickets
    };
}

export default useResidentTickets;
</file>

<file path="src/hooks/useTicketStats.ts">
import { useState, useEffect } from 'react';
import { ticketService } from '../services/ticket.service';

interface TicketStats {
    currentMonthCount: number;
    previousMonthCount: number;
    percentageChange: number;
    changeDirection: 'increase' | 'decrease';
    currentMonthName: string;
    previousMonthName: string;
}

interface UseTicketStatsReturn {
    stats: TicketStats | null;
    loading: boolean;
    error: string | null;
}

export const useTicketStats = (): UseTicketStatsReturn => {
    const [stats, setStats] = useState<TicketStats | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchTicketStats = async () => {
            try {
                setLoading(true);
                setError(null);
                
                const data = await ticketService.getMonthlyStats();
                console.log('Ticket stats response:', data);
                setStats(data);
            } catch (err: any) {
                console.error('Error fetching ticket stats:', err);
                setError(err.response?.data?.message || 'Talepler istatistikleri yüklenirken hata oluştu');
            } finally {
                setLoading(false);
            }
        };

        fetchTicketStats();
    }, []);

    return { stats, loading, error };
};
</file>

<file path="src/hooks/useUnitDetail.ts">
import { useState, useEffect, useCallback } from 'react';
import { unitsService } from '@/services/units.service';
import { 
  UnitDetail, 
  UpdateBasicInfoDto, 
  UpdateNotesDto 
} from '@/services/types/unit-detail.types';

interface UseUnitDetailResult {
  unit: UnitDetail | null;
  loading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
  updateBasicInfo: (data: UpdateBasicInfoDto) => Promise<void>;
  updateNotes: (data: UpdateNotesDto) => Promise<void>;
}

// Mock data transformer - converts API response to UnitDetail format
const transformPropertyToUnitDetail = (property: any): UnitDetail => {
  // This is a mock transformer - replace with actual API response mapping
  return {
    id: property.id,
    apartmentNumber: property.propertyNumber || 'A-101',
    block: property.blockNumber || 'A',
    floor: property.floor || 1,
    type: property.type || 'RESIDENCE',
    area: property.area || 120,
    status: property.status === 'OCCUPIED' ? 'active' : 
            property.status === 'UNDER_MAINTENANCE' ? 'maintenance' : 
            property.status === 'AVAILABLE' ? 'inactive' : 'active',
    createdDate: property.createdAt || new Date().toISOString(),
    lastUpdated: property.updatedAt || new Date().toISOString(),
    basicInfo: {
      title: 'Konut Temel Bilgileri',
      icon: '🏠',
      data: {
        apartmentNumber: {
          label: 'Daire No',
          value: property.propertyNumber || 'A-101',
          type: 'text',
          required: true
        },
        block: {
          label: 'Blok',
          value: property.blockNumber || 'A Blok',
          type: 'select',
          options: ['A Blok', 'B Blok', 'C Blok', 'D Blok'],
          required: true
        },
        floor: {
          label: 'Kat',
          value: property.floor || 1,
          type: 'number',
          min: -1,
          max: 20,
          required: true
        },
        apartmentType: {
          label: 'Daire Tipi',
          value: `${property.rooms || '3+1'} (${property.area || 120}m²)`,
          type: 'select',
          options: ['1+0 (45m²)', '1+1 (65m²)', '2+1 (85m²)', '3+1 (120m²)', '4+1 (150m²)', '5+1 (180m²)'],
          required: true
        },
        area: {
          label: 'Alan (m²)',
          value: property.area || 120,
          type: 'number',
          min: 30,
          max: 500,
          required: true
        },
        status: {
          label: 'Durum',
          value: 'active',
          type: 'select',
          options: [
            { value: 'active', label: 'Aktif', color: 'green' },
            { value: 'inactive', label: 'Pasif', color: 'red' },
            { value: 'maintenance', label: 'Bakımda', color: 'orange' },
            { value: 'renovation', label: 'Tadilat', color: 'blue' }
          ],
          required: true
        }
      }
    },
    ownerInfo: {
      title: 'Malik Bilgileri',
      icon: '👤',
      data: {
        fullName: {
          label: 'Ad Soyad',
          value: property.owner ? `${property.owner.firstName} ${property.owner.lastName}` : '',
          type: 'text',
          required: true,
          validation: 'name'
        },
        phone: {
          label: 'Telefon',
          value: property.owner?.phone || '',
          type: 'tel',
          format: '+964 XXX XXX XXXX',
          required: true,
          validation: 'iraq_phone'
        },
        email: {
          label: 'E-posta',
          value: property.owner?.email || '',
          type: 'email',
          required: false,
          validation: 'email'
        },
        nationalId: {
          label: 'Kimlik No',
          value: '',
          type: 'text',
          required: false,
          validation: 'national_id'
        },
        address: {
          label: 'Adres',
          value: '',
          type: 'textarea',
          required: false
        },
        ownershipType: {
          label: 'Sahiplik Türü',
          value: 'owner',
          type: 'select',
          options: [
            { value: 'owner', label: 'Malik', color: 'blue' },
            { value: 'investor', label: 'Yatırımcı', color: 'purple' },
            { value: 'inherited', label: 'Miras', color: 'green' }
          ],
          required: true
        }
      }
    },
    tenantInfo: property.tenant ? {
      title: 'Kiracı Bilgileri',
      icon: '🏠',
      isRented: true,
      data: {
        isRented: {
          label: 'Kiralık Daire',
          value: true,
          type: 'checkbox'
        },
        tenantName: {
          label: 'Kiracı Adı',
          value: `${property.tenant.firstName} ${property.tenant.lastName}`,
          type: 'text',
          required: true,
          dependsOn: 'isRented',
          validation: 'name'
        },
        tenantPhone: {
          label: 'Kiracı Telefon',
          value: property.tenant.phone || '',
          type: 'tel',
          format: '+964 XXX XXX XXXX',
          required: true,
          dependsOn: 'isRented',
          validation: 'iraq_phone'
        },
        tenantEmail: {
          label: 'Kiracı E-posta',
          value: property.tenant.email || '',
          type: 'email',
          required: false,
          dependsOn: 'isRented'
        },
        leaseStartDate: {
          label: 'Kira Başlangıç',
          value: '2024-01-01',
          type: 'date',
          required: true,
          dependsOn: 'isRented'
        },
        leaseEndDate: {
          label: 'Kira Bitiş',
          value: '2024-12-31',
          type: 'date',
          required: true,
          dependsOn: 'isRented'
        },
        monthlyRent: {
          label: 'Aylık Kira (IQD)',
          value: 800000,
          type: 'currency',
          currency: 'IQD',
          required: true,
          dependsOn: 'isRented'
        },
        deposit: {
          label: 'Depozit (IQD)',
          value: 1600000,
          type: 'currency',
          currency: 'IQD',
          required: false,
          dependsOn: 'isRented'
        }
      }
    } : undefined,
    residents: [],
    billingInfo: {
      title: 'Fatura Ayarları',
      icon: '💰',
      data: {
        monthlyDues: {
          label: 'Aylık Aidat (IQD)',
          value: 150000,
          type: 'currency',
          currency: 'IQD',
          required: true
        },
        electricityMeterNo: {
          label: 'Elektrik Sayacı No',
          value: '',
          type: 'text',
          required: false,
          validation: 'meter_number'
        },
        waterMeterNo: {
          label: 'Su Sayacı No',
          value: '',
          type: 'text',
          required: false,
          validation: 'meter_number'
        },
        gasMeterNo: {
          label: 'Gaz Sayacı No',
          value: '',
          type: 'text',
          required: false,
          validation: 'meter_number'
        },
        internetConnection: {
          label: 'İnternet Bağlantısı',
          value: true,
          type: 'checkbox'
        },
        parkingSpace: {
          label: 'Otopark',
          value: '',
          type: 'text',
          required: false
        }
      }
    },
    financialSummary: {
      title: 'Finansal Özet',
      icon: '📊',
      data: {
        currentBalance: {
          label: 'Güncel Bakiye',
          value: 0,
          type: 'currency',
          currency: 'IQD',
          status: 'credit'
        },
        lastPaymentDate: {
          label: 'Son Ödeme',
          value: new Date().toISOString(),
          type: 'datetime'
        },
        lastPaymentAmount: {
          label: 'Son Ödeme Tutarı',
          value: 150000,
          type: 'currency',
          currency: 'IQD'
        },
        overdueAmount: {
          label: 'Gecikmiş Tutar',
          value: 0,
          type: 'currency',
          currency: 'IQD',
          status: 'overdue'
        },
        nextDueDate: {
          label: 'Sonraki Vade',
          value: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],
          type: 'date'
        }
      }
    },
    consumptionData: {
      title: 'Tüketim Verileri',
      icon: '⚡',
      period: 'monthly',
      data: {}
    },
    maintenanceHistory: [],
    visitorHistory: [],
    notes: {
      title: 'Notlar ve Özel Durumlar',
      icon: '📝',
      data: {
        generalNotes: {
          label: 'Genel Notlar',
          value: '',
          type: 'textarea',
          maxLength: 1000
        },
        maintenanceNotes: {
          label: 'Bakım Notları',
          value: '',
          type: 'textarea',
          maxLength: 1000
        },
        specialRequests: {
          label: 'Özel İstekler',
          value: '',
          type: 'textarea',
          maxLength: 1000
        },
        accessRestrictions: {
          label: 'Erişim Kısıtlamaları',
          value: '',
          type: 'textarea',
          maxLength: 500
        }
      }
    },
    documents: [],
    permissions: {
      canEdit: true,
      canDelete: false,
      canViewFinancials: true,
      canManageResidents: true,
      canAccessDocuments: true,
      role: 'admin'
    },
    systemInfo: {
      createdBy: 'System Admin',
      createdDate: property.createdAt || new Date().toISOString(),
      lastModifiedBy: 'Apartment Manager',
      lastModifiedDate: property.updatedAt || new Date().toISOString(),
      version: '1.0',
      syncStatus: 'synced',
      backupDate: new Date().toISOString()
    }
  };
};

export function useUnitDetail(unitId: string | undefined): UseUnitDetailResult {
  const [unit, setUnit] = useState<UnitDetail | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchUnit = useCallback(async () => {
    if (!unitId) return;

    setLoading(true);
    setError(null);

    try {
      const response = await unitsService.getPropertyById(unitId);
      if (response && response.data) {
        const transformedUnit = transformPropertyToUnitDetail(response.data);
        setUnit(transformedUnit);
      }
    } catch (err) {
      setError('Konut detayı yüklenemedi');
      console.error('Error fetching unit detail:', err);
    } finally {
      setLoading(false);
    }
  }, [unitId]);

  useEffect(() => {
    fetchUnit();
  }, [fetchUnit]);

  const refetch = async () => {
    await fetchUnit();
  };

  const updateBasicInfo = async (data: UpdateBasicInfoDto) => {
    if (!unitId) return;

    try {
      setLoading(true);
      // API call to update basic info
      // await unitsService.updateProperty(unitId, data);
      
      // For now, update local state
      setUnit(prev => prev ? {
        ...prev,
        apartmentNumber: data.apartmentNumber || prev.apartmentNumber,
        block: data.block || prev.block,
        floor: data.floor !== undefined ? data.floor : prev.floor,
        type: data.apartmentType || prev.type,
        area: data.area !== undefined ? data.area : prev.area,
        status: data.status || prev.status,
        lastUpdated: new Date().toISOString()
      } : null);
    } catch (err) {
      setError('Bilgiler güncellenemedi');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const updateNotes = async (data: UpdateNotesDto) => {
    if (!unitId || !unit) return;

    try {
      setLoading(true);
      // API call to update notes
      // await unitsService.updatePropertyNotes(unitId, data);
      
      // For now, update local state
      setUnit(prev => prev ? {
        ...prev,
        notes: {
          ...prev.notes,
          data: {
            generalNotes: data.generalNotes !== undefined ? 
              { ...prev.notes.data.generalNotes!, value: data.generalNotes } : 
              prev.notes.data.generalNotes,
            maintenanceNotes: data.maintenanceNotes !== undefined ? 
              { ...prev.notes.data.maintenanceNotes!, value: data.maintenanceNotes } : 
              prev.notes.data.maintenanceNotes,
            specialRequests: data.specialRequests !== undefined ? 
              { ...prev.notes.data.specialRequests!, value: data.specialRequests } : 
              prev.notes.data.specialRequests,
            accessRestrictions: data.accessRestrictions !== undefined ? 
              { ...prev.notes.data.accessRestrictions!, value: data.accessRestrictions } : 
              prev.notes.data.accessRestrictions
          }
        },
        lastUpdated: new Date().toISOString()
      } : null);
    } catch (err) {
      setError('Notlar güncellenemedi');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  return {
    unit,
    loading,
    error,
    refetch,
    updateBasicInfo,
    updateNotes
  };
}
</file>

<file path="src/hooks/useUnitsActions.ts">
import { useState, useCallback } from 'react';
import { unitsService, Property } from '@/services';
import { useToast } from '@/hooks/useToast';

interface UseUnitsActionsOptions {
    onDeleteSuccess?: (deletedUnit: Property) => void;
    onDeleteError?: (error: any, unit: Property) => void;
    onUpdateSuccess?: (updatedUnit: Property) => void;
    onUpdateError?: (error: any, unit: Property) => void;
    onRefreshNeeded?: () => void;
}

interface UseUnitsActionsReturn {
    // States
    isDeleting: boolean;
    isUpdating: boolean;
    error: string | null;
    confirmationDialog: {
        isOpen: boolean;
        unit: Property | null;
        type: 'delete' | null;
    };

    // Actions
    showDeleteConfirmation: (unit: Property) => void;
    hideConfirmation: () => void;
    confirmDelete: () => Promise<void>;
    updateUnit: (id: string, data: Partial<Property>) => Promise<void>;
}

export function useUnitsActions(options: UseUnitsActionsOptions = {}): UseUnitsActionsReturn {
    const { 
        onDeleteSuccess, 
        onDeleteError, 
        onUpdateSuccess, 
        onUpdateError,
        onRefreshNeeded 
    } = options;

    const [isDeleting, setIsDeleting] = useState(false);
    const [isUpdating, setIsUpdating] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [confirmationDialog, setConfirmationDialog] = useState<{
        isOpen: boolean;
        unit: Property | null;
        type: 'delete' | null;
    }>({
        isOpen: false,
        unit: null,
        type: null
    });

    const { addToast } = useToast();

    const showDeleteConfirmation = useCallback((unit: Property) => {
        setConfirmationDialog({
            isOpen: true,
            unit,
            type: 'delete'
        });
    }, []);

    const hideConfirmation = useCallback(() => {
        setConfirmationDialog({
            isOpen: false,
            unit: null,
            type: null
        });
        setError(null);
    }, []);

    const confirmDelete = useCallback(async () => {
        if (!confirmationDialog.unit) return;

        const unit = confirmationDialog.unit;
        setIsDeleting(true);
        setError(null);

        try {
            await unitsService.deleteUnit(String(unit.id));
            
            // Success feedback
            addToast({
                type: 'success',
                title: 'Başarılı',
                message: `${unit.propertyNumber || unit.name || 'Konut'} başarıyla silindi`
            });

            // Hide confirmation dialog
            hideConfirmation();

            // Trigger callbacks
            onDeleteSuccess?.(unit);
            onRefreshNeeded?.();

        } catch (err: any) {
            console.error('❌ Failed to delete unit:', err);
            
            const errorMessage = err.response?.data?.message || 
                               err.message || 
                               'Konut silinirken bir hata oluştu';

            setError(errorMessage);
            
            addToast({
                type: 'error',
                title: 'Hata',
                message: errorMessage
            });

            onDeleteError?.(err, unit);
        } finally {
            setIsDeleting(false);
        }
    }, [confirmationDialog.unit, addToast, hideConfirmation, onDeleteSuccess, onDeleteError, onRefreshNeeded]);

    const updateUnit = useCallback(async (id: string, data: Partial<Property>) => {
        setIsUpdating(true);
        setError(null);

        try {
            const response = await unitsService.updateUnit(id, data);
            const updatedUnit = response.data;

            // Success feedback
            addToast({
                type: 'success',
                title: 'Başarılı',
                message: `${data.propertyNumber || data.name || 'Konut'} başarıyla güncellendi`
            });

            // Trigger callbacks
            onUpdateSuccess?.(updatedUnit);
            onRefreshNeeded?.();

        } catch (err: any) {
            console.error('❌ Failed to update unit:', err);
            
            const errorMessage = err.response?.data?.message || 
                               err.message || 
                               'Konut güncellenirken bir hata oluştu';

            setError(errorMessage);
            
            addToast({
                type: 'error',
                title: 'Hata',
                message: errorMessage
            });

            onUpdateError?.(err, { id, ...data } as Property);
        } finally {
            setIsUpdating(false);
        }
    }, [addToast, onUpdateSuccess, onUpdateError, onRefreshNeeded]);

    return {
        // States
        isDeleting,
        isUpdating,
        error,
        confirmationDialog,

        // Actions
        showDeleteConfirmation,
        hideConfirmation,
        confirmDelete,
        updateUnit
    };
}
</file>

<file path="src/services/core/types.ts">
// Core Types - Clean Architecture Domain Layer
export interface BaseEntity {
    id: string | number;
    createdAt: string;
    updatedAt: string;
}

export interface ApiResponse<T = any> {
    results: { results: any; };
    pagination: { total: number; page: number; limit: number; totalPages: number; };
    count: ApiResponse<{ count: number; }> | PromiseLike<ApiResponse<{ count: number; }>>;
    data: T;
    message?: string;
    success: boolean;
    status: number;
}

export interface PaginatedResponse<T = any> {
    data: any;
    pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
    };
    total: number;
    page: number;
    limit: number;
    totalPages: number;
    success?: boolean;
    message?: string;
}

export interface ApiError {
    message: string;
    code?: string;
    status?: number;
    details?: Record<string, any>;
}

export interface RequestConfig {
    timeout?: number;
    retries?: number;
    cache?: boolean;
    skipAuth?: boolean;
}

export interface FilterParams {
    page?: number;
    limit?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
    [key: string]: any;
}

export interface LoadingState {
    isLoading: boolean;
    error: string | null;
}

export type ServiceMethod<TParams = any, TResult = any> = (
    params?: TParams
) => Promise<TResult>;

export type Repository<TEntity, TCreateDto = Partial<TEntity>, TUpdateDto = Partial<TEntity>> = {
    getAll: (params?: FilterParams) => Promise<PaginatedResponse<TEntity>>;
    getById: (id: string | number) => Promise<ApiResponse<TEntity>>;
    create: (data: TCreateDto) => Promise<ApiResponse<TEntity>>;
    update: (id: string | number, data: TUpdateDto) => Promise<ApiResponse<TEntity>>;
    delete: (id: string | number) => Promise<ApiResponse<void>>;
};
</file>

<file path="src/services/types/announcement.types.ts">
// Announcement Types - Domain Layer
import { ApiResponse, PaginatedResponse, FilterParams } from '../core/types';

// Enums matching API-99CLUB schema
export enum AnnouncementType {
    GENERAL = 'GENERAL',
    MAINTENANCE = 'MAINTENANCE',
    EMERGENCY = 'EMERGENCY',
    EVENT = 'EVENT',
    RULE = 'RULE',
    MEETING = 'MEETING',
    OTHER = 'OTHER'
}

export enum AnnouncementStatus {
    DRAFT = 'DRAFT',
    PUBLISHED = 'PUBLISHED',
    ARCHIVED = 'ARCHIVED'
}

// Base interfaces matching API schema
export interface CreateAnnouncementDto {
    title: string;
    content: string;
    type?: AnnouncementType;
    status?: AnnouncementStatus;
    publishDate?: string;
    expiryDate?: string;
    isPinned?: boolean;
    isEmergency?: boolean;
    imageUrl?: string;
    propertyIds?: string[];
    createdById?: string;
}

export interface UpdateAnnouncementDto {
    title?: string;
    content?: string;
    type?: AnnouncementType;
    status?: AnnouncementStatus;
    publishDate?: string;
    expiryDate?: string;
    isPinned?: boolean;
    isEmergency?: boolean;
    imageUrl?: string;
    propertyIds?: string[];
    updatedById?: string;
}

export interface ResponseUserDto {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    avatar?: string;
    role?: string;
}

export interface ResponsePropertyDto {
    id: string;
    name: string;
    address?: string;
    type?: string;
    status?: string;
}

export interface Announcement {
    id: string;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    title: string;
    content: string;
    type: AnnouncementType;
    status: AnnouncementStatus;
    publishDate?: string;
    expiryDate?: string;
    isPinned: boolean;
    isEmergency: boolean;
    imageUrl?: string;
    createdBy?: ResponseUserDto;
    properties?: ResponsePropertyDto[];
}

// Filter parameters for announcements
export interface AnnouncementFilterParams extends FilterParams {
    status?: AnnouncementStatus | AnnouncementStatus[];
    type?: AnnouncementType | AnnouncementType[];
    isEmergency?: boolean;
    isPinned?: boolean;
    propertyId?: string;
    userId?: string;
    publishDateFrom?: string;
    publishDateTo?: string;
    expiryDateFrom?: string;
    expiryDateTo?: string;
    createdById?: string;
}

// Response types
export interface AnnouncementListResponse extends PaginatedResponse<Announcement> {}

// Bulk action types
export interface AnnouncementBulkActionDto {
    ids: string[];
    action: 'publish' | 'archive' | 'delete' | 'pin' | 'unpin' | 'mark_emergency' | 'unmark_emergency';
    data?: {
        status?: AnnouncementStatus;
        isPinned?: boolean;
        isEmergency?: boolean;
    };
}

export interface AnnouncementBulkActionResponse {
    success: boolean;
    affectedCount: number;
    message: string;
    errors?: string[];
}

// Stats interfaces
export interface AnnouncementStats {
    total: number;
    draft: number;
    published: number;
    archived: number;
    emergency: number;
    pinned: number;
    expiringSoon: number;
    byType: {
        [key in AnnouncementType]: number;
    };
}

// Upload response for images
export interface AnnouncementImageUploadResponse {
    success: boolean;
    imageUrl: string;
    message?: string;
}

// Form data interfaces for UI
export interface AnnouncementFormData {
    title: string;
    content: string;
    type: AnnouncementType;
    status: AnnouncementStatus;
    publishDate?: Date;
    expiryDate?: Date;
    isPinned: boolean;
    isEmergency: boolean;
    image?: File;
    imageUrl?: string;
    propertyIds: string[];
}

// Display interfaces
export interface AnnouncementDisplayData extends Announcement {
    statusLabel: string;
    statusColor: 'primary' | 'gold' | 'secondary' | 'red';
    typeLabel: string;
    typeColor: 'primary' | 'gold' | 'secondary' | 'accent';
    isExpired: boolean;
    isExpiringSoon: boolean;
    daysUntilExpiry?: number;
    authorName: string;
    propertiesCount: number;
    canEdit: boolean;
    canDelete: boolean;
    canPublish: boolean;
    canArchive: boolean;
}

// Search and sort options
export interface AnnouncementSortConfig {
    key: keyof Announcement;
    direction: 'asc' | 'desc';
}

export const ANNOUNCEMENT_TYPE_OPTIONS = [
    { value: AnnouncementType.GENERAL, label: 'Genel', color: 'secondary' },
    { value: AnnouncementType.MAINTENANCE, label: 'Bakım', color: 'gold' },
    { value: AnnouncementType.EMERGENCY, label: 'Acil Durum', color: 'red' },
    { value: AnnouncementType.EVENT, label: 'Etkinlik', color: 'primary' },
    { value: AnnouncementType.RULE, label: 'Kural', color: 'accent' },
    { value: AnnouncementType.MEETING, label: 'Toplantı', color: 'secondary' },
    { value: AnnouncementType.OTHER, label: 'Diğer', color: 'secondary' }
] as const;

export const ANNOUNCEMENT_STATUS_OPTIONS = [
    { value: AnnouncementStatus.DRAFT, label: 'Taslak', color: 'secondary' },
    { value: AnnouncementStatus.PUBLISHED, label: 'Yayında', color: 'primary' },
    { value: AnnouncementStatus.ARCHIVED, label: 'Arşiv', color: 'accent' }
] as const;

// Helper functions for display
export function getAnnouncementTypeLabel(type: AnnouncementType): string {
    return ANNOUNCEMENT_TYPE_OPTIONS.find(option => option.value === type)?.label || type;
}

export function getAnnouncementStatusLabel(status: AnnouncementStatus): string {
    return ANNOUNCEMENT_STATUS_OPTIONS.find(option => option.value === status)?.label || status;
}

export function getAnnouncementTypeColor(type: AnnouncementType): string {
    return ANNOUNCEMENT_TYPE_OPTIONS.find(option => option.value === type)?.color || 'secondary';
}

export function getAnnouncementStatusColor(status: AnnouncementStatus): string {
    return ANNOUNCEMENT_STATUS_OPTIONS.find(option => option.value === status)?.color || 'secondary';
}

export function isAnnouncementExpired(announcement: Announcement): boolean {
    if (!announcement.expiryDate) return false;
    return new Date(announcement.expiryDate) < new Date();
}

export function isAnnouncementExpiringSoon(announcement: Announcement): boolean {
    if (!announcement.expiryDate) return false;
    const expiryDate = new Date(announcement.expiryDate);
    const now = new Date();
    const threeDaysFromNow = new Date(now.getTime() + (3 * 24 * 60 * 60 * 1000));
    return expiryDate > now && expiryDate <= threeDaysFromNow;
}

export function getDaysUntilExpiry(announcement: Announcement): number | undefined {
    if (!announcement.expiryDate) return undefined;
    const expiryDate = new Date(announcement.expiryDate);
    const now = new Date();
    const diffTime = expiryDate.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
}
</file>

<file path="src/services/types/billing.types.ts">
// Billing and Payment Types for API Integration

// Bill Types
export type BillType = 'DUES' | 'MAINTENANCE' | 'UTILITY' | 'PENALTY' | 'OTHER';
export type BillStatus = 'PENDING' | 'PARTIALLY_PAID' | 'PAID' | 'OVERDUE' | 'CANCELLED';

// Payment Types
export type PaymentMethod = 'CASH' | 'CREDIT_CARD' | 'BANK_TRANSFER' | 'DIRECT_DEBIT' | 'ONLINE_PAYMENT' | 'MOBILE_PAYMENT' | 'CHECK' | 'OTHER';
export type PaymentStatus = 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED' | 'REFUNDED' | 'CANCELED' | 'DISPUTED';

// Bill Interfaces
export interface CreateBillDto {
  title: string;
  amount: number;
  dueDate: string; // ISO string
  description?: string;
  billType: BillType;
  status: BillStatus;
  penaltyStartDate?: string; // ISO string
  isPenaltyApplied?: boolean;
  documentNumber?: string;
  propertyId: string;
  assignedToId: string;
}

export interface ResponseBillDto extends CreateBillDto {
  id: string;
  createdAt: string;
  updatedAt: string;
  deletedAt?: string;
}

export interface UpdateBillDto extends Partial<CreateBillDto> {}

// Payment Interfaces
export interface CreatePaymentDto {
  amount: number;
  paymentMethod: PaymentMethod;
  status?: PaymentStatus;
  paymentDate?: string; // ISO string
  transactionId?: string;
  receiptNumber?: string;
  description?: string;
  notes?: string;
  paidById?: string;
  receivedById?: string;
  billId: string;
}

export interface ResponsePaymentDto extends CreatePaymentDto {
  id: string;
  createdAt: string;
  updatedAt: string;
  deletedAt?: string;
  status: PaymentStatus;
}

export interface UpdatePaymentDto extends Partial<CreatePaymentDto> {}

// Form Types for UI
export interface BillFormData {
  title: string;
  amount: number;
  dueDate: string; // HTML date input uses string format
  description: string;
  billType: BillType;
  propertyId: string;
  assignedToId: string;
  documentNumber: string;
}

export interface PaymentFormData {
  billId: string;
  amount: number;
  paymentMethod: PaymentMethod;
  paymentDate: string; // HTML date input uses string format
  transactionId: string;
  receiptNumber: string;
  description: string;
  notes: string;
}

// UI Helper Types
export interface BillTypeOption {
  value: BillType;
  label: string;
  icon: string;
  description: string;
}

export interface PaymentMethodOption {
  value: PaymentMethod;
  label: string;
  icon: string;
  description: string;
}

// Constants
export const BILL_TYPE_OPTIONS: BillTypeOption[] = [
  { value: 'DUES', label: 'Aidat', icon: '🏠', description: 'Aylık aidat ödemesi' },
  { value: 'MAINTENANCE', label: 'Bakım', icon: '🔧', description: 'Bakım ve onarım masrafları' },
  { value: 'UTILITY', label: 'Fayda', icon: '⚡', description: 'Elektrik, su, gaz faturaları' },
  { value: 'PENALTY', label: 'Ceza', icon: '⚠️', description: 'Gecikme cezası' },
  { value: 'OTHER', label: 'Diğer', icon: '📄', description: 'Diğer fatura türleri' }
];

export const PAYMENT_METHOD_OPTIONS: PaymentMethodOption[] = [
  { value: 'CASH', label: 'Nakit', icon: '💵', description: 'Nakit ödeme' },
  { value: 'CREDIT_CARD', label: 'Kredi Kartı', icon: '💳', description: 'Kredi kartı ile ödeme' },
  { value: 'BANK_TRANSFER', label: 'Banka Havalesi', icon: '🏦', description: 'Banka havalesi ile ödeme' }
];

export const DISABLED_PAYMENT_METHOD_OPTIONS: PaymentMethodOption[] = [
  { value: 'ONLINE_PAYMENT', label: 'Online Ödeme', icon: '💻', description: 'Yakında kullanılabilir olacak' }
];
</file>

<file path="src/services/types/family-member.types.ts">
// Family Member Types for API Integration
export interface FamilyMember {
    id: string;
    firstName: string;
    lastName: string;
    relationship: string;
    age: number;
    phone?: string;
    email?: string;
    identityNumber?: string;
    isMinor: boolean;
    profileImage?: string;
    userId: string;
    createdAt: string;
    updatedAt: string;
}

export interface CreateFamilyMemberDto {
    firstName: string;
    lastName: string;
    relationship: string;
    age: number;
    phone?: string;
    email?: string;
    identityNumber?: string;
}

export interface UpdateFamilyMemberDto extends Partial<CreateFamilyMemberDto> {}

export interface FamilyMemberFilterParams {
    userId?: string;
    relationship?: string;
    page?: number;
    limit?: number;
    search?: string;
}

export interface FamilyMembersResponse {
    data: FamilyMember[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
}
</file>

<file path="src/services/types/financial-list.types.ts">
// Financial List Page Type Definitions

// Page Info
export interface PageInfo {
  title: string;
  subtitle: string;
  icon: string;
  lastUpdated: string;
}

// Filter Option Types
export interface FilterOption {
  value: string;
  label: string;
  count?: number;
  color?: string;
  icon?: string;
}

export interface DateRangePreset {
  value: string;
  label: string;
}

export interface AmountRangePreset {
  value: string;
  label: string;
}

// Filter Types
export interface SearchFilter {
  placeholder: string;
  value: string;
  type: 'text';
}

export interface SelectFilter {
  label: string;
  value: string;
  type: 'select';
  options: FilterOption[];
}

export interface DateRangeFilter {
  label: string;
  startDate: string;
  endDate: string;
  type: 'daterange';
  presets: DateRangePreset[];
}

export interface AmountRangeFilter {
  label: string;
  minAmount: number;
  maxAmount: number;
  type: 'range';
  presets: AmountRangePreset[];
}

export interface FinancialFilters {
  search: SearchFilter;
  transactionType: SelectFilter;
  paymentStatus: SelectFilter;
  paymentMethod: SelectFilter;
  serviceType: SelectFilter;
  dateRange: DateRangeFilter;
  amountRange: AmountRangeFilter;
  building: SelectFilter;
}

// Financial Summary Types
export interface MoneyAmount {
  amount: number;
  currency: string;
  formatted: string;
}

export interface GrowthMetric {
  percentage: number;
  trend: 'up' | 'down' | 'stable';
}

export interface FinancialSummary {
  totalTransactions: number;
  totalRevenue: MoneyAmount;
  totalPending: MoneyAmount;
  totalOverdue: MoneyAmount;
  collectionRate: number;
  averageTransactionAmount: MoneyAmount;
  monthlyGrowth: GrowthMetric;
}

// Quick Stats
export interface QuickStat {
  label: string;
  value: string;
  count: number;
  change: string;
  trend: 'up' | 'down' | 'stable';
  color: string;
  icon: string;
}

// Payment Method Stats
export interface PaymentMethodStat {
  method: string;
  amount: number;
  percentage: number;
  count: number;
  color: string;
  icon: string;
}

// Sort Options
export interface SortOption {
  value: string;
  label: string;
}

export interface SortOptions {
  currentSort: string;
  options: SortOption[];
}

// Pagination
export interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  itemsPerPage: number;
  totalItems: number;
  showingFrom: number;
  showingTo: number;
  pageSizeOptions: number[];
}

// Bulk Actions
export interface BulkAction {
  id: string;
  label: string;
  icon: string;
  requiresSelection: boolean;
  confirmationRequired: boolean;
  restrictedTo?: string[];
  dangerAction?: boolean;
}

export interface BulkActionsConfig {
  enabled: boolean;
  selectedCount: number;
  selectedAmount: MoneyAmount;
  actions: BulkAction[];
}

// Table Columns
export interface TableColumn {
  key: string;
  label: string;
  width?: string;
  sortable: boolean;
  type: 'checkbox' | 'link' | 'text' | 'user' | 'badge' | 'currency' | 'status' | 'datetime' | 'date' | 'actions';
  align?: 'left' | 'right' | 'center';
}

// Transaction Types
export interface TransactionApartment {
  number: string;
  block: string;
  floor: number;
  owner: string;
  tenant?: string | null;
}

export interface TransactionResident {
  name: string;
  phone: string;
  email: string;
  avatar: string;
  type: 'owner' | 'tenant';
}

export interface TransactionType {
  id: string;
  label: string;
  icon: string;
  color: string;
}

export interface ServiceType {
  id: string;
  label: string;
  icon: string;
  color: string;
}

export interface PaymentMethod {
  id: string;
  label: string;
  icon: string;
  color: string;
  transactionRef?: string;
  bankAccount?: string;
  receivedBy?: string;
}

export interface TransactionStatus {
  id: string;
  label: string;
  color: string;
  bgColor: string;
}

export interface TransactionFees {
  processingFee: number;
  currency: string;
}

export interface TransactionPenalty {
  amount: number;
  currency: string;
  rate?: number;
  description?: string;
}

export interface ConsumptionData {
  amount: number;
  unit: string;
  rate: number;
  currency: string;
}

export interface MaintenanceDetails {
  requestId: string;
  technician: string;
  company: string;
  workDescription: string;
}

export interface FinancialTransaction {
  id: string;
  transactionId: string;
  apartment: TransactionApartment;
  resident: TransactionResident;
  transactionType: TransactionType;
  serviceType: ServiceType;
  amount: MoneyAmount;
  paymentMethod?: PaymentMethod | null;
  status: TransactionStatus;
  transactionDate: string;
  dueDate: string;
  paidDate?: string | null;
  period: string;
  description: string;
  receiptNumber?: string;
  fees?: TransactionFees;
  isOverdue: boolean;
  daysOverdue: number;
  penalty?: TransactionPenalty;
  consumption?: ConsumptionData;
  previousReading?: number;
  currentReading?: number;
  meterNumber?: string;
  maintenanceDetails?: MaintenanceDetails;
  remindersSent?: number;
  lastReminderDate?: string;
  tags: string[];
}

// Export Options
export interface ExportFormat {
  value: string;
  label: string;
  icon: string;
}

export interface ExportIncludeOption {
  key: string;
  label: string;
  default: boolean;
}

export interface ExportOptions {
  formats: ExportFormat[];
  includeOptions: ExportIncludeOption[];
  dateRangeRequired: boolean;
}

// Reporting Options
export interface AvailableReport {
  id: string;
  label: string;
  description: string;
  icon: string;
}

export interface ReportingOptions {
  availableReports: AvailableReport[];
}

// Permissions
export interface FinancialPermissions {
  canCreate: boolean;
  canEdit: boolean;
  canDelete: boolean;
  canApprove: boolean;
  canRefund: boolean;
  canExport: boolean;
  canViewCosts: boolean;
  canManagePenalties: boolean;
  canGenerateReports: boolean;
  canBulkEdit: boolean;
  role: string;
}

// Integration Types
export interface PaymentGateway {
  enabled: boolean;
  status: 'active' | 'inactive' | 'error';
  lastSync?: string;
  accounts?: string[];
  autoReconciliation?: boolean;
}

export interface AccountingSystem {
  enabled: boolean;
  provider?: string | null;
  lastSync?: string | null;
}

export interface Integrations {
  paymentGateways: {
    zaincash?: PaymentGateway;
    asiacell?: PaymentGateway;
    bankTransfer?: PaymentGateway;
  };
  accountingSystem: AccountingSystem;
}

// Main Financial List Type
export interface FinancialTransactionsList {
  pageInfo: PageInfo;
  filters: FinancialFilters;
  financialSummary: FinancialSummary;
  quickStats: QuickStat[];
  paymentMethodStats: PaymentMethodStat[];
  sortOptions: SortOptions;
  pagination: PaginationInfo;
  bulkActions: BulkActionsConfig;
  tableColumns: TableColumn[];
  transactions: FinancialTransaction[];
  exportOptions: ExportOptions;
  reportingOptions: ReportingOptions;
  permissions: FinancialPermissions;
  integrations: Integrations;
}

// Component Props Types
export interface FinancialPageHeaderProps {
  pageInfo: PageInfo;
  permissions: FinancialPermissions;
  onCreateNew: () => void;
  onExport: () => void;
  onGenerateReport: () => void;
}

export interface FinancialSummaryStatsProps {
  summary: FinancialSummary;
}

export interface FinancialQuickStatsProps {
  stats: QuickStat[];
}

export interface FinancialPaymentMethodChartProps {
  stats: PaymentMethodStat[];
  totalAmount: number;
}

export interface FinancialFiltersBarProps {
  filters: FinancialFilters;
  onFilterChange: (filterKey: string, value: any) => void;
  onSearchChange: (value: string) => void;
  onResetFilters: () => void;
}

export interface FinancialFilterPanelProps {
  filters: FinancialFilters;
  isOpen: boolean;
  onClose: () => void;
  onFilterChange: (filterKey: string, value: any) => void;
  onResetFilters: () => void;
  onApplyFilters: () => void;
}

export interface FinancialTableProps {
  transactions: FinancialTransaction[];
  columns: TableColumn[];
  selectedTransactions: string[];
  onSelectionChange: (selectedIds: string[]) => void;
  onSort: (columnKey: string) => void;
  onRowClick: (transaction: FinancialTransaction) => void;
  onActionClick: (action: string, transaction: FinancialTransaction) => void;
  loading?: boolean;
}

export interface FinancialGridProps {
  transactions: FinancialTransaction[];
  selectedTransactions: string[];
  onSelectionChange: (selectedIds: string[]) => void;
  onTransactionClick: (transaction: FinancialTransaction) => void;
  onActionClick: (action: string, transaction: FinancialTransaction) => void;
  loading?: boolean;
}

export interface FinancialBulkActionsBarProps {
  bulkActions: BulkActionsConfig;
  onActionClick: (actionId: string) => void;
  onClearSelection: () => void;
}

// Hook Return Type
export interface UseFinancialListReturn {
  data: FinancialTransactionsList | null;
  loading: boolean;
  error: string | null;
  filters: FinancialFilters;
  selectedTransactions: string[];
  viewMode: 'table' | 'grid';
  setViewMode: (mode: 'table' | 'grid') => void;
  updateFilter: (filterKey: string, value: any) => void;
  resetFilters: () => void;
  setSelectedTransactions: (ids: string[]) => void;
  handleBulkAction: (actionId: string) => Promise<void>;
  handleExport: (format: string, options: ExportIncludeOption[]) => Promise<void>;
  refetch: () => Promise<void>;
}
</file>

<file path="src/services/types/property.types.ts">
// Property Domain Types - API-99CLUB Compatible
import { BaseEntity } from '../core/types';

// API-99CLUB ResponsePropertyDto Schema
export interface Property extends BaseEntity {
    name: string;
    propertyNumber: string;
    type: 'RESIDENCE' | 'VILLA' | 'COMMERCIAL' | 'OFFICE';
    propertyGroup?: string;
    area?: number;
    blockNumber?: string;
    floor?: number;
    status: 'AVAILABLE' | 'OCCUPIED' | 'UNDER_MAINTENANCE' | 'RESERVED';
    rooms?: string;
    description?: string;
    owner?: PropertyUser;
    tenant?: PropertyUser;
    bills?: PropertyBill[];
}

// API-99CLUB User Schema (for owner/tenant)
export interface PropertyUser {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    phone?: string;
}

// API-99CLUB Bill Schema (for property bills)
export interface PropertyBill {
    id: string;
    title: string;
    amount: number;
    dueDate: string;
    status: 'PENDING' | 'PARTIALLY_PAID' | 'PAID' | 'OVERDUE' | 'CANCELLED';
    billType: 'MAINTENANCE' | 'WATER' | 'ELECTRICITY' | 'GAS' | 'INTERNET' | 'CLEANING' | 'SECURITY' | 'OTHER';
    description?: string;
}

// DTOs (Data Transfer Objects) - API-99CLUB Compatible
export interface CreatePropertyDto {
    name: string;
    propertyNumber: string;
    type: 'RESIDENCE' | 'VILLA' | 'COMMERCIAL' | 'OFFICE';
    propertyGroup?: string;
    area?: number;
    blockNumber?: string;
    floor?: number;
    status?: 'AVAILABLE' | 'OCCUPIED' | 'UNDER_MAINTENANCE' | 'RESERVED';
    rooms?: string;
    description?: string;
    ownerId?: string;
    tenantId?: string;
}

export interface UpdatePropertyDto {
    name?: string;
    propertyNumber?: string;
    type?: 'RESIDENCE' | 'VILLA' | 'COMMERCIAL' | 'OFFICE';
    propertyGroup?: string;
    area?: number;
    blockNumber?: string;
    floor?: number;
    status?: 'AVAILABLE' | 'OCCUPIED' | 'UNDER_MAINTENANCE' | 'RESERVED';
    rooms?: string;
    description?: string;
    ownerId?: string;
    tenantId?: string;
}

// Query DTOs - API-99CLUB Compatible
export interface PropertyFilterParams {
    page?: number;
    limit?: number;
    orderColumn?: string;
    orderBy?: 'ASC' | 'DESC';
    type?: 'RESIDENCE' | 'VILLA' | 'COMMERCIAL' | 'OFFICE';
    status?: 'AVAILABLE' | 'OCCUPIED' | 'UNDER_MAINTENANCE' | 'RESERVED';
    blockNumber?: string;
    floor?: number;
    area?: number;
    rooms?: string;
    search?: string;
    debtStatus?: string;
}

export interface PropertySearchParams {
    term?: string;
    status?: 'AVAILABLE' | 'OCCUPIED' | 'UNDER_MAINTENANCE' | 'RESERVED';
    type?: 'RESIDENCE' | 'VILLA' | 'COMMERCIAL' | 'OFFICE';
    blockNumber?: string;
    propertyGroup?: string;
    ownerId?: string;
    tenantId?: string;
}

// Response DTOs (API-99CLUB Compatible)
export interface PropertyListResponse {
    data: Property[];
    pagination: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    };
}

// Statistics & Analytics DTOs (for future endpoints)
export interface PropertyStatistics {
    totalUnits: number;
    occupancyRate: number;
    unitsByType: {
        RESIDENCE: number;
        VILLA: number;
        COMMERCIAL: number;
        OFFICE: number;
    };
    unitsByStatus: {
        AVAILABLE: number;
        OCCUPIED: number;
        UNDER_MAINTENANCE: number;
        RESERVED: number;
    };
    occupancyTrend?: {
        currentMonth: number;
        previousMonth: number;
        changePercentage: number;
    };
}

export interface OccupancyStats {
    period: string;
    newOccupied: number;
    vacated: number;
    maintenanceStarted: number;
    maintenanceCompleted: number;
    dailyStats?: Array<{
        date: string;
        occupied: number;
        vacated: number;
        maintenance: number;
    }>;
}

export interface QuickStats {
    apartmentUnits: {
        total: number;
        occupied: number;
        occupancyRate: number;
    };
    villaUnits: {
        total: number;
        occupied: number;
        occupancyRate: number;
    };
    commercialUnits: {
        total: number;
        occupied: number;
        occupancyRate: number;
    };
    parkingSpaces: {
        total: number;
        occupied: number;
        occupancyRate: number;
    };
}

export interface PropertyActivity {
    id: string;
    propertyId: string;
    propertyNumber: string;
    activityType: 'STATUS_CHANGED' | 'OWNER_ASSIGNED' | 'TENANT_ASSIGNED' | 'CREATED' | 'UPDATED' | 'DELETED';
    description: string;
    oldValue?: string;
    newValue?: string;
    performedBy: {
        id: string;
        name: string;
    };
    createdAt: string;
}

export interface BlockInfo {
    blockNumber: string;
    totalUnits: number;
    occupiedUnits: number;
    totalFloors: number;
}

export interface BlockResponse {
    blockInfo: BlockInfo;
    properties: Property[];
    stats?: {
        occupancyByFloor: Array<{
            floor: number;
            total: number;
            occupied: number;
        }>;
    };
}

export interface FilterOptions {
    blocks: string[];
    floors: {
        min: number;
        max: number;
    };
    areaRanges: {
        min: number;
        max: number;
    };
    roomCounts: string[];
    propertyGroups: string[];
}

// Bulk Operations
export interface BulkUpdateDto {
    propertyIds: string[];
    updates: {
        status?: 'AVAILABLE' | 'OCCUPIED' | 'UNDER_MAINTENANCE' | 'RESERVED';
        propertyGroup?: string;
        ownerId?: string;
        tenantId?: string;
    };
}

export interface BulkAssignmentDto {
    assignments: Array<{
        propertyId: string;
        tenantId: string;
        startDate: string;
        endDate?: string;
    }>;
}

export interface BulkActionResult {
    propertyId: string;
    success: boolean;
    message: string;
    error?: string;
}

export interface BulkActionResponse {
    successCount: number;
    failedCount: number;
    errors: Array<{
        propertyId: string;
        error: string;
    }>;
    results?: BulkActionResult[];
}

// Maintenance Management (for future endpoints)
export interface MaintenanceRecord {
    id: string;
    propertyId: string;
    reason: string;
    description?: string;
    priority: 'LOW' | 'MEDIUM' | 'HIGH';
    status: 'ACTIVE' | 'COMPLETED' | 'CANCELLED';
    assignedTo?: PropertyUser;
    startedAt: string;
    estimatedCompletion?: string;
    completedAt?: string;
    completionNotes?: string;
}

export interface CreateMaintenanceDto {
    reason: string;
    estimatedDuration?: number;
    priority: 'LOW' | 'MEDIUM' | 'HIGH';
    description?: string;
    assignedTo?: string;
}

export interface CompleteMaintenanceDto {
    completionNotes: string;
    actualDuration?: number;
}

// Export types (for future endpoints)
export interface ExportParams {
    format: 'excel' | 'csv' | 'pdf';
    filters?: string; // JSON stringified filters
    columns?: string; // Comma separated column names
}

export interface ImportResult {
    totalRows: number;
    successCount: number;
    errorCount: number;
    errors: Array<{
        row: number;
        error: string;
        data: any;
    }>;
}
</file>

<file path="src/services/types/request-list.types.ts">
// Service Requests List Types
// Based on docs/page-structure/request-list-view.json

export interface PageInfo {
  title: string;
  subtitle: string;
  icon: string;
  lastUpdated: string;
}

export interface FilterOption {
  value: string;
  label: string;
  count: number;
  color?: string;
  icon?: string;
  company?: string;
}

export interface FilterConfig {
  label: string;
  value: string;
  type: 'text' | 'select' | 'daterange';
  placeholder?: string;
  options?: FilterOption[];
  presets?: Array<{
    value: string;
    label: string;
  }>;
  startDate?: string;
  endDate?: string;
}

export interface RequestFilters {
  search?: FilterConfig;
  status?: FilterConfig;
  priority?: FilterConfig;
  category?: FilterConfig;
  assignee?: FilterConfig;
  dateRange?: FilterConfig;
  building?: FilterConfig;
}

export interface RequestSummary {
  totalRequests: number;
  activeRequests: number;
  completedToday: number;
  overdueRequests: number;
  averageResponseTime: string;
  averageCompletionTime: string;
  satisfactionRate: number;
}

export interface QuickStat {
  label: string;
  value: number;
  change: string;
  trend: 'up' | 'down';
  color: string;
  icon: string;
}

export interface SortOption {
  value: string;
  label: string;
}

export interface SortOptions {
  currentSort: string;
  options: SortOption[];
}

export interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  itemsPerPage: number;
  totalItems: number;
  showingFrom: number;
  showingTo: number;
  pageSizeOptions: number[];
}

export interface BulkAction {
  id: string;
  label: string;
  icon: string;
  requiresSelection: boolean;
  confirmationRequired: boolean;
  dangerAction?: boolean;
}

export interface BulkActionsConfig {
  enabled: boolean;
  selectedCount: number;
  actions: BulkAction[];
}

export interface TableColumn {
  key: string;
  label: string;
  width: string;
  sortable: boolean;
  type: 'text' | 'badge' | 'status' | 'user' | 'datetime' | 'date' | 'actions' | 'checkbox' | 'link';
}

export interface ApartmentInfo {
  number: string;
  block: string;
  floor: number;
  owner: string;
  tenant?: string;
  phone: string;
}

export interface CategoryInfo {
  id: string;
  label: string;
  icon: string;
  color: string;
}

export interface PriorityInfo {
  id: string;
  label: string;
  level: number;
  color: string;
  icon: string;
}

export interface StatusInfo {
  id: string;
  label: string;
  color: string;
  bgColor: string;
}

export interface AssigneeInfo {
  id: string;
  name: string;
  company: string;
  phone: string;
  avatar: string;
  rating: number;
}

export interface CostInfo {
  estimated: number;
  actual?: number;
  currency: string;
}

export interface ServiceRequest {
  id: string;
  requestId: string;
  title: string;
  description: string;
  apartment: ApartmentInfo;
  category: CategoryInfo;
  priority: PriorityInfo;
  status: StatusInfo;
  assignee?: AssigneeInfo;
  createdDate: string;
  updatedDate: string;
  dueDate: string;
  estimatedCompletion?: string;
  completedDate?: string;
  responseTime?: string;
  completionTime?: string;
  imagesCount: number;
  commentsCount: number;
  cost: CostInfo;
  customerRating?: number;
  tags: string[];
  isOverdue: boolean;
  isUrgent: boolean;
  hasImages: boolean;
  hasComments: boolean;
}

export interface ExportFormat {
  value: string;
  label: string;
  icon: string;
}

export interface ExportIncludeOption {
  key: string;
  label: string;
  default: boolean;
}

export interface ExportOptions {
  formats: ExportFormat[];
  includeOptions: ExportIncludeOption[];
}

export interface RequestPermissions {
  canCreate: boolean;
  canEdit: boolean;
  canDelete: boolean;
  canAssign: boolean;
  canExport: boolean;
  canViewCosts: boolean;
  canBulkEdit: boolean;
  role: string;
}

export interface ServiceRequestsList {
  pageInfo: PageInfo;
  filters: RequestFilters;
  summary: RequestSummary;
  quickStats: QuickStat[];
  sortOptions: SortOptions;
  pagination: PaginationInfo;
  bulkActions: BulkActionsConfig;
  tableColumns: TableColumn[];
  requests: ServiceRequest[];
  exportOptions: ExportOptions;
  permissions: RequestPermissions;
}

// API Request/Response Types
export interface RequestsListFilters {
  search?: string;
  status?: string;
  priority?: string;
  category?: string;
  assignee?: string;
  building?: string;
  startDate?: string;
  endDate?: string;
  page?: number;
  limit?: number;
  sort?: string;
}

export interface RequestsListResponse {
  data: ServiceRequest[];
  summary: RequestSummary;
  quickStats: QuickStat[];
  pagination: PaginationInfo;
  permissions: RequestPermissions;
}

// Hook Return Types
export interface UseRequestsListResult {
  data: ServiceRequestsList;
  loading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
  updateFilters: (filters: Partial<RequestsListFilters>) => void;
  resetFilters: () => void;
  updateSort: (sort: string) => void;
  updatePagination: (page: number, limit?: number) => void;
}

export interface UseRequestsFiltersResult {
  filters: RequestsListFilters;
  activeFilters: Array<{ key: string; value: any; label: string }>;
  setFilter: (key: keyof RequestsListFilters, value: any) => void;
  removeFilter: (key: keyof RequestsListFilters) => void;
  resetFilters: () => void;
  applyFilters: (filters: Partial<RequestsListFilters>) => void;
}

export interface UseRequestsActionsResult {
  viewRequest: (request: ServiceRequest) => void;
  editRequest: (request: ServiceRequest) => void;
  deleteRequest: (request: ServiceRequest) => Promise<void>;
  assignTechnician: (request: ServiceRequest, technicianId: string) => Promise<void>;
  updateStatus: (request: ServiceRequest, status: string) => Promise<void>;
  updatePriority: (request: ServiceRequest, priority: string) => Promise<void>;
  loading: boolean;
  error: string | null;
}

export interface UseRequestsBulkActionsResult {
  selectedRequests: ServiceRequest[];
  selectRequest: (request: ServiceRequest) => void;
  selectMultiple: (requests: ServiceRequest[]) => void;
  selectAll: (requests: ServiceRequest[]) => void;
  clearSelection: () => void;
  bulkAssign: (technicianId: string) => Promise<void>;
  bulkUpdateStatus: (status: string) => Promise<void>;
  bulkUpdatePriority: (priority: string) => Promise<void>;
  bulkDelete: () => Promise<void>;
  loading: boolean;
  error: string | null;
}

export interface UseRequestsExportResult {
  exportRequests: (format: string, options: ExportIncludeOption[]) => Promise<void>;
  exportSelected: (requests: ServiceRequest[], format: string, options: ExportIncludeOption[]) => Promise<void>;
  loading: boolean;
  error: string | null;
}

// Component Props Types
export interface RequestsPageHeaderProps {
  summary: RequestSummary;
  onRefresh: () => void;
  onCreateRequest: () => void;
  loading?: boolean;
}

export interface RequestsSummaryStatsProps {
  summary: RequestSummary;
  loading?: boolean;
}

export interface RequestsQuickStatsProps {
  quickStats: QuickStat[];
  loading?: boolean;
}

export interface RequestsFiltersBarProps {
  searchValue: string;
  onSearchChange: (value: string) => void;
  onSearchSubmit: (value: string) => void;
  activeFiltersCount: number;
  onShowFilters: () => void;
  viewMode: 'table' | 'grid';
  onViewModeChange: (mode: 'table' | 'grid') => void;
}

export interface RequestsFilterPanelProps {
  filters: RequestFilters;
  activeFilters: RequestsListFilters;
  onApplyFilters: (filters: RequestsListFilters) => void;
  onResetFilters: () => void;
  onClose: () => void;
  isOpen: boolean;
}

export interface RequestsTableViewProps {
  requests: ServiceRequest[];
  columns: TableColumn[];
  loading?: boolean;
  selectedRequests: ServiceRequest[];
  onSelectionChange: (requests: ServiceRequest[]) => void;
  onRequestAction: (action: string, request: ServiceRequest) => void;
  sortOptions: SortOptions;
  onSortChange: (sort: string) => void;
}

export interface RequestsGridViewProps {
  requests: ServiceRequest[];
  loading?: boolean;
  selectedRequests: ServiceRequest[];
  onSelectionChange: (requests: ServiceRequest[]) => void;
  onRequestAction: (action: string, request: ServiceRequest) => void;
  loadingCardCount?: number;
}

export interface RequestsBulkActionsBarProps {
  selectedCount: number;
  bulkActions: BulkAction[];
  onBulkAction: (actionId: string) => void;
  onClearSelection: () => void;
  loading?: boolean;
}
</file>

<file path="src/services/types/resident.types.ts">
// Resident Domain Types - API-99CLUB Compatible
import { BaseEntity } from '../core/types';

// API-99CLUB ResponseUserDto Schema (Extended for Residents)
export interface Resident extends BaseEntity {
    email: string;
    firstName: string;
    lastName: string;
    phone?: string;
    status: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED' | 'SUSPENDED';
    membershipTier: 'GOLD' | 'SILVER' | 'STANDARD';
    verificationStatus: 'PENDING' | 'APPROVED' | 'REJECTED' | 'UNDER_REVIEW';
    role: ResidentRole;
    property?: ResidentProperty;
    avatar?: string;
    registrationDate?: string;
    lastLoginDate?: string;
    documents?: ResidentDocument[];
}

// API-99CLUB Property Schema
export interface ResidentProperty {
    id?: string;
    block: string;
    apartment: string;
    ownershipType: 'owner' | 'tenant';
    propertyNumber?: string;
    floor?: number;
    area?: number;
    registrationDate?: string;
}

// API-99CLUB Role Schema
export interface ResidentRole {
    id: string;
    name: string;
    slug: string;
    description?: string;
    isSystem?: boolean;
    permissions?: Permission[];
}

// API-99CLUB Permission Schema
export interface Permission {
    id: string;
    name: string;
    description?: string;
    action: string; // "read", "create", "update", "delete"
    resource: string; // "users", "roles", "properties"
    isSystem?: boolean;
}

// Document Management
export interface ResidentDocument {
    id: string;
    type: 'ID_CARD' | 'PASSPORT' | 'UTILITY_BILL' | 'OWNERSHIP_DEED' | 'RENTAL_AGREEMENT' | 'OTHER';
    fileName: string;
    fileUrl: string;
    uploadDate: string;
    verificationStatus: 'PENDING' | 'APPROVED' | 'REJECTED' | 'UNDER_REVIEW';
    rejectionReason?: string;
}

// DTOs (Data Transfer Objects) - API-99CLUB Compatible
export interface CreateResidentDto {
    email: string;
    firstName: string;
    lastName: string;
    phone?: string;
    tcKimlikNo?: string;
    propertyIdentification?: string;
    roleId: string;
    status?: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED' | 'SUSPENDED';
    membershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
    documents?: File[];
}

// Yeni API formatı için:
export interface CreateResidentRequest {
  personalInfo: {
    firstName: string;
    lastName: string;
    phone: string;
    email: string;
    password?: string;
  };
  propertyInfo: {
    name?: string;
    block: string;
    propertyNumber: string;
    propertyType: 'RESIDENCE';
    ownershipType: 'owner' | 'tenant';
  };
  documents?: {
    type: string;
    url: string;
  }[];
}

export interface UpdateResidentDto {
    email?: string;
    firstName?: string;
    lastName?: string;
    password?: string;
    phone?: string;
    tcKimlikNo?: string;
    propertyIdentification?: string;
    status?: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED' | 'SUSPENDED';
    membershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
    roleId?: string;
}

// Approval DTOs
export interface ResidentApprovalDto {
    decision: 'approved' | 'rejected';
    reason?: string;
    assignedRole?: string;
    initialMembershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
    notes?: string;
}

// Bulk Action DTOs
export interface BulkActionDto {
    action: 'approve' | 'reject' | 'suspend' | 'activate' | 'update_membership';
    userIds: string[];
    reason?: string;
    assignedRole?: 'admin' | 'resident' | 'tenant';
    membershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
}

export interface BulkActionResult {
    residentId: string;
    success: boolean;
    message: string;
    error?: string;
}

// Query DTOs
export interface ResidentFilterParams {
    page?: number;
    limit?: number;
    search?: string;
    orderColumn?: string;
    orderBy?: 'ASC' | 'DESC';
    status?: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED' | 'SUSPENDED';
    role?: 'admin' | 'resident' | 'tenant';
    membershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
    verificationStatus?: 'PENDING' | 'APPROVED' | 'REJECTED';
    block?: string;
    apartment?: string;
    ownershipType?: 'owner' | 'tenant';
    registrationDateFrom?: string;
    registrationDateTo?: string;
}

// Response DTOs (API-99CLUB Compatible)
export interface ResidentListResponse {
    users: Resident[];
    pagination: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    };
}

export interface PendingResidentsResponse {
    data: Resident[];
    pagination: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    };
}

export interface ResidentApprovalResponse {
    success: boolean;
    message: string;
    user: Resident;
}

export interface BulkActionResponse {
    success: boolean;
    message: string;
    results: BulkActionResult[];
    successCount: number;
    errorCount: number;
}

// Avatar Upload (API-99CLUB Compatible)
export interface AvatarUploadResponse {
    success: boolean;
    message: string;
    avatarUrl: string;
}

// Statistics
export interface ResidentStatsResponse {
    totalResidents: number;
    activeResidents: number;
    pendingApproval: number;
    newRegistrationsThisMonth: number;
    approvedThisMonth: number;
    rejectedThisMonth: number;
    byMembershipTier: {
        gold: number;
        silver: number;
        standard: number;
    };
    byOwnershipType: {
        owner: number;
        tenant: number;
    };
    byStatus: {
        active: number;
        inactive: number;
        pending: number;
        banned: number;
        suspended: number;
    };
}

// Search and Filter
export interface ResidentSearchParams {
    query: string;
    filters?: ResidentFilterParams;
    includeDocuments?: boolean;
    includeProperty?: boolean;
}

export interface ResidentSearchResponse {
    residents: Resident[];
    pagination: {
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    };
    filters: ResidentFilterParams;
}
</file>

<file path="src/services/types/unit-detail.types.ts">
// Unit Detail Types based on property-view.json structure

export interface UnitDetail {
  id: string;
  apartmentNumber: string;
  block: string;
  floor: number;
  type: string;
  area: number;
  status: 'active' | 'inactive' | 'maintenance' | 'renovation';
  createdDate: string;
  lastUpdated: string;
  basicInfo: BasicInfo;
  ownerInfo: OwnerInfo;
  tenantInfo?: TenantInfo;
  residents: Resident[];
  billingInfo: BillingInfo;
  financialSummary: FinancialSummary;
  consumptionData: ConsumptionData;
  maintenanceHistory: MaintenanceRecord[];
  visitorHistory: VisitorRecord[];
  notes: Notes;
  documents: Document[];
  permissions: Permissions;
  systemInfo: SystemInfo;
}

export interface BasicInfo {
  title: string;
  icon: string;
  data: {
    apartmentNumber: FieldData<string>;
    block: SelectFieldData;
    floor: FieldData<number>;
    apartmentType: SelectFieldData;
    area: FieldData<number>;
    status: StatusFieldData;
  };
}

export interface OwnerInfo {
  title: string;
  icon: string;
  data: {
    fullName: FieldData<string>;
    phone: FieldData<string>;
    email: FieldData<string>;
    nationalId: FieldData<string>;
    address: FieldData<string>;
    ownershipType: OwnershipTypeFieldData;
  };
}

export interface TenantInfo {
  title: string;
  icon: string;
  isRented: boolean;
  data: {
    isRented: FieldData<boolean>;
    tenantName: FieldData<string>;
    tenantPhone: FieldData<string>;
    tenantEmail?: FieldData<string>;
    leaseStartDate: FieldData<string>;
    leaseEndDate: FieldData<string>;
    monthlyRent: CurrencyFieldData;
    deposit?: CurrencyFieldData;
  };
}

export interface Resident {
  id: string;
  name: string;
  role: 'owner' | 'tenant' | 'family_member';
  roleLabel: string;
  phone?: string;
  email?: string;
  age?: number;
  nationalId?: string;
  isMainResident: boolean;
  moveInDate: string;
  relation?: string;
  emergencyContact?: {
    name: string;
    phone: string;
    relation: string;
  };
}

export interface BillingInfo {
  title: string;
  icon: string;
  data: {
    monthlyDues: CurrencyFieldData;
    electricityMeterNo?: FieldData<string>;
    waterMeterNo?: FieldData<string>;
    gasMeterNo?: FieldData<string>;
    internetConnection?: FieldData<boolean>;
    parkingSpace?: FieldData<string>;
  };
}

export interface FinancialSummary {
  title: string;
  icon: string;
  data: {
    currentBalance: BalanceFieldData;
    lastPaymentDate?: FieldData<string>;
    lastPaymentAmount?: CurrencyFieldData;
    overdueAmount?: BalanceFieldData;
    nextDueDate?: FieldData<string>;
  };
}

export interface ConsumptionData {
  title: string;
  icon: string;
  period: 'monthly' | 'yearly';
  data: {
    electricity?: ConsumptionItem;
    water?: ConsumptionItem;
    gas?: ConsumptionItem;
  };
}

export interface ConsumptionItem {
  label: string;
  currentMonth: {
    consumption: number;
    unit: string;
    cost: number;
    currency: string;
  };
  previousMonth: {
    consumption: number;
    unit: string;
    cost: number;
    currency: string;
  };
  trend: 'increase' | 'decrease' | 'stable';
  percentage: number;
}

export interface MaintenanceRecord {
  id: string;
  type: string;
  category: 'electrical' | 'plumbing' | 'hvac' | 'general' | 'other';
  priority: 'low' | 'medium' | 'high';
  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';
  createdDate: string;
  completedDate?: string;
  assignedTo?: string;
  company?: string;
  estimatedCompletion?: string;
  cost?: number;
  currency?: string;
  description: string;
}

export interface VisitorRecord {
  id: string;
  visitorName: string;
  visitorPhone?: string;
  visitDate: string;
  exitDate?: string;
  duration?: string;
  purpose: string;
  authorizedBy: string;
  qrCode?: string;
  status: 'active' | 'completed';
}

export interface Notes {
  title: string;
  icon: string;
  data: {
    generalNotes?: TextareaFieldData;
    maintenanceNotes?: TextareaFieldData;
    specialRequests?: TextareaFieldData;
    accessRestrictions?: TextareaFieldData;
  };
}

export interface Document {
  id: string;
  name: string;
  type: 'contract' | 'identity' | 'handover' | 'other';
  format: string;
  size: string;
  uploadDate: string;
  expiryDate?: string;
  status: 'active' | 'expired';
  downloadUrl: string;
}

export interface Permissions {
  canEdit: boolean;
  canDelete: boolean;
  canViewFinancials: boolean;
  canManageResidents: boolean;
  canAccessDocuments: boolean;
  role: string;
}

export interface SystemInfo {
  createdBy: string;
  createdDate: string;
  lastModifiedBy: string;
  lastModifiedDate: string;
  version: string;
  syncStatus: 'synced' | 'pending' | 'error';
  backupDate?: string;
}

// Field Types
export interface FieldData<T> {
  label: string;
  value: T;
  type: string;
  required?: boolean;
  validation?: string;
  format?: string;
  min?: number;
  max?: number;
  maxLength?: number;
  dependsOn?: string;
}

export interface SelectFieldData extends FieldData<string> {
  options: string[] | SelectOption[];
}

export interface SelectOption {
  value: string;
  label: string;
  color?: string;
}

export interface StatusFieldData extends SelectFieldData {
  type: 'select';
  options: StatusOption[];
}

export interface StatusOption extends SelectOption {
  value: 'active' | 'inactive' | 'maintenance' | 'renovation';
  color: 'green' | 'red' | 'orange' | 'blue';
}

export interface OwnershipTypeFieldData extends SelectFieldData {
  type: 'select';
  options: OwnershipOption[];
}

export interface OwnershipOption extends SelectOption {
  value: 'owner' | 'investor' | 'inherited';
  color: 'blue' | 'purple' | 'green';
}

export interface CurrencyFieldData extends FieldData<number> {
  type: 'currency';
  currency: string;
}

export interface BalanceFieldData extends CurrencyFieldData {
  status?: 'debt' | 'credit' | 'overdue';
}

export interface TextareaFieldData extends FieldData<string> {
  type: 'textarea';
  maxLength: number;
}

// DTOs for API operations
export interface UpdateBasicInfoDto {
  apartmentNumber?: string;
  block?: string;
  floor?: number;
  apartmentType?: string;
  area?: number;
  status?: 'active' | 'inactive' | 'maintenance' | 'renovation';
}

export interface UpdateOwnerInfoDto {
  fullName?: string;
  phone?: string;
  email?: string;
  nationalId?: string;
  address?: string;
  ownershipType?: 'owner' | 'investor' | 'inherited';
}

export interface UpdateTenantInfoDto {
  isRented?: boolean;
  tenantName?: string;
  tenantPhone?: string;
  tenantEmail?: string;
  leaseStartDate?: string;
  leaseEndDate?: string;
  monthlyRent?: number;
  deposit?: number;
}

export interface AddResidentDto {
  name: string;
  role: 'owner' | 'tenant' | 'family_member';
  phone?: string;
  email?: string;
  age?: number;
  nationalId?: string;
  relation?: string;
  emergencyContact?: {
    name: string;
    phone: string;
    relation: string;
  };
}

export interface UpdateBillingInfoDto {
  monthlyDues?: number;
  electricityMeterNo?: string;
  waterMeterNo?: string;
  gasMeterNo?: string;
  internetConnection?: boolean;
  parkingSpace?: string;
}

export interface CreateMaintenanceDto {
  type: string;
  category: 'electrical' | 'plumbing' | 'hvac' | 'general' | 'other';
  priority: 'low' | 'medium' | 'high';
  description: string;
  assignedTo?: string;
  estimatedCompletion?: string;
}

export interface AddVisitorDto {
  visitorName: string;
  visitorPhone?: string;
  purpose: string;
  authorizedBy: string;
}

export interface UpdateNotesDto {
  generalNotes?: string;
  maintenanceNotes?: string;
  specialRequests?: string;
  accessRestrictions?: string;
}
</file>

<file path="src/services/announcement.service.ts">
// Announcement Service - Application Layer
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';
import {
    Announcement,
    CreateAnnouncementDto,
    UpdateAnnouncementDto,
    AnnouncementFilterParams,
    AnnouncementListResponse,
    AnnouncementStats,
    AnnouncementBulkActionDto,
    AnnouncementBulkActionResponse,
    AnnouncementImageUploadResponse,
    AnnouncementStatus,
    AnnouncementType,
} from './types/announcement.types';
import { ApiResponse, PaginatedResponse } from './core/types';

class AnnouncementService extends BaseService<Announcement, CreateAnnouncementDto, UpdateAnnouncementDto> {
    protected baseEndpoint = '/admin/announcements';

    constructor() {
        super('AnnouncementService');
    }

    // === BASIC CRUD OPERATIONS === //

    /**
     * Get all announcements with pagination and filtering
     * GET /admin/announcements
     */
    async getAllAnnouncements(params?: AnnouncementFilterParams): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info('Fetching all announcements', params);

            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<AnnouncementListResponse>(
                `${this.baseEndpoint}${queryParams}`
            );

            // Handle different response structures
            const announcements = response.data.data || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(announcements) ? announcements.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            this.logger.info(`Fetched ${announcements.length} announcements`);
            return {
                data: announcements,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error('Failed to fetch announcements', error);
            throw error;
        }
    }

    /**
     * Get announcement by ID
     * GET /admin/announcements/{id}
     */
    async getAnnouncementById(id: string): Promise<ApiResponse<Announcement>> {
        try {
            this.logger.info(`Fetching announcement with ID: ${id}`);
            const response = await apiClient.get<Announcement>(`${this.baseEndpoint}/${id}`);
            this.logger.info('Announcement fetched successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to fetch announcement with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Create new announcement
     * POST /admin/announcements
     */
    async createAnnouncement(data: CreateAnnouncementDto): Promise<ApiResponse<Announcement>> {
        try {
            this.logger.info('Creating new announcement', { title: data.title, type: data.type });
            const response = await apiClient.post<Announcement>(this.baseEndpoint, data);
            this.logger.info('Announcement created successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to create announcement', error);
            throw error;
        }
    }

    /**
     * Update announcement
     * PUT /admin/announcements/{id}
     */
    async updateAnnouncement(id: string, data: UpdateAnnouncementDto): Promise<ApiResponse<Announcement>> {
        try {
            this.logger.info(`Updating announcement with ID: ${id}`, { title: data.title });
            const response = await apiClient.put<Announcement>(`${this.baseEndpoint}/${id}`, data);
            this.logger.info('Announcement updated successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to update announcement with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Delete announcement
     * DELETE /admin/announcements/{id}
     */
    async deleteAnnouncement(id: string): Promise<ApiResponse<void>> {
        try {
            this.logger.info(`Deleting announcement with ID: ${id}`);
            const response = await apiClient.delete<void>(`${this.baseEndpoint}/${id}`);
            this.logger.info('Announcement deleted successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to delete announcement with ID: ${id}`, error);
            throw error;
        }
    }

    // === SPECIALIZED ENDPOINTS === //

    /**
     * Get active announcements
     * GET /admin/announcements/active
     */
    async getActiveAnnouncements(params?: AnnouncementFilterParams): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info('Fetching active announcements', params);
            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<AnnouncementListResponse>(
                `${this.baseEndpoint}/active${queryParams}`
            );

            const announcements = response.data.data || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(announcements) ? announcements.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            return {
                data: announcements,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error('Failed to fetch active announcements', error);
            throw error;
        }
    }

    /**
     * Get expired announcements
     * GET /admin/announcements/expired
     */
    async getExpiredAnnouncements(params?: AnnouncementFilterParams): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info('Fetching expired announcements', params);
            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<AnnouncementListResponse>(
                `${this.baseEndpoint}/expired${queryParams}`
            );

            const announcements = response.data.data || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(announcements) ? announcements.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            return {
                data: announcements,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error('Failed to fetch expired announcements', error);
            throw error;
        }
    }

    /**
     * Get emergency announcements
     * GET /admin/announcements/emergency
     */
    async getEmergencyAnnouncements(params?: AnnouncementFilterParams): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info('Fetching emergency announcements', params);
            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<AnnouncementListResponse>(
                `${this.baseEndpoint}/emergency${queryParams}`
            );

            const announcements = response.data.data || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(announcements) ? announcements.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            return {
                data: announcements,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error('Failed to fetch emergency announcements', error);
            throw error;
        }
    }

    /**
     * Get announcements by status
     * GET /admin/announcements/status/{status}
     */
    async getAnnouncementsByStatus(status: AnnouncementStatus, params?: Omit<AnnouncementFilterParams, 'status'>): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info(`Fetching announcements with status: ${status}`, params);
            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<AnnouncementListResponse>(
                `${this.baseEndpoint}/status/${status}${queryParams}`
            );

            const announcements = response.data.data || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(announcements) ? announcements.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            return {
                data: announcements,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error(`Failed to fetch announcements with status: ${status}`, error);
            throw error;
        }
    }

    /**
     * Get announcements by property
     * GET /admin/announcements/property/{propertyId}
     */
    async getAnnouncementsByProperty(propertyId: string, params?: Omit<AnnouncementFilterParams, 'propertyId'>): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info(`Fetching announcements for property: ${propertyId}`, params);
            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<AnnouncementListResponse>(
                `${this.baseEndpoint}/property/${propertyId}${queryParams}`
            );

            const announcements = response.data.data || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(announcements) ? announcements.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            return {
                data: announcements,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error(`Failed to fetch announcements for property: ${propertyId}`, error);
            throw error;
        }
    }

    /**
     * Get announcements by user
     * GET /admin/announcements/user/{userId}
     */
    async getAnnouncementsByUser(userId: string, params?: Omit<AnnouncementFilterParams, 'userId'>): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info(`Fetching announcements for user: ${userId}`, params);
            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<AnnouncementListResponse>(
                `${this.baseEndpoint}/user/${userId}${queryParams}`
            );

            const announcements = response.data.data || response.data || [];
            const pagination = response.data.pagination || response.pagination || {
                total: Array.isArray(announcements) ? announcements.length : 0,
                page: params?.page || 1,
                limit: params?.limit || 10,
                totalPages: 1
            };

            return {
                data: announcements,
                pagination: pagination,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            this.logger.error(`Failed to fetch announcements for user: ${userId}`, error);
            throw error;
        }
    }

    // === ACTION ENDPOINTS === //

    /**
     * Publish announcement
     * PUT /admin/announcements/{id}/publish
     */
    async publishAnnouncement(id: string): Promise<ApiResponse<Announcement>> {
        try {
            this.logger.info(`Publishing announcement with ID: ${id}`);
            const response = await apiClient.put<Announcement>(`${this.baseEndpoint}/${id}/publish`, {});
            this.logger.info('Announcement published successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to publish announcement with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Archive announcement
     * PUT /admin/announcements/{id}/archive
     */
    async archiveAnnouncement(id: string): Promise<ApiResponse<Announcement>> {
        try {
            this.logger.info(`Archiving announcement with ID: ${id}`);
            const response = await apiClient.put<Announcement>(`${this.baseEndpoint}/${id}/archive`, {});
            this.logger.info('Announcement archived successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to archive announcement with ID: ${id}`, error);
            throw error;
        }
    }

    // === BULK OPERATIONS === //

    /**
     * Bulk operations on announcements
     * POST /admin/announcements/bulk-action
     */
    async bulkAction(data: AnnouncementBulkActionDto): Promise<ApiResponse<AnnouncementBulkActionResponse>> {
        try {
            this.logger.info('Performing bulk action on announcements', data);
            const response = await apiClient.post<AnnouncementBulkActionResponse>(
                `${this.baseEndpoint}/bulk-action`,
                data
            );
            this.logger.info('Bulk action completed successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to perform bulk action', error);
            throw error;
        }
    }

    // === IMAGE UPLOAD === //

    /**
     * Upload image for announcement
     * POST /admin/announcements/{id}/upload-image
     */
    async uploadAnnouncementImage(
        id: string,
        file: File,
        onProgress?: (progress: number) => void
    ): Promise<ApiResponse<AnnouncementImageUploadResponse>> {
        try {
            this.logger.info(`Uploading image for announcement ID: ${id}`);

            const formData = new FormData();
            formData.append('image', file);

            const response = await apiClient.uploadFile<AnnouncementImageUploadResponse>(
                `${this.baseEndpoint}/${id}/upload-image`,
                file,
                onProgress
            );

            this.logger.info('Image uploaded successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to upload image', error);
            throw error;
        }
    }

    // === SEARCH FUNCTIONALITY === //

    /**
     * Search announcements
     * GET /admin/announcements/search
     */
    async searchAnnouncements(query: string, filters?: AnnouncementFilterParams): Promise<PaginatedResponse<Announcement>> {
        try {
            this.logger.info('Searching announcements', { query, filters });

            const searchParams = {
                search: query,
                ...filters,
            };

            return await this.getAllAnnouncements(searchParams);
        } catch (error) {
            this.logger.error('Failed to search announcements', error);
            throw error;
        }
    }

    // === STATISTICS === //

    /**
     * Get announcement statistics
     * GET /admin/announcements/stats
     */
    async getAnnouncementStats(): Promise<ApiResponse<AnnouncementStats>> {
        try {
            this.logger.info('Fetching announcement statistics');
            const response = await apiClient.get<AnnouncementStats>(`${this.baseEndpoint}/stats`);
            this.logger.info('Statistics fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch announcement statistics', error);
            throw error;
        }
    }

    // === CONVENIENCE METHODS === //

    /**
     * Get announcements by type
     */
    async getAnnouncementsByType(type: AnnouncementType, params?: Omit<AnnouncementFilterParams, 'type'>): Promise<PaginatedResponse<Announcement>> {
        return await this.getAllAnnouncements({ ...params, type });
    }

    /**
     * Get pinned announcements
     */
    async getPinnedAnnouncements(params?: Omit<AnnouncementFilterParams, 'isPinned'>): Promise<PaginatedResponse<Announcement>> {
        return await this.getAllAnnouncements({ ...params, isPinned: true });
    }

    /**
     * Get draft announcements
     */
    async getDraftAnnouncements(params?: Omit<AnnouncementFilterParams, 'status'>): Promise<PaginatedResponse<Announcement>> {
        return await this.getAnnouncementsByStatus(AnnouncementStatus.DRAFT, params);
    }

    /**
     * Get published announcements
     */
    async getPublishedAnnouncements(params?: Omit<AnnouncementFilterParams, 'status'>): Promise<PaginatedResponse<Announcement>> {
        return await this.getAnnouncementsByStatus(AnnouncementStatus.PUBLISHED, params);
    }

    /**
     * Get archived announcements
     */
    async getArchivedAnnouncements(params?: Omit<AnnouncementFilterParams, 'status'>): Promise<PaginatedResponse<Announcement>> {
        return await this.getAnnouncementsByStatus(AnnouncementStatus.ARCHIVED, params);
    }
}

// Export singleton instance
export const announcementService = new AnnouncementService();
export default announcementService;
</file>

<file path="src/services/billing.service.ts">
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { ApiResponse, PaginatedResponse } from './core/types';
import {
  CreateBillDto,
  ResponseBillDto,
  UpdateBillDto,
  BillStatus
} from './types/billing.types';

export interface BillAssignedTo {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  membershipTier?: string;
}

export interface BillProperty {
  id: string;
  propertyNumber: string;
  name: string;
}

export interface Bill {
  id: string;
  title: string;
  amount: number;
  dueDate: string;
  createdAt: string;
  description?: string;
  billType: string;
  status: string;
  paidAt?: string | null;
  assignedTo?: BillAssignedTo;
  property?: BillProperty;
  documentNumber?: string;
  penaltyStartDate?: string;
  isPenaltyApplied?: boolean;
}

function mapApiBill(apiBill: any): Bill {
  return {
    id: apiBill.id,
    title: apiBill.title,
    amount: parseFloat(apiBill.amount),
    dueDate: apiBill.dueDate,
    createdAt: apiBill.createdAt,
    description: apiBill.description,
    billType: apiBill.billType,
    status: apiBill.status,
    paidAt: apiBill.paidAt,
    documentNumber: apiBill.documentNumber,
    penaltyStartDate: apiBill.penaltyStartDate,
    isPenaltyApplied: apiBill.isPenaltyApplied,
    assignedTo: apiBill.assignedTo
      ? {
          id: apiBill.assignedTo.id,
          firstName: apiBill.assignedTo.firstName,
          lastName: apiBill.assignedTo.lastName,
          email: apiBill.assignedTo.email,
          phone: apiBill.assignedTo.phone,
          membershipTier: apiBill.assignedTo.membershipTier,
        }
      : undefined,
    property: apiBill.property
      ? {
          id: apiBill.property.id,
          propertyNumber: apiBill.property.propertyNumber,
          name: apiBill.property.name,
        }
      : undefined,
  };
}

class BillingService extends BaseService<ResponseBillDto, CreateBillDto, UpdateBillDto> {
  protected baseEndpoint = '/admin/billing';

  constructor() {
    super('BillingService');
  }

  /**
   * Yeni fatura oluştur
   * POST /admin/billing
   */
  async createBill(billData: CreateBillDto): Promise<ApiResponse<ResponseBillDto>> {
    this.logger.info('Creating new bill', billData);
    
    const response = await apiClient.post<ResponseBillDto>(this.baseEndpoint, billData);
    
    this.logger.info('Bill created successfully', response.data);
    return response;
  }

  /**
   * Tüm faturaları getir
   * GET /admin/billing
   */
  async getAllBills(): Promise<ResponseBillDto[]> {
    this.logger.info('Fetching all bills');
    
    const response = await apiClient.get<ResponseBillDto[]>(this.baseEndpoint);
    const bills = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${bills.length} bills`);
    return bills;
  }

  /**
   * Belirli bir kullanıcıya ait faturaları getirir
   * GET /admin/billing/user/{userId}
   */
  async getBillsByUser(userId: string): Promise<Bill[]> {
    this.logger.info(`Fetching bills for user: ${userId}`);
    
    const response = await apiClient.get<any[]>(`${this.baseEndpoint}/user/${userId}`);
    const bills = Array.isArray(response) ? response.map(mapApiBill) : [];
    
    this.logger.info(`Fetched ${bills.length} bills for user ${userId}`);
    return bills;
  }

  /**
   * Belirli bir mülke ait faturaları getirir
   * GET /admin/billing/property/{propertyId}
   */
  async getBillsByProperty(propertyId: string): Promise<ResponseBillDto[]> {
    this.logger.info(`Fetching bills for property: ${propertyId}`);
    
    const response = await apiClient.get<ResponseBillDto[]>(`${this.baseEndpoint}/property/${propertyId}`);
    const bills = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${bills.length} bills for property ${propertyId}`);
    return bills;
  }

  /**
   * Bekleyen faturaları getirir
   * GET /admin/billing/pending
   */
  async getPendingBills(): Promise<ResponseBillDto[]> {
    this.logger.info('Fetching pending bills');
    
    const response = await apiClient.get<ResponseBillDto[]>(`${this.baseEndpoint}/pending`);
    const bills = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${bills.length} pending bills`);
    return bills;
  }

  /**
   * Gecikmiş faturaları getirir
   * GET /admin/billing/overdue
   */
  async getOverdueBills(): Promise<ResponseBillDto[]> {
    this.logger.info('Fetching overdue bills');
    
    const response = await apiClient.get<ResponseBillDto[]>(`${this.baseEndpoint}/overdue`);
    const bills = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${bills.length} overdue bills`);
    return bills;
  }

  /**
   * Faturayı ödendi olarak işaretle
   * PATCH /admin/billing/{id}/mark-paid
   */
  async markBillAsPaid(billId: string): Promise<ApiResponse<ResponseBillDto>> {
    this.logger.info(`Marking bill as paid: ${billId}`);
    
    const response = await apiClient.patch<ResponseBillDto>(`${this.baseEndpoint}/${billId}/mark-paid`);
    
    this.logger.info(`Bill ${billId} marked as paid`);
    return response;
  }

  /**
   * Faturayı güncelle
   * PATCH /admin/billing/{id}
   */
  async updateBill(billId: string, updateData: UpdateBillDto): Promise<ApiResponse<ResponseBillDto>> {
    this.logger.info(`Updating bill: ${billId}`, updateData);
    
    const response = await apiClient.patch<ResponseBillDto>(`${this.baseEndpoint}/${billId}`, updateData);
    
    this.logger.info(`Bill ${billId} updated successfully`);
    return response;
  }

  /**
   * Fatura detayını getir
   * GET /admin/billing/{id}
   */
  async getBillById(billId: string): Promise<ApiResponse<ResponseBillDto>> {
    this.logger.info(`Fetching bill details: ${billId}`);
    
    const response = await apiClient.get<ResponseBillDto>(`${this.baseEndpoint}/${billId}`);
    
    this.logger.info(`Fetched bill ${billId} details`);
    return response;
  }

  /**
   * Faturayı sil
   * DELETE /admin/billing/{id}
   */
  async deleteBill(billId: string): Promise<ApiResponse<void>> {
    this.logger.info(`Deleting bill: ${billId}`);
    
    const response = await apiClient.delete<void>(`${this.baseEndpoint}/${billId}`);
    
    this.logger.info(`Bill ${billId} deleted successfully`);
    return response;
  }
}

const billingService = new BillingService();
export default billingService;
</file>

<file path="src/services/file-upload.service.ts">
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';
import { ApiResponse } from './core/types';

export interface UploadedFile {
  id: string;
  fileName: string;
  fileUrl: string;
  fileType: string;
  fileSize: number;
  uploadedAt: string;
}

export interface UploadFileResponse {
  file: UploadedFile;
  success: boolean;
  message: string;
}

export const fileUploadService = {
  /**
   * Upload a single file to the server
   */
  async uploadFile(file: File): Promise<UploadFileResponse> {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('fileName', file.name);
    formData.append('fileType', file.type);
    formData.append('fileSize', file.size.toString());

    console.log('Uploading file:', {
      name: file.name,
      type: file.type,
      size: file.size
    });

    try {
      const response: ApiResponse<UploadFileResponse> = await apiClient.post(
        apiConfig.endpoints.files.upload,
        formData
      );

      console.log('File upload response:', response);
      return response.data;
    } catch (error) {
      console.error('Error uploading file:', error);
      throw error;
    }
  },

  /**
   * Upload multiple files
   */
  async uploadFiles(files: File[]): Promise<UploadFileResponse[]> {
    console.log(`Uploading ${files.length} files...`);
    
    const uploadPromises = files.map(file => this.uploadFile(file));
    
    try {
      const results = await Promise.all(uploadPromises);
      console.log('All files uploaded successfully:', results);
      return results;
    } catch (error) {
      console.error('Error uploading some files:', error);
      throw error;
    }
  },

  /**
   * Get file info by URL or ID
   */
  async getFileInfo(fileId: string): Promise<UploadedFile> {
    const response: ApiResponse<UploadedFile> = await apiClient.get(`/admin/files/${fileId}`);
    return response.data;
  },

  /**
   * Delete a file by ID
   */
  async deleteFile(fileId: string): Promise<{ success: boolean; message: string }> {
    const response: ApiResponse<{ success: boolean; message: string }> = await apiClient.delete(`/admin/files/${fileId}`);
    return response.data;
  },

  /**
   * Validate file before upload
   */
  validateFile(file: File, options: {
    maxSize?: number; // in MB
    allowedTypes?: string[];
  } = {}): { isValid: boolean; error?: string } {
    const { maxSize = 5, allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'] } = options;

    // Check file size
    const fileSizeInMB = file.size / (1024 * 1024);
    if (fileSizeInMB > maxSize) {
      return {
        isValid: false,
        error: `Dosya boyutu ${maxSize}MB'den büyük olamaz. Mevcut boyut: ${fileSizeInMB.toFixed(2)}MB`
      };
    }

    // Check file type
    if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {
      return {
        isValid: false,
        error: `Desteklenmeyen dosya formatı. İzin verilen formatlar: ${allowedTypes.join(', ')}`
      };
    }

    return { isValid: true };
  },
};
</file>

<file path="src/services/payment.service.ts">
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { ApiResponse } from './core/types';
import {
  CreatePaymentDto,
  ResponsePaymentDto,
  UpdatePaymentDto,
  PaymentStatus,
  PaymentMethod
} from './types/billing.types';

class PaymentService extends BaseService<ResponsePaymentDto, CreatePaymentDto, UpdatePaymentDto> {
  protected baseEndpoint = '/admin/payments';

  constructor() {
    super('PaymentService');
  }

  /**
   * Yeni ödeme kaydet
   * POST /admin/payments
   */
  async createPayment(paymentData: CreatePaymentDto): Promise<ApiResponse<ResponsePaymentDto>> {
    this.logger.info('Creating new payment', paymentData);
    
    const response = await apiClient.post<ResponsePaymentDto>(this.baseEndpoint, paymentData);
    
    this.logger.info('Payment created successfully', response.data);
    return response;
  }

  /**
   * Tüm ödemeleri getir
   * GET /admin/payments
   */
  async getAllPayments(): Promise<ResponsePaymentDto[]> {
    this.logger.info('Fetching all payments');
    
    const response = await apiClient.get<ResponsePaymentDto[]>(this.baseEndpoint);
    const payments = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${payments.length} payments`);
    return payments;
  }

  /**
   * Duruma göre ödemeleri getir
   * GET /admin/payments/status/{status}
   */
  async getPaymentsByStatus(status: PaymentStatus): Promise<ResponsePaymentDto[]> {
    this.logger.info(`Fetching payments with status: ${status}`);
    
    const response = await apiClient.get<ResponsePaymentDto[]>(`${this.baseEndpoint}/status/${status}`);
    const payments = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${payments.length} payments with status ${status}`);
    return payments;
  }

  /**
   * Tarih aralığına göre ödemeleri getir
   * GET /admin/payments/date-range?startDate=...&endDate=...
   */
  async getPaymentsByDateRange(startDate: string, endDate: string): Promise<ResponsePaymentDto[]> {
    this.logger.info(`Fetching payments between ${startDate} and ${endDate}`);
    
    const response = await apiClient.get<ResponsePaymentDto[]>(
      `${this.baseEndpoint}/date-range?startDate=${startDate}&endDate=${endDate}`
    );
    const payments = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${payments.length} payments for date range`);
    return payments;
  }

  /**
   * Belirli ay ve yıla göre ödemeleri getir
   * GET /admin/payments/month/{month}/year/{year}
   */
  async getPaymentsByMonth(month: number, year: number): Promise<ResponsePaymentDto[]> {
    this.logger.info(`Fetching payments for ${month}/${year}`);
    
    const response = await apiClient.get<ResponsePaymentDto[]>(
      `${this.baseEndpoint}/month/${month}/year/${year}`
    );
    const payments = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${payments.length} payments for ${month}/${year}`);
    return payments;
  }

  /**
   * Belirli bir mülke ait ödemeleri getir
   * GET /admin/payments/property/{propertyId}
   */
  async getPaymentsByProperty(propertyId: string): Promise<ResponsePaymentDto[]> {
    this.logger.info(`Fetching payments for property: ${propertyId}`);
    
    const response = await apiClient.get<ResponsePaymentDto[]>(`${this.baseEndpoint}/property/${propertyId}`);
    const payments = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${payments.length} payments for property ${propertyId}`);
    return payments;
  }

  /**
   * Belirli bir kullanıcının ödemelerini getir
   * GET /admin/payments/user/{userId}
   */
  async getPaymentsByUser(userId: string): Promise<ResponsePaymentDto[]> {
    this.logger.info(`Fetching payments for user: ${userId}`);
    
    const response = await apiClient.get<ResponsePaymentDto[]>(`${this.baseEndpoint}/user/${userId}`);
    const payments = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${payments.length} payments for user ${userId}`);
    return payments;
  }

  /**
   * Belirli bir faturaya ait ödemeleri getir
   * GET /admin/payments/bill/{billId}
   */
  async getPaymentsByBill(billId: string): Promise<ResponsePaymentDto[]> {
    this.logger.info(`Fetching payments for bill: ${billId}`);
    
    const response = await apiClient.get<ResponsePaymentDto[]>(`${this.baseEndpoint}/bill/${billId}`);
    const payments = Array.isArray(response) ? response : [];
    
    this.logger.info(`Fetched ${payments.length} payments for bill ${billId}`);
    return payments;
  }

  /**
   * Ödeme detayını getir
   * GET /admin/payments/{id}
   */
  async getPaymentById(paymentId: string): Promise<ApiResponse<ResponsePaymentDto>> {
    this.logger.info(`Fetching payment details: ${paymentId}`);
    
    const response = await apiClient.get<ResponsePaymentDto>(`${this.baseEndpoint}/${paymentId}`);
    
    this.logger.info(`Fetched payment ${paymentId} details`);
    return response;
  }

  /**
   * Ödemeyi güncelle
   * PUT /admin/payments/{id}
   */
  async updatePayment(paymentId: string, updateData: UpdatePaymentDto): Promise<ApiResponse<ResponsePaymentDto>> {
    this.logger.info(`Updating payment: ${paymentId}`, updateData);
    
    const response = await apiClient.put<ResponsePaymentDto>(`${this.baseEndpoint}/${paymentId}`, updateData);
    
    this.logger.info(`Payment ${paymentId} updated successfully`);
    return response;
  }

  /**
   * Ödemeyi sil
   * DELETE /admin/payments/{id}
   */
  async deletePayment(paymentId: string): Promise<ApiResponse<void>> {
    this.logger.info(`Deleting payment: ${paymentId}`);
    
    const response = await apiClient.delete<void>(`${this.baseEndpoint}/${paymentId}`);
    
    this.logger.info(`Payment ${paymentId} deleted successfully`);
    return response;
  }

  /**
   * Bekleyen ödemeleri getir
   */
  async getPendingPayments(): Promise<ResponsePaymentDto[]> {
    return this.getPaymentsByStatus('PENDING');
  }

  /**
   * Tamamlanan ödemeleri getir
   */
  async getCompletedPayments(): Promise<ResponsePaymentDto[]> {
    return this.getPaymentsByStatus('COMPLETED');
  }

  /**
   * Başarısız ödemeleri getir
   */
  async getFailedPayments(): Promise<ResponsePaymentDto[]> {
    return this.getPaymentsByStatus('FAILED');
  }

  /**
   * İade edilen ödemeleri getir
   */
  async getRefundedPayments(): Promise<ResponsePaymentDto[]> {
    return this.getPaymentsByStatus('REFUNDED');
  }
}

const paymentService = new PaymentService();
export default paymentService;
</file>

<file path="src/services/qr-code.service.ts">
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';

export interface GuestQrCode {
  id: string;
  type: string;
  createdBy: { id: string };
  guestName: string;
  createdAt: string;
  // ...other fields as needed
}

export interface GuestQrCodeResponse {
  data: GuestQrCode[];
}

class QrCodeService {
  /**
   * Fetch guest QR codes by userId
   * GET /admin/qrcodes/guest/by-user/:userId
   */
  async getGuestQRCodesByUser(userId: string): Promise<GuestQrCode[]> {
    const endpoint = `/admin/qrcodes/guest/by-user/${userId}`;
    const response = await apiClient.get<GuestQrCodeResponse>(endpoint);
    return response.data.data;
  }
}

const qrCodeService = new QrCodeService();
export default qrCodeService;
</file>

<file path="src/services/units.service.ts">
import { BaseService } from './core/base.service';
import { 
    Property, 
    PropertyFilterParams, 
    PropertyStatistics, 
    QuickStats, 
    PropertyActivity 
} from './types/property.types';
import { ApiResponse, PaginatedResponse } from './core/types';
import { apiConfig } from './config/api.config';
import { apiClient } from './api/client';

export class UnitsService extends BaseService<Property, Partial<Property>, Partial<Property>> {
    protected baseEndpoint = apiConfig.endpoints.properties.admin.base;

    constructor() {
        super('UnitsService');
    }

    async getAllUnits(filters: PropertyFilterParams = {}): Promise<PaginatedResponse<Property>> {
        try {
            const params = this.buildFilterParams(filters);
            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get(`${this.baseEndpoint}${queryParams}`);
            const data = response.data.data || response.data;
            const pagination = response.pagination || {
                total: data.length || 0,
                page: filters.page || 1,
                limit: filters.limit || 20,
                totalPages: Math.ceil((data.length || 0) / (filters.limit || 20))
            };
            return {
                data,
                pagination: {
                    page: pagination.page,
                    limit: pagination.limit,
                    total: pagination.total,
                    totalPages: pagination.totalPages
                },
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages
            };
        } catch (error) {
            throw error;
        }
    }

    async getUnitById(id: string): Promise<ApiResponse<Property>> {
        const response = await apiClient.get(`${this.baseEndpoint}/${id}`);
        return response;
    }

    async createUnit(unitData: Partial<Property>): Promise<ApiResponse<Property>> {
        const response = await apiClient.post(`${this.baseEndpoint}`, unitData);
        return response;
    }

    async updateUnit(id: string, unitData: Partial<Property>): Promise<ApiResponse<Property>> {
        const response = await apiClient.put(`${this.baseEndpoint}/${id}`, unitData);
        return response;
    }

    async deleteUnit(id: string): Promise<ApiResponse<void>> {
        const response = await apiClient.delete(`${this.baseEndpoint}/${id}`);
        return response;
    }

    async getQuickStats(): Promise<ApiResponse<QuickStats>> {
        const response = await apiClient.get(`${apiConfig.endpoints.properties.admin.quickStats}`);
        return response;
    }

    async getRecentActivities(limit: number = 10, days: number = 7): Promise<ApiResponse<PropertyActivity[]>> {
        const queryParams = this.buildQueryParams({ limit, days });
        const response = await apiClient.get(`${apiConfig.endpoints.properties.admin.recentActivities}${queryParams}`);
        return response;
    }

    async getStatistics(filters: PropertyFilterParams = {}): Promise<ApiResponse<PropertyStatistics>> {
        const params = this.buildFilterParams(filters);
        const queryParams = this.buildQueryParams(params);
        const response = await apiClient.get(`${apiConfig.endpoints.properties.admin.statistics}${queryParams}`);
        return response;
    }

    async exportUnits(filters: PropertyFilterParams = {}, format: 'csv' | 'excel' = 'excel'): Promise<Blob> {
        const params = { ...this.buildFilterParams(filters), format };
        const queryParams = this.buildQueryParams(params);
        const response = await apiClient.get(`${apiConfig.endpoints.properties.admin.export}${queryParams}`);
        return response.data;
    }

    async bulkUpdateUnits(unitIds: string[], updateData: Partial<Property>): Promise<ApiResponse<void>> {
        const response = await apiClient.patch(`${apiConfig.endpoints.properties.admin.bulkUpdate}`, {
            ids: unitIds,
            data: updateData
        });
        return response;
    }

    async getPropertyById(id: string): Promise<ApiResponse<Property>> {
        // Fetch property details from /admin/properties/{id}
        const response = await apiClient.get(`/admin/properties/${id}`);
        return response; // Return the full API response as required
    }

    private buildFilterParams(filters: PropertyFilterParams): Record<string, any> {
        const params: Record<string, any> = {};
        
        if (filters.type) params.type = filters.type;
        if (filters.status) params.status = filters.status;
        if (filters.blockNumber) params.blockNumber = filters.blockNumber;
        if (filters.floor) params.floor = filters.floor;
        if (filters.area) params.area = filters.area;
        if (filters.rooms) params.rooms = filters.rooms;
        if (filters.search) params.search = filters.search;
        if (filters.page) params.page = filters.page;
        if (filters.limit) params.limit = filters.limit;
        if (filters.orderColumn) params.orderColumn = filters.orderColumn;
        if (filters.orderBy) params.orderBy = filters.orderBy;

        return params;
    }

    getTypeInfo(type: string): { label: string; icon: string; color: string } {
        const typeMap: Record<string, { label: string; icon: string; color: string }> = {
            'RESIDENCE': { label: 'Daire', icon: 'Building', color: 'primary' },
            'VILLA': { label: 'Villa', icon: 'Home', color: 'success' },
            'COMMERCIAL': { label: 'Ticari', icon: 'Store', color: 'info' },
            'PARKING': { label: 'Otopark', icon: 'Car', color: 'warning' }
        };
        return typeMap[type] || { label: 'Bilinmiyor', icon: 'Building', color: 'secondary' };
    }

    getStatusInfo(status: string): { label: string; icon: string; color: string } {
        const statusMap: Record<string, { label: string; icon: string; color: string }> = {
            'OCCUPIED': { label: 'Dolu', icon: 'CheckCircle', color: 'success' },
            'AVAILABLE': { label: 'Boş', icon: 'AlertCircle', color: 'info' },
            'UNDER_MAINTENANCE': { label: 'Bakım', icon: 'RotateCcw', color: 'warning' },
            'RESERVED': { label: 'Rezerve', icon: 'Calendar', color: 'secondary' }
        };
        return statusMap[status] || { label: 'Bilinmiyor', icon: 'AlertCircle', color: 'secondary' };
    }
}

export const unitsService = new UnitsService();
</file>

<file path=".mcp.json">
{
  "mcpServers": {
    "API-99CLUB": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "apidog-mcp-server@latest",
        "--oas=https://ninetynineclub-api.onrender.com/api-docs-json"
      ],
      "env": {}
    },
    "context7": {
      "command": "npx",
      "args": [
        "-y",
        "@upstash/context7-mcp"
      ]
    },
    "sequential-thinking": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ]
    },
    "playwright": {
      "command": "npx",
      "args": [
        "-y",
        "@playwright/mcp"
      ]
    }
  }
}
</file>

<file path="auth-register-endpoint.md">
# Register Endpoint Documentation

## Overview
**Endpoint:** `POST /auth/register`  
**Controller:** `AuthController`  
**Access:** Public (No authentication required)  
**Purpose:** User registration with document verification

## Request

### Headers
```
Content-Type: application/json
```

### Request Body Structure

```json
{
  "personalInfo": {
    "firstName": "string",
    "lastName": "string", 
    "phone": "string (optional)",
    "email": "string",
    "password": "string"
  },
  "propertyInfo": {
    "name": "string",
    "block": "string", 
    "propertyNumber": "string",
    "propertyType": "PropertyType enum",
    "ownershipType": "owner | tenant"
  },
  "documents": [
    {
      "type": "string",
      "url": "string"
    }
  ]
}
```

## DTOs

### PersonalInfoDto
| Field | Type | Required | Validation | Description |
|-------|------|----------|------------|-------------|
| `firstName` | string | ✅ | @IsNotEmpty | Kullanıcının adı |
| `lastName` | string | ✅ | @IsNotEmpty | Kullanıcının soyadı |
| `phone` | string | ❌ | @IsOptional | Telefon numarası |
| `email` | string | ✅ | @IsEmail, @IsNotEmpty | E-posta adresi (unique) |
| `password` | string | ✅ | @MinLength(8) | Şifre (minimum 8 karakter) |

### PropertyInfoDto  
| Field | Type | Required | Validation | Description |
|-------|------|----------|------------|-------------|
| `name` | string | ✅ | @IsNotEmpty | Gayrimenkul adı |
| `block` | string | ✅ | @IsNotEmpty | Blok bilgisi |
| `propertyNumber` | string | ✅ | @IsNotEmpty | Daire/Unit numarası |
| `propertyType` | PropertyType | ✅ | @IsEnum(PropertyType) | Gayrimenkul tipi |
| `ownershipType` | string | ✅ | @IsNotEmpty | Sahiplik durumu (owner/tenant) |

### DocumentDto
| Field | Type | Required | Validation | Description |
|-------|------|----------|------------|-------------|
| `type` | string | ✅ | @IsNotEmpty | Belge tipi |
| `url` | string | ✅ | @IsNotEmpty | Belge URL'i |

## Enums

### PropertyType
```typescript
enum PropertyType {
  RESIDENCE = 'RESIDENCE',    // Konut
  VILLA = 'VILLA',           // Villa  
  COMMERCIAL = 'COMMERCIAL', // Ticari
  OFFICE = 'OFFICE'          // Ofis
}
```

### OwnershipType
```typescript
type OwnershipType = 'owner' | 'tenant';
```

### UserStatus (System-assigned)
```typescript
enum UserStatus {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE', 
  PENDING = 'PENDING',      // Default for new registrations
  BANNED = 'BANNED',
  SUSPENDED = 'SUSPENDED'
}
```

### VerificationStatus (System-assigned)
```typescript
enum VerificationStatus {
  PENDING = 'PENDING',        // Default for new registrations
  APPROVED = 'APPROVED',
  REJECTED = 'REJECTED', 
  UNDER_REVIEW = 'UNDER_REVIEW'
}
```

## Response

### Success Response (201 Created)
```json
{
  "success": true,
  "message": "User successfully registered and pending verification",
  "userId": "uuid-string",
  "status": "PENDING"
}
```

### Error Responses

#### 409 Conflict - Email Already Exists
```json
{
  "statusCode": 409,
  "message": "Bu e-posta adresi zaten kayıtlı. Lütfen farklı bir e-posta kullanın.",
  "error": "Conflict"
}
```

#### 409 Conflict - Phone Already Exists  
```json
{
  "statusCode": 409,
  "message": "Bu telefon numarası zaten kayıtlı. Lütfen farklı bir telefon numarası kullanın.",
  "error": "Conflict"
}
```

#### 400 Bad Request - Validation Error
```json
{
  "statusCode": 400,
  "message": [
    "email must be an email",
    "password must be longer than or equal to 8 characters",
    "propertyType must be a valid PropertyType"
  ],
  "error": "Bad Request"
}
```

## Example Usage

### Valid Request Example
```bash
curl -X POST http://localhost:3000/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "personalInfo": {
      "firstName": "Ahmet",
      "lastName": "Yılmaz", 
      "phone": "+905551234567",
      "email": "ahmet.yilmaz@email.com",
      "password": "securePassword123"
    },
    "propertyInfo": {
      "name": "Residence Premium",
      "block": "A",
      "propertyNumber": "12",
      "propertyType": "RESIDENCE",
      "ownershipType": "owner"
    },
    "documents": [
      {
        "type": "identity_card",
        "url": "https://example.com/documents/identity-123.pdf"
      },
      {
        "type": "property_deed", 
        "url": "https://example.com/documents/deed-456.pdf"
      }
    ]
  }'
```

### Success Response Example
```json
{
  "success": true,
  "message": "User successfully registered and pending verification",
  "userId": "123e4567-e89b-12d3-a456-426614174000",
  "status": "PENDING"
}
```

## Process Flow

1. **Validation**: Request body validation ile kontrol edilir
2. **Duplicate Check**: Email ve telefon numarası benzersizlik kontrolü
3. **Default Role**: Kullanıcıya otomatik olarak 'resident' rolü atanır  
4. **Password Hash**: Şifre hash'lenerek güvenli şekilde saklanır
5. **User Creation**: Kullanıcı `PENDING` status ile oluşturulur
6. **Document Storage**: Belgeler JSON formatında user entity'sine eklenir
7. **Transaction**: Tüm işlemler database transaction içinde yapılır

## Notes

- ✅ Public endpoint - Kimlik doğrulaması gerektirmez
- ✅ Yeni kullanıcılar otomatik olarak `PENDING` status ile oluşturulur
- ✅ Verification status `PENDING` olarak ayarlanır  
- ✅ Default role olarak `resident` atanır
- ✅ Email ve telefon numarası unique olmalıdır
- ✅ Şifreler bcrypt ile hash'lenir
- ✅ Documents array en az 1 belge içermelidir
- ✅ Tüm işlem database transaction içinde yapılır
- ⚠️ Kullanıcı admin onayı beklemek zorundadır (verification süreci)

## Related Endpoints

- `POST /auth/login` - Kullanıcı girişi
- `GET /admin/users/pending` - Onay bekleyen kullanıcıları listele  
- `PUT /admin/users/{id}/approve` - Kullanıcı onaylama
- `PUT /admin/users/{id}/reject` - Kullanıcı reddetme
</file>

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "mcp__API-99CLUB__read_project_oas_z3cfto",
      "mcp__API-99CLUB__read_project_oas_ref_resources_z3cfto",
      "Bash(rg:*)",
      "Bash(npm run lint)",
      "Bash(npm run type-check:*)",
      "Bash(npx tsc:*)",
      "Bash(npx esbuild:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run build:*)",
      "Bash(gh repo create:*)",
      "Bash(gh api:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(mkdir:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(rm:*)",
      "Bash(npm run lint:*)",
      "mcp__API-99CLUB__read_project_oas_ref_resources_o59bcl",
      "mcp__API-99CLUB__read_project_oas_a62p51",
      "mcp__API-99CLUB__read_project_oas_ref_resources_a62p51",
      "mcp__API-99CLUB__read_project_oas_o59bcl"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "API-99CLUB"
  ]
}
</file>

<file path="src/app/components/ui/Badge.tsx">
import React from 'react';
import { cn } from '@/lib/utils';

interface BadgeProps {
    children: React.ReactNode;
    variant?: 'default' | 'outline' | 'solid' | 'soft' | 'success' | 'warning' | 'danger' | 'info';
    color?: 'primary' | 'gold' | 'red' | 'secondary' | 'accent' | 'success' | 'warning' | 'danger' | 'info';
    size?: 'sm' | 'md' | 'lg';
    rounded?: boolean;
    dot?: boolean;
    className?: string;
}

const Badge: React.FC<BadgeProps> = ({
    children,
    variant = 'default',
    color = 'secondary',
    size = 'md',
    rounded = true,
    dot = false,
    className,
}) => {
    const sizeClasses = {
        sm: 'px-2 py-1 text-xs',
        md: 'px-2.5 py-1.5 text-sm',
        lg: 'px-3 py-2 text-base',
    };

    const colorClasses = {
        default: {
            primary: 'bg-background-primary/20 text-text-primary',
            gold: 'bg-primary-gold/20 text-text-accent',
            red: 'bg-primary-red/20 text-primary-red',
            secondary: 'bg-background-secondary text-text-primary',
            accent: 'bg-primary-gold-light text-text-accent',
            success: 'bg-semantic-success-50 text-semantic-success-600',
            warning: 'bg-semantic-warning-50 text-semantic-warning-600',
            danger: 'bg-primary-red/20 text-primary-red',
            info: 'bg-primary-blue/20 text-primary-blue',
        },
        outline: {
            primary: 'border border-background-primary text-text-primary bg-transparent',
            gold: 'border border-primary-gold text-text-accent bg-transparent',
            red: 'border border-primary-red text-primary-red bg-transparent',
            secondary: 'border border-primary-dark-gray text-text-secondary bg-transparent',
            accent: 'border border-text-accent text-text-accent bg-transparent',
            success: 'border border-semantic-success-600 text-semantic-success-600 bg-transparent',
            warning: 'border border-semantic-warning-600 text-semantic-warning-600 bg-transparent',
            danger: 'border border-primary-red text-primary-red bg-transparent',
            info: 'border border-primary-blue text-primary-blue bg-transparent',
        },
        solid: {
            primary: 'bg-background-primary text-text-primary',
            gold: 'bg-primary-gold text-background-primary',
            red: 'bg-primary-red text-text-primary',
            secondary: 'bg-background-secondary text-text-primary',
            accent: 'bg-text-accent text-background-primary',
            success: 'bg-semantic-success-600 text-text-on-dark',
            warning: 'bg-semantic-warning-600 text-text-on-dark',
            danger: 'bg-primary-red text-text-on-dark',
            info: 'bg-primary-blue text-text-on-dark',
        },
        soft: {
            primary: 'bg-background-primary/10 text-text-primary border border-background-primary/20',
            gold: 'bg-primary-gold/10 text-text-accent border border-primary-gold/20',
            red: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            secondary: 'bg-background-secondary/50 text-text-primary border border-primary-dark-gray/20',
            accent: 'bg-primary-gold-light/50 text-text-accent border border-text-accent/20',
            success: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            warning: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            danger: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            info: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
        },
        danger: {
            primary: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            gold: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            red: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            secondary: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            accent: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            success: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            warning: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            danger: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
            info: 'bg-primary-red/10 text-primary-red border border-primary-red/20',
        },
        warning: {
            primary: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            gold: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            red: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            secondary: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            accent: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            success: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            warning: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            danger: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
            info: 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200',
        },
        success: {
            primary: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            gold: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            red: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            secondary: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            accent: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            success: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            warning: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            danger: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
            info: 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200',
        },
        info: {
            primary: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            gold: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            red: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            secondary: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            accent: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            success: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            warning: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            danger: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
            info: 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20',
        },
    };

    const dotColors = {
        primary: 'bg-background-primary',
        gold: 'bg-primary-gold',
        red: 'bg-primary-red',
        secondary: 'bg-primary-gray-blue',
        accent: 'bg-text-accent',
        success: 'bg-semantic-success-600',
        warning: 'bg-semantic-warning-600',
        danger: 'bg-primary-red',
        info: 'bg-primary-blue',
    };

    // Semantic variant'lar için sabit stiller (NinetyNine tasarım sistemi)
    const getSemanticClasses = (variant: string) => {
        switch (variant) {
            case 'success':
                return 'bg-semantic-success-50 text-semantic-success-600 border border-semantic-success-200';
            case 'warning':
                return 'bg-semantic-warning-50 text-semantic-warning-600 border border-semantic-warning-200';
            case 'danger':
                return 'bg-primary-red/10 text-primary-red border border-primary-red/20';
            case 'info':
                return 'bg-primary-blue/10 text-primary-blue border border-primary-blue/20';
            default:
                return null;
        }
    };

    const semanticClasses = getSemanticClasses(variant);

    return (
        <span
            className={cn(
                'inline-flex items-center font-medium',
                sizeClasses[size],
                semanticClasses || colorClasses[variant]?.[color] || colorClasses.default.secondary,
                rounded ? 'rounded-full' : 'rounded-lg',
                className
            )}
        >
            {dot && (
                <span
                    className={cn(
                        'w-2 h-2 rounded-full mr-1.5',
                        dotColors[color]
                    )}
                />
            )}
            {children}
        </span>
    );
};

export default Badge;
</file>

<file path="src/app/components/ui/FileUpload.tsx">
'use client'
import { forwardRef, InputHTMLAttributes, useState, useRef } from 'react'
import { Upload, X, File } from 'lucide-react'

interface FileUploadProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {
    label?: string
    error?: string
    helperText?: string
    description?: string
    isRequired?: boolean
    acceptedTypes?: string[]
    maxSize?: number // in MB
    showPreview?: boolean
    multiple?: boolean
    onFilesChange?: (files: FileList | null) => void
    selectedFiles?: File[] // Controlled state from parent
    onFileRemove?: (index: number) => void // Callback for removing files
}

const FileUpload = forwardRef<HTMLInputElement, FileUploadProps>(
    ({
        label,
        error,
        helperText,
        description,
        isRequired = false,
        acceptedTypes = [],
        maxSize = 5,
        showPreview = true,
        multiple = false,
        onFilesChange,
        selectedFiles = [], // Use prop or default to empty array
        onFileRemove,
        className = '',
        ...props
    }, ref) => {
        const [dragActive, setDragActive] = useState(false)
        const inputRef = useRef<HTMLInputElement>(null)

        const handleDrag = (e: React.DragEvent) => {
            e.preventDefault()
            e.stopPropagation()
            if (e.type === 'dragenter' || e.type === 'dragover') {
                setDragActive(true)
            } else if (e.type === 'dragleave') {
                setDragActive(false)
            }
        }

        const handleDrop = (e: React.DragEvent) => {
            e.preventDefault()
            e.stopPropagation()
            setDragActive(false)

            const files = e.dataTransfer.files
            handleFiles(files)
        }

        const handleFiles = (files: FileList | null) => {
            if (!files) return

            const fileArray = Array.from(files)
            const validFiles = fileArray.filter(file => {
                // Check file type
                if (acceptedTypes.length > 0) {
                    const fileType = file.type.toLowerCase()
                    const isValidType = acceptedTypes.some(type =>
                        fileType.includes(type.toLowerCase()) ||
                        file.name.toLowerCase().endsWith(type.toLowerCase())
                    )
                    if (!isValidType) return false
                }

                // Check file size
                if (file.size > maxSize * 1024 * 1024) return false

                return true
            })

            // Use callback to let parent handle file state
            onFilesChange?.(files)
        }

        const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
            handleFiles(e.target.files)
        }

        const removeFile = (index: number) => {
            onFileRemove?.(index)
        }

        const formatFileSize = (bytes: number) => {
            if (bytes === 0) return '0 Bytes'
            const k = 1024
            const sizes = ['Bytes', 'KB', 'MB', 'GB']
            const i = Math.floor(Math.log(bytes) / Math.log(k))
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
        }

        return (
            <div className="space-y-2">
                {label && (
                    <label className="block text-sm font-medium text-text-primary font-inter">
                        {label}
                        {isRequired && <span className="text-primary-red ml-1">*</span>}
                    </label>
                )}

                <div
                    className={`
            relative border-2 border-dashed rounded-lg p-6 text-center transition-colors
            ${dragActive ? 'border-primary-gold bg-primary-gold/10' : 'border-primary-gold/30 hover:border-primary-gold/50'}
            ${error ? 'border-primary-red' : ''}
            bg-background-secondary
            ${className}
          `}
                    onDragEnter={handleDrag}
                    onDragLeave={handleDrag}
                    onDragOver={handleDrag}
                    onDrop={handleDrop}
                >
                    <input
                        ref={inputRef}
                        type="file"
                        multiple={multiple}
                        accept={acceptedTypes.join(',')}
                        onChange={handleInputChange}
                        className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                        {...props}
                    />

                    <div className="space-y-2">
                        <Upload className="mx-auto h-12 w-12 text-text-secondary" />
                        <div className="text-sm text-text-primary font-inter">
                            <span className="font-medium">Dosya yüklemek için tıklayın</span>
                            <span className="text-text-secondary"> veya sürükleyip bırakın</span>
                        </div>
                        <p className="text-xs text-text-secondary font-inter">
                            {description || (
                                <>
                                    {acceptedTypes.length > 0 && `Desteklenen formatlar: ${acceptedTypes.join(', ')}`}
                                    {maxSize && ` • Maksimum boyut: ${maxSize}MB`}
                                </>
                            )}
                        </p>
                    </div>
                </div>

                {/* Preview */}
                {showPreview && selectedFiles.length > 0 && (
                    <div className="space-y-2">
                        <p className="text-sm font-medium text-text-primary font-inter">Seçilen dosyalar:</p>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            {selectedFiles.map((file, index) => {
                                const isImage = file.type.startsWith('image/');
                                const imageUrl = isImage ? URL.createObjectURL(file) : null;
                                
                                return (
                                    <div key={index} className="relative bg-background-card rounded-lg border border-primary-gold/20 overflow-hidden">
                                        {/* Image Preview */}
                                        {isImage && imageUrl ? (
                                            <div className="aspect-video bg-gray-100 relative">
                                                <img
                                                    src={imageUrl}
                                                    alt={file.name}
                                                    className="w-full h-full object-cover"
                                                    onLoad={() => URL.revokeObjectURL(imageUrl)}
                                                />
                                                <button
                                                    type="button"
                                                    onClick={() => removeFile(index)}
                                                    className="absolute top-2 right-2 bg-primary-red text-white rounded-full p-1 hover:bg-primary-red/80 transition-colors"
                                                >
                                                    <X className="h-3 w-3" />
                                                </button>
                                            </div>
                                        ) : (
                                            <div className="aspect-video bg-gray-100 flex items-center justify-center">
                                                <File className="h-8 w-8 text-text-secondary" />
                                            </div>
                                        )}
                                        
                                        {/* File Info */}
                                        <div className="p-3">
                                            <div className="flex items-center justify-between">
                                                <div className="flex-1 min-w-0">
                                                    <p className="text-sm text-text-primary font-inter truncate" title={file.name}>
                                                        {file.name}
                                                    </p>
                                                    <p className="text-xs text-text-secondary font-inter">
                                                        {formatFileSize(file.size)}
                                                    </p>
                                                </div>
                                                {!isImage && (
                                                    <button
                                                        type="button"
                                                        onClick={() => removeFile(index)}
                                                        className="ml-2 text-primary-red hover:text-primary-red/80 transition-colors"
                                                    >
                                                        <X className="h-4 w-4" />
                                                    </button>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    </div>
                )}

                {error && (
                    <p className="text-sm text-primary-red font-inter">{error}</p>
                )}

                {helperText && !error && (
                    <p className="text-sm text-text-secondary font-inter">{helperText}</p>
                )}
            </div>
        )
    }
)

FileUpload.displayName = 'FileUpload'

export default FileUpload
</file>

<file path="src/app/components/ui/Input.tsx">
import { forwardRef, InputHTMLAttributes } from 'react'
import { LucideIcon } from 'lucide-react'

interface InputProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'> {
    label?: string
    error?: string
    helperText?: string
    icon?: LucideIcon
    variant?: 'default' | 'filled' | 'outlined'
    isRequired?: boolean
    onChange?: any
}

const Input = forwardRef<HTMLInputElement, InputProps>(
    ({
        label,
        error,
        helperText,
        icon: Icon,
        variant = 'default',
        isRequired = false,
        className = '',
        onChange,
        ...props
    }, ref) => {
        const baseClasses = 'w-full px-3 py-2 text-sm rounded-lg border transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50'

        const variantClasses = {
            default: 'border-primary-gold/30 bg-background-secondary text-text-primary hover:border-primary-gold/50 focus:border-primary-gold placeholder:text-text-secondary',
            filled: 'border-primary-gold/20 bg-background-card text-text-primary hover:bg-background-secondary focus:bg-background-secondary focus:border-primary-gold placeholder:text-text-secondary',
            outlined: 'border-primary-gold/40 bg-transparent text-text-primary hover:border-primary-gold/60 focus:border-primary-gold placeholder:text-text-secondary'
        }

        const errorClasses = error ? 'border-primary-red focus:ring-primary-red/50 focus:border-primary-red' : ''

        return (
            <div className="space-y-1">
                {label && (
                    <label className="block text-sm font-medium text-text-primary font-inter">
                        {label}
                        {isRequired && <span className="text-primary-red ml-1">*</span>}
                    </label>
                )}

                <div className="relative">
                    {Icon && (
                        <Icon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary w-5 h-5" />
                    )}

                    <input
                        ref={ref}
                        className={`
              ${baseClasses}
              ${variantClasses[variant]}
              ${errorClasses}
              ${Icon ? 'pl-10' : ''}
              ${className}
            `}
                        onChange={onChange}
                        {...props}
                    />
                </div>

                {error && (
                    <p className="text-sm text-primary-red font-inter">{error}</p>
                )}

                {helperText && !error && (
                    <p className="text-sm text-text-secondary font-inter">{helperText}</p>
                )}
            </div>
        )
    }
)

Input.displayName = 'Input'

export default Input
</file>

<file path="src/app/components/ui/SearchBar.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { Search, X, Filter, ChevronDown } from 'lucide-react';
import { cn } from '@/lib/utils';
import Button from './Button';

interface SearchBarProps {
    placeholder?: string;
    value?: string;
    onChange?: (value: string) => void;
    onSearch?: (value: string) => void;
    onClear?: () => void;
    showAdvancedFilter?: boolean;
    onAdvancedFilterClick?: () => void;
    showClearButton?: boolean;
    size?: 'sm' | 'md' | 'lg';
    className?: string;
    suggestions?: string[];
    onSuggestionClick?: (suggestion: string) => void;
    disabled?: boolean;
    autoFocus?: boolean;
    debounceMs?: number;
}

const SearchBar: React.FC<SearchBarProps> = ({
    placeholder = 'Ara...',
    value: controlledValue,
    onChange,
    onSearch,
    onClear,
    showAdvancedFilter = false,
    onAdvancedFilterClick,
    showClearButton = true,
    size = 'md',
    className,
    suggestions = [],
    onSuggestionClick,
    disabled = false,
    autoFocus = false,
    debounceMs = 300,
}) => {
    const [internalValue, setInternalValue] = useState(controlledValue || '');
    const [showSuggestions, setShowSuggestions] = useState(false);
    const [focusedSuggestionIndex, setFocusedSuggestionIndex] = useState(-1);
    const inputRef = useRef<HTMLInputElement>(null);
    const containerRef = useRef<HTMLDivElement>(null);
    const debounceRef = useRef<NodeJS.Timeout>();

    const isControlled = controlledValue !== undefined;
    const currentValue = isControlled ? controlledValue : internalValue;

    const sizeClasses = {
        sm: 'h-8 text-xs',
        md: 'h-10 text-sm',
        lg: 'h-12 text-base',
    };

    const iconSizes = {
        sm: 14,
        md: 16,
        lg: 20,
    };

    const paddingClasses = {
        sm: 'pl-8 pr-3',
        md: 'pl-10 pr-4',
        lg: 'pl-12 pr-5',
    };

    // Debounced search
    useEffect(() => {
        if (debounceRef.current) {
            clearTimeout(debounceRef.current);
        }

        debounceRef.current = setTimeout(() => {
            if (onSearch) {
                onSearch(currentValue);
            }
        }, debounceMs);

        return () => {
            if (debounceRef.current) {
                clearTimeout(debounceRef.current);
            }
        };
    }, [currentValue, onSearch, debounceMs]);

    // Handle input change
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newValue = e.target.value;

        if (isControlled) {
            onChange?.(newValue);
        } else {
            setInternalValue(newValue);
        }

        // Show suggestions if there are any and input has value
        if (suggestions.length > 0 && newValue.trim()) {
            setShowSuggestions(true);
            setFocusedSuggestionIndex(-1);
        } else {
            setShowSuggestions(false);
        }
    };

    // Handle clear
    const handleClear = () => {
        const newValue = '';

        if (isControlled) {
            onChange?.(newValue);
        } else {
            setInternalValue(newValue);
        }

        setShowSuggestions(false);
        setFocusedSuggestionIndex(-1);
        
        // Clear debounce timer to prevent old search from executing
        if (debounceRef.current) {
            clearTimeout(debounceRef.current);
        }
        
        // Immediately trigger search with empty value to clear results
        onSearch?.(newValue);
        onClear?.();
        inputRef.current?.focus();
    };

    // Handle suggestion click
    const handleSuggestionClick = (suggestion: string) => {
        if (isControlled) {
            onChange?.(suggestion);
        } else {
            setInternalValue(suggestion);
        }

        setShowSuggestions(false);
        setFocusedSuggestionIndex(-1);
        onSuggestionClick?.(suggestion);
        inputRef.current?.focus();
    };

    // Handle keyboard navigation
    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (!showSuggestions || suggestions.length === 0) {
            if (e.key === 'Enter' && onSearch) {
                onSearch(currentValue);
            }
            return;
        }

        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                setFocusedSuggestionIndex(prev =>
                    prev < suggestions.length - 1 ? prev + 1 : prev
                );
                break;
            case 'ArrowUp':
                e.preventDefault();
                setFocusedSuggestionIndex(prev => prev > 0 ? prev - 1 : -1);
                break;
            case 'Enter':
                e.preventDefault();
                if (focusedSuggestionIndex >= 0) {
                    handleSuggestionClick(suggestions[focusedSuggestionIndex]);
                } else if (onSearch) {
                    onSearch(currentValue);
                }
                break;
            case 'Escape':
                setShowSuggestions(false);
                setFocusedSuggestionIndex(-1);
                break;
        }
    };

    // Filter suggestions based on current value
    const filteredSuggestions = suggestions.filter(suggestion =>
        suggestion.toLowerCase().includes(currentValue.toLowerCase())
    );

    // Handle clicks outside to close suggestions
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as Node;
            if (containerRef.current && target && !containerRef.current.contains(target)) {
                setShowSuggestions(false);
                setFocusedSuggestionIndex(-1);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div ref={containerRef} className={cn('relative', className)}>
            <div className="relative">
                {/* Search Icon */}
                <Search
                    size={iconSizes[size]}
                    className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-light-muted dark:text-text-muted pointer-events-none"
                />

                {/* Input */}
                <input
                    ref={inputRef}
                    type="text"
                    value={currentValue}
                    onChange={handleInputChange}
                    onKeyDown={handleKeyDown}
                    onFocus={() => {
                        if (suggestions.length > 0 && currentValue.trim()) {
                            setShowSuggestions(true);
                        }
                    }}
                    placeholder={placeholder}
                    disabled={disabled}
                    autoFocus={autoFocus}
                    className={cn(
                        'w-full border border-gray-200 dark:border-gray-700 rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark transition-colors',
                        'focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold focus:outline-none',
                        'placeholder:text-text-light-muted dark:placeholder:text-text-muted',
                        sizeClasses[size],
                        paddingClasses[size],
                        showClearButton && currentValue ? 'pr-20' : showAdvancedFilter ? 'pr-12' : '',
                        disabled && 'opacity-50 cursor-not-allowed',
                    )}
                />

                {/* Clear Button */}
                {showClearButton && currentValue && (
                    <button
                        onClick={handleClear}
                        disabled={disabled}
                        className={cn(
                            'absolute right-2 top-1/2 transform -translate-y-1/2 p-1 rounded-full',
                            'text-text-light-muted dark:text-text-muted hover:text-text-on-light dark:hover:text-text-on-dark',
                            'hover:bg-background-light-soft dark:hover:bg-background-soft transition-colors',
                            showAdvancedFilter && 'right-12'
                        )}
                    >
                        <X size={iconSizes[size]} />
                    </button>
                )}

                {/* Advanced Filter Button */}
                {showAdvancedFilter && (
                    <Button
                        variant="ghost"
                        size="sm"
                        icon={Filter}
                        onClick={onAdvancedFilterClick}
                        disabled={disabled}
                        className={cn(
                            'absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-1',
                            'text-text-light-muted dark:text-text-muted hover:text-primary-gold'
                        )}
                    />
                )}
            </div>

            {/* Suggestions Dropdown */}
            {showSuggestions && filteredSuggestions.length > 0 && (
                <div className="absolute z-50 w-full mt-1 bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 rounded-lg shadow-card max-h-60 overflow-y-auto">
                    {filteredSuggestions.map((suggestion, index) => (
                        <button
                            key={suggestion}
                            onClick={() => handleSuggestionClick(suggestion)}
                            className={cn(
                                'w-full text-left px-3 py-2 hover:bg-background-light-soft dark:hover:bg-background-soft transition-colors',
                                'text-text-on-light dark:text-text-on-dark text-sm',
                                index === focusedSuggestionIndex && 'bg-primary-gold/10 text-primary-gold',
                                index === 0 && 'rounded-t-lg',
                                index === filteredSuggestions.length - 1 && 'rounded-b-lg'
                            )}
                        >
                            {suggestion}
                        </button>
                    ))}
                </div>
            )}
        </div>
    );
};

export default SearchBar;
</file>

<file path="src/app/components/ui/Select.tsx">
import { forwardRef, SelectHTMLAttributes } from 'react'
import { ChevronDown } from 'lucide-react'

interface SelectOption {
    value: string
    label: string
    disabled?: boolean
}

interface SelectProps extends Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'> {
    label?: string
    error?: string
    helperText?: string
    placeholder?: string
    options?: SelectOption[] // Optional yapıyoruz
    isRequired?: boolean
    onChange?: any
}

const Select = forwardRef<HTMLSelectElement, SelectProps>(
    ({
        label,
        error,
        helperText,
        placeholder = 'Seçiniz...',
        options = [], // Default değer ekliyoruz
        isRequired = false,
        className = '',
        onChange,
        ...props
    }, ref) => {
        const baseClasses = 'w-full px-3 py-2 text-sm rounded-lg border transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50 appearance-none bg-background-secondary text-text-primary'

        const normalClasses = 'border-primary-gold/30 hover:border-primary-gold/50 focus:border-primary-gold'
        const errorClasses = error ? 'border-primary-red focus:ring-primary-red/50 focus:border-primary-red' : ''

        return (
            <div className="space-y-1">
                {label && (
                    <label className="block text-sm font-medium text-text-primary font-inter">
                        {label}
                        {isRequired && <span className="text-primary-red ml-1">*</span>}
                    </label>
                )}

                <div className="relative">
                    <select
                        ref={ref}
                        className={`
              ${baseClasses}
              ${error ? errorClasses : normalClasses}
              ${className}
            `}
                        onChange={onChange}
                        {...props}
                    >
                        {placeholder && (
                            <option value="" disabled className="text-text-secondary">
                                {placeholder}
                            </option>
                        )}
                        {/* Güvenli map kontrolü ekliyoruz */}
                        {options && options.length > 0 && options.map((option) => (
                            <option
                                key={option.value}
                                value={option.value}
                                disabled={option.disabled}
                                className="bg-background-secondary text-text-primary"
                            >
                                {option.label}
                            </option>
                        ))}
                    </select>

                    <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 text-text-secondary w-5 h-5 pointer-events-none" />
                </div>

                {error && (
                    <p className="text-sm text-primary-red font-inter">{error}</p>
                )}

                {helperText && !error && (
                    <p className="text-sm text-text-secondary font-inter">{helperText}</p>
                )}
            </div>
        )
    }
)

Select.displayName = 'Select'

export default Select
</file>

<file path="src/app/dashboard/announcements/components/AnnouncementForm.tsx">
'use client';

import React, { useState, useCallback, useEffect } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Input from '@/app/components/ui/Input';
import TextArea from '@/app/components/ui/TextArea';
import Select from '@/app/components/ui/Select';
import Checkbox from '@/app/components/ui/Checkbox';
import DatePicker from '@/app/components/ui/DatePicker';
import FileUpload from '@/app/components/ui/FileUpload';
import { Save, X, Calendar, Image as ImageIcon, AlertTriangle, Pin } from 'lucide-react';
import {
    AnnouncementType,
    AnnouncementStatus,
    ANNOUNCEMENT_TYPE_OPTIONS,
    ANNOUNCEMENT_STATUS_OPTIONS,
    type AnnouncementFormData,
    type Announcement
} from '@/services/types/announcement.types';

interface AnnouncementFormProps {
    initialData?: Partial<Announcement>;
    onSubmit: (data: AnnouncementFormData) => Promise<void>;
    onCancel: () => void;
    loading?: boolean;
    mode: 'create' | 'edit';
}

const defaultFormData: AnnouncementFormData = {
    title: '',
    content: '',
    type: AnnouncementType.GENERAL,
    status: AnnouncementStatus.DRAFT,
    publishDate: undefined,
    expiryDate: undefined,
    isPinned: false,
    isEmergency: false,
    image: undefined,
    imageUrl: '',
    propertyIds: [],
};

export default function AnnouncementForm({
    initialData,
    onSubmit,
    onCancel,
    loading = false,
    mode
}: AnnouncementFormProps) {
    const [formData, setFormData] = useState<AnnouncementFormData>(defaultFormData);
    const [errors, setErrors] = useState<Record<string, string>>({});
    const [imagePreview, setImagePreview] = useState<string>('');

    // Initialize form data
    useEffect(() => {
        if (initialData && mode === 'edit') {
            setFormData({
                title: initialData.title || '',
                content: initialData.content || '',
                type: initialData.type || AnnouncementType.GENERAL,
                status: initialData.status || AnnouncementStatus.DRAFT,
                publishDate: initialData.publishDate ? new Date(initialData.publishDate) : undefined,
                expiryDate: initialData.expiryDate ? new Date(initialData.expiryDate) : undefined,
                isPinned: initialData.isPinned || false,
                isEmergency: initialData.isEmergency || false,
                image: undefined,
                imageUrl: initialData.imageUrl || '',
                propertyIds: initialData.properties?.map(p => p.id) || [],
            });
            setImagePreview(initialData.imageUrl || '');
        }
    }, [initialData, mode]);

    // Validation
    const validateForm = useCallback(() => {
        const newErrors: Record<string, string> = {};

        if (!formData.title.trim()) {
            newErrors.title = 'Başlık zorunludur';
        } else if (formData.title.trim().length < 3) {
            newErrors.title = 'Başlık en az 3 karakter olmalıdır';
        }

        if (!formData.content.trim()) {
            newErrors.content = 'İçerik zorunludur';
        } else if (formData.content.trim().length < 10) {
            newErrors.content = 'İçerik en az 10 karakter olmalıdır';
        }

        if (formData.publishDate && formData.expiryDate) {
            if (formData.publishDate >= formData.expiryDate) {
                newErrors.expiryDate = 'Bitiş tarihi, yayınlanma tarihinden sonra olmalıdır';
            }
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }, [formData]);

    // Form handlers
    const handleInputChange = useCallback((field: keyof AnnouncementFormData, value: any) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        
        // Clear error for this field
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }
    }, [errors]);

    const handleImageChange = useCallback((files: File[]) => {
        if (files.length > 0) {
            const file = files[0];
            handleInputChange('image', file);
            
            // Create preview
            const reader = new FileReader();
            reader.onload = (e) => {
                setImagePreview(e.target?.result as string);
            };
            reader.readAsDataURL(file);
        }
    }, [handleInputChange]);

    const handleRemoveImage = useCallback(() => {
        handleInputChange('image', undefined);
        handleInputChange('imageUrl', '');
        setImagePreview('');
    }, [handleInputChange]);

    const handleSubmit = useCallback(async (e: React.FormEvent) => {
        e.preventDefault();
        
        if (!validateForm()) {
            return;
        }

        try {
            await onSubmit(formData);
        } catch (error) {
            console.error('Form submission error:', error);
        }
    }, [formData, validateForm, onSubmit]);

    // Type options for select
    const typeOptions = ANNOUNCEMENT_TYPE_OPTIONS.map(option => ({
        value: option.value,
        label: option.label
    }));

    // Status options for select
    const statusOptions = ANNOUNCEMENT_STATUS_OPTIONS.map(option => ({
        value: option.value,
        label: option.label
    }));

    return (
        <form onSubmit={handleSubmit} className="space-y-6">
            {/* Basic Information */}
            <Card>
                <div className="p-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                        Temel Bilgiler
                    </h3>
                    
                    <div className="space-y-4">
                        {/* Title */}
                        <div>
                            <Input
                                label="Başlık"
                                value={formData.title}
                                onChange={(e: any) => handleInputChange('title', e.target.value)}
                                error={errors.title}
                                placeholder="Duyuru başlığını girin..."
                                required
                                maxLength={200}
                            />
                        </div>

                        {/* Content */}
                        <div>
                            <TextArea
                                label="İçerik"
                                value={formData.content}
                                onChange={(e: any) => handleInputChange('content', e.target.value)}
                                error={errors.content}
                                placeholder="Duyuru içeriğini girin..."
                                required
                                rows={8}
                                maxLength={5000}
                            />
                        </div>

                        {/* Type and Status */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <Select
                                    label="Duyuru Tipi"
                                    value={formData.type}
                                    onChange={(e: any) => handleInputChange('type', e.target.value)}
                                    options={typeOptions}
                                    required
                                />
                            </div>
                            <div>
                                <Select
                                    label="Durum"
                                    value={formData.status}
                                    onChange={(e: any) => handleInputChange('status', e.target.value)}
                                    options={statusOptions}
                                    required
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </Card>

            {/* Dates */}
            <Card>
                <div className="p-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                        Tarih Ayarları
                    </h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {/* Publish Date */}
                        <div>
                            <DatePicker
                                label="Yayınlanma Tarihi"
                                value={formData.publishDate?.toISOString().split('T')[0]}
                                onChange={(e: any) => handleInputChange('publishDate', e.target.value ? new Date(e.target.value) : undefined)}
                                placeholder="Yayınlanma tarihini seçin..."
                            />
                            <p className="text-xs text-text-light-secondary dark:text-text-secondary mt-1">
                                Boş bırakılırsa hemen yayınlanır
                            </p>
                        </div>

                        {/* Expiry Date */}
                        <div>
                            <DatePicker
                                label="Bitiş Tarihi"
                                value={formData.expiryDate?.toISOString().split('T')[0]}
                                onChange={(e: any) => handleInputChange('expiryDate', e.target.value ? new Date(e.target.value) : undefined)}
                                error={errors.expiryDate}
                                placeholder="Bitiş tarihini seçin..."
                            />
                            <p className="text-xs text-text-light-secondary dark:text-text-secondary mt-1">
                                Boş bırakılırsa süresiz olur
                            </p>
                        </div>
                    </div>
                </div>
            </Card>

            {/* Options */}
            <Card>
                <div className="p-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                        Ek Ayarlar
                    </h3>
                    
                    <div className="space-y-4">
                        {/* Pin and Emergency Checkboxes */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="flex items-center gap-3 p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                                <Checkbox
                                    checked={formData.isPinned}
                                    onChange={(checked) => handleInputChange('isPinned', checked)}
                                />
                                <div className="flex items-center gap-2">
                                    <Pin className="w-5 h-5 text-primary-gold" />
                                    <div>
                                        <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                            Sabitle
                                        </p>
                                        <p className="text-xs text-text-light-secondary dark:text-text-secondary">
                                            Duyuru listesinin en üstünde gösterilir
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <div className="flex items-center gap-3 p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                                <Checkbox
                                    checked={formData.isEmergency}
                                    onChange={(checked) => handleInputChange('isEmergency', checked)}
                                />
                                <div className="flex items-center gap-2">
                                    <AlertTriangle className="w-5 h-5 text-red-500" />
                                    <div>
                                        <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                            Acil Durum
                                        </p>
                                        <p className="text-xs text-text-light-secondary dark:text-text-secondary">
                                            Acil durum duyurusu olarak işaretlenir
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Card>

            {/* Image Upload */}
            <Card>
                <div className="p-6">
                    <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                        Görsel
                    </h3>
                    
                    {imagePreview ? (
                        <div className="space-y-4">
                            <div className="relative rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700">
                                <img
                                    src={imagePreview}
                                    alt="Duyuru görseli"
                                    className="w-full h-48 object-cover"
                                />
                                <button
                                    type="button"
                                    onClick={handleRemoveImage}
                                    className="absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                                >
                                    <X className="w-4 h-4" />
                                </button>
                            </div>
                            <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={handleRemoveImage}
                                icon={X}
                            >
                                Görseli Kaldır
                            </Button>
                        </div>
                    ) : (
                        <FileUpload
                            onFilesChange={(fileList) => {
                                const files = fileList ? Array.from(fileList) : [];
                                handleImageChange(files);
                            }}
                            accept="image/*"
                            title="Görsel Yükle"
                            description="PNG, JPG formatında en fazla 5MB"
                        />
                    )}
                </div>
            </Card>

            {/* Action Buttons */}
            <Card>
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row gap-3 justify-end">
                        <Button
                            type="button"
                            variant="ghost"
                            size="md"
                            onClick={onCancel}
                            disabled={loading}
                        >
                            İptal
                        </Button>
                        <Button
                            type="submit"
                            variant="primary"
                            size="md"
                            icon={Save}
                            isLoading={loading}
                        >
                            {mode === 'create' ? 'Duyuru Oluştur' : 'Değişiklikleri Kaydet'}
                        </Button>
                    </div>
                </div>
            </Card>
        </form>
    );
}
</file>

<file path="src/app/dashboard/financial/[id]/components/FinancialSummaryCard.tsx">
'use client';

import React from 'react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { 
  DollarSign,
  AlertTriangle,
  TrendingUp,
  TrendingDown,
  Calculator,
  CreditCard,
  Clock,
  CheckCircle
} from 'lucide-react';
import { TransactionDetail, isBillTransaction, isPaymentTransaction } from '../hooks/useTransactionDetail';
import { PAYMENT_METHOD_OPTIONS } from '@/services/types/billing.types';

interface FinancialSummaryCardProps {
  transaction: TransactionDetail;
}

const FinancialSummaryCard: React.FC<FinancialSummaryCardProps> = ({ 
  transaction 
}) => {
  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('tr-TR').format(amount);
  };

  // Calculate payment statistics for bills
  const getPaymentStats = () => {
    if (!isBillTransaction(transaction) || !Array.isArray(transaction.relatedTransactions)) {
      return null;
    }

    const payments = transaction.relatedTransactions;
    const totalPaid = payments
      .filter(p => p.status === 'COMPLETED')
      .reduce((sum, p) => sum + p.amount, 0);
    
    const billAmount = transaction.data.amount;
    const remainingAmount = billAmount - totalPaid;
    const paymentProgress = billAmount > 0 ? (totalPaid / billAmount) * 100 : 0;

    return {
      totalPaid,
      remainingAmount,
      paymentProgress,
      paymentCount: payments.length,
      completedPayments: payments.filter(p => p.status === 'COMPLETED').length
    };
  };

  const paymentStats = getPaymentStats();

  // Get payment method info
  const getPaymentMethodInfo = (paymentMethod: string) => {
    const methodInfo = PAYMENT_METHOD_OPTIONS.find(option => option.value === paymentMethod);
    return methodInfo || { icon: '💳', label: paymentMethod, description: '' };
  };

  // Check if bill is overdue
  const isOverdue = () => {
    if (!isBillTransaction(transaction)) return false;
    const dueDate = new Date(transaction.data.dueDate);
    const now = new Date();
    return dueDate < now && transaction.data.status !== 'PAID';
  };

  // Calculate days overdue
  const getDaysOverdue = () => {
    if (!isOverdue()) return 0;
    const dueDate = new Date((transaction.data as any).dueDate);
    const now = new Date();
    const diffTime = now.getTime() - dueDate.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  return (
    <Card className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg">
          <Calculator className="h-5 w-5 text-blue-600 dark:text-blue-400" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            Finansal Özet
          </h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            {isBillTransaction(transaction) ? 'Fatura detayları ve ödeme durumu' : 'Ödeme detayları'}
          </p>
        </div>
      </div>

      <div className="space-y-6">
        {/* Amount Breakdown */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <DollarSign className="h-4 w-4 text-gray-500 dark:text-gray-400" />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                {isBillTransaction(transaction) ? 'Fatura Tutarı' : 'Ödeme Tutarı'}
              </span>
            </div>
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {formatCurrency(transaction.data.amount)} IQD
            </div>
          </div>

          {/* Payment Progress for Bills */}
          {paymentStats && (
            <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <TrendingUp className="h-4 w-4 text-green-500" />
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Toplam Ödenen
                </span>
              </div>
              <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                {formatCurrency(paymentStats.totalPaid)} IQD
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                %{paymentStats.paymentProgress.toFixed(1)} tamamlandı
              </div>
            </div>
          )}

          {/* Payment Method for Payments */}
          {isPaymentTransaction(transaction) && (
            <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <CreditCard className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Ödeme Yöntemi
                </span>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-lg">
                  {getPaymentMethodInfo(transaction.data.paymentMethod).icon}
                </span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {getPaymentMethodInfo(transaction.data.paymentMethod).label}
                </span>
              </div>
            </div>
          )}
        </div>

        {/* Payment Progress Bar for Bills */}
        {paymentStats && (
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                Ödeme İlerlemesi
              </span>
              <span className="text-sm text-gray-500 dark:text-gray-400">
                {paymentStats.completedPayments}/{paymentStats.paymentCount} ödeme
              </span>
            </div>
            
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
              <div 
                className="bg-green-500 h-3 rounded-full transition-all duration-300"
                style={{ width: `${Math.min(paymentStats.paymentProgress, 100)}%` }}
              />
            </div>

            <div className="flex justify-between text-sm">
              <span className="text-green-600 dark:text-green-400 font-medium">
                Ödenen: {formatCurrency(paymentStats.totalPaid)} IQD
              </span>
              {paymentStats.remainingAmount > 0 ? (
                <span className="text-orange-600 dark:text-orange-400 font-medium">
                  Kalan: {formatCurrency(paymentStats.remainingAmount)} IQD
                </span>
              ) : (
                <span className="text-green-600 dark:text-green-400 font-medium">
                  ✓ Tamamen Ödendi
                </span>
              )}
            </div>
          </div>
        )}

        {/* Status Information */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Current Status */}
          <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
            {transaction.data.status === 'PAID' || transaction.data.status === 'COMPLETED' ? (
              <CheckCircle className="h-5 w-5 text-green-500" />
            ) : (
              <Clock className="h-5 w-5 text-orange-500" />
            )}
            <div>
              <div className="text-sm font-medium text-gray-900 dark:text-white">
                Durum
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                {transaction.data.status === 'PAID' ? 'Ödendi' : 
                 transaction.data.status === 'COMPLETED' ? 'Tamamlandı' :
                 transaction.data.status === 'PENDING' ? 'Bekliyor' : 
                 transaction.data.status}
              </div>
            </div>
          </div>

          {/* Overdue Warning for Bills */}
          {isOverdue() && (
            <div className="flex items-center gap-3 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800">
              <AlertTriangle className="h-5 w-5 text-red-500" />
              <div>
                <div className="text-sm font-medium text-red-900 dark:text-red-100">
                  Gecikmiş
                </div>
                <div className="text-sm text-red-600 dark:text-red-400">
                  {getDaysOverdue()} gün gecikme
                </div>
              </div>
            </div>
          )}

          {/* Payment Summary for Payments */}
          {isPaymentTransaction(transaction) && (
            <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <Badge 
                variant={transaction.data.status === 'COMPLETED' ? 'success' : 'warning'}
                className="flex items-center gap-1"
              >
                {transaction.data.status === 'COMPLETED' ? 'Tamamlandı' : 'İşlemde'}
              </Badge>
            </div>
          )}
        </div>

        {/* Additional Financial Details */}
        {isBillTransaction(transaction) && (
          <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
            <div className="text-sm font-medium text-gray-900 dark:text-white mb-3">
              Fatura Bilgileri
            </div>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500 dark:text-gray-400">Fatura Türü:</span>
                <div className="font-medium text-gray-900 dark:text-white">
                  {transaction.data.billType === 'DUES' ? 'Aidat' :
                   transaction.data.billType === 'MAINTENANCE' ? 'Bakım' :
                   transaction.data.billType === 'UTILITY' ? 'Fayda' :
                   transaction.data.billType === 'PENALTY' ? 'Ceza' :
                   transaction.data.billType}
                </div>
              </div>
              <div>
                <span className="text-gray-500 dark:text-gray-400">Oluşturulma:</span>
                <div className="font-medium text-gray-900 dark:text-white">
                  {new Date(transaction.data.createdAt).toLocaleDateString('tr-TR')}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Payment Details for Payments */}
        {isPaymentTransaction(transaction) && (
          <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
            <div className="text-sm font-medium text-gray-900 dark:text-white mb-3">
              Ödeme Detayları
            </div>
            <div className="space-y-2 text-sm">
              {transaction.data.paymentDate && (
                <div className="flex justify-between">
                  <span className="text-gray-500 dark:text-gray-400">Ödeme Tarihi:</span>
                  <span className="font-medium text-gray-900 dark:text-white">
                    {new Date(transaction.data.paymentDate).toLocaleDateString('tr-TR')}
                  </span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-gray-500 dark:text-gray-400">Kayıt Tarihi:</span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {new Date(transaction.data.createdAt).toLocaleDateString('tr-TR')}
                </span>
              </div>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

export default FinancialSummaryCard;
</file>

<file path="src/app/dashboard/financial/[id]/components/RelatedTransactionsTable.tsx">
'use client';

import React from 'react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import Button from '@/app/components/ui/Button';
import EmptyState from '@/app/components/ui/EmptyState';
import { 
  ArrowUpRight,
  CreditCard,
  FileText,
  Calendar,
  DollarSign,
  Eye,
  Receipt
} from 'lucide-react';
import { useRouter } from 'next/navigation';
import { TransactionDetail, isBillTransaction, isPaymentTransaction } from '../hooks/useTransactionDetail';
import { PAYMENT_METHOD_OPTIONS } from '@/services/types/billing.types';

interface RelatedTransactionsTableProps {
  transaction: TransactionDetail;
}

const RelatedTransactionsTable: React.FC<RelatedTransactionsTableProps> = ({ 
  transaction 
}) => {
  const router = useRouter();

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('tr-TR').format(amount);
  };

  // Format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Get status variant
  const getStatusVariant = (status: string) => {
    switch (status.toLowerCase()) {
      case 'paid':
      case 'completed':
        return 'success';
      case 'pending':
        return 'warning';
      case 'failed':
        return 'danger';
      case 'cancelled':
      case 'canceled':
        return 'default';
      default:
        return 'info';
    }
  };

  // Get status label
  const getStatusLabel = (status: string) => {
    switch (status.toLowerCase()) {
      case 'paid':
        return 'Ödendi';
      case 'pending':
        return 'Bekliyor';
      case 'completed':
        return 'Tamamlandı';
      case 'failed':
        return 'Başarısız';
      case 'cancelled':
      case 'canceled':
        return 'İptal';
      default:
        return status;
    }
  };

  // Get payment method info
  const getPaymentMethodInfo = (paymentMethod: string) => {
    const methodInfo = PAYMENT_METHOD_OPTIONS.find(option => option.value === paymentMethod);
    return methodInfo || { icon: '💳', label: paymentMethod, description: '' };
  };

  // Handle view transaction
  const handleViewTransaction = (transactionId: string) => {
    router.push(`/dashboard/financial/${transactionId}`);
  };

  // Render for Bill (showing related payments)
  if (isBillTransaction(transaction)) {
    const payments = Array.isArray(transaction.relatedTransactions) ? transaction.relatedTransactions : [];

    return (
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-green-100 dark:bg-green-900/20 rounded-lg">
              <CreditCard className="h-5 w-5 text-green-600 dark:text-green-400" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Bu Faturaya Yapılan Ödemeler
              </h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                {payments.length} ödeme kaydı bulundu
              </p>
            </div>
          </div>
        </div>

        {payments.length === 0 ? (
          <EmptyState
            icon={<CreditCard className="h-8 w-8" />}
            title="Henüz Ödeme Yapılmamış"
            description="Bu faturaya henüz hiç ödeme kaydedilmemiş."
          />
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200 dark:border-gray-700">
                  <th className="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">
                    Ödeme ID
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">
                    Yöntem
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">
                    Tutar
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">
                    Tarih
                  </th>
                  <th className="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">
                    Durum
                  </th>
                  <th className="text-right py-3 px-4 font-medium text-gray-700 dark:text-gray-300">
                    İşlemler
                  </th>
                </tr>
              </thead>
              <tbody>
                {payments.map((payment) => (
                  <tr 
                    key={payment.id} 
                    className="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50"
                  >
                    <td className="py-4 px-4">
                      <div className="font-mono text-sm text-gray-600 dark:text-gray-400">
                        {payment.id.substring(0, 8)}...
                      </div>
                    </td>
                    <td className="py-4 px-4">
                      <div className="flex items-center gap-2">
                        <span className="text-sm">
                          {getPaymentMethodInfo(payment.paymentMethod).icon}
                        </span>
                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                          {getPaymentMethodInfo(payment.paymentMethod).label}
                        </span>
                      </div>
                    </td>
                    <td className="py-4 px-4">
                      <div className="font-semibold text-gray-900 dark:text-white">
                        {formatCurrency(payment.amount)} IQD
                      </div>
                    </td>
                    <td className="py-4 px-4">
                      <div className="text-sm text-gray-600 dark:text-gray-400">
                        {formatDate(payment.paymentDate || payment.createdAt)}
                      </div>
                    </td>
                    <td className="py-4 px-4">
                      <Badge variant={getStatusVariant(payment.status)}>
                        {getStatusLabel(payment.status)}
                      </Badge>
                    </td>
                    <td className="py-4 px-4 text-right">
                      <Button
                        variant="ghost"
                        size="sm"
                        icon={Eye}
                        onClick={() => handleViewTransaction(payment.id)}
                      >
                        Detay
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </Card>
    );
  }

  // Render for Payment (showing related bill)
  if (isPaymentTransaction(transaction)) {
    const bill = transaction.relatedTransactions as any;

    return (
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary-gold/10 rounded-lg">
              <FileText className="h-5 w-5 text-primary-gold" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                İlgili Fatura
              </h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Bu ödemenin yapıldığı fatura bilgileri
              </p>
            </div>
          </div>
        </div>

        {!bill ? (
          <EmptyState
            icon={<FileText className="h-8 w-8" />}
            title="İlgili Fatura Bulunamadı"
            description="Bu ödemeye ait fatura bilgisi bulunamadı."
          />
        ) : (
          <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
            <div className="flex items-start justify-between">
              <div className="space-y-3 flex-1">
                <div className="flex items-center gap-3">
                  <FileText className="h-5 w-5 text-primary-gold" />
                  <div>
                    <div className="font-semibold text-gray-900 dark:text-white">
                      {bill.title}
                    </div>
                    <div className="text-sm text-gray-500 dark:text-gray-400">
                      Fatura ID: {bill.id.substring(0, 8)}...
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="flex items-center gap-2">
                    <DollarSign className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                    <div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">
                        Fatura Tutarı
                      </div>
                      <div className="font-semibold text-gray-900 dark:text-white">
                        {formatCurrency(bill.amount)} IQD
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                    <div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">
                        Vade Tarihi
                      </div>
                      <div className="font-semibold text-gray-900 dark:text-white">
                        {new Date(bill.dueDate).toLocaleDateString('tr-TR')}
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <Receipt className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                    <div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">
                        Durum
                      </div>
                      <Badge variant={getStatusVariant(bill.status)}>
                        {getStatusLabel(bill.status)}
                      </Badge>
                    </div>
                  </div>
                </div>

                {bill.description && (
                  <div className="pt-2 border-t border-gray-200 dark:border-gray-700">
                    <div className="text-xs text-gray-500 dark:text-gray-400 mb-1">
                      Açıklama
                    </div>
                    <div className="text-sm text-gray-700 dark:text-gray-300">
                      {bill.description}
                    </div>
                  </div>
                )}
              </div>

              <div className="ml-4">
                <Button
                  variant="secondary"
                  size="sm"
                  icon={ArrowUpRight}
                  onClick={() => handleViewTransaction(bill.id)}
                >
                  Faturayı Görüntüle
                </Button>
              </div>
            </div>
          </div>
        )}
      </Card>
    );
  }

  return null;
};

export default RelatedTransactionsTable;
</file>

<file path="src/app/dashboard/financial/[id]/components/TransactionDetailHeader.tsx">
'use client';

import React from 'react';
import Card from '@/app/components/ui/Card';
import Badge from '@/app/components/ui/Badge';
import { 
  Calendar,
  Hash,
  FileText,
  AlertTriangle,
  Clock,
  CheckCircle,
  Building,
  User
} from 'lucide-react';
import { TransactionDetail, isBillTransaction, isPaymentTransaction } from '../hooks/useTransactionDetail';
import { BILL_TYPE_OPTIONS, PAYMENT_METHOD_OPTIONS } from '@/services/types/billing.types';
import Avatar from '@/app/components/ui/Avatar';

interface TransactionDetailHeaderProps {
  transaction: TransactionDetail;
}

const TransactionDetailHeader: React.FC<TransactionDetailHeaderProps> = ({ 
  transaction 
}) => {
  // Get status badge variant
  const getStatusVariant = (status: string) => {
    switch (status.toLowerCase()) {
      case 'paid':
      case 'completed':
        return 'success';
      case 'pending':
        return 'warning';
      case 'overdue':
      case 'failed':
        return 'danger';
      case 'cancelled':
      case 'canceled':
        return 'default';
      default:
        return 'info';
    }
  };

  // Get status icon
  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'paid':
      case 'completed':
        return CheckCircle;
      case 'pending':
        return Clock;
      case 'overdue':
      case 'failed':
        return AlertTriangle;
      default:
        return Clock;
    }
  };

  // Get status label
  const getStatusLabel = (status: string) => {
    switch (status.toLowerCase()) {
      case 'paid':
        return 'Ödendi';
      case 'pending':
        return 'Bekliyor';
      case 'overdue':
        return 'Gecikmiş';
      case 'completed':
        return 'Tamamlandı';
      case 'failed':
        return 'Başarısız';
      case 'cancelled':
      case 'canceled':
        return 'İptal';
      default:
        return status;
    }
  };

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('tr-TR').format(amount);
  };

  // Format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Get bill type info
  const getBillTypeInfo = (billType: string) => {
    const typeInfo = BILL_TYPE_OPTIONS.find(option => option.value === billType);
    return typeInfo || { icon: '📄', label: billType, description: '' };
  };

  // Get payment method info
  const getPaymentMethodInfo = (paymentMethod: string) => {
    const methodInfo = PAYMENT_METHOD_OPTIONS.find(option => option.value === paymentMethod);
    return methodInfo || { icon: '💳', label: paymentMethod, description: '' };
  };

  const StatusIcon = getStatusIcon(transaction.data.status);

  return (
    <Card className="p-6">
      <div className="space-y-6">
        {/* Transaction Type and Status */}
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
          <div className="space-y-2">
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2">
                <Hash className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                <span className="text-sm font-medium text-gray-500 dark:text-gray-400">
                  İşlem ID
                </span>
              </div>
              <span className="font-mono text-sm bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                {transaction.id}
              </span>
            </div>
            
            {isBillTransaction(transaction) && (
              <div className="flex items-center gap-3">
                {getBillTypeInfo(transaction.data.billType).icon}
                <span className="text-lg font-semibold text-gray-900 dark:text-white">
                  {transaction.data.title}
                </span>
              </div>
            )}
            
            {isPaymentTransaction(transaction) && (
              <div className="flex items-center gap-3">
                {getPaymentMethodInfo(transaction.data.paymentMethod).icon}
                <span className="text-lg font-semibold text-gray-900 dark:text-white">
                  {getPaymentMethodInfo(transaction.data.paymentMethod).label} Ödemesi
                </span>
              </div>
            )}
          </div>

          <div className="flex items-center gap-3">
            <Badge 
              variant={getStatusVariant(transaction.data.status)}
              className="flex items-center gap-1"
            >
              <StatusIcon className="h-3 w-3" />
              {getStatusLabel(transaction.data.status)}
            </Badge>
          </div>
        </div>

        {/* Amount */}
        <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
          <div className="text-center">
            <div className="text-3xl font-bold text-gray-900 dark:text-white mb-1">
              {formatCurrency(transaction.data.amount)} IQD
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              {isBillTransaction(transaction) ? 'Fatura Tutarı' : 'Ödeme Tutarı'}
            </div>
          </div>
        </div>

        {/* Key Information Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Left Column */}
          <div className="space-y-4">
            {/* Creation Date */}
            <div className="flex items-center gap-3">
              <Calendar className="h-4 w-4 text-gray-500 dark:text-gray-400" />
              <div>
                <div className="text-sm font-medium text-gray-900 dark:text-white">
                  Oluşturulma Tarihi
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  {formatDate(transaction.data.createdAt)}
                </div>
              </div>
            </div>

            {/* Due Date for Bills */}
            {isBillTransaction(transaction) && (
              <div className="flex items-center gap-3">
                <AlertTriangle className="h-4 w-4 text-amber-500" />
                <div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    Vade Tarihi
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {formatDate(transaction.data.dueDate)}
                  </div>
                </div>
              </div>
            )}

            {/* Payment Date for Payments */}
            {isPaymentTransaction(transaction) && transaction.data.paymentDate && (
              <div className="flex items-center gap-3">
                <Calendar className="h-4 w-4 text-green-500" />
                <div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    Ödeme Tarihi
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {formatDate(transaction.data.paymentDate)}
                  </div>
                </div>
              </div>
            )}

            {/* Document Number */}
            {isBillTransaction(transaction) && transaction.data.documentNumber && (
              <div className="flex items-center gap-3">
                <FileText className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                <div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    Belge Numarası
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {transaction.data.documentNumber}
                  </div>
                </div>
              </div>
            )}

            {/* Transaction ID for Payments */}
            {isPaymentTransaction(transaction) && transaction.data.transactionId && (
              <div className="flex items-center gap-3">
                <Hash className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                <div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    İşlem ID
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {transaction.data.transactionId}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Right Column */}
          <div className="space-y-4">
            {/* Property Info */}
            {isBillTransaction(transaction) && transaction.data.propertyId && (
              <div className="flex items-center gap-3">
                <Building className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                <div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    Mülk
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {/* Property info would come from API - showing ID for now */}
                    Mülk ID: {transaction.data.propertyId}
                  </div>
                </div>
              </div>
            )}

            {/* Assigned To */}
            {isBillTransaction(transaction) && transaction.data.assignedToId && (
              <div className="flex items-center gap-3">
                <User className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                <div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    Atanan Kişi
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {/* User info would come from API - showing ID for now */}
                    Kullanıcı ID: {transaction.data.assignedToId}
                  </div>
                </div>
              </div>
            )}

            {/* Receipt Number for Payments */}
            {isPaymentTransaction(transaction) && transaction.data.receiptNumber && (
              <div className="flex items-center gap-3">
                <FileText className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                <div>
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    Makbuz Numarası
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {transaction.data.receiptNumber}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Description */}
        {transaction.data.description && (
          <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
            <div className="text-sm font-medium text-gray-900 dark:text-white mb-2">
              Açıklama
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3">
              {transaction.data.description}
            </div>
          </div>
        )}

        {/* Notes for Payments */}
        {isPaymentTransaction(transaction) && transaction.data.notes && (
          <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
            <div className="text-sm font-medium text-gray-900 dark:text-white mb-2">
              Notlar
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3">
              {transaction.data.notes}
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

export default TransactionDetailHeader;
</file>

<file path="src/app/dashboard/financial/[id]/hooks/useTransactionDetail.ts">
import { useState, useEffect, useCallback } from 'react';
import { billingService } from '@/services';
import { paymentService } from '@/services';
import { ResponseBillDto, ResponsePaymentDto } from '@/services/types/billing.types';

export type TransactionType = 'bill' | 'payment';

export interface TransactionDetail {
  id: string;
  type: TransactionType;
  data: ResponseBillDto | ResponsePaymentDto;
  relatedTransactions?: ResponsePaymentDto[] | ResponseBillDto;
}

export interface UseTransactionDetailReturn {
  transaction: TransactionDetail | null;
  loading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
  isRefetching: boolean;
}

export const useTransactionDetail = (id: string): UseTransactionDetailReturn => {
  const [transaction, setTransaction] = useState<TransactionDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [isRefetching, setIsRefetching] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchTransactionDetail = useCallback(async () => {
    if (!id) {
      setError('Transaction ID is required');
      setLoading(false);
      return;
    }

    try {
      setError(null);
      
      // First try to fetch as a bill
      try {
        const billResponse = await billingService.getBillById(id);
        if (billResponse.data) {
          // Fetch related payments for this bill
          const relatedPayments = await paymentService.getPaymentsByBill(id);
          
          setTransaction({
            id,
            type: 'bill',
            data: billResponse.data,
            relatedTransactions: relatedPayments
          });
          return;
        }
      } catch (billError: any) {
        // If it's not found as a bill, continue to try as payment
        if (billError?.response?.status !== 404) {
          throw billError;
        }
      }

      // If not found as a bill, try to fetch as a payment
      try {
        const paymentResponse = await paymentService.getPaymentById(id);
        if (paymentResponse.data) {
          let relatedBill = null;
          
          // If payment has a billId, fetch the related bill
          if (paymentResponse.data.billId) {
            try {
              const billResponse = await billingService.getBillById(paymentResponse.data.billId);
              relatedBill = billResponse.data;
            } catch (billError) {
              console.warn('Could not fetch related bill:', billError);
            }
          }
          
          setTransaction({
            id,
            type: 'payment',
            data: paymentResponse.data,
            relatedTransactions: relatedBill || undefined
          });
          return;
        }
      } catch (paymentError: any) {
        // If it's not found as a payment either, it doesn't exist
        if (paymentError?.response?.status === 404) {
          throw new Error('Transaction not found');
        }
        throw paymentError;
      }

      // If we reach here, transaction wasn't found in either endpoint
      throw new Error('Transaction not found');
      
    } catch (err: any) {
      console.error('Error fetching transaction detail:', err);
      setError(err.message || 'Failed to fetch transaction details');
      setTransaction(null);
    } finally {
      setLoading(false);
      setIsRefetching(false);
    }
  }, [id]);

  const refetch = useCallback(async () => {
    setIsRefetching(true);
    await fetchTransactionDetail();
  }, [fetchTransactionDetail]);

  useEffect(() => {
    fetchTransactionDetail();
  }, [fetchTransactionDetail]);

  return {
    transaction,
    loading,
    error,
    refetch,
    isRefetching
  };
};

// Helper functions to check transaction type
export const isBillTransaction = (transaction: TransactionDetail): transaction is TransactionDetail & { data: ResponseBillDto } => {
  return transaction.type === 'bill';
};

export const isPaymentTransaction = (transaction: TransactionDetail): transaction is TransactionDetail & { data: ResponsePaymentDto } => {
  return transaction.type === 'payment';
};
</file>

<file path="src/app/dashboard/financial/[id]/page.tsx">
'use client';

import React, { useState } from 'react';
import { useParams } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Skeleton from '@/app/components/ui/Skeleton';
import EmptyState from '@/app/components/ui/EmptyState';
import { 
  ArrowLeft,
  AlertCircle,
  RefreshCw,
  FileText,
  CreditCard
} from 'lucide-react';
import { useRouter } from 'next/navigation';
import { useTransactionDetail, isBillTransaction, isPaymentTransaction } from './hooks/useTransactionDetail';
import TransactionDetailHeader from './components/TransactionDetailHeader';
import FinancialSummaryCard from './components/FinancialSummaryCard';
import RelatedTransactionsTable from './components/RelatedTransactionsTable';
import TransactionActions from './components/TransactionActions';

export default function TransactionDetailPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const router = useRouter();
  const params = useParams();
  const transactionId = params.id as string;

  const { transaction, loading, error, refetch, isRefetching } = useTransactionDetail(transactionId);

  // Generate breadcrumbs
  const getBreadcrumbItems = () => {
    const baseItems = [
      { label: 'Ana Sayfa', href: '/dashboard' },
      { label: 'Finansal İşlemler', href: '/dashboard/financial' }
    ];

    if (transaction) {
      const typeLabel = isBillTransaction(transaction) ? 'Fatura' : 'Ödeme';
      return [
        ...baseItems,
        { label: `${typeLabel} Detayı`, active: true }
      ];
    }

    return [
      ...baseItems,
      { label: 'İşlem Detayı', active: true }
    ];
  };

  const handleGoBack = () => {
    router.push('/dashboard/financial');
  };

  const handleRefresh = () => {
    refetch();
  };

  // Loading State
  if (loading) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-background-primary">
          <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
          
          <div className="lg:ml-72">
            <DashboardHeader
              title="İşlem Detayı Yükleniyor..."
              breadcrumbItems={getBreadcrumbItems()}
            />

            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              {/* Header Skeleton */}
              <div className="flex items-center gap-4 mb-8">
                <Skeleton className="w-10 h-10 rounded-lg" />
                <div className="flex-1">
                  <Skeleton className="w-64 h-6 mb-2" />
                  <Skeleton className="w-96 h-4" />
                </div>
              </div>

              {/* Cards Grid Skeleton */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2 space-y-6">
                  <Skeleton className="w-full h-64 rounded-2xl" />
                  <Skeleton className="w-full h-96 rounded-2xl" />
                </div>
                <div className="space-y-6">
                  <Skeleton className="w-full h-80 rounded-2xl" />
                  <Skeleton className="w-full h-48 rounded-2xl" />
                </div>
              </div>
            </main>
          </div>
        </div>
      </ProtectedRoute>
    );
  }

  // Error State
  if (error) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-background-primary">
          <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
          
          <div className="lg:ml-72">
            <DashboardHeader
              title="İşlem Detayı"
              breadcrumbItems={getBreadcrumbItems()}
            />

            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              {/* Back Button */}
              <div className="flex items-center gap-4 mb-8">
                <Button
                  variant="ghost"
                  size="sm"
                  icon={ArrowLeft}
                  onClick={handleGoBack}
                  className="p-2"
                />
                <div>
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                    İşlem Bulunamadı
                  </h1>
                </div>
              </div>

              <Card className="p-8">
                <EmptyState
                  icon={<AlertCircle className="h-8 w-8" />}
                  title="İşlem Detayları Yüklenemedi"
                  description={error}
                  action={
                    <div className="flex gap-3">
                      <Button 
                        variant="secondary" 
                        icon={ArrowLeft}
                        onClick={handleGoBack}
                      >
                        Geri Dön
                      </Button>
                      <Button 
                        variant="primary" 
                        icon={RefreshCw}
                        onClick={handleRefresh}
                        isLoading={isRefetching}
                      >
                        Tekrar Dene
                      </Button>
                    </div>
                  }
                />
              </Card>
            </main>
          </div>
        </div>
      </ProtectedRoute>
    );
  }

  // No transaction found
  if (!transaction) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-background-primary">
          <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
          
          <div className="lg:ml-72">
            <DashboardHeader
              title="İşlem Detayı"
              breadcrumbItems={getBreadcrumbItems()}
            />

            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              <Card className="p-8">
                <EmptyState
                  icon={<FileText className="h-8 w-8" />}
                  title="İşlem Bulunamadı"
                  description="Aradığınız finansal işlem bulunamadı veya silinmiş olabilir."
                  action={
                    <Button 
                      variant="primary" 
                      icon={ArrowLeft}
                      onClick={handleGoBack}
                    >
                      Finansal İşlemlere Dön
                    </Button>
                  }
                />
              </Card>
            </main>
          </div>
        </div>
      </ProtectedRoute>
    );
  }

  // Main Content
  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        <div className="lg:ml-72">
          <DashboardHeader
            title={isBillTransaction(transaction) ? 'Fatura Detayı' : 'Ödeme Detayı'}
            breadcrumbItems={getBreadcrumbItems()}
          />

          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header */}
            <div className="flex items-center gap-4 mb-8">
              <Button
                variant="ghost"
                size="sm"
                icon={ArrowLeft}
                onClick={handleGoBack}
                className="p-2"
              />
              <div className="flex items-center gap-3">
                <div className={`p-2 rounded-lg ${
                  isBillTransaction(transaction) 
                    ? 'bg-primary-gold/10' 
                    : 'bg-green-100 dark:bg-green-900/20'
                }`}>
                  {isBillTransaction(transaction) ? (
                    <FileText className={`h-5 w-5 ${
                      isBillTransaction(transaction) 
                        ? 'text-primary-gold' 
                        : 'text-green-600 dark:text-green-400'
                    }`} />
                  ) : (
                    <CreditCard className="h-5 w-5 text-green-600 dark:text-green-400" />
                  )}
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                    {isBillTransaction(transaction) ? 'Fatura Detayı' : 'Ödeme Detayı'}
                  </h1>
                  <p className="text-gray-600 dark:text-gray-400">
                    {isBillTransaction(transaction) 
                      ? transaction.data.title
                      : `${(transaction.data as any).paymentMethod} ile ödeme`
                    }
                  </p>
                </div>
              </div>
              <div className="ml-auto">
                <Button
                  variant="ghost"
                  size="sm"
                  icon={RefreshCw}
                  onClick={handleRefresh}
                  isLoading={isRefetching}
                  disabled={isRefetching}
                />
              </div>
            </div>

            {/* Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Main Content */}
              <div className="lg:col-span-2 space-y-6">
                {/* Transaction Header Details */}
                <TransactionDetailHeader transaction={transaction} />
                
                {/* Financial Summary */}
                <FinancialSummaryCard transaction={transaction} />
                
                {/* Related Transactions */}
                <RelatedTransactionsTable transaction={transaction} />
              </div>

              {/* Sidebar */}
              <div className="space-y-6">
                {/* Actions */}
                <TransactionActions 
                  transaction={transaction} 
                  onUpdate={refetch}
                />
                
                {/* Additional Info Cards will go here */}
              </div>
            </div>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/dashboard/financial/components/CreateBillForm.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import {
  Calendar,
  FileText,
  DollarSign,
  Building,
  User,
  Hash,
  AlertCircle
} from 'lucide-react';
import Button from '@/app/components/ui/Button';
import Card from '@/app/components/ui/Card';
import Input from '@/app/components/ui/Input';
import TextArea from '@/app/components/ui/TextArea';
import Select from '@/app/components/ui/Select';
// import DatePicker from '@/app/components/ui/DatePicker';
import { 
  BillFormData, 
  BillType, 
  BILL_TYPE_OPTIONS,
  CreateBillDto 
} from '@/services/types/billing.types';
import { billingService } from '@/services';
import { propertyService } from '@/services';
import { userService } from '@/services';

interface CreateBillFormProps {
  onSuccess: (bill: any) => void;
  onCancel: () => void;
  loading?: boolean;
}

interface PropertyOption {
  id: string;
  value: string;
  label: string;
  propertyNumber: string;
}

interface UserOption {
  id: string;
  value: string;
  label: string;
  email: string;
}

const CreateBillForm: React.FC<CreateBillFormProps> = ({
  onSuccess,
  onCancel,
  loading: externalLoading = false
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [properties, setProperties] = useState<PropertyOption[]>([]);
  const [users, setUsers] = useState<UserOption[]>([]);
  const [loadingProperties, setLoadingProperties] = useState(true);
  const [loadingUsers, setLoadingUsers] = useState(true);

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    setValue,
    watch,
    reset
  } = useForm<BillFormData>({
    mode: 'onChange',
    defaultValues: {
      title: '',
      amount: 0,
      dueDate: new Date().toISOString().split('T')[0], // Format for HTML date input
      description: '',
      billType: 'DUES',
      propertyId: '',
      assignedToId: '',
      documentNumber: ''
    }
  });

  const watchedBillType = watch('billType');

  // Fetch properties and users on component mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch properties
        setLoadingProperties(true);
        const propertiesResponse = await propertyService.getAll();
        const propertiesData = Array.isArray(propertiesResponse.data) 
          ? propertiesResponse.data 
          : propertiesResponse.data?.data || [];
        
        const propertyOptions: PropertyOption[] = propertiesData.map((property: any) => ({
          id: property.id,
          value: property.id,
          label: `${property.propertyNumber} - ${property.name}`,
          propertyNumber: property.propertyNumber
        }));
        setProperties(propertyOptions);

        // Fetch users
        setLoadingUsers(true);
        const usersResponse = await userService.getAll();
        const usersData = Array.isArray(usersResponse.data) 
          ? usersResponse.data 
          : usersResponse.data?.data || [];
        
        const userOptions: UserOption[] = usersData.map((user: any) => ({
          id: user.id,
          value: user.id,
          label: `${user.firstName} ${user.lastName}`,
          email: user.email
        }));
        setUsers(userOptions);

      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoadingProperties(false);
        setLoadingUsers(false);
      }
    };

    fetchData();
  }, []);

  const onSubmit = async (data: BillFormData) => {
    if (isSubmitting || externalLoading) return;

    setIsSubmitting(true);
    try {
      const billData: CreateBillDto = {
        title: data.title,
        amount: Number(data.amount),
        dueDate: new Date(data.dueDate).toISOString(),
        description: data.description,
        billType: data.billType,
        status: 'PENDING',
        propertyId: data.propertyId,
        assignedToId: data.assignedToId,
        documentNumber: data.documentNumber || undefined
      };

      const response = await billingService.createBill(billData);
      
      if (response.data) {
        onSuccess(response.data);
        reset();
      }
    } catch (error: any) {
      console.error('Error creating bill:', error);
      // Handle error - could show toast notification here
    } finally {
      setIsSubmitting(false);
    }
  };

  const getBillTypeIcon = (type: BillType) => {
    const option = BILL_TYPE_OPTIONS.find(opt => opt.value === type);
    return option?.icon || '📄';
  };

  const getBillTypeDescription = (type: BillType) => {
    const option = BILL_TYPE_OPTIONS.find(opt => opt.value === type);
    return option?.description || '';
  };

  const isLoading = isSubmitting || externalLoading || loadingProperties || loadingUsers;

  return (
    <Card className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-primary-gold/10 rounded-lg">
          <FileText className="h-5 w-5 text-primary-gold" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            Yeni Fatura Oluştur
          </h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            Aidat, bakım veya fayda faturası oluşturun
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Bill Type Selection */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Fatura Türü *
          </label>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {BILL_TYPE_OPTIONS.map((option) => (
              <label
                key={option.value}
                className={`relative flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                  watchedBillType === option.value
                    ? 'border-primary-gold bg-primary-gold/5'
                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                }`}
              >
                <input
                  type="radio"
                  value={option.value}
                  {...register('billType', { required: 'Fatura türü seçiniz' })}
                  className="sr-only"
                />
                <div className="flex items-center gap-2 w-full">
                  <span className="text-lg">{option.icon}</span>
                  <div className="flex-1">
                    <div className="text-sm font-medium text-gray-900 dark:text-white">
                      {option.label}
                    </div>
                    <div className="text-xs text-gray-500 dark:text-gray-400 line-clamp-1">
                      {option.description}
                    </div>
                  </div>
                </div>
                {watchedBillType === option.value && (
                  <div className="absolute top-2 right-2 w-2 h-2 bg-primary-gold rounded-full" />
                )}
              </label>
            ))}
          </div>
          {errors.billType && (
            <p className="text-sm text-red-600 dark:text-red-400 flex items-center gap-1">
              <AlertCircle className="h-3 w-3" />
              {errors.billType.message}
            </p>
          )}
        </div>

        {/* Title */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Fatura Başlığı *
          </label>
          <Input
            {...register('title', { 
              required: 'Fatura başlığı gereklidir',
              minLength: { value: 3, message: 'En az 3 karakter olmalıdır' }
            })}
            placeholder="Örnek: Ocak 2024 Aidat"
            icon={FileText}
            error={errors.title?.message}
            disabled={isLoading}
          />
        </div>

        {/* Amount and Due Date Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Tutar (IQD) *
            </label>
            <Input
              type="number"
              step="0.01"
              min="0"
              {...register('amount', { 
                required: 'Tutar gereklidir',
                min: { value: 0.01, message: 'Tutar 0\'dan büyük olmalıdır' }
              })}
              placeholder="0.00"
              icon={DollarSign}
              error={errors.amount?.message}
              disabled={isLoading}
            />
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Vade Tarihi *
            </label>
            <Input
              type="date"
              {...register('dueDate', { required: 'Vade tarihi gereklidir' })}
              icon={Calendar}
              error={errors.dueDate?.message}
              disabled={isLoading}
              min={new Date().toISOString().split('T')[0]}
            />
          </div>
        </div>

        {/* Property and Assigned User Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Mülk *
            </label>
            <Select
              {...register('propertyId', { required: 'Mülk seçiniz' })}
              error={errors.propertyId?.message}
              disabled={isLoading}
              options={[
                { value: '', label: loadingProperties ? 'Yükleniyor...' : 'Mülk seçin' },
                ...properties
              ]}
            />
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Atanacak Kişi *
            </label>
            <Select
              {...register('assignedToId', { required: 'Kişi seçiniz' })}
              error={errors.assignedToId?.message}
              disabled={isLoading}
              options={[
                { value: '', label: loadingUsers ? 'Yükleniyor...' : 'Kişi seçin' },
                ...users
              ]}
            />
          </div>
        </div>

        {/* Document Number */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Belge Numarası
          </label>
          <Input
            {...register('documentNumber')}
            placeholder="Örnek: INV-2024-001"
            icon={Hash}
            disabled={isLoading}
          />
        </div>

        {/* Description */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Açıklama
          </label>
          <TextArea
            value={watch('description')}
            onChange={(e: any) => setValue('description', e.target.value)}
            placeholder="Fatura hakkında ek bilgiler..."
            rows={3}
            disabled={isLoading}
          />
        </div>

        {/* Current Bill Type Info */}
        {watchedBillType && (
          <div className="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4">
            <div className="flex items-center gap-2 text-sm">
              <span className="text-lg">{getBillTypeIcon(watchedBillType)}</span>
              <span className="font-medium text-gray-900 dark:text-white">
                {BILL_TYPE_OPTIONS.find(opt => opt.value === watchedBillType)?.label}
              </span>
              <span className="text-gray-500 dark:text-gray-400">
                - {getBillTypeDescription(watchedBillType)}
              </span>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
          <Button
            type="button"
            variant="secondary"
            onClick={onCancel}
            disabled={isLoading}
            className="w-full sm:w-auto"
          >
            İptal
          </Button>
          <Button
            type="submit"
            variant="primary"
            disabled={!isValid || isLoading}
            isLoading={isSubmitting}
            icon={FileText}
            className="w-full sm:w-auto"
          >
            {isSubmitting ? 'Fatura Oluşturuluyor...' : 'Fatura Oluştur'}
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default CreateBillForm;
</file>

<file path="src/app/dashboard/financial/components/CreatePaymentForm.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import {
  Calendar,
  CreditCard,
  DollarSign,
  Receipt,
  Hash,
  FileText,
  AlertCircle,
  Search
} from 'lucide-react';
import Button from '@/app/components/ui/Button';
import Card from '@/app/components/ui/Card';
import Input from '@/app/components/ui/Input';
import TextArea from '@/app/components/ui/TextArea';
import Select from '@/app/components/ui/Select';
// import DatePicker from '@/app/components/ui/DatePicker';
import { 
  PaymentFormData, 
  PaymentMethod, 
  PAYMENT_METHOD_OPTIONS,
  DISABLED_PAYMENT_METHOD_OPTIONS,
  CreatePaymentDto 
} from '@/services/types/billing.types';
import { paymentService, billingService } from '@/services';

interface CreatePaymentFormProps {
  onSuccess: (payment: any) => void;
  onCancel: () => void;
  loading?: boolean;
}

interface BillOption {
  id: string;
  value: string;
  label: string;
  amount: number;
  status: string;
  dueDate: string;
}

const CreatePaymentForm: React.FC<CreatePaymentFormProps> = ({
  onSuccess,
  onCancel,
  loading: externalLoading = false
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [bills, setBills] = useState<BillOption[]>([]);
  const [loadingBills, setLoadingBills] = useState(true);
  const [selectedBill, setSelectedBill] = useState<BillOption | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    setValue,
    watch,
    reset
  } = useForm<PaymentFormData>({
    mode: 'onChange',
    defaultValues: {
      billId: '',
      amount: 0,
      paymentMethod: 'CASH',
      paymentDate: new Date().toISOString().split('T')[0], // Format for HTML date input
      transactionId: '',
      receiptNumber: '',
      description: '',
      notes: ''
    }
  });

  const watchedBillId = watch('billId');
  const watchedPaymentMethod = watch('paymentMethod');
  const watchedAmount = watch('amount');

  // Fetch pending/overdue bills
  useEffect(() => {
    const fetchBills = async () => {
      try {
        setLoadingBills(true);
        
        // Fetch pending and overdue bills
        const [pendingBills, overdueBills] = await Promise.all([
          billingService.getPendingBills(),
          billingService.getOverdueBills()
        ]);

        const allBills = [...pendingBills, ...overdueBills];
        
        const billOptions: BillOption[] = allBills.map((bill: any) => ({
          id: bill.id,
          value: bill.id,
          label: `${bill.title} - ${bill.amount} IQD`,
          amount: bill.amount,
          status: bill.status,
          dueDate: bill.dueDate
        }));

        setBills(billOptions);
      } catch (error) {
        console.error('Error fetching bills:', error);
      } finally {
        setLoadingBills(false);
      }
    };

    fetchBills();
  }, []);

  // Update selected bill info and default amount when bill changes
  useEffect(() => {
    if (watchedBillId) {
      const bill = bills.find(b => b.id === watchedBillId);
      setSelectedBill(bill || null);
      if (bill) {
        setValue('amount', bill.amount);
      }
    } else {
      setSelectedBill(null);
    }
  }, [watchedBillId, bills, setValue]);

  const onSubmit = async (data: PaymentFormData) => {
    if (isSubmitting || externalLoading) return;

    setIsSubmitting(true);
    try {
      const paymentData: CreatePaymentDto = {
        billId: data.billId,
        amount: Number(data.amount),
        paymentMethod: data.paymentMethod,
        paymentDate: new Date(data.paymentDate).toISOString(),
        transactionId: data.transactionId || undefined,
        receiptNumber: data.receiptNumber || undefined,
        description: data.description || undefined,
        notes: data.notes || undefined,
        status: 'COMPLETED' // Default to completed for manual entry
      };

      const response = await paymentService.createPayment(paymentData);
      
      if (response.data) {
        onSuccess(response.data);
        reset();
      }
    } catch (error: any) {
      console.error('Error creating payment:', error);
      // Handle error - could show toast notification here
    } finally {
      setIsSubmitting(false);
    }
  };

  const getPaymentMethodIcon = (method: PaymentMethod) => {
    const option = PAYMENT_METHOD_OPTIONS.find(opt => opt.value === method);
    return option?.icon || '💳';
  };

  const getPaymentMethodDescription = (method: PaymentMethod) => {
    const option = PAYMENT_METHOD_OPTIONS.find(opt => opt.value === method);
    return option?.description || '';
  };

  const isOverpayment = selectedBill && watchedAmount > selectedBill.amount;
  const isUnderpayment = selectedBill && watchedAmount < selectedBill.amount && watchedAmount > 0;

  const isLoading = isSubmitting || externalLoading || loadingBills;

  return (
    <Card className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-green-100 dark:bg-green-900/20 rounded-lg">
          <CreditCard className="h-5 w-5 text-green-600 dark:text-green-400" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            Ödeme Kaydet
          </h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            Mevcut bir faturaya ödeme kaydedin
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Bill Selection */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Fatura Seçin *
          </label>
          <Select
            {...register('billId', { required: 'Fatura seçiniz' })}
            error={errors.billId?.message}
            disabled={isLoading}
            options={[
              { value: '', label: loadingBills ? 'Faturalar yükleniyor...' : 'Fatura seçin' },
              ...bills
            ]}
          />
          {errors.billId && (
            <p className="text-sm text-red-600 dark:text-red-400 flex items-center gap-1">
              <AlertCircle className="h-3 w-3" />
              {errors.billId.message}
            </p>
          )}
        </div>

        {/* Selected Bill Info */}
        {selectedBill && (
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <FileText className="h-4 w-4 text-blue-600 dark:text-blue-400" />
              <span className="text-sm font-medium text-blue-900 dark:text-blue-100">
                Seçilen Fatura Bilgileri
              </span>
            </div>
            <div className="space-y-1 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400">Tutar:</span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {selectedBill.amount.toLocaleString()} IQD
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400">Durum:</span>
                <span className={`font-medium ${
                  selectedBill.status === 'OVERDUE' 
                    ? 'text-red-600 dark:text-red-400' 
                    : 'text-orange-600 dark:text-orange-400'
                }`}>
                  {selectedBill.status === 'OVERDUE' ? 'Gecikmiş' : 'Bekliyor'}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400">Vade Tarihi:</span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {new Date(selectedBill.dueDate).toLocaleDateString('tr-TR')}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Payment Method Selection */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Ödeme Yöntemi *
          </label>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {/* Active Payment Methods */}
            {PAYMENT_METHOD_OPTIONS.map((option) => (
              <label
                key={option.value}
                className={`relative flex flex-col items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                  watchedPaymentMethod === option.value
                    ? 'border-green-500 bg-green-50 dark:bg-green-900/20'
                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                }`}
              >
                <input
                  type="radio"
                  value={option.value}
                  {...register('paymentMethod', { required: 'Ödeme yöntemi seçiniz' })}
                  className="sr-only"
                />
                <span className="text-lg mb-1">{option.icon}</span>
                <div className="text-xs font-medium text-gray-900 dark:text-white text-center">
                  {option.label}
                </div>
                {watchedPaymentMethod === option.value && (
                  <div className="absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full" />
                )}
              </label>
            ))}
            
            {/* Disabled Payment Methods */}
            {DISABLED_PAYMENT_METHOD_OPTIONS.map((option) => (
              <div
                key={option.value}
                className="relative flex flex-col items-center p-3 border rounded-lg bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 opacity-60 cursor-not-allowed"
              >
                <span className="text-lg mb-1 grayscale">{option.icon}</span>
                <div className="text-xs font-medium text-gray-500 dark:text-gray-400 text-center">
                  {option.label}
                </div>
                <div className="absolute top-1 right-1 bg-amber-100 dark:bg-amber-900/20 text-amber-600 dark:text-amber-400 text-xs px-1.5 py-0.5 rounded-full font-medium">
                  Yakında
                </div>
              </div>
            ))}
          </div>
          {errors.paymentMethod && (
            <p className="text-sm text-red-600 dark:text-red-400 flex items-center gap-1">
              <AlertCircle className="h-3 w-3" />
              {errors.paymentMethod.message}
            </p>
          )}
        </div>

        {/* Amount and Payment Date Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Ödeme Tutarı (IQD) *
            </label>
            <Input
              type="number"
              step="0.01"
              min="0"
              {...register('amount', { 
                required: 'Tutar gereklidir',
                min: { value: 0.01, message: 'Tutar 0\'dan büyük olmalıdır' }
              })}
              placeholder="0.00"
              icon={DollarSign}
              error={errors.amount?.message}
              disabled={isLoading}
            />
            {isOverpayment && (
              <p className="text-sm text-amber-600 dark:text-amber-400 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" />
                Fazla ödeme: {(watchedAmount - selectedBill.amount).toLocaleString()} IQD
              </p>
            )}
            {isUnderpayment && (
              <p className="text-sm text-orange-600 dark:text-orange-400 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" />
                Kısmi ödeme: {(selectedBill.amount - watchedAmount).toLocaleString()} IQD kalan
              </p>
            )}
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Ödeme Tarihi *
            </label>
            <Input
              type="date"
              {...register('paymentDate', { required: 'Ödeme tarihi gereklidir' })}
              icon={Calendar}
              error={errors.paymentDate?.message}
              disabled={isLoading}
              max={new Date().toISOString().split('T')[0]}
            />
          </div>
        </div>

        {/* Transaction ID and Receipt Number Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              İşlem ID
            </label>
            <Input
              {...register('transactionId')}
              placeholder="Örnek: TRX123456789"
              icon={Hash}
              disabled={isLoading}
            />
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Makbuz Numarası
            </label>
            <Input
              {...register('receiptNumber')}
              placeholder="Örnek: RCT-2024-001"
              icon={Receipt}
              disabled={isLoading}
            />
          </div>
        </div>

        {/* Description */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Açıklama
          </label>
          <Input
            {...register('description')}
            placeholder="Ödeme açıklaması..."
            icon={FileText}
            disabled={isLoading}
          />
        </div>

        {/* Notes */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Notlar
          </label>
          <TextArea
            value={watch('notes')}
            onChange={(e: any) => setValue('notes', e.target.value)}
            placeholder="Ödeme hakkında ek notlar..."
            rows={3}
            disabled={isLoading}
          />
        </div>

        {/* Current Payment Method Info */}
        {watchedPaymentMethod && (
          <div className="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4">
            <div className="flex items-center gap-2 text-sm">
              <span className="text-lg">{getPaymentMethodIcon(watchedPaymentMethod)}</span>
              <span className="font-medium text-gray-900 dark:text-white">
                {PAYMENT_METHOD_OPTIONS.find(opt => opt.value === watchedPaymentMethod)?.label}
              </span>
              <span className="text-gray-500 dark:text-gray-400">
                - {getPaymentMethodDescription(watchedPaymentMethod)}
              </span>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
          <Button
            type="button"
            variant="secondary"
            onClick={onCancel}
            disabled={isLoading}
            className="w-full sm:w-auto"
          >
            İptal
          </Button>
          <Button
            type="submit"
            variant="primary"
            disabled={!isValid || isLoading}
            isLoading={isSubmitting}
            icon={CreditCard}
            className="w-full sm:w-auto"
          >
            {isSubmitting ? 'Ödeme Kaydediliyor...' : 'Ödeme Kaydet'}
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default CreatePaymentForm;
</file>

<file path="src/app/dashboard/requests/components/detail/RequestDetailStatus.tsx">
import React, { useState } from 'react';
import { Play, CheckCircle, PauseCircle, RotateCcw, X, AlertCircle, UserCheck } from 'lucide-react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import { RequestDetailStatusProps, STATUS_CONFIGS, RequestDetailAction } from '@/services/types/request-detail.types';

const RequestDetailStatus: React.FC<RequestDetailStatusProps> = ({
  request,
  onStatusChange,
  loading = false
}) => {
  const [actionLoading, setActionLoading] = useState<string | null>(null);

  const currentStatus = request.status.id;
  const statusConfig = STATUS_CONFIGS[currentStatus] || STATUS_CONFIGS['OPEN'];
  const allowedActions = statusConfig.allowedActions;

  // Handle status change with loading state
  const handleAction = async (action: RequestDetailAction) => {
    try {
      setActionLoading(action);
      await onStatusChange(action);
    } catch (error) {
      console.error('Status change failed:', error);
    } finally {
      setActionLoading(null);
    }
  };

  // Action button configuration
  const actionButtons = [
    {
      action: 'start-progress',
      label: 'İşleme Al',
      icon: Play,
      variant: 'primary' as const,
      description: 'Talebi işleme alın ve çalışmaya başlayın'
    },
    {
      action: 'assign',
      label: 'Ata',
      icon: UserCheck,
      variant: 'primary' as const,
      description: 'Talebi bir kişiye atayın'
    },
    {
      action: 'resolve',
      label: 'Çöz',
      icon: CheckCircle,
      variant: 'primary' as const,
      description: 'Talebi çözülmüş olarak işaretleyin'
    },
    {
      action: 'mark-waiting',
      label: 'Beklet',
      icon: PauseCircle,
      variant: 'secondary' as const,
      description: 'Talebi bekleme durumuna alın'
    },
    {
      action: 'close',
      label: 'Kapat',
      icon: CheckCircle,
      variant: 'primary' as const,
      description: 'Talebi kapatın'
    },
    {
      action: 'reopen',
      label: 'Yeniden Aç',
      icon: RotateCcw,
      variant: 'secondary' as const,
      description: 'Kapalı/çözülmüş talebi yeniden açın'
    },
    {
      action: 'cancel',
      label: 'İptal Et',
      icon: X,
      variant: 'danger' as const,
      description: 'Talebi iptal edin'
    }
  ];

  // Filter available actions
  const availableActions = actionButtons.filter(button => 
    allowedActions.includes(button.action as any)
  );

  // No actions available
  if (availableActions.length === 0) {
    return (
      <Card className="p-6">
        <div className="space-y-4">
          <div className="flex items-center gap-2 mb-4">
            <AlertCircle className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
            <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              Durum İşlemleri
            </h2>
          </div>

          <div className="text-center py-6">
            <p className="text-text-light-secondary dark:text-text-secondary">
              Bu durum için mevcut işlem bulunmuyor.
            </p>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center gap-2 mb-4">
          <AlertCircle className="h-5 w-5 text-text-light-muted dark:text-text-muted" />
          <h2 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
            Hızlı İşlemler
          </h2>
        </div>

        {/* Current Status Display */}
        <div className="bg-background-light-soft dark:bg-background-soft rounded-lg p-4 mb-4">
          <p className="text-sm text-text-light-muted dark:text-text-muted mb-1">
            Mevcut Durum
          </p>
          <div className="flex items-center gap-2">
            <div 
              className="w-3 h-3 rounded-full"
              style={{ backgroundColor: request.status.color }}
            />
            <span className="font-medium text-text-on-light dark:text-text-on-dark">
              {request.status.label}
            </span>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {availableActions.map((actionConfig) => {
            const IconComponent = actionConfig.icon;
            const isLoading = actionLoading === actionConfig.action;
            
            return (
              <div key={actionConfig.action} className="space-y-2">
                <Button
                  variant={actionConfig.variant}
                  icon={IconComponent}
                  onClick={() => handleAction(actionConfig.action as RequestDetailAction)}
                  disabled={loading || isLoading}
                  isLoading={isLoading}
                  className="w-full justify-start"
                >
                  {actionConfig.label}
                </Button>
                <p className="text-xs text-text-light-muted dark:text-text-muted px-1">
                  {actionConfig.description}
                </p>
              </div>
            );
          })}
        </div>

        {/* Status Flow Information */}
        <div className="pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <p className="text-xs text-text-light-muted dark:text-text-muted mb-2">
            Durum Akışı
          </p>
          <div className="flex flex-wrap gap-2">
            {Object.entries(STATUS_CONFIGS).map(([statusId, config]) => (
              <div
                key={statusId}
                className={`
                  px-2 py-1 rounded-md text-xs flex items-center gap-1
                  ${currentStatus === statusId 
                    ? 'bg-primary-gold/10 text-primary-gold border border-primary-gold/20' 
                    : 'bg-background-light-soft dark:bg-background-soft text-text-light-muted dark:text-text-muted'
                  }
                `}
              >
                <span>{config.label}</span>
                {currentStatus === statusId && <span>←</span>}
              </div>
            ))}
          </div>
        </div>

        {/* Warning for irreversible actions */}
        {availableActions.some(action => ['cancel', 'close'].includes(action.action)) && (
          <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3">
            <div className="flex items-start gap-2">
              <AlertCircle className="h-4 w-4 text-red-500 flex-shrink-0 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-red-800 dark:text-red-200">
                  Dikkat
                </p>
                <p className="text-xs text-red-600 dark:text-red-300">
                  Bazı işlemler geri alınamaz. Emin olduğunuzdan lütfen emin olun.
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

export default RequestDetailStatus;
</file>

<file path="src/app/dashboard/requests/components/RequestsBulkActionsBar.tsx">
import React, { useState } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Select from '@/app/components/ui/Select';
import Modal from '@/app/components/ui/Modal';
import { RequestsBulkActionsBarProps } from '@/services/types/request-list.types';
import { 
  X, 
  UserCheck, 
  RefreshCw, 
  Download, 
  CheckCircle, 
  Trash2,
  AlertCircle,
  Settings
} from 'lucide-react';

export default function RequestsBulkActionsBar({
  selectedCount,
  bulkActions,
  onBulkAction,
  onClearSelection,
  loading = false
}: RequestsBulkActionsBarProps) {
  const [showActionModal, setShowActionModal] = useState(false);
  const [currentAction, setCurrentAction] = useState<string | null>(null);
  const [actionData, setActionData] = useState<any>({});

  if (selectedCount === 0) {
    return null;
  }

  const handleActionClick = (actionId: string) => {
    const action = bulkActions.find(a => a.id === actionId);
    if (!action) return;

    setCurrentAction(actionId);

    // Actions that require additional input
    if (actionId === 'assign_technician' || actionId === 'change_priority') {
      setShowActionModal(true);
    } else if (action.confirmationRequired) {
      // Show confirmation for dangerous actions
      setShowActionModal(true);
    } else {
      // Execute action directly
      onBulkAction(actionId);
    }
  };

  const handleModalAction = () => {
    if (currentAction) {
      onBulkAction(currentAction);
      setShowActionModal(false);
      setCurrentAction(null);
      setActionData({});
    }
  };

  const getActionIcon = (actionId: string) => {
    switch (actionId) {
      case 'assign_technician':
        return UserCheck;
      case 'change_priority':
        return RefreshCw;
      case 'export_selected':
        return Download;
      case 'mark_completed':
        return CheckCircle;
      case 'delete_selected':
        return Trash2;
      default:
        return Settings;
    }
  };

  const getModalContent = () => {
    if (!currentAction) return null;

    const action = bulkActions.find(a => a.id === currentAction);
    if (!action) return null;

    switch (currentAction) {
      case 'assign_technician':
        return (
          <div className="space-y-4">
            <p className="text-text-light-secondary dark:text-text-secondary">
              Seçilen {selectedCount} talep için teknisyen atayın:
            </p>
            <Select
              value={actionData.technicianId || ''}
              onChange={(e: any) => setActionData({ technicianId: e.target.value })}
              options={[
                { value: '', label: 'Teknisyen seçin...' },
                { value: 'ali_hassan', label: 'Ali Hassan - Mahmoud Electrical' },
                { value: 'mohammed_ali', label: 'Mohammed Ali - Baghdad Plumbing' },
                { value: 'sara_ahmed', label: 'Sara Ahmed - City HVAC Services' },
                { value: 'omar_ibrahim', label: 'Omar Ibrahim - General Maintenance Co.' }
              ]}
            />
          </div>
        );

      case 'change_priority':
        return (
          <div className="space-y-4">
            <p className="text-text-light-secondary dark:text-text-secondary">
              Seçilen {selectedCount} talep için öncelik seviyesi seçin:
            </p>
            <Select
              value={actionData.priority || ''}
              onChange={(e: any) => setActionData({ priority: e.target.value })}
              options={[
                { value: '', label: 'Öncelik seçin...' },
                { value: 'emergency', label: '🚨 Acil' },
                { value: 'high', label: '🔴 Yüksek' },
                { value: 'medium', label: '🟡 Orta' },
                { value: 'low', label: '🟢 Düşük' }
              ]}
            />
          </div>
        );

      case 'mark_completed':
        return (
          <div className="space-y-4">
            <div className="flex items-start gap-3">
              <CheckCircle className="h-6 w-6 text-semantic-success-600 mt-1" />
              <div>
                <h4 className="font-medium text-text-on-light dark:text-text-on-dark mb-2">
                  Talepleri Tamamlandı Olarak İşaretle
                </h4>
                <p className="text-text-light-secondary dark:text-text-secondary">
                  Seçilen {selectedCount} talep tamamlandı olarak işaretlenecektir. Bu işlem geri alınamaz.
                </p>
              </div>
            </div>
          </div>
        );

      case 'delete_selected':
        return (
          <div className="space-y-4">
            <div className="flex items-start gap-3">
              <AlertCircle className="h-6 w-6 text-primary-red mt-1" />
              <div>
                <h4 className="font-medium text-primary-red mb-2">
                  Talepleri Sil
                </h4>
                <p className="text-text-light-secondary dark:text-text-secondary">
                  Seçilen {selectedCount} talep kalıcı olarak silinecektir. Bu işlem geri alınamaz.
                </p>
                <p className="text-sm text-primary-red mt-2">
                  Bu işlemi onaylamak için aşağıya "SİL" yazın:
                </p>
                <input
                  type="text"
                  className="mt-2 w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-red bg-white dark:bg-gray-800"
                  placeholder="SİL yazın..."
                  value={actionData.confirmation || ''}
                  onChange={(e) => setActionData({ confirmation: e.target.value })}
                />
              </div>
            </div>
          </div>
        );

      default:
        return (
          <div>
            <p className="text-text-light-secondary dark:text-text-secondary">
              {action.label} işlemini {selectedCount} talep için gerçekleştirmek istediğinizden emin misiniz?
            </p>
          </div>
        );
    }
  };

  const isModalActionDisabled = () => {
    if (!currentAction) return true;

    switch (currentAction) {
      case 'assign_technician':
        return !actionData.technicianId;
      case 'change_priority':
        return !actionData.priority;
      case 'delete_selected':
        return actionData.confirmation !== 'SİL';
      default:
        return false;
    }
  };

  return (
    <>
      <Card className="mb-6">
        <div className="p-4">
          <div className="flex items-center justify-between">
            {/* Left side - Selection info */}
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <div className="w-6 h-6 bg-primary-gold rounded-full flex items-center justify-center text-white text-sm font-bold">
                  {selectedCount}
                </div>
                <span className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                  {selectedCount} talep seçildi
                </span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                icon={X}
                onClick={onClearSelection}
                className="text-text-light-muted hover:text-text-on-light dark:text-text-muted dark:hover:text-text-on-dark"
              >
                Seçimi Temizle
              </Button>
            </div>

            {/* Right side - Actions */}
            <div className="flex items-center gap-2">
              {bulkActions.map((action) => {
                const IconComponent = getActionIcon(action.id);
                return (
                  <Button
                    key={action.id}
                    variant={action.dangerAction ? "danger" : "secondary"}
                    size="sm"
                    icon={IconComponent}
                    onClick={() => handleActionClick(action.id)}
                    disabled={loading || (action.requiresSelection && selectedCount === 0)}
                    className={action.dangerAction ? "text-red-600 hover:text-red-700" : ""}
                  >
                    {action.label}
                  </Button>
                );
              })}
            </div>
          </div>
        </div>
      </Card>

      {/* Action Modal */}
      <Modal
        isOpen={showActionModal}
        onClose={() => {
          setShowActionModal(false);
          setCurrentAction(null);
          setActionData({});
        }}
        title={bulkActions.find(a => a.id === currentAction)?.label || 'Toplu İşlem'}
        size="md"
      >
        <div className="space-y-6">
          {getModalContent()}

          <div className="flex justify-end gap-3 pt-4 border-t border-background-light-secondary dark:border-background-secondary">
            <Button
              variant="secondary"
              onClick={() => {
                setShowActionModal(false);
                setCurrentAction(null);
                setActionData({});
              }}
            >
              İptal
            </Button>
            <Button
              variant={currentAction === 'delete_selected' ? "danger" : "primary"}
              onClick={handleModalAction}
              disabled={isModalActionDisabled()}
              isLoading={loading}
            >
              {currentAction === 'delete_selected' ? 'Sil' : 'Onayla'}
            </Button>
          </div>
        </div>
      </Modal>
    </>
  );
}
</file>

<file path="src/app/dashboard/requests/components/RequestsFilterPanel.tsx">
import React, { useState } from 'react';
import Button from '@/app/components/ui/Button';
import Select from '@/app/components/ui/Select';
import Input from '@/app/components/ui/Input';
import Badge from '@/app/components/ui/Badge';
import { RequestsFilterPanelProps, RequestsListFilters } from '@/services/types/request-list.types';
import { X, Filter, RotateCcw, Check } from 'lucide-react';

export default function RequestsFilterPanel({
  filters,
  activeFilters,
  onApplyFilters,
  onResetFilters,
  onClose,
  isOpen
}: RequestsFilterPanelProps) {
  const [localFilters, setLocalFilters] = useState<RequestsListFilters>(activeFilters);

  const handleFilterChange = (key: keyof RequestsListFilters, value: any) => {
    setLocalFilters(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleApply = () => {
    onApplyFilters(localFilters);
    onClose();
  };

  const handleReset = () => {
    setLocalFilters({});
    onResetFilters();
  };

  const getActiveFiltersCount = () => {
    return Object.keys(localFilters).filter(key => {
      const value = localFilters[key as keyof RequestsListFilters];
      return value !== undefined && value !== null && value !== '' && value !== 'all';
    }).length;
  };

  if (!isOpen) return null;

  return (
    <div className="h-full flex flex-col bg-background-light-card dark:bg-background-card">
      {/* Header */}
      <div className="flex items-center justify-between p-6 border-b border-background-light-secondary dark:border-background-secondary">
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 bg-primary-gold/10 rounded-lg flex items-center justify-center">
            <Filter className="h-4 w-4 text-primary-gold" />
          </div>
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
            Filtreler
          </h3>
          {getActiveFiltersCount() > 0 && (
            <Badge variant="soft" color="primary" className="text-xs">
              {getActiveFiltersCount()} aktif
            </Badge>
          )}
        </div>
        <Button
          variant="ghost"
          size="sm"
          icon={X}
          onClick={onClose}
          className="text-text-light-muted hover:text-text-on-light dark:text-text-muted dark:hover:text-text-on-dark"
        />
      </div>

      {/* Filter Content */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6">
        {/* Status Filter */}
        {filters.status && (
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-3">
              {filters.status.label}
            </label>
            <Select
              value={localFilters.status || 'all'}
              onChange={(e: any) => handleFilterChange('status', e.target.value === 'all' ? undefined : e.target.value)}
              options={filters.status.options?.map(opt => ({
                value: opt.value,
                label: opt.count ? `${opt.label} (${opt.count})` : opt.label
              })) || []}
            />
          </div>
        )}

        {/* Priority Filter */}
        {filters.priority && (
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-3">
              {filters.priority.label}
            </label>
            <Select
              value={localFilters.priority || 'all'}
              onChange={(e: any) => handleFilterChange('priority', e.target.value === 'all' ? undefined : e.target.value)}
              options={filters.priority.options?.map(opt => ({
                value: opt.value,
                label: opt.count ? `${opt.icon || ''} ${opt.label} (${opt.count})` : `${opt.icon || ''} ${opt.label}`
              })) || []}
            />
          </div>
        )}

        {/* Category Filter */}
        {filters.category && (
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-3">
              {filters.category.label}
            </label>
            <Select
              value={localFilters.category || 'all'}
              onChange={(e: any) => handleFilterChange('category', e.target.value === 'all' ? undefined : e.target.value)}
              options={filters.category.options?.map(opt => ({
                value: opt.value,
                label: opt.count ? `${opt.icon || ''} ${opt.label} (${opt.count})` : `${opt.icon || ''} ${opt.label}`
              })) || []}
            />
          </div>
        )}

        {/* Assignee Filter */}
        {filters.assignee && (
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-3">
              {filters.assignee.label}
            </label>
            <Select
              value={localFilters.assignee || 'all'}
              onChange={(e: any) => handleFilterChange('assignee', e.target.value === 'all' ? undefined : e.target.value)}
              options={filters.assignee.options?.map(opt => ({
                value: opt.value,
                label: opt.count 
                  ? `${opt.label}${opt.company ? ` (${opt.company})` : ''} (${opt.count})`
                  : `${opt.label}${opt.company ? ` (${opt.company})` : ''}`
              })) || []}
            />
          </div>
        )}

        {/* Building Filter */}
        {filters.building && (
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-3">
              {filters.building.label}
            </label>
            <Select
              value={localFilters.building || 'all'}
              onChange={(e: any) => handleFilterChange('building', e.target.value === 'all' ? undefined : e.target.value)}
              options={filters.building.options?.map(opt => ({
                value: opt.value,
                label: opt.count ? `${opt.label} (${opt.count})` : opt.label
              })) || []}
            />
          </div>
        )}

        {/* Date Range Filter */}
        {filters.dateRange && (
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-3">
              {filters.dateRange.label}
            </label>
            
            {/* Quick Presets */}
            {filters.dateRange.presets && (
              <div className="mb-4">
                <div className="grid grid-cols-2 gap-2">
                  {filters.dateRange.presets.map((preset) => (
                    <Button
                      key={preset.value}
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        // Handle preset selection
                        console.log('Preset selected:', preset.value);
                      }}
                      className="text-left justify-start"
                    >
                      {preset.label}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* Custom Date Range */}
            <div className="space-y-3">
              <div>
                <label className="block text-xs text-text-light-muted dark:text-text-muted mb-1">
                  Başlangıç Tarihi
                </label>
                <Input
                  type="date"
                  value={localFilters.startDate || ''}
                  onChange={(e: any) => handleFilterChange('startDate', e.target.value)}
                />
              </div>
              <div>
                <label className="block text-xs text-text-light-muted dark:text-text-muted mb-1">
                  Bitiş Tarihi
                </label>
                <Input
                  type="date"
                  value={localFilters.endDate || ''}
                  onChange={(e: any) => handleFilterChange('endDate', e.target.value)}
                />
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Footer Actions */}
      <div className="p-6 border-t border-background-light-secondary dark:border-background-secondary">
        <div className="flex gap-3">
          <Button
            variant="secondary"
            icon={RotateCcw}
            onClick={handleReset}
            className="flex-1"
          >
            Sıfırla
          </Button>
          <Button
            variant="primary"
            icon={Check}
            onClick={handleApply}
            className="flex-1"
          >
            Uygula ({getActiveFiltersCount()})
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/dashboard/requests/components/RequestsGridView.tsx">
import React, { useState } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Checkbox from '@/app/components/ui/Checkbox';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import { RequestsGridViewProps, ServiceRequest } from '@/services/types/request-list.types';
import {
  MoreVertical,
  User,
  Edit,
  Trash2,
  Eye,
  Calendar,
  Clock,
  MapPin,
  Phone,
  AlertCircle,
  CheckCircle,
  Wrench,
  Building,
  Star,
  MessageSquare,
  Image as ImageIcon
} from 'lucide-react';

export default function RequestsGridView({
  requests,
  loading = false,
  selectedRequests,
  onSelectionChange,
  onRequestAction,
  loadingCardCount = 6
}: RequestsGridViewProps) {

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      onSelectionChange(requests);
    } else {
      onSelectionChange([]);
    }
  };

  const handleSelectRequest = (request: ServiceRequest, checked: boolean) => {
    if (checked) {
      onSelectionChange([...selectedRequests, request]);
    } else {
      onSelectionChange(selectedRequests.filter(r => r.id !== request.id));
    }
  };

  const isSelected = (request: ServiceRequest) => {
    return selectedRequests.some(r => r.id === request.id);
  };

  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'open':
      case 'new':
        return AlertCircle;
      case 'in_progress':
      case 'assigned':
        return Clock;
      case 'completed':
      case 'resolved':
        return CheckCircle;
      default:
        return AlertCircle;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(loadingCardCount)].map((_, index) => (
          <Card key={index} className="p-6 space-y-4">
            <div className="flex items-center justify-between">
              <Skeleton className="h-4 w-4" />
              <Skeleton className="h-4 w-4" />
            </div>
            <Skeleton className="h-6 w-3/4" />
            <Skeleton className="h-4 w-full" />
            <div className="flex gap-2">
              <Skeleton className="h-5 w-16" />
              <Skeleton className="h-5 w-16" />
            </div>
            <div className="flex items-center gap-2">
              <Skeleton className="h-6 w-6 rounded-full" />
              <Skeleton className="h-4 w-24" />
            </div>
          </Card>
        ))}
      </div>
    );
  }

  if (requests.length === 0) {
    return (
      <EmptyState
        icon={<Wrench className="h-12 w-12" />}
        title="Henüz talep bulunmuyor"
        description="Filtrelere uygun hizmet talebi bulunamadı."
        action={
          <Button
            variant="primary"
            onClick={() => onRequestAction('create', {} as ServiceRequest)}
          >
            Yeni Talep Oluştur
          </Button>
        }
      />
    );
  }

  return (
    <div className="space-y-6">
      {/* Select All */}
      {requests.length > 0 && (
        <div className="flex items-center gap-3 pb-4 border-b border-background-light-secondary dark:border-background-secondary">
          <Checkbox
            checked={selectedRequests.length === requests.length}
            indeterminate={selectedRequests.length > 0 && selectedRequests.length < requests.length}
            onChange={(e: any) => handleSelectAll(e.target.checked)}
          />
          <span className="text-sm text-text-light-secondary dark:text-text-secondary">
            {selectedRequests.length > 0
              ? `${selectedRequests.length} talep seçildi`
              : `Tümünü seç (${requests.length} talep)`
            }
          </span>
        </div>
      )}

      {/* Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {requests.map((request) => {
          const StatusIcon = getStatusIcon(request.status.id);
          const isRequestSelected = isSelected(request);

          return (
            <RequestCard
              key={request.id}
              request={request}
              isSelected={isRequestSelected}
              onSelect={(checked) => handleSelectRequest(request, checked)}
              onAction={onRequestAction}
              StatusIcon={StatusIcon}
              formatDate={formatDate}
              formatDateTime={formatDateTime}
            />
          );
        })}
      </div>
    </div>
  );
}

// Individual Request Card Component
interface RequestCardProps {
  request: ServiceRequest;
  isSelected: boolean;
  onSelect: (checked: boolean) => void;
  onAction: (action: string, request: ServiceRequest) => void;
  StatusIcon: React.ComponentType<{ className?: string; style?: React.CSSProperties }>;
  formatDate: (date: string) => string;
  formatDateTime: (date: string) => string;
}

function RequestCard({
  request,
  isSelected,
  onSelect,
  onAction,
  StatusIcon,
  formatDate,
  formatDateTime
}: RequestCardProps) {
  const [showDetails, setShowDetails] = useState(false);

  return (
    <Card
      className={`p-6 transition-all duration-200 hover:shadow-lg ${isSelected
        ? 'ring-2 ring-primary-gold/50 bg-primary-gold/5'
        : 'hover:scale-[1.02]'
        }`}
    >
      {/* Header */}
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-start gap-3">
          <Checkbox
            checked={isSelected}
            onChange={(e: any) => onSelect(e.target.checked)}
            className="mt-1"
          />
          <div className="flex gap-1">
            {/* <div className="flex items-center gap-2 mb-1">
              <span className="text-sm font-medium text-primary-gold">
                {request.requestId}
              </span>
              
            </div> */}
            <h3 className="font-semibold text-text-on-light dark:text-text-on-dark line-clamp-2 text-sm">
              {request.title}
            </h3>

          </div>
        </div>
        <RequestActionMenu request={request} onAction={onAction} />
      </div>

      {/* Status and Priority */}
      <div className="flex items-center gap-2 mb-4">
        <div className="flex items-center gap-1">
          {!request.isUrgent && (
            <Badge variant="solid" color="red" className="text-xs">
              Acil
            </Badge>
          )}
          <Badge
            variant="soft"
            color="secondary"
            className="text-xs"
          >
            <StatusIcon className="h-4 w-4 mr-2" style={{ color: request.status.color }} />
            {request.status.label}
          </Badge>
        </div>
        <Badge
          variant="soft"
          color={
            request.priority.level === 4 ? 'red' :
              request.priority.level === 3 ? 'gold' :
                request.priority.level === 2 ? 'secondary' : 'primary'
          }
          className="text-xs"
        >
          <span className="mr-1">{request.priority.icon}</span>
          {request.priority.label}
        </Badge>
      </div>

      {/* Category and Location */}
      <div className="flex items-center justify-between mb-4 text-sm">
        <div className="flex items-center gap-2">
          <span className="text-lg">{request.category.icon}</span>
          <span className="text-text-light-secondary dark:text-text-secondary">
            {request.category.label}
          </span>
        </div>
        <div className="flex items-center gap-1 text-text-light-muted dark:text-text-muted">
          <Building className="h-3 w-3" />
          <span>{request.apartment.number}</span>
        </div>
      </div>

      {/* Assignee */}
      <div className="mb-4">
        {request.assignee ? (
          <div className="flex items-center gap-2">
            <div className="w-6 h-6 bg-primary-gold/10 rounded-full flex items-center justify-center text-xs font-bold text-primary-gold">
              {request.assignee.avatar}
            </div>
            <div className="text-sm">
              <p className="font-medium text-text-on-light dark:text-text-on-dark">
                {request.assignee.name}
              </p>
              <p className="text-text-light-muted dark:text-text-muted text-xs">
                {request.assignee.company}
              </p>
              {request.assignee.rating && (
                <div className="flex items-center gap-1 mt-1">
                  <Star className="h-3 w-3 text-yellow-400 fill-current" />
                  <span className="text-xs text-text-light-muted dark:text-text-muted">
                    {request.assignee.rating}
                  </span>
                </div>
              )}
            </div>
          </div>
        ) : (
          <Badge variant="soft" color="secondary" className="text-xs">
            Atanmamış
          </Badge>
        )}
      </div>

      {/* Dates */}
      <div className="space-y-2 text-xs text-text-light-secondary dark:text-text-secondary mb-4">
        <div className="flex items-center justify-between">
          <span>Oluşturulma:</span>
          <span>{formatDate(request.createdDate)}</span>
        </div>
        <div className="flex items-center justify-between">
          <span>Vade:</span>
          <span className={request.isOverdue ? 'text-primary-red font-medium' : ''}>
            {formatDate(request.dueDate)}
            {request.isOverdue && ' (Gecikmiş)'}
          </span>
        </div>
      </div>

      {/* Media and Comments */}
      <div className="flex items-center justify-between text-xs text-text-light-muted dark:text-text-muted mb-4">
        <div className="flex items-center gap-3">
          {request.hasImages && (
            <div className="flex items-center gap-1">
              <ImageIcon className="h-3 w-3" />
              <span>{request.imagesCount}</span>
            </div>
          )}
          {request.hasComments && (
            <div className="flex items-center gap-1">
              <MessageSquare className="h-3 w-3" />
              <span>{request.commentsCount}</span>
            </div>
          )}
        </div>
        {request.cost.estimated > 0 && (
          <div className="text-text-light-secondary dark:text-text-secondary">
            ~{new Intl.NumberFormat('tr-TR').format(request.cost.estimated)} {request.cost.currency}
          </div>
        )}
      </div>

      {/* Tags */}
      {request.tags.length > 0 && (
        <div className="flex gap-1 flex-wrap">
          {request.tags.slice(0, 3).map((tag, index) => (
            <Badge key={index} variant="soft" color="secondary" className="text-xs">
              {tag}
            </Badge>
          ))}
          {request.tags.length > 3 && (
            <Badge variant="soft" color="secondary" className="text-xs">
              +{request.tags.length - 3}
            </Badge>
          )}
        </div>
      )}

      {/* Expandable Details */}
      {showDetails && (
        <div className="mt-4 pt-4 border-t border-background-light-secondary dark:border-background-secondary">
          <div className="space-y-3 text-sm">
            <div>
              <p className="text-text-light-muted dark:text-text-muted mb-1">Açıklama:</p>
              <p className="text-text-on-light dark:text-text-on-dark">
                {request.description || 'Açıklama bulunmuyor.'}
              </p>
            </div>

            <div>
              <p className="text-text-light-muted dark:text-text-muted mb-1">İletişim:</p>
              <div className="space-y-1">
                <div className="flex items-center gap-2">
                  <User className="h-3 w-3" />
                  <span>{request.apartment.owner}</span>
                </div>
                {request.apartment.phone && (
                  <div className="flex items-center gap-2">
                    <Phone className="h-3 w-3" />
                    <a
                      href={`tel:${request.apartment.phone}`}
                      className="text-primary-gold hover:underline"
                    >
                      {request.apartment.phone}
                    </a>
                  </div>
                )}
                <div className="flex items-center gap-2">
                  <MapPin className="h-3 w-3" />
                  <span>{request.apartment.block} Blok, {request.apartment.floor}. Kat</span>
                </div>
              </div>
            </div>

            <div>
              <p className="text-text-light-muted dark:text-text-muted mb-1">Son Güncelleme:</p>
              <p>{formatDateTime(request.updatedDate)}</p>
            </div>
          </div>
        </div>
      )}

      {/* Toggle Details Button */}
      <Button
        variant="ghost"
        size="sm"
        onClick={() => setShowDetails(!showDetails)}
        className="w-full mt-4 text-xs"
      >
        {showDetails ? 'Daha Az' : 'Detayları Gör'}
      </Button>
    </Card>
  );
}

// Action Menu Component
interface RequestActionMenuProps {
  request: ServiceRequest;
  onAction: (action: string, request: ServiceRequest) => void;
}

function RequestActionMenu({ request, onAction }: RequestActionMenuProps) {
  const [isOpen, setIsOpen] = useState(false);

  const actions = [
    { id: 'view', label: 'Detay', icon: Eye },
    { id: 'edit', label: 'Düzenle', icon: Edit },
    { id: 'delete', label: 'Sil', icon: Trash2, danger: true }
  ];

  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="sm"
        icon={MoreVertical}
        onClick={() => setIsOpen(!isOpen)}
        className="w-6 h-6 p-0"
      />

      {isOpen && (
        <>
          <div
            className="fixed inset-0 z-10"
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute right-0 top-6 z-20 w-36 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg py-1">
            {actions.map((action) => (
              <button
                key={action.id}
                onClick={() => {
                  onAction(action.id, request);
                  setIsOpen(false);
                }}
                className={`w-full px-3 py-2 text-left text-xs hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-2 ${action.danger
                  ? 'text-red-600 dark:text-red-400'
                  : 'text-gray-700 dark:text-gray-200'
                  }`}
              >
                <action.icon className="w-3 h-3" />
                {action.label}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
}
</file>

<file path="src/app/dashboard/requests/components/RequestsTableView.tsx">
import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Checkbox from '@/app/components/ui/Checkbox';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import { RequestsTableViewProps, ServiceRequest } from '@/services/types/request-list.types';
import {
  ChevronUp,
  ChevronDown,
  MoreVertical,
  User,
  Edit,
  Trash2,
  Eye,
  Calendar,
  Clock,
  MapPin,
  Phone,
  AlertCircle,
  CheckCircle,
  Wrench
} from 'lucide-react';

export default function RequestsTableView({
  requests,
  columns,
  loading = false,
  selectedRequests,
  onSelectionChange,
  onRequestAction,
  sortOptions,
  onSortChange
}: RequestsTableViewProps) {
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      onSelectionChange(requests);
    } else {
      onSelectionChange([]);
    }
  };

  const handleSelectRow = (request: ServiceRequest, checked: boolean) => {
    if (checked) {
      onSelectionChange([...selectedRequests, request]);
    } else {
      onSelectionChange(selectedRequests.filter(r => r.id !== request.id));
    }
  };

  const toggleRowExpansion = (requestId: string) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded.has(requestId)) {
      newExpanded.delete(requestId);
    } else {
      newExpanded.add(requestId);
    }
    setExpandedRows(newExpanded);
  };

  const isSelected = (request: ServiceRequest) => {
    return selectedRequests.some(r => r.id === request.id);
  };

  const isAllSelected = selectedRequests.length === requests.length && requests.length > 0;
  const isIndeterminate = selectedRequests.length > 0 && selectedRequests.length < requests.length;

  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'open':
      case 'new':
        return AlertCircle;
      case 'in_progress':
      case 'assigned':
        return Clock;
      case 'completed':
      case 'resolved':
        return CheckCircle;
      default:
        return AlertCircle;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <Card>
        <div className="p-6 space-y-4">
          {[...Array(5)].map((_, index) => (
            <div key={index} className="flex items-center gap-4">
              <Skeleton className="h-4 w-4" />
              <Skeleton className="h-4 flex-1" />
              <Skeleton className="h-4 w-20" />
              <Skeleton className="h-4 w-24" />
              <Skeleton className="h-4 w-16" />
            </div>
          ))}
        </div>
      </Card>
    );
  }

  if (requests.length === 0) {
    return (
      <Card>
        <EmptyState
          icon={<Wrench className="h-12 w-12" />}
          title="Henüz talep bulunmuyor"
          description="Filtrelere uygun hizmet talebi bulunamadı."
          action={
            <Button
              variant="primary"
              onClick={() => onRequestAction('create', {} as ServiceRequest)}
            >
              Yeni Talep Oluştur
            </Button>
          }
        />
      </Card>
    );
  }

  return (
    <Card>
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b border-background-light-secondary dark:border-background-secondary">
              <th className="text-left p-4 w-12">
                <Checkbox
                  checked={isAllSelected}
                  indeterminate={isIndeterminate}
                  onChange={(e: any) => handleSelectAll(e.target.checked)}
                />
              </th>

              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Başlık
              </th>
              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Daire
              </th>
              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Kategori
              </th>
              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Öncelik
              </th>
              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Durum
              </th>
              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Teknisyen
              </th>
              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Oluşturulma
              </th>
              <th className="text-left p-4 font-medium text-text-light-secondary dark:text-text-secondary">
                Vade
              </th>
              <th className="text-center p-4 w-20 font-medium text-text-light-secondary dark:text-text-secondary">
                İşlemler
              </th>
            </tr>
          </thead>
          <tbody>
            {requests.map((request) => {
              const StatusIcon = getStatusIcon(request.status.id);
              const isRowSelected = isSelected(request);
              const isExpanded = expandedRows.has(request.id);

              return (
                <React.Fragment key={request.id}>
                  <tr
                    className={`border-b border-background-light-soft dark:border-background-soft hover:bg-background-light-soft dark:hover:bg-background-soft transition-colors ${isRowSelected ? 'bg-primary-gold/5' : ''
                      }`}
                  >
                    <td className="p-4">
                      <Checkbox
                        checked={isRowSelected}
                        onChange={(e: any) => handleSelectRow(request, e.target.checked)}
                      />
                    </td>
                    {/* <td className="p-4">
                      <button
                        onClick={() => toggleRowExpansion(request.id)}
                        className="text-primary-gold hover:text-primary-gold/80 font-medium"
                      >
                        {request.requestId}
                      </button>
                    </td> */}
                    <td className="p-4">
                      <div className="max-w-xs">
                        <p className="font-medium text-text-on-light dark:text-text-on-dark truncate">
                          {request.title}
                        </p>
                        {request.isUrgent && (
                          <Badge variant="solid" color="red" className="text-xs mt-1">
                            Acil
                          </Badge>
                        )}
                      </div>
                    </td>
                    <td className="p-4">
                      <div className="text-sm">
                        <p className="font-medium text-text-on-light dark:text-text-on-dark">
                          {request.apartment.number}
                        </p>
                        <p className="text-text-light-muted dark:text-text-muted">
                          {request.apartment.block} Blok
                        </p>
                      </div>
                    </td>
                    <td className="p-4">
                      <Badge
                        variant="soft"
                        color="secondary"
                        className="text-xs"
                      >
                        <span className="mr-1">{request.category.icon}</span>
                        {request.category.label}
                      </Badge>
                    </td>
                    <td className="p-4">
                      <Badge
                        variant="soft"
                        color={
                          request.priority.level === 4 ? 'red' :
                            request.priority.level === 3 ? 'gold' :
                              request.priority.level === 2 ? 'secondary' : 'primary'
                        }
                        className="text-xs"
                      >
                        <span className="mr-1">{request.priority.icon}</span>
                        {request.priority.label}
                      </Badge>
                    </td>
                    <td className="p-4">
                      <div className="flex items-center gap-2">
                        <StatusIcon className="h-4 w-4" style={{ color: request.status.color }} />
                        <Badge
                          variant="soft"
                          color="secondary"
                          className="text-xs"
                        >
                          {request.status.label}
                        </Badge>
                      </div>
                    </td>
                    <td className="p-4">
                      {request.assignee ? (
                        <div className="flex items-center gap-2">
                          <div className="w-6 h-6 bg-primary-gold/10 rounded-full flex items-center justify-center text-xs font-bold text-primary-gold">
                            {request.assignee.avatar}
                          </div>
                          <div className="text-sm">
                            <p className="font-medium text-text-on-light dark:text-text-on-dark">
                              {request.assignee.name}
                            </p>
                            <p className="text-text-light-muted dark:text-text-muted text-xs">
                              {request.assignee.company}
                            </p>
                          </div>
                        </div>
                      ) : (
                        <Badge variant="soft" color="secondary" className="text-xs">
                          Atanmamış
                        </Badge>
                      )}
                    </td>
                    <td className="p-4 text-sm text-text-light-secondary dark:text-text-secondary">
                      {formatDate(request.createdDate)}
                    </td>
                    <td className="p-4">
                      <div className="text-sm">
                        <p className={`${request.isOverdue ? 'text-primary-red font-medium' : 'text-text-light-secondary dark:text-text-secondary'}`}>
                          {formatDate(request.dueDate)}
                        </p>
                        {request.isOverdue && (
                          <Badge variant="soft" color="red" className="text-xs mt-1">
                            Gecikmiş
                          </Badge>
                        )}
                      </div>
                    </td>
                    <td className="p-4">
                      <RequestActionMenu
                        request={request}
                        onAction={onRequestAction}
                      />
                    </td>
                  </tr>

                  {/* Expanded Row Details */}
                  {isExpanded && (
                    <tr className="bg-background-light-soft dark:bg-background-soft">
                      <td colSpan={11} className="p-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                          {/* Description */}
                          <div className="lg:col-span-2">
                            <h4 className="text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                              Açıklama
                            </h4>
                            <p className="text-sm text-text-on-light dark:text-text-on-dark">
                              {request.description || 'Açıklama bulunmuyor.'}
                            </p>
                          </div>

                          {/* Contact Info */}
                          <div>
                            <h4 className="text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                              İletişim
                            </h4>
                            <div className="space-y-2 text-sm">
                              <div className="flex items-center gap-2">
                                <User className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                                <span>{request.apartment.owner}</span>
                              </div>
                              {request.apartment.phone && (
                                <div className="flex items-center gap-2">
                                  <Phone className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                                  <a
                                    href={`tel:${request.apartment.phone}`}
                                    className="text-primary-gold hover:underline"
                                  >
                                    {request.apartment.phone}
                                  </a>
                                </div>
                              )}
                              <div className="flex items-center gap-2">
                                <MapPin className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                                <span>{request.apartment.block} Blok, {request.apartment.floor}. Kat</span>
                              </div>
                            </div>
                          </div>

                          {/* Additional Info */}
                          <div>
                            <h4 className="text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                              Ek Bilgiler
                            </h4>
                            <div className="space-y-2 text-sm">
                              <div>
                                <span className="text-text-light-muted dark:text-text-muted">Son Güncelleme: </span>
                                <span>{formatDateTime(request.updatedDate)}</span>
                              </div>
                              {request.estimatedCompletion && (
                                <div>
                                  <span className="text-text-light-muted dark:text-text-muted">Tahmini Bitiş: </span>
                                  <span>{formatDateTime(request.estimatedCompletion)}</span>
                                </div>
                              )}
                              <div className="flex gap-2 flex-wrap">
                                {request.tags.map((tag, index) => (
                                  <Badge key={index} variant="soft" color="secondary" className="text-xs">
                                    {tag}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              );
            })}
          </tbody>
        </table>
      </div>
    </Card>
  );
}

// Action Menu Component
interface RequestActionMenuProps {
  request: ServiceRequest;
  onAction: (action: string, request: ServiceRequest) => void;
}

function RequestActionMenu({ request, onAction }: RequestActionMenuProps) {
  const [isOpen, setIsOpen] = useState(false);
  const router = useRouter();

  const actions = [
    {
      id: 'view',
      label: 'Detay',
      icon: Eye,
    },
    { id: 'edit', label: 'Düzenle', icon: Edit },
    { id: 'delete', label: 'Sil', icon: Trash2, danger: true }
  ];

  const handleActionClick = (actionId: string) => {
    if (actionId === 'view') {
      // Detay sayfasına yönlendir
      router.push(`/dashboard/requests/${request.id}`);
    } else {
      // Diğer aksiyonlar için parent component'a bildirim gönder
      onAction(actionId, request);
    }
    setIsOpen(false);
  };

  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="sm"
        icon={MoreVertical}
        onClick={() => setIsOpen(!isOpen)}
        className="w-8 h-8 p-0"
      />

      {isOpen && (
        <>
          <div
            className="fixed inset-0 z-10"
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute right-0 top-8 z-20 w-48 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg py-1">
            {actions.map((action) => (
              <button
                key={action.id}
                onClick={() => handleActionClick(action.id)}
                className={`w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3 ${action.danger
                  ? 'text-red-600 dark:text-red-400'
                  : 'text-gray-700 dark:text-gray-200'
                  }`}
              >
                <action.icon className="w-4 h-4" />
                {action.label}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
}
</file>

<file path="src/app/dashboard/requests/constants/index.ts">
// Request Types - Synchronized with CreateTicketModal
export const TICKET_TYPES = [
    { value: 'FAULT_REPAIR', label: 'Arıza Tamiri' },
    { value: 'MAINTENANCE', label: 'Bakım' },
    { value: 'CLEANING', label: 'Temizlik' },
    { value: 'SECURITY', label: 'Güvenlik' },
    { value: 'COMPLAINT', label: 'Şikayet' },
    { value: 'SUGGESTION', label: 'Öneri' },
    { value: 'OTHER', label: 'Diğer' }
] as const;

// Request Status - Complete status list as requested
export const TICKET_STATUS = [
    { value: 'OPEN', label: 'Açık' },
    { value: 'IN_PROGRESS', label: 'İşlemde' },
    { value: 'WAITING', label: 'Beklemede' },
    { value: 'RESOLVED', label: 'Çözümlendi' },
    { value: 'CLOSED', label: 'Kapatıldı' },
    { value: 'CANCELLED', label: 'İptal Edildi' }
] as const;

// Priority levels
export const TICKET_PRIORITIES = [
    { value: 'LOW', label: 'Düşük' },
    { value: 'MEDIUM', label: 'Orta' },
    { value: 'HIGH', label: 'Yüksek' },
    { value: 'URGENT', label: 'Acil' }
] as const;

// Filter configuration factory - SOLID: Single Responsibility
export const createTicketFilterGroups = (includeAllStatuses: boolean = true) => {
    const statusOptions = includeAllStatuses
        ? [{ id: 'all', label: 'Tümü', value: '' }, ...TICKET_STATUS.map(status => ({
            id: status.value,
            label: status.label,
            value: status.value
        }))]
        : [{ id: 'all', label: 'Tümü', value: '' }, ...TICKET_STATUS.map(status => ({
            id: status.value,
            label: status.label,
            value: status.value
        }))];

    return [
        {
            id: 'type',
            label: 'Talep Tipi',
            type: 'select' as const,
            options: [
                { id: 'all', label: 'Tümü', value: '' },
                ...TICKET_TYPES.map(type => ({
                    id: type.value,
                    label: type.label,
                    value: type.value
                }))
            ],
        },
        {
            id: 'status',
            label: 'Durum',
            type: 'select' as const,
            options: statusOptions,
        },
        {
            id: 'priority',
            label: 'Öncelik',
            type: 'select' as const,
            options: [
                { id: 'all', label: 'Tümü', value: '' },
                ...TICKET_PRIORITIES.map(priority => ({
                    id: priority.value,
                    label: priority.label,
                    value: priority.value
                }))
            ],
        }
    ];
};

// Status configuration with icons and colors - SOLID: Open/Closed
export const STATUS_CONFIG = {
    OPEN: { label: 'Açık', color: 'info', icon: 'AlertCircle' },
    IN_PROGRESS: { label: 'İşlemde', color: 'warning', icon: 'RotateCcw' },
    WAITING: { label: 'Beklemede', color: 'warning', icon: 'PauseCircle' },
    RESOLVED: { label: 'Çözümlendi', color: 'success', icon: 'CheckCircle' },
    CLOSED: { label: 'Kapatıldı', color: 'success', icon: 'CheckCircle' },
    CANCELLED: { label: 'İptal Edildi', color: 'red', icon: 'XCircle' },
    // Legacy support
    COMPLETED: { label: 'Tamamlandı', color: 'success', icon: 'CheckCircle' },
    SCHEDULED: { label: 'Planlandı', color: 'primary', icon: 'Calendar' }
} as const;

// Type color mapping - SOLID: Interface Segregation
export const TYPE_COLOR_MAP: Record<string, "primary" | "secondary" | "gold" | "red"> = {
    FAULT_REPAIR: 'gold',
    COMPLAINT: 'red',
    REQUEST: 'primary',
    SUGGESTION: 'primary',
    QUESTION: 'secondary',
    MAINTENANCE: 'primary',
    SECURITY: 'red',
    CLEANING: 'primary',
    OTHER: 'secondary',
} as const;

// Filter interface for type safety - SOLID: Dependency Inversion
export interface TicketFilters {
    search?: string;
    type?: string;
    status?: string;
    priority?: string;
    page?: number;
    limit?: number;
    orderColumn?: string;
    orderBy?: 'ASC' | 'DESC';
}

// Filter state management helper - SOLID: Single Responsibility
export class FilterStateManager {
    private filters: TicketFilters = {};

    setFilter(key: keyof TicketFilters, value: any) {
        console.log(`🔄 FilterStateManager.setFilter: key=${key}, value=${value}, type=${typeof value}`);
        if (value === '' || value === null || value === undefined) {
            delete this.filters[key];
            console.log(`❌ Deleted filter key: ${key}`);
        } else {
            this.filters[key] = value;
            console.log(`✅ Set filter: ${key} = ${value}`);
        }
        console.log(`📊 Current filters:`, { ...this.filters });
    }

    getFilters(): TicketFilters {
        return { ...this.filters };
    }

    resetFilters() {
        this.filters = {};
    }

    hasActiveFilters(): boolean {
        return Object.keys(this.filters).length > 0;
    }
}
</file>

<file path="src/app/dashboard/requests/hooks/useRequestsActions.ts">
import { useCallback, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Ticket, ticketService } from '@/services/ticket.service';

export interface UseRequestsActionsProps {
    refreshData: () => void;
    setSelectedRequests: (requests: Ticket[]) => void;
    setRequests: React.Dispatch<React.SetStateAction<Ticket[]>>;
}

interface ConfirmationDialog {
    isOpen: boolean;
    ticket: Ticket | null;
}

export function useRequestsActions({
    refreshData,
    setSelectedRequests,
    setRequests
}: UseRequestsActionsProps) {
    const router = useRouter();

    // Confirmation modal state
    const [isDeleting, setIsDeleting] = useState(false);
    const [confirmationDialog, setConfirmationDialog] = useState<ConfirmationDialog>({
        isOpen: false,
        ticket: null
    });

    // Show delete confirmation modal
    const showDeleteConfirmation = useCallback((ticket: Ticket) => {
        setConfirmationDialog({
            isOpen: true,
            ticket
        });
    }, []);

    // Hide confirmation modal
    const hideConfirmation = useCallback(() => {
        setConfirmationDialog({
            isOpen: false,
            ticket: null
        });
    }, []);

    // Confirm delete with API call
    const confirmDelete = useCallback(async () => {
        const ticket = confirmationDialog.ticket;
        if (!ticket) return;

        try {
            setIsDeleting(true);
            
            // Call delete API
            await ticketService.deleteTicket(ticket.id);
            
            // Remove from state
            setRequests(prev => prev.filter(r => r.id !== ticket.id));
            
            // Remove from selected if it was selected
            setSelectedRequests([]);
            
            console.log('✓ Talep başarıyla silindi');
            
            // Refresh data to ensure consistency
            refreshData();
            
            // Hide modal
            hideConfirmation();
            
        } catch (error) {
            console.error('✗ Talep silinirken hata oluştu:', error);
            // Don't hide modal on error, let user try again
        } finally {
            setIsDeleting(false);
        }
    }, [confirmationDialog.ticket, setRequests, setSelectedRequests, refreshData, hideConfirmation]);

    const handleViewRequest = useCallback((request: Ticket) => {
        // Navigate to request detail page
        router.push(`/dashboard/requests/${request.id}`);
    }, [router]);

    const handleEditRequest = useCallback((request: Ticket) => {
        // Navigate to edit page
        router.push(`/dashboard/requests/${request.id}/edit`);
    }, [router]);

    const handleDeleteRequest = useCallback((request: Ticket) => {
        // Show confirmation modal instead of window.confirm
        showDeleteConfirmation(request);
    }, [showDeleteConfirmation]);

    const handleUpdateRequestStatus = useCallback(async (request: Ticket, action: string) => {
        try {
            let updated: Ticket | null = null;
            
            switch (action) {
                case 'start-progress':
                    updated = await ticketService.startProgress(request.id);
                    break;
                case 'resolve':
                    updated = await ticketService.resolve(request.id);
                    break;
                case 'close':
                    updated = await ticketService.close(request.id);
                    break;
                case 'cancel':
                    updated = await ticketService.cancel(request.id);
                    break;
                default:
                    throw new Error(`Unknown action: ${action}`);
            }
            
            if (updated) {
                // Update in state
                setRequests(prev => prev.map(r => 
                    r.id === request.id ? updated! : r
                ));
            }
            
            console.log(`✓ Talep durumu güncellendi: ${action}`);
            
            // Refresh data to ensure consistency
            refreshData();
        } catch (error) {
            console.error('✗ Talep durumu güncellenirken hata oluştu:', error);
            alert('Talep durumu güncellenirken bir hata oluştu. Lütfen tekrar deneyin.');
        }
    }, [setRequests, refreshData]);

    const handleSendNotification = useCallback(async (request: Ticket, message: string) => {
        try {
            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            console.log(`✓ Bildirim gönderildi: ${message}`);
        } catch (error) {
            console.error('✗ Bildirim gönderilirken hata oluştu:', error);
        }
    }, []);

    return {
        handleViewRequest,
        handleEditRequest,
        handleDeleteRequest,
        handleUpdateRequestStatus,
        handleSendNotification,
        // Modal state and handlers
        isDeleting,
        confirmationDialog,
        showDeleteConfirmation,
        hideConfirmation,
        confirmDelete
    };
}
</file>

<file path="src/app/dashboard/requests/hooks/useRequestsList.ts">
import { useState, useEffect, useCallback, useMemo } from 'react';
import { 
  ServiceRequestsList, 
  RequestsListFilters, 
  RequestsListResponse,
  UseRequestsListResult,
  ServiceRequest,
  RequestSummary,
  QuickStat,
  PaginationInfo,
  RequestPermissions,
  FilterConfig
} from '@/services/types/request-list.types';
import { ticketService, Ticket, TicketFilters, TicketPaginationResponse } from '@/services/ticket.service';
import { ApiResponse } from '@/services';
import requestListData from '@/../../docs/page-structure/request-list-view.json';

// Transform current Ticket type to ServiceRequest type
const transformTicketToServiceRequest = (ticket: Ticket): ServiceRequest => {
  return {
    id: ticket.id,
    requestId: ticket.id,
    title: ticket.title || 'Untitled Request',
    description: ticket.description || '',
    apartment: {
      number: ticket.property?.propertyNumber || 'N/A',
      block: ticket.property?.building || 'N/A',
      floor: ticket.property?.floor || 0,
      owner: ticket.property?.owner || 'N/A',
      tenant: ticket.property?.tenant || undefined,
      phone: ticket.creator?.phone || ''
    },
    category: {
      id: ticket.type || 'general',
      label: ticket.type || 'General',
      icon: '🔧',
      color: '#6b7280'
    },
    priority: {
      id: ticket.priority || 'medium',
      label: ticket.priority?.charAt(0).toUpperCase() + ticket.priority?.slice(1) || 'Medium',
      level: ticket.priority === 'high' ? 3 : ticket.priority === 'low' ? 1 : 2,
      color: ticket.priority === 'high' ? '#ea580c' : ticket.priority === 'low' ? '#16a34a' : '#d97706',
      icon: ticket.priority === 'high' ? '🔴' : ticket.priority === 'low' ? '🟢' : '🟡'
    },
    status: {
      id: ticket.status || 'open',
      label: getStatusLabel(ticket.status || 'open'),
      color: getStatusColor(ticket.status || 'open'),
      bgColor: getStatusBgColor(ticket.status || 'open')
    },
    assignee: ticket.assignee ? {
      id: ticket.assignee.id,
      name: `${ticket.assignee.firstName || ''} ${ticket.assignee.lastName || ''}`.trim(),
      company: ticket.assignee.company || 'N/A',
      phone: ticket.assignee.phone || '',
      avatar: getInitials(`${ticket.assignee.firstName || ''} ${ticket.assignee.lastName || ''}`),
      rating: 4.5
    } : undefined,
    createdDate: ticket.createdAt || new Date().toISOString(),
    updatedDate: ticket.updatedAt || ticket.createdAt || new Date().toISOString(),
    dueDate: ticket.dueDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
    estimatedCompletion: undefined,
    completedDate: ticket.status === 'RESOLVED' || ticket.status === 'CLOSED' ? ticket.updatedAt : undefined,
    responseTime: undefined,
    completionTime: undefined,
    imagesCount: 0,
    commentsCount: 0,
    cost: {
      estimated: 0,
      actual: undefined,
      currency: 'IQD'
    },
    customerRating: undefined,
    tags: [ticket.type || 'general'],
    isOverdue: ticket.dueDate ? new Date(ticket.dueDate) < new Date() : false,
    isUrgent: ticket.priority === 'high',
    hasImages: false,
    hasComments: false
  };
};

// Helper functions
const getStatusLabel = (status: string): string => {
  const statusLabels: { [key: string]: string } = {
    'OPEN': 'Açık',
    'IN_PROGRESS': 'İşlemde',
    'WAITING': 'Bekliyor',
    'RESOLVED': 'Çözüldü',
    'CLOSED': 'Kapalı'
  };
  return statusLabels[status] || status;
};

const getStatusColor = (status: string): string => {
  const statusColors: { [key: string]: string } = {
    'OPEN': '#3b82f6',
    'IN_PROGRESS': '#8b5cf6', 
    'WAITING': '#f59e0b',
    'RESOLVED': '#10b981',
    'CLOSED': '#6b7280'
  };
  return statusColors[status] || '#6b7280';
};

const getStatusBgColor = (status: string): string => {
  const statusBgColors: { [key: string]: string } = {
    'OPEN': '#dbeafe',
    'IN_PROGRESS': '#f3e8ff',
    'WAITING': '#fef3c7', 
    'RESOLVED': '#d1fae5',
    'CLOSED': '#f3f4f6'
  };
  return statusBgColors[status] || '#f3f4f6';
};

const getInitials = (name: string): string => {
  const parts = name.split(' ').filter(part => part.length > 0);
  return parts.map(part => part.charAt(0)).join('').toUpperCase().slice(0, 2) || 'NA';
};

// Generate summary from requests data
const generateSummary = (requests: ServiceRequest[]): RequestSummary => {
  const activeRequests = requests.filter(r => r.status.id !== 'CLOSED' && r.status.id !== 'RESOLVED').length;
  const completedToday = requests.filter(r => {
    if (!r.completedDate) return false;
    const today = new Date().toDateString();
    return new Date(r.completedDate).toDateString() === today;
  }).length;
  const overdueRequests = requests.filter(r => r.isOverdue).length;

  return {
    totalRequests: requests.length,
    activeRequests,
    completedToday,
    overdueRequests,
    averageResponseTime: '4.2 saat',
    averageCompletionTime: '2.3 gün',
    satisfactionRate: 4.6
  };
};

// Generate quick stats from requests data
const generateQuickStats = (requests: ServiceRequest[]): QuickStat[] => {
  const newRequests = requests.filter(r => r.status.id === 'OPEN').length;
  const inProgress = requests.filter(r => r.status.id === 'IN_PROGRESS').length;
  const completed = requests.filter(r => r.status.id === 'RESOLVED' || r.status.id === 'CLOSED').length;
  const overdue = requests.filter(r => r.isOverdue).length;

  return [
    {
      label: 'Yeni Talepler',
      value: newRequests,
      change: '+15%',
      trend: 'up',
      color: '#3b82f6',
      icon: '📝'
    },
    {
      label: 'İşlemde',
      value: inProgress,
      change: '+8%',
      trend: 'up',
      color: '#8b5cf6',
      icon: '⚙️'
    },
    {
      label: 'Tamamlanan',
      value: completed,
      change: '+23%',
      trend: 'up',
      color: '#10b981',
      icon: '✅'
    },
    {
      label: 'Gecikmiş',
      value: overdue,
      change: '-12%',
      trend: 'down',
      color: '#ef4444',
      icon: '⏰'
    }
  ];
};

export function useRequestsList(): UseRequestsListResult {
  // State
  const [requests, setRequests] = useState<ServiceRequest[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<RequestsListFilters>({});
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 20
  });

  // Memoize filters and pagination to prevent unnecessary re-renders
  const memoizedFilters = useMemo(() => filters, [
    filters.search,
    filters.status,
    filters.priority,
    filters.category,
    filters.assignee
  ]);

  const memoizedPagination = useMemo(() => pagination, [
    pagination.page,
    pagination.limit
  ]);

  // Static data from JSON (in real app, this would come from API)
  const staticData = useMemo(() => {
    const jsonData = requestListData.serviceRequestsList;
    return {
      pageInfo: jsonData.pageInfo,
      filters: jsonData.filters as any,
      sortOptions: jsonData.sortOptions,
      bulkActions: jsonData.bulkActions,
      tableColumns: jsonData.tableColumns,
      exportOptions: jsonData.exportOptions,
      permissions: jsonData.permissions as RequestPermissions
    };
  }, []);


  // Fetch requests from API - with proper params to avoid re-renders
  const fetchRequestsWithFilters = useCallback(async (
    currentFilters: RequestsListFilters,
    currentPagination: { page: number; limit: number }
  ) => {
    setLoading(true);
    setError(null);

    try {
      const apiFilters: TicketFilters = {
        search: currentFilters.search,
        status: currentFilters.status,
        priority: currentFilters.priority,
        type: currentFilters.category,
        page: currentPagination.page,
        limit: currentPagination.limit,
        orderColumn: 'createdAt',
        orderBy: 'DESC'
      };
      
      const response: ApiResponse<TicketPaginationResponse> = await ticketService.getTickets(apiFilters);
      const tickets = Array.isArray(response.data) ? response.data : [];
      
      // Transform tickets to service requests
      const transformedRequests = tickets.map(transformTicketToServiceRequest);
      
      setRequests(transformedRequests);
    } catch (err) {
      console.error('Failed to fetch requests:', err);
      setError('Talepler yüklenirken hata oluştu');
    } finally {
      setLoading(false);
    }
  }, []);

  // Update filters
  const updateFilters = useCallback((newFilters: Partial<RequestsListFilters>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
    // Reset to first page when filters change
    setPagination(prev => ({ ...prev, page: 1 }));
  }, []);

  // Reset filters
  const resetFilters = useCallback(() => {
    setFilters({});
    setPagination({ page: 1, limit: 20 });
  }, []);

  // Update sort
  const updateSort = useCallback((sort: string) => {
    // This would be implemented when sort is added to the API
    console.log('Sort updated:', sort);
  }, []);

  // Update pagination
  const updatePagination = useCallback((page: number, limit?: number) => {
    setPagination(prev => ({
      page,
      limit: limit || prev.limit
    }));
  }, []);

  // Refetch data
  const refetch = useCallback(() => {
    return fetchRequestsWithFilters(memoizedFilters, memoizedPagination);
  }, [fetchRequestsWithFilters, memoizedFilters, memoizedPagination]);

  // Fetch data when filters or pagination changes
  useEffect(() => {
    fetchRequestsWithFilters(memoizedFilters, memoizedPagination);
  }, [fetchRequestsWithFilters, memoizedFilters, memoizedPagination]);

  // Memoized data
  const data = useMemo<ServiceRequestsList>(() => {
    const summary = generateSummary(requests);
    const quickStats = generateQuickStats(requests);
    
    const paginationInfo: PaginationInfo = {
      currentPage: memoizedPagination.page,
      totalPages: Math.ceil(requests.length / memoizedPagination.limit),
      itemsPerPage: memoizedPagination.limit,
      totalItems: requests.length,
      showingFrom: (memoizedPagination.page - 1) * memoizedPagination.limit + 1,
      showingTo: Math.min(memoizedPagination.page * memoizedPagination.limit, requests.length),
      pageSizeOptions: [10, 20, 50, 100]
    };

    return {
      pageInfo: staticData.pageInfo,
      filters: staticData.filters,
      summary,
      quickStats,
      sortOptions: staticData.sortOptions,
      pagination: paginationInfo,
      bulkActions: staticData.bulkActions,
      tableColumns: staticData.tableColumns as any,
      requests,
      exportOptions: staticData.exportOptions,
      permissions: staticData.permissions
    };
  }, [requests, memoizedPagination, staticData]);

  return {
    data,
    loading,
    error,
    refetch,
    updateFilters,
    resetFilters,
    updateSort,
    updatePagination
  };
}
</file>

<file path="src/app/dashboard/residents/actions/bulk-actions.ts">
import { Resident } from '@/app/components/ui/ResidentRow';
import { BulkAction } from '../types';
import { BULK_ACTION_IDS } from '../constants';
import { 
    Mail, 
    MessageSquare, 
    FileText, 
    Tag, 
    UserCheck, 
    UserX, 
    Trash2 
} from 'lucide-react';
import { residentService } from '@/services/resident.service';
import { BulkActionDto } from '@/services/types/resident.types';

/**
 * Toast notification functions interface
 */
interface ToastFunctions {
    success: (title: string, message: string) => void;
    info: (title: string, message: string) => void;
    error: (title: string, message: string) => void;
}

interface BulkMessageState {
    isOpen: boolean;
    type: 'email' | 'sms' | null;
    recipients: Resident[];
}

interface DataUpdateFunctions {
    setResidents: (residents: Resident[]) => void;
    refreshData: () => void;
}

interface BulkDeleteState {
    isOpen: boolean;
    residents: Resident[];
    loading: boolean;
}

/**
 * Bulk action handlers class
 */
export class BulkActionHandlers {
    private toast: ToastFunctions;
    private messageState: BulkMessageState;
    private setMessageState: (state: BulkMessageState | ((prev: BulkMessageState) => BulkMessageState)) => void;
    private dataUpdateFunctions: DataUpdateFunctions;
    private bulkDeleteState: BulkDeleteState;
    private setBulkDeleteState: (state: BulkDeleteState | ((prev: BulkDeleteState) => BulkDeleteState)) => void;

    constructor(
        toast: ToastFunctions,
        messageState: BulkMessageState,
        setMessageState: (state: BulkMessageState | ((prev: BulkMessageState) => BulkMessageState)) => void,
        dataUpdateFunctions: DataUpdateFunctions,
        bulkDeleteState: BulkDeleteState,
        setBulkDeleteState: (state: BulkDeleteState | ((prev: BulkDeleteState) => BulkDeleteState)) => void
    ) {
        this.toast = toast;
        this.messageState = messageState;
        this.setMessageState = setMessageState;
        this.dataUpdateFunctions = dataUpdateFunctions;
        this.bulkDeleteState = bulkDeleteState;
        this.setBulkDeleteState = setBulkDeleteState;
    }

    /**
     * Handle bulk email action
     */
    handleBulkMail = (residents: Resident[]): void => {
        const validRecipients = residents.filter(r => r.contact.email && r.contact.email !== 'Belirtilmemiş');
        
        if (validRecipients.length === 0) {
            this.toast.error(
                'Hata',
                'Seçili sakinler arasında geçerli e-posta adresi bulunamadı.'
            );
            return;
        }

        this.setMessageState({
            isOpen: true,
            type: 'email',
            recipients: validRecipients
        });
    };

    /**
     * Handle bulk SMS action
     */
    handleBulkSMS = (residents: Resident[]): void => {
        const validRecipients = residents.filter(r => r.contact.phone && r.contact.phone !== 'Belirtilmemiş');
        
        if (validRecipients.length === 0) {
            this.toast.error(
                'Hata',
                'Seçili sakinler arasında geçerli telefon numarası bulunamadı.'
            );
            return;
        }

        this.setMessageState({
            isOpen: true,
            type: 'sms',
            recipients: validRecipients
        });
    };

    /**
     * Handle message sending
     */
    handleSendMessage = async (message: string): Promise<void> => {
        const { type, recipients } = this.messageState;
        const isEmail = type === 'email';
        
        try {
            // TODO: Implement actual sending logic
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const recipientList = recipients
                .map(r => isEmail ? r.contact.email : r.contact.phone)
                .join(', ');
            
            this.toast.success(
                isEmail ? 'E-posta Gönderildi' : 'SMS Gönderildi',
                `${recipients.length} alıcıya başarıyla gönderildi: ${recipientList}`
            );
        } catch (error) {
            this.toast.error(
                'Gönderim Hatası',
                'Mesaj gönderimi sırasında bir hata oluştu.'
            );
        }
    };

    /**
     * Handle bulk PDF generation
     */
    handleBulkPDF = (residents: Resident[]): void => {
        this.toast.info(
            'PDF Oluşturuluyor', 
            `${residents.length} sakin için PDF raporu hazırlanıyor`
        );
        
        // Simulate PDF generation
        setTimeout(() => {
            this.toast.success(
                'PDF Hazır', 
                'Sakin raporu başarıyla oluşturuldu ve indiriliyor'
            );
        }, 2000);
    };

    /**
     * Handle bulk status change with API call
     */
    handleBulkStatusChange = async (residents: Resident[], status: 'activate' | 'deactivate'): Promise<void> => {
        try {
            // Filter residents that actually need status change
            const residentsToUpdate = residents.filter(resident => {
                const currentStatus = resident.status?.type || resident.status;
                if (status === 'activate') {
                    return currentStatus !== 'active';
                } else if (status === 'deactivate') {
                    return currentStatus !== 'inactive';
                }
                return false;
            });

            if (residentsToUpdate.length === 0) {
                const statusLabel = status === 'activate' ? 'aktif' : 'pasif';
                this.toast.info(
                    'Durum Güncelleme',
                    `Seçili sakinler zaten ${statusLabel} durumunda.`
                );
                return;
            }

            this.toast.info(
                'Durum Güncelleniyor',
                `${residentsToUpdate.length} sakin için durum güncelleniyor...`
            );

            if (status === 'activate') {
                // Use bulk action API for activate
                const bulkActionData: BulkActionDto = {
                    action: 'activate',
                    userIds: residentsToUpdate.map(r => String(r.id)),
                    reason: 'Toplu durum güncelleme: Aktif yapıldı',
                };

                const response = await residentService.bulkAction(bulkActionData);

                if (response.success) {
                    console.log("BİLMİYOM  response", response);
                    this.toast.success(
                        'Durum Güncellendi',
                        `Seçili sakinler başarıyla aktif durumuna geçirildi.`
                    );

                    
                    // Refresh data to show updated statuses
                    this.dataUpdateFunctions.refreshData();
                } else {
                    throw new Error(response.data?.message || 'Bilinmeyen hata');
                }
            } else {
                // Use individual updates for deactivate since bulk API doesn't support INACTIVE
                let successCount = 0;
                let errorCount = 0;
                const errors: string[] = [];

                for (const resident of residentsToUpdate) {
                    try {
                        await residentService.updateResident(String(resident.id), {
                            status: 'INACTIVE'
                        });
                        successCount++;
                    } catch (error: any) {
                        errorCount++;
                        errors.push(`${resident.firstName} ${resident.lastName}: ${error?.message || 'Hata'}`);
                    }
                }

                if (errorCount === 0) {
                    this.toast.success(
                        'Durum Güncellendi',
                        `${successCount} sakin başarıyla pasif durumuna geçirildi.`
                    );
                } else {
                    this.toast.success(
                        'Durum Kısmen Güncellendi',
                        `${successCount} sakin pasif yapıldı, ${errorCount} sakin için hata oluştu.`
                    );
                }

                // Refresh data to show updated statuses  
                this.dataUpdateFunctions.refreshData();
            }

        } catch (error: any) {
            console.error('Bulk status update error:', error);
            this.toast.error(
                'Durum Güncelleme Hatası',
                error?.message || 'Sakin durumları güncellenirken bir hata oluştu.'
            );
        }
    };

    /**
     * Handle bulk delete - Opens confirmation modal
     */
    handleBulkDelete = (residents: Resident[]): void => {
        this.setBulkDeleteState({
            isOpen: true,
            residents: residents,
            loading: false
        });
    };

    /**
     * Execute bulk delete after confirmation
     */
    executeBulkDelete = async (): Promise<void> => {
        const { residents } = this.bulkDeleteState;
        
        this.setBulkDeleteState(prev => ({ ...prev, loading: true }));

        try {
            this.toast.info(
                'Sakinler Siliniyor',
                `${residents.length} sakin siliniyor...`
            );

            let successCount = 0;
            let errorCount = 0;
            const errors: string[] = [];

            // Use individual delete API calls since bulk delete is not available
            for (const resident of residents) {
                try {
                    await residentService.deleteResident(String(resident.id));
                    successCount++;
                } catch (error: any) {
                    errorCount++;
                    errors.push(`${resident.firstName} ${resident.lastName}: ${error?.message || 'Hata'}`);
                }
            }

            if (errorCount === 0) {
                this.toast.success(
                    'Sakinler Silindi',
                    `${successCount} sakin başarıyla silindi.`
                );
            } else {
                this.toast.success(
                    'Sakinler Kısmen Silindi',
                    `${successCount} sakin silindi, ${errorCount} sakin için hata oluştu.`
                );
            }

            // Refresh data to remove deleted residents
            this.dataUpdateFunctions.refreshData();

            // Close modal
            this.setBulkDeleteState({
                isOpen: false,
                residents: [],
                loading: false
            });

        } catch (error: any) {
            console.error('Bulk delete error:', error);
            this.toast.error(
                'Silme Hatası',
                error?.message || 'Sakinler silinirken bir hata oluştu.'
            );
            
            this.setBulkDeleteState(prev => ({ ...prev, loading: false }));
        }
    };

    /**
     * Get bulk actions configuration with conditional visibility
     */
    getBulkActions = (selectedResidents: Resident[]): BulkAction[] => {
        // Analyze selected residents to determine which actions should be available
        const activeResidents = selectedResidents.filter(r => {
            const status = r.status?.type || r.status;
            return status === 'active';
        });
        
        const inactiveResidents = selectedResidents.filter(r => {
            const status = r.status?.type || r.status;
            return status === 'inactive' || status === 'suspended' || status === 'pending';
        });

        const actions: BulkAction[] = [
            {
                id: BULK_ACTION_IDS.MAIL,
                label: 'Toplu Mail',
                icon: Mail,
                onClick: this.handleBulkMail
            },
            {
                id: BULK_ACTION_IDS.SMS,
                label: 'SMS Gönder',
                icon: MessageSquare,
                onClick: this.handleBulkSMS
            },
            {
                id: BULK_ACTION_IDS.PDF,
                label: 'PDF Oluştur',
                icon: FileText,
                onClick: this.handleBulkPDF
            }
        ];

        // Only show "Aktif Yap" if there are inactive residents
        if (inactiveResidents.length > 0) {
            actions.push({
                id: BULK_ACTION_IDS.ACTIVATE,
                label: `Aktif Yap (${inactiveResidents.length})`,
                icon: UserCheck,
                onClick: (residents: Resident[]) => this.handleBulkStatusChange(residents, 'activate')
            });
        }

        // Only show "Pasif Yap" if there are active residents
        if (activeResidents.length > 0) {
            actions.push({
                id: BULK_ACTION_IDS.DEACTIVATE,
                label: `Pasif Yap (${activeResidents.length})`,
                icon: UserX,
                onClick: (residents: Resident[]) => this.handleBulkStatusChange(residents, 'deactivate'),
                variant: 'warning'
            });
        }

        // Always show delete option when residents are selected
        if (selectedResidents.length > 0) {
            actions.push({
                id: BULK_ACTION_IDS.DELETE,
                label: `Sil (${selectedResidents.length})`,
                icon: Trash2,
                onClick: this.handleBulkDelete,
                variant: 'danger'
            });
        }

        return actions;
    };
}

/**
 * Create bulk action handlers instance
 */
export const createBulkActionHandlers = (
    toast: ToastFunctions,
    messageState: BulkMessageState,
    setMessageState: (state: BulkMessageState | ((prev: BulkMessageState) => BulkMessageState)) => void,
    dataUpdateFunctions: DataUpdateFunctions,
    bulkDeleteState: BulkDeleteState,
    setBulkDeleteState: (state: BulkDeleteState | ((prev: BulkDeleteState) => BulkDeleteState)) => void
): BulkActionHandlers => {
    return new BulkActionHandlers(
        toast, 
        messageState, 
        setMessageState, 
        dataUpdateFunctions,
        bulkDeleteState,
        setBulkDeleteState
    );
};
</file>

<file path="src/app/dashboard/residents/add/page.tsx">
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Checkbox from '@/app/components/ui/Checkbox';
import RadioButton from '@/app/components/ui/RadioButton';
import {
    ArrowLeft,
    Check,
    AlertCircle,
    Info,
    Phone,
    MessageSquare,
    Building,
    User,
    Home,
    Calendar,
    CreditCard,
    Smartphone,
    QrCode
} from 'lucide-react';
import { useResidentData } from '@/hooks/useResidentData';
import { CreateResidentRequest } from '@/services/types/resident.types';

interface FormData {
    // Identity
    identityType: 'nationalId' | 'passport' | 'citizenship' | 'residence';
    identityNumber: string;
    firstName: string;
    lastName: string;

    // Contact
    mobilePhone: string;
    hasWhatsApp: boolean;
    email: string;

    // Housing
    residentType: 'owner' | 'tenant' | 'family';
    block: string;
    apartmentNumber: string;

    // Quick Options
    startDuesToday: boolean;
    useStandardDues: boolean;
    sendMobileInvite: boolean;
    createQrCode: boolean;
}

interface Apartment {
    id: string;
    block: string;
    number: string;
    type: string;
    area: string;
    status: 'empty' | 'occupied';
    currentResident?: string;
}

// Mock apartment data
const mockApartments: Apartment[] = [
    { id: '1', block: 'A', number: '12', type: '3+1', area: '145m²', status: 'empty' },
    { id: '2', block: 'A', number: '13', type: '2+1', area: '120m²', status: 'occupied', currentResident: 'Ahmet Yılmaz' },
    { id: '3', block: 'B', number: '05', type: '3+1', area: '150m²', status: 'empty' },
    { id: '4', block: 'B', number: '06', type: '4+1', area: '180m²', status: 'empty' },
];

export default function AddResidentPage() {
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [showSuccess, setShowSuccess] = useState(false);
    const [formData, setFormData] = useState<FormData>({
        identityType: 'nationalId',
        identityNumber: '',
        firstName: '',
        lastName: '',
        mobilePhone: '',
        hasWhatsApp: true,
        email: '',
        residentType: 'owner',
        block: '',
        apartmentNumber: '',
        startDuesToday: true,
        useStandardDues: true,
        sendMobileInvite: true,
        createQrCode: true,
    });

    const [selectedApartment, setSelectedApartment] = useState<Apartment | null>(null);
    const [errors, setErrors] = useState<{ [key: string]: string }>({});

    // Yeni eklenen: useResidentData hook'u
    const {
        createResident,
        saving,
        saveError,
        clearSaveError
    } = useResidentData();

    // Breadcrumb for add resident page
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Sakinler', href: '/dashboard/residents' },
        { label: 'Yeni Sakin Ekle', active: true }
    ];

    // Get available blocks
    const availableBlocks = Array.from(new Set(mockApartments.map(apt => apt.block)));

    // Get apartments for selected block
    const getApartmentsForBlock = (block: string) => {
        return mockApartments.filter(apt => apt.block === block);
    };

    // Handle input changes
    const handleInputChange = (field: keyof FormData, value: any) => {
        setFormData(prev => ({ ...prev, [field]: value }));

        // Clear error when user starts typing
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }

        // Handle apartment selection
        if (field === 'apartmentNumber' && value) {
            const apartment = mockApartments.find(apt =>
                apt.block === formData.block && apt.number === value
            );
            setSelectedApartment(apartment || null);
        }
    };

    // Validate Iraqi National ID (basic format: 12 digits)
    const validateIraqiId = (id: string, type: string): boolean => {
        switch (type) {
            case 'nationalId':
                return /^\d{12}$/.test(id.replace(/\s/g, ''));
            case 'citizenship':
                return /^\d{10}$/.test(id.replace(/\s/g, ''));
            case 'passport':
                return /^[A-Z]\d{7,9}$/.test(id.replace(/\s/g, ''));
            case 'residence':
                return /^\d{8,10}$/.test(id.replace(/\s/g, ''));
            default:
                return false;
        }
    };

    // Validate form
    const validateForm = (): boolean => {
        const newErrors: { [key: string]: string } = {};

        // Identity Number validation
        if (!formData.identityNumber) {
            newErrors.identityNumber = 'Kimlik numarası zorunludur';
        } else if (!validateIraqiId(formData.identityNumber, formData.identityType)) {
            switch (formData.identityType) {
                case 'nationalId':
                    newErrors.identityNumber = 'Ulusal kimlik numarası 12 haneli olmalıdır';
                    break;
                case 'citizenship':
                    newErrors.identityNumber = 'Vatandaşlık belgesi 10 haneli olmalıdır';
                    break;
                case 'passport':
                    newErrors.identityNumber = 'Pasaport formatı geçersiz (örnek: A1234567)';
                    break;
                case 'residence':
                    newErrors.identityNumber = 'İkamet kartı 8-10 haneli olmalıdır';
                    break;
            }
        }

        // Name validation
        if (!formData.firstName.trim()) {
            newErrors.firstName = 'Ad zorunludur';
        }
        if (!formData.lastName.trim()) {
            newErrors.lastName = 'Soyad zorunludur';
        }

        // Phone validation (Iraqi format)
        if (!formData.mobilePhone) {
            newErrors.mobilePhone = 'Cep telefonu zorunludur';
        } else if (!/^7\d{9}$/.test(formData.mobilePhone.replace(/\s/g, ''))) {
            newErrors.mobilePhone = 'Geçerli bir Irak telefon numarası giriniz (7 ile başlamalı)';
        }

        // Housing validation
        if (!formData.block) {
            newErrors.block = 'Blok seçimi zorunludur';
        }
        if (!formData.apartmentNumber) {
            newErrors.apartmentNumber = 'Daire seçimi zorunludur';
        }

        // Check if apartment is occupied
        if (selectedApartment?.status === 'occupied') {
            newErrors.apartmentNumber = 'Seçilen daire dolu görünüyor';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Handle form submission
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (validateForm()) {
            // Yeni API'ye uygun CreateResidentRequest oluştur
            const dto: CreateResidentRequest = {
                personalInfo: {
                    firstName: formData.firstName,
                    lastName: formData.lastName,
                    phone: formData.mobilePhone,
                    email: formData.email,
                    password: '', // Eğer şifre isteniyorsa ekle
                },
                propertyInfo: {
                    name: '', // Apartman adı gerekiyorsa ekle
                    block: formData.block,
                    propertyNumber: formData.apartmentNumber,
                    propertyType: 'RESIDENCE',
                    ownershipType: formData.residentType === 'owner' ? 'owner' : 'tenant',
                },
                documents: [], // Belgeler ekleniyorsa doldur
            };
            try {
                await createResident(dto);
                setShowSuccess(true);
            } catch (err) {
                // Hata zaten saveError ile gösterilecek
            }
        }
    };

    // Success modal/message
    if (showSuccess) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Başarılı!" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="text-center">
                                <div className="p-8">
                                    <div className="w-16 h-16 bg-semantic-success-500/10 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <Check className="h-8 w-8 text-semantic-success-500" />
                                    </div>
                                    <h2 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark mb-2">
                                        Sakin başarıyla kaydedildi!
                                    </h2>
                                    <p className="text-text-light-secondary dark:text-text-secondary mb-2">
                                        {formData.firstName} {formData.lastName} - {selectedApartment?.block} Blok, Daire {selectedApartment?.number}
                                    </p>
                                    <p className="text-sm text-text-light-muted dark:text-text-muted mb-6">
                                        Kayıt No: #2024-{Math.floor(Math.random() * 9999).toString().padStart(4, '0')}
                                    </p>

                                    <div className="bg-background-light-soft dark:bg-background-soft rounded-lg p-4 mb-6">
                                        <p className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                                            Şimdi ne yapmak istersiniz?
                                        </p>
                                    </div>

                                    <div className="flex flex-col sm:flex-row gap-3 justify-center">
                                        <Link href="/dashboard/residents/1">
                                            <Button variant="primary">
                                                Detayları Düzenle
                                            </Button>
                                        </Link>
                                        <Button variant="secondary" onClick={() => setShowSuccess(false)}>
                                            Yeni Sakin Ekle
                                        </Button>
                                        <Link href="/dashboard/residents">
                                            <Button variant="secondary">
                                                Sakin Listesine Dön
                                            </Button>
                                        </Link>
                                    </div>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title="Yeni Sakin - Hızlı Kayıt"
                        breadcrumbItems={breadcrumbItems}
                    />

                    {/* Main Content */}
                    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header Actions */}
                        <div className="flex justify-between items-center mb-6">
                            <Link href="/dashboard/residents">
                                <Button variant="ghost" icon={ArrowLeft}>
                                    Geri Dön
                                </Button>
                            </Link>

                            <div className="flex gap-3">
                                <Link href="/dashboard/residents">
                                    <Button variant="secondary">
                                        İptal
                                    </Button>
                                </Link>
                                <Button variant="primary" onClick={handleSubmit}>
                                    Kaydet
                                </Button>
                            </div>
                        </div>

                        {/* Info Banner */}
                        <div className="bg-primary-gold/10 dark:bg-primary-gold/20 border border-primary-gold/20 rounded-lg p-4 mb-6">
                            <div className="flex items-start gap-3">
                                <Info className="h-5 w-5 text-primary-gold mt-0.5" />
                                <div>
                                    <p className="text-sm font-medium text-text-on-light dark:text-text-on-dark">
                                        Temel bilgileri girerek sakini kaydedin, detayları sonra ekleyin
                                    </p>
                                    <p className="text-xs text-text-light-muted dark:text-text-muted mt-1">
                                        Sakin kaydedildikten sonra detay sayfasından tüm bilgileri ekleyebilir ve düzenleyebilirsiniz.
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Main Form */}
                        <form onSubmit={handleSubmit}>
                            <Card>
                                <div className="p-6">
                                    <div className="text-center mb-8">
                                        <h2 className="text-xl font-bold text-text-on-light dark:text-text-on-dark">
                                            ZORUNLU BİLGİLER
                                        </h2>
                                        <div className="w-24 h-1 bg-primary-gold rounded mx-auto mt-2"></div>
                                    </div>

                                    <div className="space-y-8">
                                        {/* Identity Information */}
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <User className="h-5 w-5 text-primary-gold" />
                                                Kimlik Bilgileri
                                            </h3>
                                            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">

                                                {/* Identity Type */}
                                                <div className="mb-4">
                                                    <RadioButton
                                                        label="Kimlik Tipi"
                                                        name="identityType"
                                                        value={formData.identityType}
                                                        onChange={(e) => handleInputChange('identityType', e.target.value)}
                                                        direction="horizontal"
                                                        options={[
                                                            { value: 'nationalId', label: 'Ulusal Kimlik' },
                                                            { value: 'citizenship', label: 'Vatandaşlık Belgesi' },
                                                            { value: 'passport', label: 'Pasaport' },
                                                            { value: 'residence', label: 'İkamet Kartı' }
                                                        ]}
                                                    />
                                                </div>

                                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                                    {/* Identity Number */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Kimlik No *
                                                        </label>
                                                        <div className="flex gap-2">
                                                            <input
                                                                type="text"
                                                                className={`flex-1 px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.identityNumber ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'
                                                                    }`}
                                                                placeholder={
                                                                    formData.identityType === 'nationalId' ? '123456789012' :
                                                                        formData.identityType === 'citizenship' ? '1234567890' :
                                                                            formData.identityType === 'passport' ? 'A1234567' : '12345678'
                                                                }
                                                                value={formData.identityNumber}
                                                                onChange={(e) => handleInputChange('identityNumber', e.target.value)}
                                                            />
                                                           
                                                        </div>
                                                        {errors.identityNumber && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.identityNumber}</p>
                                                        )}
                                                    </div>

                                                    {/* First Name */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Ad *
                                                        </label>
                                                        <input
                                                            type="text"
                                                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.firstName ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'
                                                                }`}
                                                            placeholder="Ahmet"
                                                            value={formData.firstName}
                                                            onChange={(e) => handleInputChange('firstName', e.target.value)}
                                                        />
                                                        {errors.firstName && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.firstName}</p>
                                                        )}
                                                    </div>

                                                    {/* Last Name */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Soyad *
                                                        </label>
                                                        <input
                                                            type="text"
                                                            className={`w-full px-3 py-2 border rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.lastName ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'
                                                                }`}
                                                            placeholder="Yılmaz"
                                                            value={formData.lastName}
                                                            onChange={(e) => handleInputChange('lastName', e.target.value)}
                                                        />
                                                        {errors.lastName && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.lastName}</p>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        {/* Contact Information */}
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <Phone className="h-5 w-5 text-primary-gold" />
                                                İletişim
                                            </h3>
                                            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    {/* Mobile Phone */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            Cep Telefonu *
                                                        </label>
                                                        <div className="flex">
                                                            <span className="inline-flex items-center px-3 text-sm text-gray-500 bg-gray-200 dark:bg-gray-700 border border-r-0 border-gray-200 dark:border-gray-700 rounded-l-lg">
                                                                +964
                                                            </span>
                                                            <input
                                                                type="tel"
                                                                className={`flex-1 px-3 py-2 border rounded-r-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold ${errors.mobilePhone ? 'border-red-300 dark:border-red-600' : 'border-gray-200 dark:border-gray-700'
                                                                    }`}
                                                                placeholder="750 123 4567"
                                                                value={formData.mobilePhone}
                                                                onChange={(e) => handleInputChange('mobilePhone', e.target.value)}
                                                            />
                                                        </div>
                                                        {errors.mobilePhone && (
                                                            <p className="text-sm text-red-600 dark:text-red-400 mt-1">{errors.mobilePhone}</p>
                                                        )}
                                                       
                                                    </div>

                                                    {/* Email */}
                                                    <div>
                                                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                                            E-posta
                                                        </label>
                                                        <input
                                                            type="email"
                                                            className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-background-light-card dark:bg-background-card text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold"
                                                            placeholder="ahmet@email.com"
                                                            value={formData.email}
                                                            onChange={(e) => handleInputChange('email', e.target.value)}
                                                        />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        
                                    </div>

                                    {/* Submit Button */}
                                    <div className="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
                                        <div className="flex flex-col items-center gap-2">
                                            <Button variant="primary" size="lg" type="submit" className="px-12" disabled={saving}>
                                                {saving ? 'Kaydediliyor...' : 'Sakini Kaydet'}
                                            </Button>
                                            {saveError && (
                                                <p className="text-sm text-red-600 dark:text-red-400 mt-2">{saveError}</p>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        </form>
                    </main>
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/residents/types/index.ts">
import { ReactNode } from 'react';
import { LucideIcon } from 'lucide-react';
import { Resident } from '@/app/components/ui/ResidentRow';
import { ResidentFilterParams } from '@/services/types/resident.types';

// API Response Types
export interface ApiResident {
    verificationStatus: string;
    id: string;
    firstName: string;
    lastName: string;
    email?: string;
    phone?: string;
    tcKimlikNo?: string;
    nationalId?: string;
    passportNumber?: string;
    property?: {
        ownershipType?: 'owner' | 'tenant';
        block?: string;
        apartment?: string;
        roomType?: string;
        governorate?: string;
        district?: string;
        neighborhood?: string;
    };
    registrationDate?: string;
    lastActivity?: string;
    financial?: {
        totalDebt?: number;
        lastPaymentDate?: string;
        balance?: number;
    };
    status?: string;
    membershipTier?: string;
    notes?: string;
    avatar?: string;
    createdAt?: string;
    updatedAt?: string;
}

// UI Component Types
export interface BulkAction {
    id: string;
    label: string;
    icon: LucideIcon;
    onClick: (residents: Resident[]) => void | Promise<void>;
    variant?: 'danger' | 'warning' | 'success' | 'default';
}

export interface ViewOption {
    id: string;
    label: string;
    icon: LucideIcon;
}

export interface TableColumn {
    id: string;
    header: string;
    accessor: string;
    width?: string;
    sortable?: boolean;
    render?: (value: any, row: Resident) => ReactNode;
}

// Stats Types
export interface StatsData {
    title: string;
    value: string;
    subtitle?: string;
    color: 'primary' | 'success' | 'info' | 'danger' | 'gold' | 'warning';
    icon: LucideIcon;
}

// Status and Membership Types
export interface StatusConfig {
    label: string;
    color: 'green' | 'red' | 'yellow' | 'blue' | 'gray';
}

export interface MembershipConfig {
    label: string;
    color: 'gold' | 'gray' | 'blue';
}

// Action Handler Types
export interface ResidentActionHandlers {
    handleViewResident: (resident: Resident) => void;
    handleEditResident: (resident: Resident) => void;
    handleDeleteResident: (resident: Resident) => void | Promise<void>;
    handleCallResident: (resident: Resident) => void;
    handleMessageResident: (resident: Resident) => void;
    handleGenerateQR: (resident: Resident) => void;
    handleViewNotes: (resident: Resident) => void;
    handleViewHistory: (resident: Resident) => void;
    handleViewPaymentHistory: (resident: Resident) => void;
    handleUpdateResidentStatus: (resident: Resident, newStatus: 'ACTIVE' | 'INACTIVE') => void | Promise<void>;
}

export interface BulkActionHandlers {
    handleBulkMail: (residents: Resident[]) => void;
    handleBulkSMS: (residents: Resident[]) => void;
    handleBulkPDF: (residents: Resident[]) => void;
    handleBulkTag: (residents: Resident[]) => void;
    handleBulkStatusChange: (residents: Resident[], status: string) => void;
    handleBulkDelete: (residents: Resident[]) => void;
}

export interface ExportHandlers {
    handleExportPDF: (filters?: ResidentFilterParams) => Promise<void>;
    handleExportExcel: (filters?: ResidentFilterParams) => Promise<void>;
    handleExportCSV: (filters?: ResidentFilterParams) => Promise<void>;
    handleExportJSON: (filters?: ResidentFilterParams) => Promise<void>;
}

// Page Props and State Types
export interface ResidentsPageProps {
    initialData?: {
        residents: Resident[];
        stats: any;
        totalRecords: number;
    };
}

export interface ResidentsPageState {
    loading: boolean;
    error: string | null;
    residents: Resident[];
    totalRecords: number;
    stats: any;
    selectedResidents: Resident[];
    filters: Record<string, any>;
    searchQuery: string;
    currentPage: number;
    recordsPerPage: number;
    selectedView: string;
    showFilterPanel: boolean;
    drawerClosing: boolean;
}
</file>

<file path="src/app/dashboard/units/[id]/components/BasicInfoSection.tsx">
import React, { useState } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import Badge from '@/app/components/ui/Badge';
import { BasicInfo, UpdateBasicInfoDto } from '@/services/types/unit-detail.types';
import { Edit, Save, X, Home } from 'lucide-react';
import { useToast } from '@/hooks/useToast';

interface BasicInfoSectionProps {
  basicInfo: BasicInfo;
  onUpdate?: (data: UpdateBasicInfoDto) => Promise<void>;
  loading?: boolean;
  canEdit?: boolean;
}

export default function BasicInfoSection({ 
  basicInfo, 
  onUpdate, 
  loading = false,
  canEdit = true 
}: BasicInfoSectionProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    apartmentNumber: basicInfo.data.apartmentNumber.value,
    block: basicInfo.data.block.value,
    floor: basicInfo.data.floor.value,
    apartmentType: basicInfo.data.apartmentType.value,
    area: basicInfo.data.area.value,
    status: basicInfo.data.status.value
  });
  const [saving, setSaving] = useState(false);
  const toast = useToast();

  const handleEdit = () => {
    setIsEditing(true);
    setFormData({
      apartmentNumber: basicInfo.data.apartmentNumber.value,
      block: basicInfo.data.block.value,
      floor: basicInfo.data.floor.value,
      apartmentType: basicInfo.data.apartmentType.value,
      area: basicInfo.data.area.value,
      status: basicInfo.data.status.value
    });
  };

  const handleCancel = () => {
    setIsEditing(false);
    setFormData({
      apartmentNumber: basicInfo.data.apartmentNumber.value,
      block: basicInfo.data.block.value,
      floor: basicInfo.data.floor.value,
      apartmentType: basicInfo.data.apartmentType.value,
      area: basicInfo.data.area.value,
      status: basicInfo.data.status.value
    });
  };

  const handleSave = async () => {
    if (!onUpdate) return;

    setSaving(true);
    try {
      await onUpdate({
        apartmentNumber: formData.apartmentNumber,
        block: formData.block,
        floor: formData.floor,
        apartmentType: formData.apartmentType,
        area: formData.area,
        status: formData.status as 'active' | 'inactive' | 'maintenance' | 'renovation'
      });
      setIsEditing(false);
      toast.success('Konut bilgileri güncellendi');
    } catch (error) {
      toast.error('Güncelleme başarısız oldu');
    } finally {
      setSaving(false);
    }
  };

  const getStatusColor = (status: string): 'primary' | 'secondary' | 'gold' | 'red' => {
    switch (status) {
      case 'active': return 'primary';
      case 'inactive': return 'red';
      case 'maintenance': return 'gold';
      case 'renovation': return 'secondary';
      default: return 'secondary';
    }
  };

  const getStatusLabel = (status: string): string => {
    const option = basicInfo.data.status.options.find(opt => 
      typeof opt === 'object' && opt.value === status
    );
    return typeof option === 'object' ? option.label : status;
  };

  return (
    <Card>
      <div className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-primary-gold/10 rounded-lg flex items-center justify-center">
              <Home className="h-5 w-5 text-primary-gold" />
            </div>
            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark">
              {basicInfo.title}
            </h3>
            {!isEditing && (
              <Badge variant="soft" color={getStatusColor(basicInfo.data.status.value)}>
                {getStatusLabel(basicInfo.data.status.value)}
              </Badge>
            )}
          </div>
          {canEdit && !isEditing && (
            <Button
              variant="ghost"
              size="sm"
              icon={Edit}
              onClick={handleEdit}
              disabled={loading}
            >
              Düzenle
            </Button>
          )}
          {isEditing && (
            <div className="flex gap-2">
              <Button
                variant="ghost"
                size="sm"
                icon={X}
                onClick={handleCancel}
                disabled={saving}
              >
                İptal
              </Button>
              <Button
                variant="primary"
                size="sm"
                icon={Save}
                onClick={handleSave}
                isLoading={saving}
              >
                Kaydet
              </Button>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Apartment Number */}
          <div>
            <label className="block text-sm font-medium text-text-light-muted dark:text-text-muted mb-2">
              {basicInfo.data.apartmentNumber.label}
              {basicInfo.data.apartmentNumber.required && <span className="text-primary-red ml-1">*</span>}
            </label>
            {isEditing ? (
              <Input
                value={formData.apartmentNumber}
                onChange={(e: any) => setFormData({ ...formData, apartmentNumber: e.target.value })}
                placeholder="Örn: A-101"
                disabled={saving}
              />
            ) : (
              <p className="font-medium text-text-on-light dark:text-text-on-dark">
                {basicInfo.data.apartmentNumber.value}
              </p>
            )}
          </div>

          {/* Block */}
          <div>
            <label className="block text-sm font-medium text-text-light-muted dark:text-text-muted mb-2">
              {basicInfo.data.block.label}
              {basicInfo.data.block.required && <span className="text-primary-red ml-1">*</span>}
            </label>
            {isEditing ? (
              <Select
                value={formData.block}
                onChange={(e: any) => setFormData({ ...formData, block: e.target.value })}
                options={basicInfo.data.block.options.map(opt => 
                  typeof opt === 'string' ? { value: opt, label: opt } : opt
                )}
                disabled={saving}
              />
            ) : (
              <p className="font-medium text-text-on-light dark:text-text-on-dark">
                {basicInfo.data.block.value}
              </p>
            )}
          </div>

          {/* Floor */}
          <div>
            <label className="block text-sm font-medium text-text-light-muted dark:text-text-muted mb-2">
              {basicInfo.data.floor.label}
              {basicInfo.data.floor.required && <span className="text-primary-red ml-1">*</span>}
            </label>
            {isEditing ? (
              <Input
                type="number"
                value={formData.floor}
                onChange={(e: any) => setFormData({ ...formData, floor: parseInt(e.target.value) || 0 })}
                min={basicInfo.data.floor.min}
                max={basicInfo.data.floor.max}
                disabled={saving}
              />
            ) : (
              <p className="font-medium text-text-on-light dark:text-text-on-dark">
                {basicInfo.data.floor.value}. Kat
              </p>
            )}
          </div>

          {/* Apartment Type */}
          <div>
            <label className="block text-sm font-medium text-text-light-muted dark:text-text-muted mb-2">
              {basicInfo.data.apartmentType.label}
              {basicInfo.data.apartmentType.required && <span className="text-primary-red ml-1">*</span>}
            </label>
            {isEditing ? (
              <Select
                value={formData.apartmentType}
                onChange={(e: any) => setFormData({ ...formData, apartmentType: e.target.value })}
                options={basicInfo.data.apartmentType.options.map(opt => 
                  typeof opt === 'string' ? { value: opt, label: opt } : opt
                )}
                disabled={saving}
              />
            ) : (
              <p className="font-medium text-text-on-light dark:text-text-on-dark">
                {basicInfo.data.apartmentType.value}
              </p>
            )}
          </div>

          {/* Area */}
          <div>
            <label className="block text-sm font-medium text-text-light-muted dark:text-text-muted mb-2">
              {basicInfo.data.area.label}
              {basicInfo.data.area.required && <span className="text-primary-red ml-1">*</span>}
            </label>
            {isEditing ? (
              <Input
                type="number"
                value={formData.area}
                onChange={(e: any) => setFormData({ ...formData, area: parseInt(e.target.value) || 0 })}
                min={basicInfo.data.area.min}
                max={basicInfo.data.area.max}
                disabled={saving}
              />
            ) : (
              <p className="font-medium text-text-on-light dark:text-text-on-dark">
                {basicInfo.data.area.value} m²
              </p>
            )}
          </div>

          {/* Status */}
          <div>
            <label className="block text-sm font-medium text-text-light-muted dark:text-text-muted mb-2">
              {basicInfo.data.status.label}
              {basicInfo.data.status.required && <span className="text-primary-red ml-1">*</span>}
            </label>
            {isEditing ? (
              <Select
                value={formData.status}
                onChange={(e: any) => setFormData({ ...formData, status: e.target.value })}
                options={basicInfo.data.status.options}
                disabled={saving}
              />
            ) : (
              <Badge variant="soft" color={getStatusColor(basicInfo.data.status.value)}>
                {getStatusLabel(basicInfo.data.status.value)}
              </Badge>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
}
</file>

<file path="src/app/dashboard/units/[id]/components/ResidentsSection.tsx">
import React, { useState } from 'react';
import Link from 'next/link';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Modal from '@/app/components/ui/Modal';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import { Resident, AddResidentDto } from '@/services/types/unit-detail.types';
import { 
  Users, 
  Plus, 
  Phone, 
  Mail, 
  User, 
  ChevronRight, 
  Crown,
  UserCheck,
  AlertCircle,
  Save
} from 'lucide-react';
import { useToast } from '@/hooks/useToast';

interface ResidentsSectionProps {
  residents: Resident[];
  onAdd?: (data: AddResidentDto) => Promise<void>;
  onRemove?: (residentId: string) => Promise<void>;
  loading?: boolean;
  canEdit?: boolean;
}

export default function ResidentsSection({ 
  residents, 
  onAdd, 
  onRemove,
  loading = false,
  canEdit = true 
}: ResidentsSectionProps) {
  const [showAddModal, setShowAddModal] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    role: 'family_member' as 'owner' | 'tenant' | 'family_member',
    phone: '',
    email: '',
    age: '',
    nationalId: '',
    relation: '',
    emergencyContactName: '',
    emergencyContactPhone: '',
    emergencyContactRelation: ''
  });
  const [saving, setSaving] = useState(false);
  const toast = useToast();

  const handleAdd = () => {
    setShowAddModal(true);
    setFormData({
      name: '',
      role: 'family_member',
      phone: '',
      email: '',
      age: '',
      nationalId: '',
      relation: '',
      emergencyContactName: '',
      emergencyContactPhone: '',
      emergencyContactRelation: ''
    });
  };

  const handleSave = async () => {
    if (!onAdd) return;

    setSaving(true);
    try {
      const residentData: AddResidentDto = {
        name: formData.name,
        role: formData.role,
        phone: formData.phone || undefined,
        email: formData.email || undefined,
        age: formData.age ? parseInt(formData.age) : undefined,
        nationalId: formData.nationalId || undefined,
        relation: formData.relation || undefined,
        emergencyContact: (formData.emergencyContactName && formData.emergencyContactPhone) ? {
          name: formData.emergencyContactName,
          phone: formData.emergencyContactPhone,
          relation: formData.emergencyContactRelation
        } : undefined
      };

      await onAdd(residentData);
      setShowAddModal(false);
      toast.success('Sakin başarıyla eklendi');
    } catch (error) {
      toast.error('Sakin ekleme işlemi başarısız');
    } finally {
      setSaving(false);
    }
  };

  const handleRemove = async (residentId: string, residentName: string) => {
    if (!onRemove) return;

    if (window.confirm(`${residentName} adlı sakini kayıttan çıkarmak istediğinizden emin misiniz?`)) {
      try {
        await onRemove(residentId);
        toast.success('Sakin kaydı kaldırıldı');
      } catch (error) {
        toast.error('Sakin kaldırma işlemi başarısız');
      }
    }
  };

  const getInitials = (name: string) => {
    const parts = name.split(' ');
    return parts.map(part => part.charAt(0)).join('').toUpperCase().slice(0, 2);
  };

  const getRoleIcon = (role: string, isMainResident: boolean) => {
    if (isMainResident) return <Crown className="h-4 w-4 text-yellow-500" />;
    
    switch (role) {
      case 'owner':
        return <UserCheck className="h-4 w-4 text-blue-500" />;
      case 'tenant':
        return <User className="h-4 w-4 text-green-500" />;
      default:
        return <User className="h-4 w-4 text-gray-500" />;
    }
  };

  const getRoleBadgeColor = (role: string): 'primary' | 'secondary' | 'gold' => {
    switch (role) {
      case 'owner':
        return 'primary';
      case 'tenant':
        return 'gold';
      default:
        return 'secondary';
    }
  };

  return (
    <>
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-2">
            <Users className="h-5 w-5 text-primary-gold" />
            <h4 className="text-base font-semibold text-text-on-light dark:text-text-on-dark">
              Mevcut Sakinler ({residents.length})
            </h4>
          </div>
          {canEdit && (
            <Button 
              variant="primary" 
              size="sm"
              icon={Plus} 
              onClick={handleAdd}
              disabled={loading}
            >
              Sakin Ekle
            </Button>
          )}
        </div>

        {residents.length === 0 ? (
          <div className="text-center py-8">
            <Users className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
            <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
              Henüz sakin kaydı yok
            </h3>
            <p className="text-sm text-text-light-muted dark:text-text-muted">
              Bu konut için sakin bilgilerini ekleyebilirsiniz.
            </p>
          </div>
        ) : (
          <div className="space-y-3">
            {residents.map((resident) => (
              <div 
                key={resident.id} 
                className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:border-primary-gold/30 transition-colors"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    {/* Avatar */}
                    <div className="w-12 h-12 rounded-full bg-primary-gold/10 flex items-center justify-center relative">
                      <span className="text-sm font-bold text-primary-gold">
                        {getInitials(resident.name)}
                      </span>
                      {resident.isMainResident && (
                        <div className="absolute -top-1 -right-1">
                          <Crown className="h-4 w-4 text-yellow-500" />
                        </div>
                      )}
                    </div>

                    {/* Info */}
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h5 className="font-medium text-text-on-light dark:text-text-on-dark">
                          {resident.name}
                        </h5>
                        <Badge 
                          variant="soft" 
                          color={getRoleBadgeColor(resident.role)}
                          className="text-xs"
                        >
                          {resident.roleLabel}
                        </Badge>
                        {resident.isMainResident && (
                          <Badge variant="soft" color="gold" className="text-xs">
                            Ana Sakin
                          </Badge>
                        )}
                      </div>

                      <div className="flex items-center gap-4 text-xs text-text-light-muted dark:text-text-muted">
                        {resident.age && (
                          <span>{resident.age} yaş</span>
                        )}
                        {resident.relation && (
                          <span>{resident.relation}</span>
                        )}
                        {resident.phone && (
                          <div className="flex items-center gap-1">
                            <Phone className="h-3 w-3" />
                            <span>{resident.phone}</span>
                          </div>
                        )}
                        {resident.email && (
                          <div className="flex items-center gap-1">
                            <Mail className="h-3 w-3" />
                            <span>{resident.email}</span>
                          </div>
                        )}
                      </div>

                      {resident.emergencyContact && (
                        <div className="mt-2 text-xs text-text-light-muted dark:text-text-muted">
                          <div className="flex items-center gap-1">
                            <AlertCircle className="h-3 w-3" />
                            <span>
                              Acil Durum: {resident.emergencyContact.name} ({resident.emergencyContact.relation}) - {resident.emergencyContact.phone}
                            </span>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex items-center gap-2">
                    <Link href={`/dashboard/residents/${resident.id}`}>
                      <Button variant="ghost" size="sm" icon={ChevronRight}>
                        Detay
                      </Button>
                    </Link>
                    {canEdit && !resident.isMainResident && (
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => handleRemove(resident.id, resident.name)}
                        className="text-primary-red hover:text-primary-red"
                      >
                        Kaldır
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Add Resident Modal */}
      <Modal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        title="Yeni Sakin Ekle"
        icon={User}
        size="lg"
      >
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
              Ad Soyad *
            </label>
            <Input
              value={formData.name}
              onChange={(e: any) => setFormData({ ...formData, name: e.target.value })}
              placeholder="Örn: Ahmet Yılmaz"
              disabled={saving}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                Rol *
              </label>
              <Select
                value={formData.role}
                onChange={(e: any) => setFormData({ ...formData, role: e.target.value as 'owner' | 'tenant' | 'family_member' })}
                options={[
                  { value: 'owner', label: 'Malik' },
                  { value: 'tenant', label: 'Kiracı' },
                  { value: 'family_member', label: 'Aile Üyesi' }
                ]}
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                İlişki {formData.role === 'family_member' && '*'}
              </label>
              <Select
                value={formData.relation}
                onChange={(e: any) => setFormData({ ...formData, relation: e.target.value })}
                options={[
                  { value: '', label: 'Seçiniz' },
                  { value: 'Eş', label: 'Eş' },
                  { value: 'Çocuk', label: 'Çocuk' },
                  { value: 'Anne', label: 'Anne' },
                  { value: 'Baba', label: 'Baba' },
                  { value: 'Kardeş', label: 'Kardeş' },
                  { value: 'Diğer', label: 'Diğer' }
                ]}
                disabled={saving}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                Telefon
              </label>
              <Input
                type="tel"
                value={formData.phone}
                onChange={(e: any) => setFormData({ ...formData, phone: e.target.value })}
                placeholder="+964 XXX XXX XXXX"
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                E-posta
              </label>
              <Input
                type="email"
                value={formData.email}
                onChange={(e: any) => setFormData({ ...formData, email: e.target.value })}
                placeholder="ornek@email.com"
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                Yaş
              </label>
              <Input
                type="number"
                value={formData.age}
                onChange={(e: any) => setFormData({ ...formData, age: e.target.value })}
                placeholder="25"
                min="0"
                max="120"
                disabled={saving}
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
              Kimlik No
            </label>
            <Input
              value={formData.nationalId}
              onChange={(e: any) => setFormData({ ...formData, nationalId: e.target.value })}
              placeholder="12345678901"
              disabled={saving}
            />
          </div>

          {/* Emergency Contact */}
          <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
            <h5 className="text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-4">
              Acil Durum İletişim (Opsiyonel)
            </h5>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-xs text-text-light-muted dark:text-text-muted mb-1">
                  Ad Soyad
                </label>
                <Input
                  value={formData.emergencyContactName}
                  onChange={(e: any) => setFormData({ ...formData, emergencyContactName: e.target.value })}
                  placeholder="Acil durum kişisi"
                  disabled={saving}
                />
              </div>

              <div>
                <label className="block text-xs text-text-light-muted dark:text-text-muted mb-1">
                  Telefon
                </label>
                <Input
                  type="tel"
                  value={formData.emergencyContactPhone}
                  onChange={(e: any) => setFormData({ ...formData, emergencyContactPhone: e.target.value })}
                  placeholder="+964 XXX XXX XXXX"
                  disabled={saving}
                />
              </div>

              <div>
                <label className="block text-xs text-text-light-muted dark:text-text-muted mb-1">
                  İlişki
                </label>
                <Input
                  value={formData.emergencyContactRelation}
                  onChange={(e: any) => setFormData({ ...formData, emergencyContactRelation: e.target.value })}
                  placeholder="Örn: Eş, Kardeş"
                  disabled={saving}
                />
              </div>
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Button 
              variant="secondary" 
              onClick={() => setShowAddModal(false)}
              disabled={saving}
            >
              İptal
            </Button>
            <Button 
              variant="primary" 
              icon={Save}
              onClick={handleSave}
              isLoading={saving}
              disabled={!formData.name || !formData.role || (formData.role === 'family_member' && !formData.relation)}
            >
              Sakin Ekle
            </Button>
          </div>
        </div>
      </Modal>
    </>
  );
}
</file>

<file path="src/app/dashboard/units/[id]/page.tsx">
"use client";

import React, { useState } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import { ProtectedRoute } from "@/app/components/auth/ProtectedRoute";
import DashboardHeader from "@/app/dashboard/components/DashboardHeader";
import Sidebar from "@/app/components/ui/Sidebar";
import Card from "@/app/components/ui/Card";
import Button from "@/app/components/ui/Button";
import Badge from "@/app/components/ui/Badge";
import { useUnitDetail } from "@/hooks/useUnitDetail";
import { useToast } from "@/hooks/useToast";
import { ToastContainer } from "@/app/components/ui/Toast";
import BasicInfoSection from "./components/BasicInfoSection";
import OwnerInfoSection from "./components/OwnerInfoSection";
import TenantInfoSection from "./components/TenantInfoSection";
import ResidentsSection from "./components/ResidentsSection";
import FinancialSummarySection from "./components/FinancialSummarySection";
import {
  Building,
  Home,
  Store,
  Car,
  ArrowLeft,
  AlertCircle,
  CheckCircle,
  RotateCcw,
  Calendar,
  Edit,
  Phone,
  MessageSquare,
  Settings,
  Users,
  DollarSign,
  Zap,
  Wrench,
  UserCheck,
  FileText
} from "lucide-react";

export default function UnitDetailPage() {
  const params = useParams();
  const unitId = params.id as string;
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<'residents' | 'financial' | 'consumption' | 'maintenance' | 'visitors' | 'documents'>('residents');
  const toast = useToast();
  
  const { 
    unit, 
    loading, 
    error, 
    refetch,
    updateBasicInfo,
    updateNotes
  } = useUnitDetail(unitId);

  const breadcrumbItems = [
    { label: "Ana Sayfa", href: "/dashboard" },
    { label: "Konutlar", href: "/dashboard/units" },
    { label: unit?.apartmentNumber || "Konut Detayı", active: true },
  ];

  // Helper functions
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <CheckCircle className="h-4 w-4 text-semantic-success-500" />;
      case 'maintenance': return <RotateCcw className="h-4 w-4 text-semantic-warning-500" />;
      case 'renovation': return <Settings className="h-4 w-4 text-primary-gold" />;
      case 'inactive': return <AlertCircle className="h-4 w-4 text-primary-red" />;
      default: return <AlertCircle className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusColor = (status: string): 'primary' | 'secondary' | 'gold' | 'red' => {
    switch (status) {
      case 'active': return 'primary';
      case 'maintenance': return 'gold';
      case 'renovation': return 'secondary';
      case 'inactive': return 'red';
      default: return 'secondary';
    }
  };

  const getInitials = (name: string) => {
    const parts = name.split(' ');
    return parts.map(part => part.charAt(0)).join('').toUpperCase().slice(0, 2);
  };

  if (loading) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-background-primary">
          <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
          <div className="lg:ml-72">
            <DashboardHeader title="Konut Detayı" breadcrumbItems={breadcrumbItems} />
            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              <div className="animate-pulse">
                <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
                <div className="space-y-6">
                  <div className="h-64 bg-gray-200 rounded"></div>
                  <div className="h-48 bg-gray-200 rounded"></div>
                </div>
              </div>
            </main>
          </div>
        </div>
      </ProtectedRoute>
    );
  }

  if (error || !unit) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-background-primary">
          <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
          <div className="lg:ml-72">
            <DashboardHeader title="Hata" breadcrumbItems={breadcrumbItems} />
            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
              <Card className="text-center">
                <div className="p-8">
                  <AlertCircle className="h-12 w-12 text-primary-red mx-auto mb-4" />
                  <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                    Konut bulunamadı
                  </h2>
                  <p className="text-text-light-secondary dark:text-text-secondary mb-6">
                    {error || "Konut detayı yüklenemedi."}
                  </p>
                  <Link href="/dashboard/units">
                    <Button variant="primary">Konut Listesine Dön</Button>
                  </Link>
                </div>
              </Card>
            </main>
          </div>
        </div>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        {/* Sidebar */}
        <Sidebar
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
        />

        {/* Main Content Area */}
        <div className="lg:ml-72">
          {/* Header */}
          <DashboardHeader
            title={unit?.apartmentNumber || 'Konut Detayı'}
            breadcrumbItems={breadcrumbItems}
          />

          {/* Main Content */}
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header with Actions */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div className="flex items-center gap-4">
                <Link href="/dashboard/units">
                  <Button variant="ghost" icon={ArrowLeft}>
                    Geri Dön
                  </Button>
                </Link>
                <div>
                  <div className="flex items-center gap-3 mb-2">
                    <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                      {unit?.apartmentNumber || 'Yükleniyor...'}
                    </h1>
                    {unit && (
                      <>
                        {getStatusIcon(unit.status)}
                        <Badge variant="soft" color={getStatusColor(unit.status)}>
                          {unit.basicInfo.data.status.options.find(opt => 
                            typeof opt === 'object' && opt.value === unit.status
                          )?.label || unit.status}
                        </Badge>
                      </>
                    )}
                  </div>
                  <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                    {unit?.block} Blok • {unit?.floor}. Kat • {unit?.area} m²
                  </p>
                </div>
              </div>

              {/* <div className="flex gap-3">
                <Button variant="secondary" icon={Phone}>
                  İletişim
                </Button>
                <Button variant="secondary" icon={MessageSquare}>
                  Note Ekle
                </Button>
                <Button variant="primary" icon={Edit}>
                  Düzenle
                </Button>
              </div> */}
            </div>

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Left Column - Main Info */}
              <div className="lg:col-span-2 space-y-6">
                {/* Unit Summary */}
                <Card className="p-6">
                  <div className="flex items-start gap-6">
                    {/* Icon */}
                    <div className="flex-shrink-0">
                      <div className="w-24 h-24 rounded-lg bg-primary-gold/10 flex items-center justify-center">
                        <Building className="h-12 w-12 text-primary-gold" />
                      </div>
                    </div>

                    {/* Basic Info */}
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark">
                          {unit?.apartmentNumber}
                        </h2>
                        <Badge variant="soft" color="primary">
                          {unit?.type}
                        </Badge>
                      </div>

                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <p className="text-text-light-muted dark:text-text-muted">Blok</p>
                          <p className="font-medium text-text-on-light dark:text-text-on-dark">
                            {unit?.block}
                          </p>
                        </div>
                        <div>
                          <p className="text-text-light-muted dark:text-text-muted">Kat</p>
                          <p className="font-medium text-text-on-light dark:text-text-on-dark">
                            {unit?.floor}
                          </p>
                        </div>
                        <div>
                          <p className="text-text-light-muted dark:text-text-muted">Alan</p>
                          <p className="font-medium text-text-on-light dark:text-text-on-dark">
                            {unit?.area} m²
                          </p>
                        </div>
                        <div>
                          <p className="text-text-light-muted dark:text-text-muted">Durum</p>
                          <Badge variant="soft" color={getStatusColor(unit?.status || 'inactive')}>
                            {unit?.basicInfo.data.status.options.find(opt => 
                              typeof opt === 'object' && opt.value === unit.status
                            )?.label}
                          </Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                </Card>

                {/* Basic Info Section */}
                {unit?.basicInfo && (
                  <BasicInfoSection
                    basicInfo={unit.basicInfo}
                    onUpdate={updateBasicInfo}
                    loading={loading}
                    canEdit={unit.permissions.canEdit}
                  />
                )}

                {/* Tabbed Content Section */}
                <Card className="mt-6">
                  <div className="p-0">
                    <div className="border-b border-gray-200 dark:border-gray-700 px-6 pt-6">
                      <nav className="flex space-x-4" aria-label="Tabs">
                        {[
                          { label: "Sakinler", key: "residents", icon: Users },
                          { label: "Finansal", key: "financial", icon: DollarSign },
                          { label: "Tüketim", key: "consumption", icon: Zap },
                          { label: "Bakım", key: "maintenance", icon: Wrench },
                          { label: "Ziyaretçiler", key: "visitors", icon: UserCheck },
                          { label: "Belgeler", key: "documents", icon: FileText }
                        ].map((tab) => (
                          <button
                            key={tab.key}
                            className={
                              (activeTab === tab.key
                                ? "text-primary-gold border-primary-gold"
                                : "text-text-light-secondary dark:text-text-secondary border-transparent hover:text-primary-gold hover:border-primary-gold/60") +
                              " px-3 py-2 text-sm font-medium border-b-2 transition-colors flex items-center gap-2"
                            }
                            onClick={() => setActiveTab(tab.key as any)}
                            type="button"
                          >
                            <tab.icon className="h-4 w-4" />
                            {tab.label}
                          </button>
                        ))}
                      </nav>
                    </div>
                    <div className="px-6 py-6">
                      {activeTab === "residents" && unit && (
                        <ResidentsSection
                          residents={unit.residents}
                          loading={loading}
                          canEdit={unit.permissions.canManageResidents}
                        />
                      )}
                      {activeTab === "financial" && (
                        <div className="text-center py-8">
                          <DollarSign className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                          <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Finansal Detaylar
                          </h3>
                          <p className="text-sm text-text-light-muted dark:text-text-muted">
                            Bu konut için finansal detaylar burada görüntülenecek.
                          </p>
                        </div>
                      )}
                      {activeTab === "consumption" && (
                        <div className="text-center py-8">
                          <Zap className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                          <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Tüketim Verileri
                          </h3>
                          <p className="text-sm text-text-light-muted dark:text-text-muted">
                            Elektrik, su ve gaz tüketim verileri burada görüntülenecek.
                          </p>
                        </div>
                      )}
                      {activeTab === "maintenance" && (
                        <div className="text-center py-8">
                          <Wrench className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                          <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Bakım Geçmişi
                          </h3>
                          <p className="text-sm text-text-light-muted dark:text-text-muted">
                            Bu konut için bakım kayıtları burada görüntülenecek.
                          </p>
                        </div>
                      )}
                      {activeTab === "visitors" && (
                        <div className="text-center py-8">
                          <UserCheck className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                          <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Ziyaretçi Geçmişi
                          </h3>
                          <p className="text-sm text-text-light-muted dark:text-text-muted">
                            Bu konut için ziyaretçi kayıtları burada görüntülenecek.
                          </p>
                        </div>
                      )}
                      {activeTab === "documents" && (
                        <div className="text-center py-8">
                          <FileText className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                          <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Belgeler
                          </h3>
                          <p className="text-sm text-text-light-muted dark:text-text-muted">
                            Bu konut için belgeler burada görüntülenecek.
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </Card>
              </div>

              {/* Right Column - Sidebar */}
              <div className="space-y-6">
                {/* Owner Information */}
                {unit?.ownerInfo && (
                  <OwnerInfoSection
                    ownerInfo={unit.ownerInfo}
                    loading={loading}
                    canEdit={unit.permissions.canEdit}
                  />
                )}

                {/* Tenant Information */}
                <TenantInfoSection
                  tenantInfo={unit?.tenantInfo}
                  loading={loading}
                  canEdit={unit?.permissions.canEdit}
                />

                {/* Financial Summary Sidebar */}
                {unit?.financialSummary && (
                  <Card>
                    <div className="p-6">
                      <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                        <DollarSign className="h-5 w-5 text-primary-gold" />
                        Finansal Durum
                      </h3>
                      <div className="space-y-4">
                        <div className="bg-background-light-soft dark:bg-background-soft rounded-lg p-4">
                          <p className="text-sm text-text-light-muted dark:text-text-muted">Güncel Bakiye</p>
                          <p className={`text-lg font-semibold ${unit.financialSummary.data.currentBalance.value < 0 ? 'text-primary-red' : 'text-primary-gold'}`}>
                            {new Intl.NumberFormat('tr-TR').format(Math.abs(unit.financialSummary.data.currentBalance.value))} {unit.financialSummary.data.currentBalance.currency}
                          </p>
                        </div>
                      </div>
                    </div>
                  </Card>
                )}

                {/* Notes */}
                {unit?.notes.data.generalNotes?.value && (
                  <Card>
                    <div className="p-6">
                      <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                        <FileText className="h-5 w-5 text-primary-gold" />
                        Notlar
                      </h3>
                      <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                        {unit.notes.data.generalNotes.value}
                      </p>
                    </div>
                  </Card>
                )}
              </div>
            </div>
          </main>
        </div>
      </div>

      {/* Toast Container */}
      <ToastContainer toasts={toast.toasts} onRemove={toast.removeToast} />
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/settings/system-settings/page.tsx">
'use client';

import { useState } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';

// Breadcrumb Items
const BREADCRUMB_ITEMS = [
  { label: 'Ana Sayfa', href: '/dashboard' },
  { label: 'Ayarlar', href: '/settings' },
  { label: 'Sistem Ayarları', active: true }
];

export default function SystemSettingsPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [emailSettings, setEmailSettings] = useState({
    smtpHost: 'smtp.gmail.com',
    smtpPort: '587',
    smtpUser: 'noreply@ninetynine.com',
    smtpPassword: '',
    fromEmail: 'noreply@ninetynine.com',
    fromName: 'NinetyNine Property Management'
  });

  const [securitySettings, setSecuritySettings] = useState({
    twoFactorAuth: true,
    sessionTimeout: '60',
    passwordExpiry: '90',
    maxLoginAttempts: '5'
  });

  const [backupSettings, setBackupSettings] = useState({
    autoBackup: true,
    frequency: 'daily',
    time: '02:00',
    retention: '30'
  });

  const handleTestEmail = () => {
    console.log('Testing email settings...');
  };

  const handleBackupNow = () => {
    console.log('Starting backup...');
  };

  const handleSave = () => {
    console.log('Saving settings...');
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        {/* Sidebar */}
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        {/* Main Content Area */}
        <div className="lg:ml-72">
          {/* Header */}
          <DashboardHeader 
            title="Sistem Ayarları" 
            breadcrumbItems={BREADCRUMB_ITEMS}
          />
          
          {/* Main Content */}
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header with Actions */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                  Sistem Ayarları
                </h2>
                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                  Sistem genelindeki ayarları, entegrasyonları ve bakımı yapılandırın
                </p>
              </div>
              
              <div className="flex gap-3">
                <button className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-text-light-secondary dark:text-text-secondary rounded-md hover:bg-gray-50 dark:hover:bg-gray-700">
                  Ayarları Dışa Aktar
                </button>
                <button className="px-4 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90">
                  Tümünü Senkronize Et
                </button>
              </div>
            </div>

            {/* Sistem Genel Bakış */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-primary-gold-light rounded-lg flex items-center justify-center">
                      <span className="text-primary-gold font-semibold">v</span>
                    </div>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-text-light-muted dark:text-text-muted">Sürüm</h3>
                    <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">2.1.3</p>
                  </div>
                </div>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                      <span className="text-green-600 font-semibold">✓</span>
                    </div>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-text-light-muted dark:text-text-muted">Durum</h3>
                    <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">Sağlıklı</p>
                  </div>
                </div>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                      <span className="text-blue-600 font-semibold">💾</span>
                    </div>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-text-light-muted dark:text-text-muted">Depolama</h3>
                    <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">%47</p>
                    <p className="text-xs text-text-light-muted dark:text-text-muted">234 GB / 500 GB</p>
                  </div>
                </div>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                      <span className="text-purple-600 font-semibold">⏱</span>
                    </div>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-medium text-text-light-muted dark:text-text-muted">Çalışma Süresi</h3>
                    <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">45g</p>
                    <p className="text-xs text-text-light-muted dark:text-text-muted">12s 34d</p>
                  </div>
                </div>
              </div>
            </div>

            {/* E-posta Yapılandırması */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark">
                    E-posta Yapılandırması
                  </h2>
                  <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                    Sistem e-postaları için SMTP ayarlarını yapılandırın
                  </p>
                </div>
                <button 
                  onClick={handleTestEmail}
                  className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-text-light-secondary dark:text-text-secondary rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                >
                  Bağlantıyı Test Et
                </button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      SMTP Sunucusu
                    </label>
                    <input
                      type="text"
                      value={emailSettings.smtpHost}
                      onChange={(e: any) => setEmailSettings({...emailSettings, smtpHost: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                      placeholder="smtp.gmail.com"
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        SMTP Portu
                      </label>
                      <input
                        type="text"
                        value={emailSettings.smtpPort}
                        onChange={(e: any) => setEmailSettings({...emailSettings, smtpPort: e.target.value})}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                        placeholder="587"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Güvenlik
                      </label>
                      <select className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors">
                        <option value="tls">TLS</option>
                        <option value="ssl">SSL</option>
                        <option value="none">Hiçbiri</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Kullanıcı Adı
                    </label>
                    <input
                      type="text"
                      value={emailSettings.smtpUser}
                      onChange={(e: any) => setEmailSettings({...emailSettings, smtpUser: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Şifre
                    </label>
                    <input
                      type="password"
                      value={emailSettings.smtpPassword}
                      onChange={(e: any) => setEmailSettings({...emailSettings, smtpPassword: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                      placeholder="••••••••••"
                    />
                  </div>

                  <div className="grid grid-cols-1 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Gönderen E-posta
                      </label>
                      <input
                        type="email"
                        value={emailSettings.fromEmail}
                        onChange={(e: any) => setEmailSettings({...emailSettings, fromEmail: e.target.value})}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Gönderen Adı
                      </label>
                      <input
                        type="text"
                        value={emailSettings.fromName}
                        onChange={(e: any) => setEmailSettings({...emailSettings, fromName: e.target.value})}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Güvenlik ve Yedekleme Ayarları */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
              {/* Güvenlik Ayarları */}
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <div className="mb-6">
                  <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark">
                    Güvenlik Ayarları
                  </h2>
                  <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                    Kimlik doğrulama ve erişim kontrollerini yapılandırın
                  </p>
                </div>

                <div className="space-y-6">
                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        İki Faktörlü Kimlik Doğrulama
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Yönetici kullanıcılar için 2FA gerektirir
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={securitySettings.twoFactorAuth}
                      onChange={(e: any) => setSecuritySettings({...securitySettings, twoFactorAuth: e.target.checked})}
                      className="w-4 h-4 rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                      Oturum Zaman Aşımı
                    </label>
                    <select
                      value={securitySettings.sessionTimeout}
                      onChange={(e: any) => setSecuritySettings({...securitySettings, sessionTimeout: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                    >
                      <option value="30">30 dakika</option>
                      <option value="60">1 saat</option>
                      <option value="120">2 saat</option>
                      <option value="480">8 saat</option>
                    </select>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                      Şifre Geçerlilik Süresi
                    </label>
                    <select
                      value={securitySettings.passwordExpiry}
                      onChange={(e: any) => setSecuritySettings({...securitySettings, passwordExpiry: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                    >
                      <option value="30">30 gün</option>
                      <option value="60">60 gün</option>
                      <option value="90">90 gün</option>
                      <option value="365">1 yıl</option>
                      <option value="never">Hiçbir zaman</option>
                    </select>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                      Maksimum Giriş Denemesi
                    </label>
                    <select
                      value={securitySettings.maxLoginAttempts}
                      onChange={(e: any) => setSecuritySettings({...securitySettings, maxLoginAttempts: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                    >
                      <option value="3">3 deneme</option>
                      <option value="5">5 deneme</option>
                      <option value="10">10 deneme</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Yedekleme Ayarları */}
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark">
                      Yedekleme Ayarları
                    </h2>
                    <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                      Otomatik yedeklemeleri ve saklama süresini yapılandırın
                    </p>
                  </div>
                  <button 
                    onClick={handleBackupNow}
                    className="px-4 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90 transition-colors"
                  >
                    Şimdi Yedekle
                  </button>
                </div>

                <div className="space-y-6">
                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        Otomatik Yedekleme
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Zamanlanmış yedeklemeleri etkinleştir
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={backupSettings.autoBackup}
                      onChange={(e: any) => setBackupSettings({...backupSettings, autoBackup: e.target.checked})}
                      className="w-4 h-4 rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                      Yedekleme Sıklığı
                    </label>
                    <select 
                      value={backupSettings.frequency}
                      onChange={(e: any) => setBackupSettings({...backupSettings, frequency: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                    >
                      <option value="hourly">Saatlik</option>
                      <option value="daily">Günlük</option>
                      <option value="weekly">Haftalık</option>
                      <option value="monthly">Aylık</option>
                    </select>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                      Yedekleme Zamanı
                    </label>
                    <input
                      type="time"
                      value={backupSettings.time}
                      onChange={(e: any) => setBackupSettings({...backupSettings, time: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                      Saklama Süresi
                    </label>
                    <select 
                      value={backupSettings.retention}
                      onChange={(e: any) => setBackupSettings({...backupSettings, retention: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark focus:ring-2 focus:ring-primary-gold focus:border-primary-gold transition-colors"
                    >
                      <option value="7">7 gün</option>
                      <option value="30">30 gün</option>
                      <option value="90">90 gün</option>
                      <option value="365">1 yıl</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>

            {/* Entegrasyonlar */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <div className="mb-6">
                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark">
                  Üçüncü Taraf Entegrasyonlar
                </h2>
                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                  Harici hizmetlere bağlantıları yönetin
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:border-primary-gold transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <span className="text-blue-600 font-semibold">💳</span>
                      </div>
                      <div>
                        <h3 className="font-medium text-text-on-light dark:text-text-on-dark">Ödeme Geçidi</h3>
                        <p className="text-sm text-text-light-secondary dark:text-text-secondary">Stripe</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                        Bağlı
                      </span>
                      <button className="p-1 text-gray-400 hover:text-primary-gold transition-colors">
                        ⚙️
                      </button>
                    </div>
                  </div>
                </div>

                <div className="border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:border-primary-gold transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                        <span className="text-green-600 font-semibold">📧</span>
                      </div>
                      <div>
                        <h3 className="font-medium text-text-on-light dark:text-text-on-dark">E-posta Servisi</h3>
                        <p className="text-sm text-text-light-secondary dark:text-text-secondary">SendGrid</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                        Bağlı
                      </span>
                      <button className="p-1 text-gray-400 hover:text-primary-gold transition-colors">
                        ⚙️
                      </button>
                    </div>
                  </div>
                </div>

                <div className="border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:border-primary-gold transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                        <span className="text-purple-600 font-semibold">📱</span>
                      </div>
                      <div>
                        <h3 className="font-medium text-text-on-light dark:text-text-on-dark">SMS Sağlayıcısı</h3>
                        <p className="text-sm text-text-light-secondary dark:text-text-secondary">Twilio</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                        Bağlı
                      </span>
                      <button className="p-1 text-gray-400 hover:text-primary-gold transition-colors">
                        ⚙️
                      </button>
                    </div>
                  </div>
                </div>

                <div className="border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:border-primary-gold transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center">
                        <span className="text-orange-600 font-semibold">☁️</span>
                      </div>
                      <div>
                        <h3 className="font-medium text-text-on-light dark:text-text-on-dark">Bulut Depolama</h3>
                        <p className="text-sm text-text-light-secondary dark:text-text-secondary">AWS S3</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">
                        Bağlantı Kesildi
                      </span>
                      <button className="p-1 text-gray-400 hover:text-primary-gold transition-colors">
                        ⚙️
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Kaydetme İşlemleri */}
            <div className="flex justify-end space-x-4">
              <button className="px-6 py-2 border border-gray-300 dark:border-gray-600 text-text-light-secondary dark:text-text-secondary rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                Varsayılanlara Dön
              </button>
              <button 
                onClick={handleSave}
                className="px-6 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90 transition-colors shadow-md"
              >
                Tüm Ayarları Kaydet
              </button>
            </div>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/settings/website-info/page.tsx">
'use client';

import { useState } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';

// Breadcrumb Items
const BREADCRUMB_ITEMS = [
  { label: 'Ana Sayfa', href: '/dashboard' },
  { label: 'Ayarlar', href: '/settings' },
  { label: 'Site Bilgileri', active: true }
];

export default function WebsiteInfoPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [companyName, setCompanyName] = useState('NinetyNine Property Management');
  const [companyEmail, setCompanyEmail] = useState('info@ninetynine.com');
  const [companyPhone, setCompanyPhone] = useState('+1 (555) 123-4567');
  const [companyAddress, setCompanyAddress] = useState('123 Business St, City, State 12345');
  const [websiteUrl, setWebsiteUrl] = useState('https://ninetynine.com');
  const [description, setDescription] = useState('Premium property management solutions for modern real estate');

  const handleSave = () => {
    console.log('Saving website info...');
  };

  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      console.log('Logo uploaded:', file.name);
    }
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        {/* Sidebar */}
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        {/* Main Content Area */}
        <div className="lg:ml-72">
          {/* Header */}
          <DashboardHeader 
            title="Site Bilgileri" 
            breadcrumbItems={BREADCRUMB_ITEMS}
          />
          
          {/* Main Content */}
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header with Actions */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                  Site Bilgileri
                </h2>
                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                  Şirket detaylarınızı, markanızı ve genel bilgilerinizi yönetin
                </p>
              </div>
              
              <div className="flex gap-3">
                <button className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-text-light-secondary dark:text-text-secondary rounded-md hover:bg-gray-50 dark:hover:bg-gray-700">
                  Değişiklikleri Önizle
                </button>
                <button className="px-4 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90">
                  Yayınla
                </button>
              </div>
            </div>

            {/* Şirket Bilgileri */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                Şirket Bilgileri
              </h2>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Şirket Adı
                  </label>
                  <input
                    type="text"
                    value={companyName}
                    onChange={(e: any) => setCompanyName(e.target.value)}
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Şirket E-postası
                  </label>
                  <input
                    type="email"
                    value={companyEmail}
                    onChange={(e: any) => setCompanyEmail(e.target.value)}
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>
              </div>
            </div>

            {/* Marka Ayarları */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                Marka Ayarları
              </h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Ana Renk
                  </label>
                  <input
                    type="color"
                    defaultValue="#AC8D6A"
                    className="w-20 h-10 border border-gray-300 dark:border-gray-600 rounded-md"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Logo Yükleme
                  </label>
                  <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center">
                    <div className="space-y-2">
                      <div className="mx-auto w-12 h-12 text-gray-400">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 48 48">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" />
                        </svg>
                      </div>
                      <p className="text-text-light-secondary dark:text-text-secondary">
                        Logonuzu buraya sürükleyin veya tıklayarak seçin
                      </p>
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleLogoUpload}
                        className="hidden"
                        id="logo-upload"
                      />
                      <label
                        htmlFor="logo-upload"
                        className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-primary-gold bg-primary-gold-light hover:bg-primary-gold/20 cursor-pointer"
                      >
                        Dosya Seç
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* İletişim Bilgileri */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                İletişim Bilgileri
              </h2>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Telefon Numarası
                  </label>
                  <input
                    type="tel"
                    value={companyPhone}
                    onChange={(e: any) => setCompanyPhone(e.target.value)}
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Website URL'i
                  </label>
                  <input
                    type="url"
                    value={websiteUrl}
                    onChange={(e: any) => setWebsiteUrl(e.target.value)}
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div className="lg:col-span-2">
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    İş Adresi
                  </label>
                  <input
                    type="text"
                    value={companyAddress}
                    onChange={(e: any) => setCompanyAddress(e.target.value)}
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div className="lg:col-span-2">
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Şirket Açıklaması
                  </label>
                  <textarea
                    value={description}
                    onChange={(e: any) => setDescription(e.target.value)}
                    rows={4}
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                    placeholder="Ziyaretçilere şirketiniz hakkında bilgi verin..."
                  />
                </div>
              </div>
            </div>

            {/* Sosyal Medya */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                Sosyal Medya Bağlantıları
              </h2>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Facebook
                  </label>
                  <input
                    type="url"
                    placeholder="https://facebook.com/sayfaniz"
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Twitter
                  </label>
                  <input
                    type="url"
                    placeholder="https://twitter.com/hesabiniz"
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    LinkedIn
                  </label>
                  <input
                    type="url"
                    placeholder="https://linkedin.com/company/sirketiniz"
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Instagram
                  </label>
                  <input
                    type="url"
                    placeholder="https://instagram.com/hesabiniz"
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>
              </div>
            </div>

            {/* SEO Ayarları */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-4">
                SEO Ayarları
              </h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Meta Başlık
                  </label>
                  <input
                    type="text"
                    defaultValue="NinetyNine Emlak Yönetimi - Premium Gayrimenkul Çözümleri"
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Meta Açıklama
                  </label>
                  <textarea
                    defaultValue="NinetyNine ile premium emlak yönetimi çözümlerini keşfedin. Modern mülk sahipleri ve sakinler için kapsamlı gayrimenkul hizmetleri sunuyoruz."
                    rows={3}
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Anahtar Kelimeler
                  </label>
                  <input
                    type="text"
                    defaultValue="emlak yönetimi, gayrimenkul, konut, ticari, NinetyNine"
                    className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                    placeholder="Anahtar kelimeleri virgülle ayırın"
                  />
                </div>
              </div>
            </div>

            {/* Kaydetme İşlemleri */}
            <div className="flex justify-end space-x-4">
              <button className="px-6 py-2 border border-gray-300 dark:border-gray-600 text-text-light-secondary dark:text-text-secondary rounded-md hover:bg-gray-50 dark:hover:bg-gray-700">
                Değişiklikleri Sıfırla
              </button>
              <button 
                onClick={handleSave}
                className="px-6 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90"
              >
                Değişiklikleri Kaydet
              </button>
            </div>
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/hooks/useResidentDocuments.ts">
'use client';

import { useState, useCallback, useEffect } from 'react';
import { adminResidentService } from '@/services/admin-resident.service';

export interface DocumentState {
    loading: boolean;
    error: string | null;
    url?: string;
}

export interface UploadState {
    uploading: boolean;
    progress: number;
    error: string | null;
}

interface UseResidentDocumentsProps {
    residentId: string;
    autoFetch?: boolean;
}

interface UseResidentDocumentsReturn {
    nationalIdDoc: DocumentState;
    ownershipDoc: DocumentState;
    uploadStates: {
        nationalId: UploadState;
        ownership: UploadState;
    };
    fetchNationalIdDocument: () => Promise<void>;
    fetchOwnershipDocument: () => Promise<void>;
    uploadNationalIdDocument: (file: File) => Promise<void>;
    uploadOwnershipDocument: (file: File) => Promise<void>;
    clearDocumentError: (type: 'nationalId' | 'ownership') => void;
    refreshDocuments: () => Promise<void>;
}

export const useResidentDocuments = ({
    residentId,
    autoFetch = true
}: UseResidentDocumentsProps): UseResidentDocumentsReturn => {
    // Document states
    const [nationalIdDoc, setNationalIdDoc] = useState<DocumentState>({
        loading: false,
        error: null,
        url: undefined
    });

    const [ownershipDoc, setOwnershipDoc] = useState<DocumentState>({
        loading: false,
        error: null,
        url: undefined
    });

    // Upload states
    const [uploadStates, setUploadStates] = useState({
        nationalId: { uploading: false, progress: 0, error: null },
        ownership: { uploading: false, progress: 0, error: null }
    });

    // Fetch national ID document
    const fetchNationalIdDocument = useCallback(async () => {
        try {
            setNationalIdDoc(prev => ({ ...prev, loading: true, error: null }));
            
            const response = await adminResidentService.getNationalIdDocument(residentId);
            
            if (response?.data) {
                // If response contains a blob or URL, create object URL
                const url = response.data instanceof Blob 
                    ? URL.createObjectURL(response.data)
                    : response.data.staticUrl || response.data; // Use staticUrl if available
                    
                setNationalIdDoc({ loading: false, error: null, url });
            } else {
                setNationalIdDoc({ loading: false, error: 'Belge bulunamadı', url: undefined });
            }
        } catch (error: any) {
            console.error('Failed to fetch national ID document:', error);
            const errorMessage = error?.response?.status === 404 
                ? 'Belge bulunamadı' 
                : error?.message || 'Belge yüklenirken hata oluştu';
            setNationalIdDoc({ loading: false, error: errorMessage, url: undefined });
        }
    }, [residentId]);

    // Fetch ownership document
    const fetchOwnershipDocument = useCallback(async () => {
        try {
            setOwnershipDoc(prev => ({ ...prev, loading: true, error: null }));
            
            const response = await adminResidentService.getOwnershipDocument(residentId);
            
            if (response?.data) {
                // If response contains a blob or URL, create object URL
                const url = response.data instanceof Blob 
                    ? URL.createObjectURL(response.data)
                    : response.data.staticUrl || response.data; // Use staticUrl if available
                    
                setOwnershipDoc({ loading: false, error: null, url });
            } else {
                setOwnershipDoc({ loading: false, error: 'Belge bulunamadı', url: undefined });
            }
        } catch (error: any) {
            console.error('Failed to fetch ownership document:', error);
            const errorMessage = error?.response?.status === 404 
                ? 'Belge bulunamadı' 
                : error?.message || 'Belge yüklenirken hata oluştu';
            setOwnershipDoc({ loading: false, error: errorMessage, url: undefined });
        }
    }, [residentId]);

    // Upload national ID document
    const uploadNationalIdDocument = useCallback(async (file: File) => {
        try {
            setUploadStates(prev => ({
                ...prev,
                nationalId: { uploading: true, progress: 0, error: null }
            }));

            await adminResidentService.uploadNationalIdDocument(
                residentId,
                file,
                (progress) => {
                    setUploadStates(prev => ({
                        ...prev,
                        nationalId: { ...prev.nationalId, progress }
                    }));
                }
            );

            setUploadStates(prev => ({
                ...prev,
                nationalId: { uploading: false, progress: 100, error: null }
            }));

            // Refresh the document after successful upload
            await fetchNationalIdDocument();
        } catch (error: any) {
            console.error('Failed to upload national ID document:', error);
            setUploadStates(prev => ({
                ...prev,
                nationalId: { 
                    uploading: false, 
                    progress: 0, 
                    error: error?.message || 'Belge yüklenirken hata oluştu' 
                }
            }));
        }
    }, [residentId, fetchNationalIdDocument]);

    // Upload ownership document
    const uploadOwnershipDocument = useCallback(async (file: File) => {
        try {
            setUploadStates(prev => ({
                ...prev,
                ownership: { uploading: true, progress: 0, error: null }
            }));

            await adminResidentService.uploadOwnershipDocument(
                residentId,
                file,
                (progress) => {
                    setUploadStates(prev => ({
                        ...prev,
                        ownership: { ...prev.ownership, progress }
                    }));
                }
            );

            setUploadStates(prev => ({
                ...prev,
                ownership: { uploading: false, progress: 100, error: null }
            }));

            // Refresh the document after successful upload
            await fetchOwnershipDocument();
        } catch (error: any) {
            console.error('Failed to upload ownership document:', error);
            setUploadStates(prev => ({
                ...prev,
                ownership: { 
                    uploading: false, 
                    progress: 0, 
                    error: error?.message || 'Belge yüklenirken hata oluştu' 
                }
            }));
        }
    }, [residentId, fetchOwnershipDocument]);

    // Clear document error
    const clearDocumentError = useCallback((type: 'nationalId' | 'ownership') => {
        if (type === 'nationalId') {
            setNationalIdDoc(prev => ({ ...prev, error: null }));
        } else {
            setOwnershipDoc(prev => ({ ...prev, error: null }));
        }
    }, []);

    // Refresh all documents
    const refreshDocuments = useCallback(async () => {
        await Promise.all([
            fetchNationalIdDocument(),
            fetchOwnershipDocument()
        ]);
    }, [fetchNationalIdDocument, fetchOwnershipDocument]);

    // Auto-fetch on mount
    useEffect(() => {
        if (autoFetch && residentId) {
            refreshDocuments();
        }
    }, [autoFetch, residentId, refreshDocuments]);

    return {
        nationalIdDoc,
        ownershipDoc,
        uploadStates,
        fetchNationalIdDocument,
        fetchOwnershipDocument,
        uploadNationalIdDocument,
        uploadOwnershipDocument,
        clearDocumentError,
        refreshDocuments
    };
};
</file>

<file path="src/lib/handleModalAction.ts">
import { useToast } from '@/hooks/useToast';

type ToastFns = {
  success: (title: string, message?: string) => void;
  error: (title: string, message?: string) => void;
  warning: (title: string, message?: string) => void;
  info: (title: string, message?: string) => void;
};

interface HandleModalActionParams<T> {
  action: () => Promise<T>;
  onClose: () => void;
  onActionComplete?: () => void;
  toast: ToastFns;
  label: string;
  setLoading?: (loading: boolean) => void;
}

export async function handleModalAction<T>({
  action,
  onClose,
  onActionComplete,
  toast,
  label,
  setLoading,
}: HandleModalActionParams<T>) {
  setLoading?.(true);
  try {
    await action();
    toast.success('Başarılı', `${label} başarıyla gerçekleştirildi.`);
    onClose();
    onActionComplete?.();
  } catch (e) {
    toast.error('Hata', 'İşlem başarısız oldu. Lütfen tekrar deneyin.');
  } finally {
    setLoading?.(false);
  }
}
</file>

<file path="src/services/types/request-detail.types.ts">
// Request Detail Page Type Definitions
// Adapted from JSON structure in request-detail-view.json

export interface ServiceRequestDetail {
  id: string;
  requestId: string;
  title: string;
  description: string;
  apartment: ApartmentInfo;
  category: CategoryInfo;
  priority: PriorityInfo;
  status: StatusInfo;
  assignee?: AssigneeInfo;
  createdDate: string;
  updatedDate: string;
  dueDate: string;
  estimatedCompletion?: string;
  completedDate?: string;
  responseTime?: string;
  completionTime?: string;
  imagesCount: number;
  commentsCount: number;
  cost: CostInfo;
  customerRating?: number;
  tags: string[];
  isOverdue: boolean;
  isUrgent: boolean;
  hasImages: boolean;
  hasComments: boolean;
}

export interface ApartmentInfo {
  number: string;
  block: string;
  floor: number;
  owner: string;
  tenant?: string;
  phone?: string;
}

export interface CategoryInfo {
  id: string;
  label: string;
  icon: string;
  color: string;
}

export interface PriorityInfo {
  id: string;
  label: string;
  level: number;
  color: string;
  icon: string;
}

export interface StatusInfo {
  id: string;
  label: string;
  color: string;
  bgColor: string;
}

export interface AssigneeInfo {
  id: string;
  name: string;
  company: string;
  phone: string;
  avatar: string;
  rating: number;
}

export interface CostInfo {
  estimated: number;
  actual?: number;
  currency: string;
}

// Component Props Interfaces
export interface RequestDetailHeaderProps {
  request: ServiceRequestDetail;
  onEdit: () => void;
  onDelete: () => void;
  onBack: () => void;
  loading?: boolean;
}

export interface RequestDetailInfoProps {
  request: ServiceRequestDetail;
}

export interface RequestDetailApartmentProps {
  apartment: ApartmentInfo;
}

export interface RequestDetailAssigneeProps {
  assignee?: AssigneeInfo;
}

export interface RequestDetailTimelineProps {
  request: ServiceRequestDetail;
}

export interface RequestDetailStatusProps {
  request: ServiceRequestDetail;
  onStatusChange: (action: RequestDetailAction) => void;
  loading?: boolean;
}

export interface RequestDetailCommentsProps {
  requestId: string;
  commentsCount: number;
}

export interface RequestDetailImagesProps {
  requestId: string;
  imagesCount: number;
}

export interface RequestDetailCostProps {
  cost: CostInfo;
  canViewCosts?: boolean;
}

// Hook Return Type
export interface UseRequestDetailResult {
  request: ServiceRequestDetail | null;
  loading: boolean;
  error: string | null;
  handleEdit: () => void;
  handleDelete: () => void;
  handleStatusChange: (action: RequestDetailAction) => Promise<void>;
  refetch: () => Promise<void>;
}

// Action Types
export type RequestDetailAction = 
  | 'start-progress'
  | 'mark-waiting'
  | 'resolve'
  | 'close'
  | 'cancel'
  | 'reopen';

// Status Configuration
export interface StatusConfig {
  label: string;
  color: string;
  icon: string;
  allowedActions: RequestDetailAction[];
}

export const STATUS_CONFIGS: Record<string, StatusConfig> = {
  'OPEN': {
    label: 'Açık',
    color: 'info',
    icon: 'AlertCircle',
    allowedActions: ['start-progress', 'resolve', 'cancel']
  },
  'IN_PROGRESS': {
    label: 'İşlemde', 
    color: 'warning',
    icon: 'RotateCcw',
    allowedActions: ['resolve', 'mark-waiting']
  },
  'WAITING': {
    label: 'Beklemede',
    color: 'secondary', 
    icon: 'PauseCircle',
    allowedActions: ['start-progress', 'resolve', 'cancel']
  },
  'RESOLVED': {
    label: 'Çözüldü',
    color: 'success',
    icon: 'CheckCircle', 
    allowedActions: ['close', 'reopen']
  },
  'CLOSED': {
    label: 'Kapalı',
    color: 'secondary',
    icon: 'CheckCircle',
    allowedActions: ['reopen']
  },
  'CANCELLED': {
    label: 'İptal',
    color: 'red',
    icon: 'X',
    allowedActions: ['reopen']
  }
};

// Priority Configuration
export const PRIORITY_CONFIGS: Record<string, { color: string; level: number }> = {
  'LOW': { color: 'success', level: 1 },
  'MEDIUM': { color: 'warning', level: 2 },
  'HIGH': { color: 'red', level: 3 },
  'URGENT': { color: 'red', level: 4 }
};

// Category Configuration
export const CATEGORY_CONFIGS: Record<string, { color: string; icon: string }> = {
  'FAULT_REPAIR': { color: 'red', icon: '🔧' },
  'MAINTENANCE': { color: 'warning', icon: '⚙️' },
  'CLEANING': { color: 'info', icon: '🧹' },
  'SECURITY': { color: 'red', icon: '🔒' },
  'COMPLAINT': { color: 'warning', icon: '📢' },
  'SUGGESTION': { color: 'success', icon: '💡' },
  'OTHER': { color: 'secondary', icon: '📝' }
};
</file>

<file path="src/services/family-member.service.ts">
// Family Member Service - Application Layer
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { 
    FamilyMember, 
    CreateFamilyMemberDto, 
    UpdateFamilyMemberDto,
    FamilyMemberFilterParams,
    FamilyMembersResponse 
} from './types/family-member.types';
import { ApiResponse } from './core/types';

class FamilyMemberService extends BaseService<FamilyMember, CreateFamilyMemberDto, UpdateFamilyMemberDto> {
    protected baseEndpoint = '/family-members';

    constructor() {
        super('FamilyMemberService');
    }

    /**
     * Get family members for a specific user
     * GET /family-members/users/:userId/family-members
     */
    async getFamilyMembersByUserId(userId: string): Promise<ApiResponse<FamilyMember[]>> {
        try {
            this.logger.info(`Fetching family members for user: ${userId}`);

            const response = await apiClient.get<FamilyMember[]>(
                `/family-members/users/${userId}/family-members`
            );

            this.logger.info(`Fetched ${response.data?.length || 0} family members for user ${userId}`);
            return response;
        } catch (error) {
            this.logger.error(`Failed to fetch family members for user ${userId}`, error);
            throw error;
        }
    }

    /**
     * Create a new family member for a user
     * POST /family-members/users/:userId/family-members
     */
    async createFamilyMemberForUser(userId: string, data: CreateFamilyMemberDto): Promise<ApiResponse<FamilyMember>> {
        try {
            this.logger.info(`Creating family member for user: ${userId}`, data);

            const response = await apiClient.post<FamilyMember>(
                `/family-members/users/${userId}/family-members`,
                data
            );

            this.logger.info(`Created family member ${response.data?.id} for user ${userId}`);
            return response;
        } catch (error) {
            this.logger.error(`Failed to create family member for user ${userId}`, error);
            throw error;
        }
    }

    /**
     * Update a family member
     * PUT /family-members/:id
     */
    async updateFamilyMember(id: string, data: UpdateFamilyMemberDto): Promise<ApiResponse<FamilyMember>> {
        try {
            this.logger.info(`Updating family member: ${id}`, data);

            const response = await apiClient.put<FamilyMember>(
                `/family-members/${id}`,
                data
            );

            this.logger.info(`Updated family member ${id}`);
            return response;
        } catch (error) {
            this.logger.error(`Failed to update family member ${id}`, error);
            throw error;
        }
    }

    /**
     * Delete a family member
     * DELETE /family-members/:id
     */
    async deleteFamilyMember(id: string): Promise<ApiResponse<void>> {
        try {
            this.logger.info(`Deleting family member: ${id}`);

            const response = await apiClient.delete<void>(`/family-members/${id}`);

            this.logger.info(`Deleted family member ${id}`);
            return response;
        } catch (error) {
            this.logger.error(`Failed to delete family member ${id}`, error);
            throw error;
        }
    }

    /**
     * Get a specific family member by ID
     * GET /family-members/:id
     */
    async getFamilyMemberById(id: string): Promise<ApiResponse<FamilyMember>> {
        try {
            this.logger.info(`Fetching family member: ${id}`);

            const response = await apiClient.get<FamilyMember>(`/family-members/${id}`);

            this.logger.info(`Fetched family member ${id}`);
            return response;
        } catch (error) {
            this.logger.error(`Failed to fetch family member ${id}`, error);
            throw error;
        }
    }

    /**
     * Create a new family member for a user (admin endpoint)
     * POST /family-members/admin/users/:userId/add-family-member
     */
    async createFamilyMemberAdmin(userId: string, data: {
        identityOrPassportNumber: string;
        firstName: string;
        lastName: string;
        relationship: string;
        phone: string;
        gender: 'MALE' | 'FEMALE' | 'OTHER';
        birthDate: string;
        birthPlace: string;
        bloodType: string;
        notes?: string;
    }): Promise<any> {
        try {
            this.logger.info(`Creating family member (admin) for user: ${userId}`, data);
            
            // Debug: API'ye gönderilecek veri
            console.log('SERVICE - API Request Data:', data);
            console.log('SERVICE - identityOrPassportNumber:', data.identityOrPassportNumber);
            
            console.log('🔧 BEFORE HYBRID PAYLOAD CREATION');
            
            // Backend'in field mapping sorunu olabilir - her iki formatı da deneyelim
            const hybridPayload = {
                // Backend dokümantasyonuna göre camelCase
                identityOrPassportNumber: data.identityOrPassportNumber,
                // Database field adı snake_case olabilir
                identity_or_passport_number: data.identityOrPassportNumber,
                firstName: data.firstName,
                lastName: data.lastName,
                relationship: data.relationship,
                phone: data.phone,
                gender: data.gender,
                birthDate: data.birthDate,
                birthPlace: data.birthPlace,
                bloodType: data.bloodType,
                notes: data.notes || ''
            };
            
            console.log('🚀 SERVICE - Hybrid Payload:', hybridPayload);
            console.log('🔍 HYBRID - identityOrPassportNumber:', hybridPayload.identityOrPassportNumber);
            console.log('🔍 HYBRID - identity_or_passport_number:', hybridPayload.identity_or_passport_number);
            
            // Eğer hybrid de çalışmazsa, alternatif endpoint dene
            let response;
            try {
                response = await apiClient.post(
                    `/family-members/admin/users/${userId}/add-family-member`,
                    hybridPayload
                );
            } catch (firstError) {
                console.log('First endpoint failed, trying alternative...');
                // Alternatif endpoint denemesi
                response = await apiClient.post(
                    `/family-members/users/${userId}/family-members`,
                    hybridPayload
                );
            }
            this.logger.info(`Created family member (admin) for user ${userId}`);
            return response;
        } catch (error) {
            this.logger.error(`Failed to create family member (admin) for user ${userId}`, error);
            throw error;
        }
    }
}

// Export singleton instance
export const familyMemberService = new FamilyMemberService();
</file>

<file path="src/app/components/ui/FilterPanel.tsx">
import React, { useState } from 'react';
import { X, Filter, RotateCcw, Search, Calendar, DollarSign, Users, Home, CheckCircle, AlertCircle, Clock } from 'lucide-react';
import { cn } from '@/lib/utils';
import Card from './Card';
import Button from './Button';
import Input from './Input';
import Select from './Select';
import Badge from './Badge';
import Checkbox from './Checkbox';
import RadioButton from './RadioButton';
import DatePicker from './DatePicker';

export interface FilterOption {
    id: string;
    label: string;
    value: any;
    count?: number;
}

export interface FilterGroup {
    id: string;
    label: string;
    type: 'select' | 'multiselect' | 'daterange' | 'numberrange' | 'search' | 'checkbox' | 'radio';
    options?: FilterOption[];
    placeholder?: string;
    defaultValue?: any;
    icon?: React.ComponentType<{ size?: string | number; className?: string }>;
    collapsible?: boolean;
    collapsed?: boolean;
}

interface AppliedFilter {
    groupId: string;
    groupLabel: string;
    optionId: string;
    optionLabel: string;
    value: any;
}

interface FilterPanelProps {
    filterGroups: FilterGroup[];
    onApplyFilters: (filters: Record<string, any>) => void;
    onResetFilters: () => void;
    appliedFilters?: AppliedFilter[];
    isOpen?: boolean;
    onClose?: () => void;
    className?: string;
    variant?: 'sidebar' | 'dropdown' | 'modal';
    showAppliedFilters?: boolean;
    showFilterCount?: boolean;
}

const FilterPanel: React.FC<FilterPanelProps> = ({
    filterGroups,
    onApplyFilters,
    onResetFilters,
    appliedFilters = [],
    isOpen = true,
    onClose,
    className,
    variant = 'sidebar',
    showAppliedFilters = true,
    showFilterCount = true,
}) => {
    const [filters, setFilters] = useState<Record<string, any>>({});
    const [collapsedGroups, setCollapsedGroups] = useState<Set<string>>(new Set());

    const variantClasses = {
        sidebar: 'h-full overflow-y-auto',
        dropdown: 'w-96 max-h-96 overflow-y-auto',
        modal: 'w-full max-w-2xl max-h-[80vh] overflow-y-auto',
    };

    const updateFilter = (groupId: string, value: any) => {
        console.log(`🔧 UpdateFilter called: groupId=${groupId}, value=${value}, type=${typeof value}`);
        const newFilters = { ...filters };
        if (value === undefined || value === null || value === '') {
            delete newFilters[groupId];
        } else {
            newFilters[groupId] = value;
        }
        console.log(`📝 New filters state:`, newFilters);
        setFilters(newFilters);
    };

    const toggleCollapse = (groupId: string) => {
        const newCollapsed = new Set(collapsedGroups);
        if (newCollapsed.has(groupId)) {
            newCollapsed.delete(groupId);
        } else {
            newCollapsed.add(groupId);
        }
        setCollapsedGroups(newCollapsed);
    };

    const handleApplyFilters = () => {
        console.log(`🎯 handleApplyFilters called with filters:`, filters);
        console.log(`📋 Filter entries:`, Object.entries(filters));
        onApplyFilters(filters);
        if (variant === 'dropdown' || variant === 'modal') {
            onClose?.();
        }
    };

    const handleResetFilters = () => {
        setFilters({});
        onResetFilters();
    };

    const removeAppliedFilter = (groupId: string) => {
        const newFilters = { ...filters };
        delete newFilters[groupId];
        setFilters(newFilters);
        onApplyFilters(newFilters);
    };

    const getFilterCount = () => {
        return Object.keys(filters).length;
    };

    const renderFilterGroup = (group: FilterGroup) => {
        const isCollapsed = collapsedGroups.has(group.id);
        const currentValue = filters[group.id];
        
        console.log(`🔍 Rendering group: ${group.id}, type: ${group.type}, options count: ${group.options?.length || 0}`);
        if (group.type === 'select') {
            console.log(`📝 Select options for ${group.id}:`, group.options);
        }

        const renderFilterContent = () => {
            switch (group.type) {
                case 'search':
                    return (
                        <Input
                            placeholder={group.placeholder || 'Ara...'}
                            value={currentValue || ''}
                            onChange={(e: any) => updateFilter(group.id, e.target.value)}
                            icon={Search}
                        />
                    );

                case 'select':
                    const selectOptions = group.options?.map((option) => ({
                        value: option.value,
                        label: `${option.label}${showFilterCount && option.count ? ` (${option.count})` : ''}`
                    })) || [];
                    
                    return (
                        <Select
                            value={currentValue || ''}
                            onChange={(e: any) => updateFilter(group.id, e.target.value)}
                            placeholder={group.placeholder || 'Seçiniz...'}
                            options={selectOptions}
                        />
                    );

                case 'multiselect':
                    return (
                        <div className="space-y-2">
                            {group.options?.map((option) => (
                                <Checkbox
                                    key={option.id}
                                    id={`${group.id}-${option.id}`}
                                    checked={currentValue?.includes(option.value) || false}
                                    onChange={(e: any) => {
                                        const current = currentValue || [];
                                        if (e.target.checked) {
                                            updateFilter(group.id, [...current, option.value]);
                                        } else {
                                            updateFilter(group.id, current.filter((v: any) => v !== option.value));
                                        }
                                    }}
                                    label={
                                        <>
                                            {option.label}
                                            {showFilterCount && option.count && (
                                                <span className="text-text-light-muted dark:text-text-muted ml-1">
                                                    ({option.count})
                                                </span>
                                            )}
                                        </>
                                    }
                                    checkboxSize="sm"
                                />
                            ))}
                        </div>
                    );

                case 'radio':
                    return (
                        <RadioButton
                            name={group.id}
                            value={currentValue}
                            onChange={(e: any) => updateFilter(group.id, e.target.value)}
                            options={group.options?.map(option => ({
                                value: option.value,
                                label: `${option.label}${showFilterCount && option.count ? ` (${option.count})` : ''}`
                            })) || []}
                            radioSize="sm"
                            direction="vertical"
                        />
                    );

                case 'daterange':
                    return (
                        <div className="space-y-2">
                            <DatePicker
                                label="Başlangıç"
                                value={currentValue?.start || ''}
                                onChange={(e: any) => updateFilter(group.id, {
                                    ...currentValue,
                                    start: e.target.value
                                })}
                                variant="default"
                                showIcon
                            />
                            <DatePicker
                                label="Bitiş"
                                value={currentValue?.end || ''}
                                onChange={(e: any) => updateFilter(group.id, {
                                    ...currentValue,
                                    end: e.target.value
                                })}
                                variant="default"
                                showIcon
                            />
                        </div>
                    );

                case 'numberrange':
                    return (
                        <div className="space-y-2">
                            <Input
                                type="number"
                                label="Minimum"
                                value={currentValue?.min || ''}
                                onChange={(e: any) => updateFilter(group.id, {
                                    ...currentValue,
                                    min: Number(e.target.value)
                                })}
                            />
                            <Input
                                type="number"
                                label="Maksimum"
                                value={currentValue?.max || ''}
                                onChange={(e: any) => updateFilter(group.id, {
                                    ...currentValue,
                                    max: Number(e.target.value)
                                })}
                            />
                        </div>
                    );

                case 'checkbox':
                    return (
                        <div className="space-y-2">
                            {group.options?.map((option) => (
                                <Checkbox
                                    key={option.id}
                                    id={`${group.id}-${option.id}`}
                                    checked={currentValue?.[option.id] || false}
                                    onChange={(e: any) => updateFilter(group.id, {
                                        ...currentValue,
                                        [option.id]: e.target.checked
                                    })}
                                    label={option.label}
                                    checkboxSize="sm"
                                />
                            ))}
                        </div>
                    );

                default:
                    return null;
            }
        };

        return (
            <div key={group.id} className="border-b border-gray-200 dark:border-gray-700 last:border-b-0">
                <div className="p-4">
                    {/* Group Header */}
                    <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center gap-2">
                            {group.icon && <group.icon size={16} className="text-primary-gold" />}
                            <h3 className="font-medium text-text-on-light dark:text-text-on-dark">
                                {group.label}
                            </h3>
                        </div>
                        {group.collapsible && (
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => toggleCollapse(group.id)}
                                className="h-6 w-6 p-0"
                            >
                                {isCollapsed ? '+' : '−'}
                            </Button>
                        )}
                    </div>

                    {/* Group Content */}
                    {(!group.collapsible || !isCollapsed) && renderFilterContent()}
                </div>
            </div>
        );
    };

    if (!isOpen) return null;

    return (
        <Card className={cn(variantClasses[variant], className)}>
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center gap-2">
                    <Filter size={20} className="text-primary-gold" />
                    <h2 className="font-semibold text-text-on-light dark:text-text-on-dark">
                        Filtreler
                    </h2>
                    {getFilterCount() > 0 && (
                        <Badge variant="solid" color="gold" size="sm">
                            {getFilterCount()}
                        </Badge>
                    )}
                </div>
                {onClose && (
                    <Button
                        variant="ghost"
                        size='sm'
                        icon={X}
                        onClick={onClose}
                    />
                )}
            </div>

            {/* Applied Filters */}
            {showAppliedFilters && appliedFilters.length > 0 && (
                <div className="p-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                        Uygulanan Filtreler
                    </h3>
                    <div className="flex flex-wrap gap-2">
                        {appliedFilters.map((filter) => (
                            <Badge
                                key={`${filter.groupId}-${filter.optionId}`}
                                variant="outline"
                                color="primary"
                                size="sm"
                                className="flex items-center gap-1"
                            >
                                {filter.optionLabel}
                                <button
                                    onClick={() => removeAppliedFilter(filter.groupId)}
                                    className="hover:text-primary-red"
                                >
                                    <X size={12} />
                                </button>
                            </Badge>
                        ))}
                    </div>
                </div>
            )}

            {/* Filter Groups */}
            <div className="flex-1 overflow-y-auto">
                {filterGroups.map(renderFilterGroup)}
            </div>

            {/* Footer */}
            <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                <div className="flex gap-2">
                    <Button
                        variant="ghost"
                        size="md"
                        icon={RotateCcw}
                        onClick={handleResetFilters}
                        className="flex-1"
                    >
                        Temizle
                    </Button>
                    <Button
                        variant="primary"
                        size="md"
                        onClick={handleApplyFilters}
                        className="flex-1"
                    >
                        Uygula ({getFilterCount()})
                    </Button>
                </div>
            </div>
        </Card>
    );
};

export default FilterPanel;

// Predefined filter groups for common use cases
export const commonFilterGroups = {
    residentStatus: {
        id: 'status',
        label: 'Durum',
        type: 'multiselect' as const,
        icon: CheckCircle,
        options: [
            { id: 'active', label: 'Aktif', value: 'active',  },
            { id: 'pending', label: 'Beklemede', value: 'pending',  },
            { id: 'inactive', label: 'Pasif', value: 'inactive',  },
            { id: 'suspended', label: 'Askıya Alınmış', value: 'suspended',}
        ],
    },
    residentType: {
        id: 'type',
        label: 'Sakin Tipi',
        type: 'radio' as const,
        icon: Users,
        options: [
            { id: 'owner', label: 'Malik', value: 'owner',  },
            { id: 'tenant', label: 'Kiracı', value: 'tenant', },
            { id: 'guest', label: 'Misafir', value: 'guest',  },
        ],
    },
    building: {
        id: 'building',
        label: 'Blok',
        type: 'select' as const,
        icon: Home,
        placeholder: 'Blok seçiniz...',
        options: [
            { id: 'a', label: 'A Blok', value: 'A', },
            { id: 'b', label: 'B Blok', value: 'B', },
            { id: 'c', label: 'C Blok', value: 'C', },
        ],
    },
    debtRange: {
        id: 'debt',
        label: 'Borç Miktarı',
        type: 'numberrange' as const,
        icon: DollarSign,
    },
    registrationDate: {
        id: 'registrationDate',
        label: 'Kayıt Tarihi',
        type: 'daterange' as const,
        icon: Calendar,
    },
};
</file>

<file path="src/app/dashboard/requests/[id]/page.tsx">
'use client';

import React, { useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { AlertCircle } from 'lucide-react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Skeleton from '@/app/components/ui/Skeleton';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';
import { useRequestDetail } from '../hooks/useRequestDetail';
import { useRequestsActions } from '../hooks/useRequestsActions';

// Import detail components
import RequestDetailHeader from '../components/detail/RequestDetailHeader';
import RequestDetailInfo from '../components/detail/RequestDetailInfo';
import RequestDetailApartment from '../components/detail/RequestDetailApartment';
import RequestDetailAssignee from '../components/detail/RequestDetailAssignee';
import RequestDetailTimeline from '../components/detail/RequestDetailTimeline';
import RequestDetailStatus from '../components/detail/RequestDetailStatus';
import RequestDetailComments from '../components/detail/RequestDetailComments';
import RequestDetailImages from '../components/detail/RequestDetailImages';
import RequestDetailCost from '../components/detail/RequestDetailCost';

export default function RequestDetailPage() {
    const router = useRouter();
    const params = useParams();
    const requestId = params.id as string;

    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);

    // Use the new detail hook
    const {
        request,
        loading,
        error,
        handleEdit,
        handleDelete,
        handleStatusChange
    } = useRequestDetail(requestId);

    // Actions hook for confirmation modal
    const {
        isDeleting,
        confirmationDialog,
        hideConfirmation,
        confirmDelete
    } = useRequestsActions({
        refreshData: () => {},
        setSelectedRequests: () => {},
        setRequests: () => {}
    });

    // Breadcrumb
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Hizmet Talepleri', href: '/dashboard/requests' },
        { label: 'Talep Detayı', active: true }
    ];

    // Loading state
    if (loading) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader
                            title="Talep Detayı"
                            breadcrumbItems={breadcrumbItems}
                        />
                        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <div className="space-y-6">
                                {/* Header skeleton */}
                                <Skeleton className="h-32 w-full" />
                                
                                {/* Content grid skeleton */}
                                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                                    <div className="lg:col-span-2 space-y-6">
                                        <Skeleton className="h-48 w-full" />
                                        <Skeleton className="h-32 w-full" />
                                    </div>
                                    <div className="space-y-6">
                                        <Skeleton className="h-64 w-full" />
                                        <Skeleton className="h-48 w-full" />
                                    </div>
                                </div>
                            </div>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    // Error state
    if (error || !request) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader
                            title="Talep Detayı"
                            breadcrumbItems={breadcrumbItems}
                        />
                        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="p-6">
                                <div className="text-center">
                                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                                    <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">
                                        {error || 'Talep Bulunamadı'}  
                                    </h3>
                                    <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                                        {error || 'Aradığınız talep bulunamadı veya erişim yetkiniz bulunmuyor.'}
                                    </p>
                                    <div className="mt-6">
                                        <Button
                                            variant="primary"
                                            onClick={() => router.push('/dashboard/requests')}
                                        >
                                            Talep Listesine Dön
                                        </Button>
                                    </div>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    // Main render with modular components
    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                
                <div className="lg:ml-72">
                    <DashboardHeader
                        title={`Talep: ${request.requestId}`}
                        breadcrumbItems={breadcrumbItems}
                    />

                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        <div className="space-y-6">
                            {/* Header */}
                            <RequestDetailHeader
                                request={request}
                                onEdit={handleEdit}
                                onDelete={handleDelete}
                                onBack={() => router.back()}
                                loading={loading}
                            />

                            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                                {/* Main Content */}
                                <div className="lg:col-span-2 space-y-6">
                                    {/* Request Info */}
                                    <RequestDetailInfo request={request} />

                                    {/* Status Actions */}
                                    <RequestDetailStatus
                                        request={request}
                                        onStatusChange={handleStatusChange}
                                        loading={loading}
                                    />

                                    {/* Comments */}
                                    <RequestDetailComments
                                        requestId={request.id}
                                        commentsCount={request.commentsCount}
                                    />

                                    {/* Images */}
                                    {request.hasImages && (
                                        <RequestDetailImages
                                            requestId={request.id}
                                            imagesCount={request.imagesCount}
                                        />
                                    )}
                                </div>

                                {/* Sidebar */}
                                <div className="space-y-6">
                                    {/* Apartment Info */}
                                    <RequestDetailApartment apartment={request.apartment} />

                                    {/* Assignee Info */}
                                    <RequestDetailAssignee assignee={request.assignee} />

                                    {/* Timeline */}
                                    <RequestDetailTimeline request={request} />

                                    {/* Cost Info */}
                                    <RequestDetailCost
                                        cost={request.cost}
                                        canViewCosts={true}
                                    />
                                </div>
                            </div>
                        </div>
                    </main>
                </div>
            </div>

            {/* Delete Confirmation Modal */}
            <ConfirmationModal
                isOpen={confirmationDialog.isOpen}
                onClose={hideConfirmation}
                onConfirm={async () => {
                    await confirmDelete();
                    // Navigate back to requests list if deletion was successful
                    if (!confirmationDialog.isOpen) {
                        router.push('/dashboard/requests');
                    }
                }}
                title="Talebi Sil"
                description={
                    confirmationDialog.ticket 
                        ? `"${confirmationDialog.ticket.title}" adlı talep kalıcı olarak silinecektir. Bu işlem geri alınamaz.`
                        : "Bu talebi silmek istediğinizden emin misiniz?"
                }
                confirmText="Sil"
                cancelText="İptal"
                variant="danger"
                loading={isDeleting}
                itemName={confirmationDialog.ticket?.title}
                itemType="talep"
            />
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/units/[id]/edit/page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import TextArea from '@/app/components/ui/TextArea';
import { unitsService, Property } from '@/services';
import { useUnitsActions } from '@/hooks/useUnitsActions';
import { ArrowLeft, Save, RotateCcw } from 'lucide-react';
import Link from 'next/link';

export default function EditUnitPage() {
    const router = useRouter();
    const params = useParams();
    const unitId = params.id as string;

    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [unit, setUnit] = useState<Property | null>(null);
    const [loading, setLoading] = useState(true);
    const [formData, setFormData] = useState<Partial<Property>>({});
    const [errors, setErrors] = useState<Record<string, string>>({});

    const { updateUnit, isUpdating, error } = useUnitsActions({
        onUpdateSuccess: () => {
            router.push('/dashboard/units');
        }
    });

    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Konutlar', href: '/dashboard/units' },
        { label: 'Düzenle', active: true }
    ];

    // Load unit data
    useEffect(() => {
        const loadUnit = async () => {
            try {
                setLoading(true);
                const response = await unitsService.getUnitById(unitId);
                const unitData = response.data;
                setUnit(unitData);
                setFormData({
                    name: unitData.name || '',
                    propertyNumber: unitData.propertyNumber || '',
                    type: unitData.type || '',
                    status: unitData.status || '',
                    blockNumber: unitData.blockNumber || '',
                    floor: unitData.floor || undefined,
                    area: unitData.area || undefined
                });
            } catch (err: any) {
                console.error('Failed to load unit:', err);
                router.push('/dashboard/units');
            } finally {
                setLoading(false);
            }
        };

        if (unitId) {
            loadUnit();
        }
    }, [unitId, router]);

    const handleInputChange = (field: string, value: any) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }
    };

    const validateForm = (): boolean => {
        const newErrors: Record<string, string> = {};

        if (!formData.propertyNumber?.trim()) {
            newErrors.propertyNumber = 'Daire numarası gereklidir';
        }

        if (!formData.type) {
            newErrors.type = 'Konut tipi seçiniz';
        }

        if (!formData.status) {
            newErrors.status = 'Durum seçiniz';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        await updateUnit(unitId, formData);
    };

    const handleReset = () => {
        if (unit) {
            setFormData({
                name: unit.name || '',
                propertyNumber: unit.propertyNumber || '',
                type: unit.type || '',
                status: unit.status || '',
                blockNumber: unit.blockNumber || '',
                floor: unit.floor || undefined,
                area: unit.area || undefined
            });
            setErrors({});
        }
    };

    if (loading) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    {/* Sidebar */}
                    <Sidebar
                        isOpen={sidebarOpen}
                        onClose={() => setSidebarOpen(false)}
                    />

                    {/* Main Content Area */}
                    <div className="lg:ml-72">
                        <DashboardHeader
                            title="Konut Düzenle"
                            breadcrumbItems={breadcrumbItems}
                        />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        <Card>
                            <div className="p-6">
                                <div className="animate-pulse">
                                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4"></div>
                                    <div className="space-y-3">
                                        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                                        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                                        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                                    </div>
                                </div>
                            </div>
                        </Card>
                    </main>
                </div>
            </div>
            </ProtectedRoute>
        );
    }

    if (!unit) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    {/* Sidebar */}
                    <Sidebar
                        isOpen={sidebarOpen}
                        onClose={() => setSidebarOpen(false)}
                    />

                    {/* Main Content Area */}
                    <div className="lg:ml-72">
                        <DashboardHeader
                            title="Konut Bulunamadı"
                            breadcrumbItems={breadcrumbItems}
                        />
                        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card>
                                <div className="p-6 text-center">
                                    <p className="text-text-light-secondary dark:text-text-secondary mb-4">
                                        Düzenlemek istediğiniz konut bulunamadı.
                                    </p>
                                    <Link href="/dashboard/units">
                                        <Button variant="primary">
                                            Konutlar Listesine Dön
                                        </Button>
                                    </Link>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    <DashboardHeader
                        title={`${unit.propertyNumber || unit.name || 'Konut'} - Düzenle`}
                        breadcrumbItems={breadcrumbItems}
                    />

                    <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    {/* Back Button */}
                    <div className="mb-6">
                        <Link href="/dashboard/units">
                            <Button variant="ghost" size="sm" icon={ArrowLeft}>
                                Geri Dön
                            </Button>
                        </Link>
                    </div>

                    {/* Form */}
                    <Card>
                        <div className="p-6">
                            <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                                Konut Bilgilerini Düzenle
                            </h2>

                            {error && (
                                <div className="mb-6 p-4 bg-primary-red/10 dark:bg-primary-red/20 border border-primary-red/20 rounded-lg">
                                    <p className="text-primary-red text-sm">{error}</p>
                                </div>
                            )}

                            <form onSubmit={handleSubmit} className="space-y-6">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    {/* Property Number */}
                                    <div>
                                        <Input
                                            label="Daire Numarası"
                                            value={formData.propertyNumber || ''}
                                            onChange={(value: any) => handleInputChange('propertyNumber', value)}
                                            error={errors.propertyNumber}
                                            placeholder="Örn: A1, B25, Villa-1"
                                            required
                                        />
                                    </div>

                                    {/* Name */}
                                    <div>
                                        <Input
                                            label="İsim (Opsiyonel)"
                                            value={formData.name || ''}
                                            onChange={(value: any) => handleInputChange('name', value)}
                                            placeholder="Konut ismi"
                                        />
                                    </div>

                                    {/* Type */}
                                    <div>
                                        <Select
                                            label="Konut Tipi"
                                            value={formData.type || ''}
                                            onChange={(value: any) => handleInputChange('type', value)}
                                            error={errors.type}
                                            options={[
                                                { value: '', label: 'Tip Seçiniz' },
                                                { value: 'RESIDENCE', label: 'Daire' },
                                                { value: 'VILLA', label: 'Villa' },
                                                { value: 'COMMERCIAL', label: 'Ticari' },
                                                { value: 'PARKING', label: 'Otopark' }
                                            ]}
                                            required
                                        />
                                    </div>

                                    {/* Status */}
                                    <div>
                                        <Select
                                            label="Durum"
                                            value={formData.status || ''}
                                            onChange={(value: any) => handleInputChange('status', value)}
                                            error={errors.status}
                                            options={[
                                                { value: '', label: 'Durum Seçiniz' },
                                                { value: 'OCCUPIED', label: 'Dolu' },
                                                { value: 'AVAILABLE', label: 'Boş' },
                                                { value: 'UNDER_MAINTENANCE', label: 'Bakımda' },
                                                { value: 'RESERVED', label: 'Rezerve' }
                                            ]}
                                            required
                                        />
                                    </div>

                                    {/* Block Number */}
                                    <div>
                                        <Input
                                            label="Blok"
                                            value={formData.blockNumber || ''}
                                            onChange={(value: any) => handleInputChange('blockNumber', value)}
                                            placeholder="Örn: A, B, C"
                                        />
                                    </div>

                                    {/* Floor */}
                                    <div>
                                        <Input
                                            label="Kat"
                                            type="number"
                                            value={formData.floor || ''}
                                            onChange={(value: any) => handleInputChange('floor', value)}
                                            placeholder="Kat numarası"
                                        />
                                    </div>

                                    {/* Area */}
                                    <div>
                                        <Input
                                            label="Alan (m²)"
                                            type="number"
                                            value={formData.area || ''}
                                            onChange={(value: any) => handleInputChange('area', value)}
                                            placeholder="Metrekare"
                                        />
                                    </div>

                                    {/* Rooms */}
                                    <div>
                                        <Input
                                            label="Oda Sayısı"
                                            value={formData.rooms || ''}
                                            onChange={(value: any) => handleInputChange('rooms', value)}
                                            placeholder="Örn: 2+1, 3+1"
                                        />
                                    </div>
                                </div>

                                {/* Description */}
                                <div>
                                    <TextArea
                                        label="Açıklama"
                                        value={formData.description || ''}
                                        onChange={(value) => handleInputChange('description', value)}
                                        placeholder="Konut hakkında ek bilgiler..."
                                        rows={4}
                                    />
                                </div>

                                {/* Action Buttons */}
                                <div className="flex justify-end gap-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                                    <Button
                                        type="button"
                                        variant="secondary"
                                        onClick={handleReset}
                                        icon={RotateCcw}
                                        disabled={isUpdating}
                                    >
                                        Sıfırla
                                    </Button>
                                    <Button
                                        type="submit"
                                        variant="primary"
                                        icon={Save}
                                        isLoading={isUpdating}
                                        disabled={isUpdating}
                                    >
                                        {isUpdating ? 'Kaydediliyor...' : 'Kaydet'}
                                    </Button>
                                </div>
                            </form>
                        </div>
                    </Card>
                </main>
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/services/property.service.ts">
// Property Service - Application Layer
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';
import {
    Property,
    CreatePropertyDto,
    UpdatePropertyDto,
    PropertyFilterParams,
    PropertySearchParams,
    PropertyListResponse,
    PropertyStatistics,
    OccupancyStats,
    QuickStats,
    PropertyActivity,
    BlockResponse,
    FilterOptions,
    BulkUpdateDto,
    BulkAssignmentDto,
    BulkActionResponse,
    ExportParams,
    ImportResult,
    MaintenanceRecord,
    CreateMaintenanceDto,
    CompleteMaintenanceDto,
} from './types/property.types';
import { ApiResponse, PaginatedResponse } from './core/types';

class PropertyService extends BaseService<Property, CreatePropertyDto, UpdatePropertyDto> {
    protected baseEndpoint = apiConfig.endpoints.properties.admin.base;

    constructor() {
        super('PropertyService');
    }

    // === PROPERTY LISTING & FILTERING === //

    /**
     * Get all properties with pagination and filtering
     * GET /admin/properties
     */
    async getAllProperties(params?: PropertyFilterParams): Promise<PaginatedResponse<Property>> {
        try {
            this.logger.info('Fetching all properties', params);

            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<PropertyListResponse>(
                `${this.baseEndpoint}${queryParams}`
            );

            // Response yapısını kontrol et
            this.logger.info('Raw response:', response);
            
            // Response.data.data varsa paginated response, yoksa direkt array
            let properties: Property[];
            let pagination = {
                total: 0,
                page: 1,
                limit: 10,
                totalPages: 1
            };

            if (response.data && response.data.data && Array.isArray(response.data.data)) {
                // Paginated response
                properties = response.data.data;
                pagination = response.data.pagination || pagination;
                this.logger.info(`Fetched ${properties.length} properties (paginated)`);
            } else if (response.data && Array.isArray(response.data)) {
                // Direct array response
                properties = response.data;
                this.logger.info(`Fetched ${properties.length} properties (direct array)`);
            } else {
                // Empty or unexpected response
                properties = [];
                this.logger.warn('Unexpected response structure, returning empty array');
            }

            return {
                data: properties,
                total: pagination.total,
                page: pagination.page,
                limit: pagination.limit,
                totalPages: pagination.totalPages,
                pagination: pagination,
            };
        } catch (error) {
            this.logger.error('Failed to fetch properties', error);
            throw error;
        }
    }

    /**
     * Get user's own properties
     * GET /admin/properties/my-properties
     */
    async getMyProperties(): Promise<ApiResponse<Property[]>> {
        try {
            this.logger.info('Fetching user properties');

            const response = await apiClient.get<Property[]>(
                '/admin/properties/my-properties'
            );

            this.logger.info(`Fetched ${response.data?.length || 0} user properties`);
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch user properties', error);
            throw error;
        }
    }

    /**
     * Search properties with advanced filters
     * GET /admin/properties/search
     */
    async searchProperties(params: PropertySearchParams): Promise<Property[]> {
        try {
            this.logger.info('Searching properties', params);

            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<Property[]>(
                `${apiConfig.endpoints.properties.admin.search}${queryParams}`
            );

            this.logger.info(`Search returned ${response.data.length} results`);
            return response.data;
        } catch (error) {
            this.logger.error('Failed to search properties', error);
            throw error;
        }
    }

    /**
     * Get properties by status
     * GET /admin/properties/by-status
     */
    async getPropertiesByStatus(
        status: 'AVAILABLE' | 'OCCUPIED' | 'UNDER_MAINTENANCE' | 'RESERVED'
    ): Promise<Property[]> {
        try {
            this.logger.info(`Fetching properties with status: ${status}`);

            const response = await apiClient.get<Property[]>(
                `${apiConfig.endpoints.properties.admin.byStatus}?status=${status}`
            );

            this.logger.info(`Fetched ${response.data.length} properties with status ${status}`);
            return response.data;
        } catch (error) {
            this.logger.error(`Failed to fetch properties by status: ${status}`, error);
            throw error;
        }
    }

    /**
     * Get properties by owner
     * GET /admin/properties/owner/:ownerId
     */
    async getPropertiesByOwner(ownerId: string): Promise<Property[]> {
        try {
            this.logger.info(`Fetching properties for owner: ${ownerId}`);

            const response = await apiClient.get<{
                success: boolean;
                message: string;
                data: Property[];
            }>(
                apiConfig.endpoints.properties.admin.byOwner(ownerId)
            );

            this.logger.info(`Fetched ${response.data.data.length} properties for owner`);
            return response.data.data;
        } catch (error) {
            this.logger.error(`Failed to fetch properties for owner: ${ownerId}`, error);
            throw error;
        }
    }

    /**
     * Get properties by tenant
     * GET /admin/properties/by-tenant
     */
    async getPropertiesByTenant(tenantId: string): Promise<Property[]> {
        try {
            this.logger.info(`Fetching properties for tenant: ${tenantId}`);

            const response = await apiClient.get<Property[]>(
                `${apiConfig.endpoints.properties.admin.byTenant}?tenantId=${tenantId}`
            );

            this.logger.info(`Fetched ${response.data.length} properties for tenant`);
            return response.data;
        } catch (error) {
            this.logger.error(`Failed to fetch properties for tenant: ${tenantId}`, error);
            throw error;
        }
    }

    // === PROPERTY MANAGEMENT === //

    /**
     * Create new property
     * POST /admin/properties
     */
    async createProperty(data: CreatePropertyDto): Promise<ApiResponse<Property>> {
        try {
            this.logger.info('Creating new property', { propertyNumber: data.propertyNumber });

            return await this.create(data);
        } catch (error) {
            this.logger.error('Failed to create property', error);
            throw error;
        }
    }

    /**
     * Get property by ID
     * GET /admin/properties/{id}
     */
    async getPropertyById(id: string): Promise<ApiResponse<Property>> {
        try {
            this.logger.info(`Fetching property with ID: ${id}`);

            return await this.getById(id);
        } catch (error) {
            this.logger.error(`Failed to fetch property with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Update property
     * PUT /admin/properties/{id}
     */
    async updateProperty(id: string, data: UpdatePropertyDto): Promise<ApiResponse<Property>> {
        try {
            this.logger.info(`Updating property with ID: ${id}`, data);

            return await this.update(id, data);
        } catch (error) {
            this.logger.error(`Failed to update property with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Delete property
     * DELETE /admin/properties/{id}
     */
    async deleteProperty(id: string): Promise<ApiResponse<void>> {
        try {
            this.logger.info(`Deleting property with ID: ${id}`);

            return await this.delete(id);
        } catch (error) {
            this.logger.error(`Failed to delete property with ID: ${id}`, error);
            throw error;
        }
    }

    // === STATISTICS & ANALYTICS (Future Endpoints) === //

    /**
     * Get property statistics
     * GET /admin/properties/statistics (Future Endpoint)
     */
    async getPropertyStatistics(dateRange?: string, propertyGroup?: string): Promise<ApiResponse<PropertyStatistics>> {
        try {
            this.logger.info('Fetching property statistics', { dateRange, propertyGroup });

            const params = this.buildQueryParams({ dateRange, propertyGroup });
            const response = await apiClient.get<PropertyStatistics>(
                `${apiConfig.endpoints.properties.admin.statistics}${params}`
            );

            this.logger.info('Fetched property statistics successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch property statistics', error);
            throw error;
        }
    }

    /**
     * Get occupancy statistics
     * GET /admin/properties/occupancy-stats (Future Endpoint)
     */
    async getOccupancyStats(days: number = 30): Promise<ApiResponse<OccupancyStats>> {
        try {
            this.logger.info(`Fetching occupancy stats for ${days} days`);

            const response = await apiClient.get<OccupancyStats>(
                `${apiConfig.endpoints.properties.admin.occupancyStats}?days=${days}`
            );

            this.logger.info('Fetched occupancy statistics successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch occupancy statistics', error);
            throw error;
        }
    }

    /**
     * Get quick stats for dashboard
     * GET /admin/properties/quick-stats (Future Endpoint)
     */
    async getQuickStats(): Promise<ApiResponse<QuickStats>> {
        try {
            this.logger.info('Fetching quick stats');

            const response = await apiClient.get<QuickStats>(
                apiConfig.endpoints.properties.admin.quickStats
            );

            this.logger.info('Fetched quick stats successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch quick stats', error);
            throw error;
        }
    }

    /**
     * Get recent property activities
     * GET /admin/properties/recent-activities (Future Endpoint)
     */
    async getRecentActivities(limit: number = 20, days: number = 7): Promise<ApiResponse<PropertyActivity[]>> {
        try {
            this.logger.info(`Fetching recent activities (limit: ${limit}, days: ${days})`);

            const params = this.buildQueryParams({ limit, days });
            const response = await apiClient.get<PropertyActivity[]>(
                `${apiConfig.endpoints.properties.admin.recentActivities}${params}`
            );

            this.logger.info(`Fetched ${response.data.length} recent activities`);
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch recent activities', error);
            throw error;
        }
    }

    // === ADVANCED FILTERING (Future Endpoints) === //

    /**
     * Get properties by block
     * GET /admin/properties/by-block/{blockNumber} (Future Endpoint)
     */
    async getPropertiesByBlock(blockNumber: string, includeStats: boolean = false): Promise<ApiResponse<BlockResponse>> {
        try {
            this.logger.info(`Fetching properties for block: ${blockNumber}`);

            const params = this.buildQueryParams({ includeStats });
            const response = await apiClient.get<BlockResponse>(
                `${apiConfig.endpoints.properties.admin.byBlock(blockNumber)}${params}`
            );

            this.logger.info(`Fetched block data for ${blockNumber}`);
            return response;
        } catch (error) {
            this.logger.error(`Failed to fetch properties for block: ${blockNumber}`, error);
            throw error;
        }
    }

    /**
     * Get filter options
     * GET /admin/properties/filter-options (Future Endpoint)
     */
    async getFilterOptions(): Promise<ApiResponse<FilterOptions>> {
        try {
            this.logger.info('Fetching filter options');

            const response = await apiClient.get<FilterOptions>(
                apiConfig.endpoints.properties.admin.filterOptions
            );

            this.logger.info('Fetched filter options successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch filter options', error);
            throw error;
        }
    }

    // === BULK OPERATIONS (Future Endpoints) === //

    /**
     * Bulk update properties
     * POST /admin/properties/bulk-update (Future Endpoint)
     */
    async bulkUpdateProperties(data: BulkUpdateDto): Promise<ApiResponse<BulkActionResponse>> {
        try {
            this.logger.info(`Bulk updating ${data.propertyIds.length} properties`);

            const response = await apiClient.post<BulkActionResponse>(
                apiConfig.endpoints.properties.admin.bulkUpdate,
                data
            );

            this.logger.info('Bulk update completed successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to bulk update properties', error);
            throw error;
        }
    }

    /**
     * Bulk assign tenants
     * POST /admin/properties/bulk-assign-tenants (Future Endpoint)
     */
    async bulkAssignTenants(data: BulkAssignmentDto): Promise<ApiResponse<BulkActionResponse>> {
        try {
            this.logger.info(`Bulk assigning tenants to ${data.assignments.length} properties`);

            const response = await apiClient.post<BulkActionResponse>(
                apiConfig.endpoints.properties.admin.bulkAssignTenants,
                data
            );

            this.logger.info('Bulk tenant assignment completed successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to bulk assign tenants', error);
            throw error;
        }
    }

    // === EXPORT/IMPORT (Future Endpoints) === //

    /**
     * Export properties
     * GET /admin/properties/export (Future Endpoint)
     */
    async exportProperties(params: ExportParams): Promise<Blob> {
        try {
            this.logger.info('Exporting properties', params);

            const queryParams = this.buildQueryParams(params);
            // responseType parametresini kaldır
            const response = await apiClient.get(
                `${apiConfig.endpoints.properties.admin.export}${queryParams}`
            );

            this.logger.info('Properties exported successfully');
            return response.data;
        } catch (error) {
            this.logger.error('Failed to export properties', error);
            throw error;
        }
    }

    /**
     * Import properties
     * POST /admin/properties/import (Future Endpoint)
     */
    async importProperties(
        file: File,
        options: { updateExisting: boolean; skipErrors: boolean }
    ): Promise<ApiResponse<ImportResult>> {
        try {
            this.logger.info('Importing properties', { fileName: file.name, options });

            const formData = new FormData();
            formData.append('file', file);
            formData.append('options', JSON.stringify(options));

            // headers parametresini kaldır
            const response = await apiClient.post<ImportResult>(
                apiConfig.endpoints.properties.admin.import,
                formData
            );

            this.logger.info('Properties imported successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to import properties', error);
            throw error;
        }
    }

    // === MAINTENANCE MANAGEMENT (Future Endpoints) === //

    /**
     * Set property to maintenance
     * POST /admin/properties/{id}/maintenance (Future Endpoint)
     */
    async setPropertyMaintenance(id: string, data: CreateMaintenanceDto): Promise<ApiResponse<MaintenanceRecord>> {
        try {
            this.logger.info(`Setting property ${id} to maintenance`, data);

            const response = await apiClient.post<MaintenanceRecord>(
                apiConfig.endpoints.properties.admin.setMaintenance(id),
                data
            );

            this.logger.info('Property set to maintenance successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to set property ${id} to maintenance`, error);
            throw error;
        }
    }

    /**
     * Complete property maintenance
     * DELETE /admin/properties/{id}/maintenance (Future Endpoint)
     */
    async completePropertyMaintenance(id: string, data: CompleteMaintenanceDto): Promise<ApiResponse<Property>> {
        try {
            this.logger.info(`Completing maintenance for property ${id}`, data);

            // data parametresini kaldır
            const response = await apiClient.delete<Property>(
                apiConfig.endpoints.properties.admin.completeMaintenance(id)
            );

            this.logger.info('Property maintenance completed successfully');
            return response;
        } catch (error) {
            this.logger.error(`Failed to complete maintenance for property ${id}`, error);
            throw error;
        }
    }

    // === UTILITY METHODS === //

    /**
     * Calculate occupancy rate
     */
    calculateOccupancyRate(occupied: number, total: number): number {
        if (total === 0) return 0;
        return Math.round((occupied / total) * 100);
    }

    /**
     * Format property display name
     */
    formatPropertyDisplayName(property: Property): string {
        const parts = [];
        if (property.blockNumber) parts.push(property.blockNumber);
        if (property.propertyNumber) parts.push(property.propertyNumber);
        if (parts.length === 0) parts.push(property.name);
        return parts.join('-');
    }

    /**
     * Get status display info
     */
    getStatusInfo(status: Property['status']) {
        const statusConfig = {
            AVAILABLE: { label: 'Boş', color: 'blue' },
            OCCUPIED: { label: 'Dolu', color: 'green' },
            UNDER_MAINTENANCE: { label: 'Bakım', color: 'orange' },
            RESERVED: { label: 'Rezerve', color: 'purple' },
        };
        return statusConfig[status] || { label: status, color: 'gray' };
    }

    /**
     * Get type display info
     */
    getTypeInfo(type: Property['type']) {
        const typeConfig = {
            RESIDENCE: { label: 'Daire', icon: 'Building' },
            VILLA: { label: 'Villa', icon: 'Home' },
            COMMERCIAL: { label: 'Ticari', icon: 'Store' },
            OFFICE: { label: 'Ofis', icon: 'Briefcase' },
        };
        return typeConfig[type] || { label: type, icon: 'Building' };
    }

    /**
     * Get resident count
     * GET /admin/properties/resident/count
     */
    async getResidentCount(): Promise<number> {
        const response = await apiClient.get(apiConfig.endpoints.properties.admin.residentCount);
        return response.data.count;
    }

    /**
     * Get villa count
     * GET /admin/properties/villa/count
     */
    async getVillaCount(): Promise<number> {
        const response = await apiClient.get(apiConfig.endpoints.properties.admin.villaCount);
        return response.data.count;
    }

    /**
     * Get available count
     * GET /admin/properties/avaliable/count
     */
    async getAvailableCount(): Promise<number> {
        const response = await apiClient.get(apiConfig.endpoints.properties.admin.availableCount);
        return response.data.count;
    }

    /**
     * Get total properties count
     * GET /admin/properties/count
     */
    async getAllPropertiesCount(): Promise<number> {
        try {
            this.logger.info('Fetching total properties count');
            const response = await apiClient.get(apiConfig.endpoints.properties.admin.totalCount);
            this.logger.info('Total properties count response:', response.data);
            
            // Handle different response structures
            if (response.data && typeof response.data.count === 'number') {
                return response.data.count;
            } else if (response.data && response.data.data && typeof response.data.data.count === 'number') {
                return response.data.data.count;
            } else {
                this.logger.warn('Unexpected response structure for total properties count:', response.data);
                return 0;
            }
        } catch (error) {
            this.logger.error('Failed to fetch total properties count:', error);
            throw error;
        }
    }

    /**
     * Get assigned properties count
     * GET /admin/properties/assigned/count
     */
    async getAssignedPropertiesCount(): Promise<number> {
        try {
            this.logger.info('Fetching assigned properties count');
            const response = await apiClient.get(apiConfig.endpoints.properties.admin.assignedCount);
            this.logger.info('Assigned properties count response:', response.data);
            
            // Handle different response structures
            if (response.data && typeof response.data.count === 'number') {
                return response.data.count;
            } else if (response.data && response.data.data && typeof response.data.data.count === 'number') {
                return response.data.data.count;
            } else {
                this.logger.warn('Unexpected response structure for assigned properties count:', response.data);
                return 0;
            }
        } catch (error) {
            this.logger.error('Failed to fetch assigned properties count:', error);
            throw error;
        }
    }
}

export default new PropertyService();
export { PropertyService };
</file>

<file path="src/services/ticket.service.ts">
import { apiClient } from './api/client';
import { ApiResponse } from './core/types';

export interface Ticket {
  id: string;
  createdAt: string;
  updatedAt: string;
  deletedAt?: string;
  ticketNumber: string;
  title: string;
  description: string;
  type: string;
  priority: string;
  status: string;
  category: string;
  dueDate?: string;
  resolvedAt?: string;
  closedAt?: string;
  creator: any;
  assignee?: any;
  property?: any;
  comments?: any[];
  attachments?: any[];
}

export interface CreateTicketRequest {
  title: string;
  description: string;
  type: string;
  priority: string;
  category: string;
  propertyId: string;
  creatorId: string | number;
  initialComment?: string;
}

export interface CreateAttachmentRequest {
  fileName: string;
  fileUrl: string;
  fileType: string;
  fileSize: number;
}

export interface UpdateTicketRequest {
  title?: string;
  description?: string;
  type?: string;
  priority?: string;
  category?: string;
  propertyId?: string;
  assigneeId?: string;
  dueDate?: string;
  status?: string;
}

export interface TicketPaginationResponse {
  data: Ticket[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
}

export interface TicketFilters {
  priority?: string;
  assigneeId?: string;
  propertyId?: string;
  creatorId?: string;
  filter?: 'open' | 'overdue' | 'dueToday' | 'unassigned';
  page?: number;
  limit?: number;
  orderColumn?: string;
  orderBy?: 'ASC' | 'DESC';
  search?: string;
  type?: string;
  status?: string | string[];
}

export const ticketService = {
  // Create new ticket
  async createTicket(data: CreateTicketRequest): Promise<Ticket> {
    console.log('Sending ticket creation request:', JSON.stringify(data, null, 2));
    const response: ApiResponse<Ticket> = await apiClient.post<Ticket>('/admin/tickets', data);
    console.log('Ticket creation response:', response);
    return response.data;
  },

  // Yeni ana endpoint - pagination ile
  async getTickets(filters: TicketFilters = {}): Promise<ApiResponse<TicketPaginationResponse>> {
    const params = new URLSearchParams();

    // Pagination params
    if (filters.page) params.append('page', filters.page.toString());
    if (filters.limit) params.append('limit', filters.limit.toString());

    // Filter params
    if (filters.priority) params.append('priority', filters.priority);
    if (filters.assigneeId) params.append('assigneeId', filters.assigneeId);
    if (filters.propertyId) params.append('propertyId', filters.propertyId);
    if (filters.creatorId) params.append('creatorId', filters.creatorId);
    if (filters.filter) params.append('filter', filters.filter);
    if (filters.search) params.append('search', filters.search);
    if (filters.type) params.append('type', filters.type);
    if (filters.status) {
      if (Array.isArray(filters.status)) {
        filters.status.forEach(status => params.append('status', status));
      } else {
        params.append('status', filters.status);
      }
    }

    // Order params
    if (filters.orderColumn) params.append('orderColumn', filters.orderColumn);
    if (filters.orderBy) params.append('orderBy', filters.orderBy);

    const queryString = params.toString();
    const url = `/admin/tickets${queryString ? `?${queryString}` : ''}`;

    const response: ApiResponse<TicketPaginationResponse> = await apiClient.get<TicketPaginationResponse>(url);
    return response;
  },

  // Eski metodları geriye uyumluluk için koruyorum
  async getOpenTickets(): Promise<TicketPaginationResponse> {
    const response = await this.getTickets({ filter: 'open', limit: 100 });
    return response.data;
  },

  async getTicketsByStatus(status: string): Promise<TicketPaginationResponse> {
    const response = await this.getTickets({ status, limit: 100 });
    return response.data;
  },

  // Get tickets by user ID - special endpoint that returns direct array
  async getTicketsByUserId(userId: string): Promise<Ticket[]> {
    console.log(`🎫 Fetching tickets for userId: ${userId}`);
    
    // This endpoint returns direct array without data wrapper
    const response = await apiClient.get<Ticket[]>(`/admin/tickets/user/${userId}`);
    
    // API returns direct array, so we return response directly (not response.data)
    // because apiClient already extracts the response body
    console.log(`✅ Raw response for user ${userId}:`, response);
    
    // Handle different response formats gracefully
    if (Array.isArray(response)) {
      return response;
    }
    
    // If response has data property (shouldn't happen but safety check)
    if (response && typeof response === 'object' && 'data' in response) {
      return (response as any).data || [];
    }
    
    console.warn(`⚠️ Unexpected response format for user ${userId}:`, response);
    return [];
  },

  // --- Ticket Status Update Methods ---
  async startProgress(id: string): Promise<Ticket> {
    const response: ApiResponse<Ticket> = await apiClient.put<Ticket>(`/admin/tickets/${id}/start-progress`, {});
    return response.data;
  },
  async markWaiting(id: string): Promise<Ticket> {
    const response: ApiResponse<Ticket> = await apiClient.put<Ticket>(`/admin/tickets/${id}/mark-waiting`, {});
    return response.data;
  },
  async resolve(id: string): Promise<Ticket> {
    const response: ApiResponse<Ticket> = await apiClient.put<Ticket>(`/admin/tickets/${id}/resolve`, {});
    return response.data;
  },
  async close(id: string): Promise<Ticket> {
    const response: ApiResponse<Ticket> = await apiClient.put<Ticket>(`/admin/tickets/${id}/close`, {});
    return response.data;
  },
  async cancel(id: string): Promise<Ticket> {
    const response: ApiResponse<Ticket> = await apiClient.put<Ticket>(`/admin/tickets/${id}/cancel`, {});
    return response.data;
  },
  // --- Ticket Comments ---
  async getComments(id: string): Promise<any[]> {
    const response: ApiResponse<any[]> = await apiClient.get<any[]>(`/admin/tickets/${id}/comments`);
    return response.data;
  },
  async addComment(id: string, content: string): Promise<any> {
    const response: ApiResponse<any> = await apiClient.post<any>(`/admin/tickets/${id}/comments`, { content });
    return response.data;
  },

  // --- Ticket Attachments ---
  async addAttachment(ticketId: string, data: CreateAttachmentRequest): Promise<any> {
    const response: ApiResponse<any> = await apiClient.post<any>(`/admin/tickets/${ticketId}/attachments`, data);
    return response.data;
  },

  // --- Ticket CRUD Operations ---
  async getTicketById(id: string): Promise<Ticket> {
    const response: ApiResponse<Ticket> = await apiClient.get<Ticket>(`/admin/tickets/${id}`);
    return response.data;
  },

  async updateTicket(id: string, data: UpdateTicketRequest): Promise<Ticket> {
    console.log('Updating ticket:', id, data);
    const response: ApiResponse<Ticket> = await apiClient.put<Ticket>(`/admin/tickets/${id}`, data);
    console.log('Ticket update response:', response);
    return response.data;
  },

  async deleteTicket(id: string): Promise<void> {
    console.log('Deleting ticket:', id);
    await apiClient.delete(`/admin/tickets/${id}`);
    console.log('Ticket deleted successfully');
  },

  // --- Ticket Statistics ---
  async getMonthlyStats(): Promise<{
    currentMonthCount: number;
    previousMonthCount: number;
    percentageChange: number;
    changeDirection: 'increase' | 'decrease';
    currentMonthName: string;
    previousMonthName: string;
  }> {
    const response: ApiResponse<{
      currentMonthCount: number;
      previousMonthCount: number;
      percentageChange: number;
      changeDirection: 'increase' | 'decrease';
      currentMonthName: string;
      previousMonthName: string;
    }> = await apiClient.get<{
      currentMonthCount: number;
      previousMonthCount: number;
      percentageChange: number;
      changeDirection: 'increase' | 'decrease';
      currentMonthName: string;
      previousMonthName: string;
    }>('/admin/tickets/monthly-stats');
    return response.data;
  },
};
</file>

<file path="src/app/components/ui/Sidebar.tsx">
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { cn } from '@/lib/utils';
import { useAuth } from '@/app/components/auth/AuthProvider';
import {
    BarChart3,
    Users,
    Home,
    DollarSign,
    Megaphone,
    Wrench,
    TrendingUp,
    Settings,
    ChevronDown,
    ChevronRight,
    User,
    UserPlus,
    UserCheck,
    Building,
    MapPin,
    RotateCcw,
    CreditCard,
    History,
    FileText,
    Receipt,
    Bell,
    Plus,
    Archive,
    AlertCircle,
    Clock,
    CheckCircle,
    FileBarChart,
    PieChart,
    Activity,
    Info,
    Shield,
    Cog,
    LogOut,
    MoreVertical
} from 'lucide-react';

interface MenuItemProps {
    title: string;
    icon: React.ComponentType<{ className?: string }>;
    href?: string;
    children?: SubMenuItemProps[];
    isOpen?: boolean;
    onToggle?: () => void;
}

interface SubMenuItemProps {
    title: string;
    icon: React.ComponentType<{ className?: string }>;
    href: string;
}

const menuItems: MenuItemProps[] = [
    {
        title: 'Dashboard',
        icon: BarChart3,
        href: '/dashboard'
    },
    {
        title: 'Konut Yönetimi',
        icon: Building,
        href: '/dashboard/units'
    },
    {
        title: 'Sakin Yönetimi',
        icon: User,
        href: '/dashboard/residents'
    },
    {
        title: 'Hizmet/Talep Yönetimi',
        icon: Wrench,
        href: '/dashboard/requests'
    },
    {
        title: 'Finansal İşlemler',
        icon: DollarSign,
        href: '/dashboard/financial'
    },
    {
        title: 'Duyurular',
        icon: Megaphone,
        href: '/dashboard/announcements'
    },
    {
        title: 'Ayarlar',
        icon: Settings,
        href: '/dashboard/settings'
    }
    // {
    //     title: 'Finansal İşlemler',
    //     icon: DollarSign,
    //     children: [
    //         { title: 'Aidat Takibi', icon: CreditCard, href: '/dashboard/financial/dues' },
    //         { title: 'Ödeme Geçmişi', icon: History, href: '/dashboard/financial/payments' },
    //         { title: 'Borç Raporları', icon: FileText, href: '/dashboard/financial/debts' },
    //         { title: 'Fatura Yönetimi', icon: Receipt, href: '/dashboard/financial/bills' }
    //     ]
    // },
    // {
    //     title: 'Duyurular',
    //     icon: Megaphone,
    //     children: [
    //         { title: 'Aktif Duyurular', icon: Bell, href: '/dashboard/announcements' },
    //         { title: 'Yeni Duyuru', icon: Plus, href: '/dashboard/announcements/create' },
    //         { title: 'Duyuru Arşivi', icon: Archive, href: '/dashboard/announcements/archive' }
    //     ]
    // },
    // {
    //     title: 'Hizmet Talepleri',
    //     icon: Wrench,
    //     children: [
    //         { title: 'Açık Talepler', icon: AlertCircle, href: '/dashboard/requests' },
    //         { title: 'İşlem Bekleyenler', icon: Clock, href: '/dashboard/requests/waiting' },
    //         { title: 'Tamamlananlar', icon: CheckCircle, href: '/dashboard/requests/resolved' }
    //     ]
    // },
    // {
    //     title: 'Raporlar',
    //     icon: TrendingUp,
    //     children: [
    //         { title: 'Mali Raporlar', icon: FileBarChart, href: '/dashboard/reports/financial' },
    //         { title: 'Doluluk Raporları', icon: PieChart, href: '/dashboard/reports/occupancy' },
    //         { title: 'Hizmet Raporları', icon: Activity, href: '/dashboard/reports/services' }
    //     ]
    // },
    // {
    //     title: 'Ayarlar',
    //     icon: Settings,
    //     children: [
    //         { title: 'Site Bilgileri', icon: Info, href: '/settings/website-info' },
    //         { title: 'Kullanıcı Yönetimi', icon: Shield, href: '/settings/user-management' },
    //         { title: 'Sistem Ayarları', icon: Cog, href: '/settings/system-settings' }
    //     ]
    // }
];

function MenuItem({ title, icon: Icon, href, children, isOpen, onToggle }: MenuItemProps) {
    const pathname = usePathname();
    const isActive = href ? pathname === href : children?.some(child => pathname === child.href);
    const hasChildren = children && children.length > 0;

    if (!hasChildren && href) {
        return (
            <Link
                href={href}
                className={cn(
                    'flex items-center gap-3 px-4 py-3 text-sm font-medium rounded-xl transition-all duration-200',
                    'hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg',
                    isActive
                        ? 'bg-primary-gold/10 dark:bg-primary-gold/20 text-primary-gold border-r-2 border-primary-gold'
                        : 'text-text-light-secondary dark:text-text-secondary hover:text-primary-gold'
                )}
            >
                <Icon className="h-5 w-5 flex-shrink-0" />
                <span className="flex-1">{title}</span>
            </Link>
        );
    }

    return (
        <div className="space-y-1">
            <button
                onClick={onToggle}
                className={cn(
                    'w-full flex items-center gap-3 px-4 py-3 text-sm font-medium rounded-xl transition-all duration-200',
                    'hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg',
                    isActive
                        ? 'bg-primary-gold/10 dark:bg-primary-gold/20 text-primary-gold'
                        : 'text-text-light-secondary dark:text-text-secondary hover:text-primary-gold'
                )}
            >
                <Icon className="h-5 w-5 flex-shrink-0" />
                <span className="flex-1 text-left">{title}</span>
                {hasChildren && (
                    isOpen ? (
                        <ChevronDown className="h-4 w-4 flex-shrink-0" />
                    ) : (
                        <ChevronRight className="h-4 w-4 flex-shrink-0" />
                    )
                )}
            </button>

            {/* Sub Menu */}
            {hasChildren && isOpen && (
                <div className="ml-4 space-y-1 transition-all duration-200 ease-in-out">
                    {children?.map((subItem) => (
                        <SubMenuItem key={subItem.href} {...subItem} />
                    ))}
                </div>
            )}
        </div>
    );
}

function SubMenuItem({ title, icon: Icon, href }: SubMenuItemProps) {
    const pathname = usePathname();
    const isActive = pathname === href;

    return (
        <Link
            href={href}
            className={cn(
                'flex items-center gap-3 px-4 py-2.5 text-sm rounded-lg transition-all duration-200',
                'hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg',
                isActive
                    ? 'bg-primary-gold/15 dark:bg-primary-gold/25 text-primary-gold font-medium'
                    : 'text-text-light-muted dark:text-text-muted hover:text-text-light-secondary dark:hover:text-text-secondary'
            )}
        >
            <Icon className="h-4 w-4 flex-shrink-0" />
            <span>{title}</span>
        </Link>
    );
}

interface SidebarProps {
    isOpen: boolean;
    onClose: () => void;
}

export default function Sidebar({ isOpen, onClose }: SidebarProps) {
    const [openMenus, setOpenMenus] = useState<Set<string>>(new Set(['Dashboard']));
    const { user, logout } = useAuth();

    const handleLogout = async () => {
        try {
            await logout();
        } catch (error) {
            console.error('Çıkış yapma hatası:', error);
        }
    };

    const toggleMenu = (menuTitle: string) => {
        setOpenMenus(prev => {
            const newSet = new Set(prev);
            if (newSet.has(menuTitle)) {
                newSet.delete(menuTitle);
            } else {
                newSet.add(menuTitle);
            }
            return newSet;
        });
    };

    return (
        <>
            {/* Mobile Overlay */}
            {isOpen && (
                <div
                    className="fixed inset-0 bg-black/30 backdrop-blur-sm z-40 lg:hidden"
                    onClick={onClose}
                />
            )}

            {/* Sidebar */}
            <aside
                className={cn(
                    'fixed top-0 left-0 h-screen w-72 bg-background-light-card dark:bg-background-card',
                    'border-r border-border-light dark:border-border-dark',
                    'shadow-xl backdrop-blur-xl bg-background-light-card/95 dark:bg-background-card/95',
                    'transform transition-transform duration-300 ease-in-out z-50',
                    'lg:translate-x-0 lg:z-auto flex flex-col',
                    isOpen ? 'translate-x-0' : '-translate-x-full'
                )}
            >
                {/* Logo Area */}
                <div className="h-24 flex items-center px-6 border-b border-border-light dark:border-border-dark">
                    <div className="flex items-center gap-3">
                        <img
                            src="/images/NinetyNine Logo.png"
                            alt="NinetyNine Logo"
                            className="h-12 w-auto"
                        />
                        <div>
                            <h1 className="text-lg font-bold gradient-gold-start text-primary-gold">
                                NinetyNine
                            </h1>
                            <p className="text-xs text-text-light-muted dark:text-text-muted">
                                Admin Panel
                            </p>
                        </div>
                    </div>
                </div>

                {/* Navigation */}
                <nav className="flex-1 overflow-y-auto p-4 space-y-2">
                    {menuItems.map((item) => (
                        <MenuItem
                            key={item.title}
                            {...item}
                            isOpen={openMenus.has(item.title)}
                            onToggle={() => toggleMenu(item.title)}
                        />
                    ))}
                </nav>

                {/* Bottom Section - Profile */}
                <div className="p-4 border-t border-border-light dark:border-border-dark">
                    <div className="bg-background-light-soft dark:bg-background-soft rounded-xl p-4">
                        <div className="flex items-center gap-3 mb-3">
                            {/* Avatar */}
                            <div className="w-10 h-10 bg-primary-gold rounded-full flex items-center justify-center text-white font-semibold">
                                {user?.firstName?.[0] || 'A'}
                            </div>

                            {/* User Info */}
                            <div className="flex-1 min-w-0">
                                <p className="text-sm font-semibold text-text-on-light dark:text-text-on-dark truncate">
                                    {`${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Admin Kullanıcısı'}
                                </p>
                                <p className="text-xs text-text-light-muted dark:text-text-muted truncate">
                                    {user?.role?.name || 'Yönetici'}
                                </p>
                            </div>

                            {/* Profile Menu */}
                            <div className="relative">
                                <button className="p-1 rounded-lg hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg transition-colors">
                                    <MoreVertical className="h-4 w-4 text-text-light-secondary dark:text-text-secondary" />
                                </button>
                            </div>
                        </div>

                        {/* Profile Actions */}
                        <div className="flex gap-2">
                            <Link
                                href="/dashboard/profile"
                                className="flex-1 flex items-center justify-center gap-2 px-3 py-2 text-xs font-medium rounded-lg bg-primary-gold/10 dark:bg-primary-gold/20 text-primary-gold hover:bg-primary-gold/20 dark:hover:bg-primary-gold/30 transition-colors"
                            >
                                <User className="h-3 w-3" />
                                Profil
                            </Link>
                            <button
                                onClick={handleLogout}
                                className="flex items-center justify-center gap-2 px-3 py-2 text-xs font-medium rounded-lg text-text-light-secondary dark:text-text-secondary hover:bg-hover-light-cream dark:hover:bg-hover-gold-bg hover:text-primary-red transition-colors"
                            >
                                <LogOut className="h-3 w-3" />
                                Çıkış
                            </button>
                        </div>
                    </div>
                </div>
            </aside>
        </>
    );
}
</file>

<file path="src/app/dashboard/requests/[id]/edit/page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { ArrowLeft, Save, X, AlertCircle, FileText } from 'lucide-react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import TextArea from '@/app/components/ui/TextArea';
import Button from '@/app/components/ui/Button';
import Skeleton from '@/app/components/ui/Skeleton';
import { ticketService, Ticket, UpdateTicketRequest } from '@/services/ticket.service';
import propertyService from '@/services/property.service';
import { Property } from '@/services/types/property.types';

interface EditTicketFormData {
    title: string;
    description: string;
    type: string;
    priority: string;
    category: string;
    propertyId: string;
    status: string;
}

const ticketTypes = [
    { value: 'FAULT_REPAIR', label: 'Arıza Tamiri' },
    { value: 'MAINTENANCE', label: 'Bakım' },
    { value: 'CLEANING', label: 'Temizlik' },
    { value: 'SECURITY', label: 'Güvenlik' },
    { value: 'COMPLAINT', label: 'Şikayet' },
    { value: 'SUGGESTION', label: 'Öneri' },
    { value: 'OTHER', label: 'Diğer' }
];

const priorities = [
    { value: 'LOW', label: 'Düşük' },
    { value: 'MEDIUM', label: 'Orta' },
    { value: 'HIGH', label: 'Yüksek' },
    { value: 'URGENT', label: 'Acil' }
];

const categories = [
    { value: 'ELECTRICAL', label: 'Elektrik' },
    { value: 'PLUMBING', label: 'Su Tesisatı' },
    { value: 'HEATING', label: 'Isıtma' },
    { value: 'GENERAL', label: 'Genel' },
    { value: 'STRUCTURAL', label: 'Yapısal' },
    { value: 'APPLIANCE', label: 'Beyaz Eşya' },
    { value: 'OTHER', label: 'Diğer' }
];

const statuses = [
    { value: 'OPEN', label: 'Açık' },
    { value: 'IN_PROGRESS', label: 'İşlemde' },
    { value: 'WAITING', label: 'Beklemede' },
    { value: 'RESOLVED', label: 'Çözüldü' },
    { value: 'CLOSED', label: 'Kapalı' },
    { value: 'CANCELLED', label: 'İptal' }
];

export default function EditTicketPage() {
    const router = useRouter();
    const params = useParams();
    const ticketId = params.id as string;

    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Data State
    const [ticket, setTicket] = useState<Ticket | null>(null);
    const [properties, setProperties] = useState<Property[]>([]);

    // Form
    const {
        register,
        handleSubmit,
        setValue,
        formState: { errors, isDirty },
        reset,
        watch
    } = useForm<EditTicketFormData>();

    // Breadcrumb
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Hizmet Talepleri', href: '/dashboard/requests' },
        { label: 'Talep Düzenle', active: true }
    ];

    // Load ticket data
    useEffect(() => {
        const fetchTicketData = async () => {
            if (!ticketId) return;

            try {
                setLoading(true);
                setError(null);

                // Fetch ticket and properties in parallel
                const [ticketResponse, propertiesResponse] = await Promise.all([
                    ticketService.getTicketById(ticketId),
                    propertyService.getAllProperties()
                ]);

                setTicket(ticketResponse);
                setProperties(propertiesResponse.data || []);

                // Populate form with ticket data
                reset({
                    title: ticketResponse.title,
                    description: ticketResponse.description,
                    type: ticketResponse.type,
                    priority: ticketResponse.priority,
                    category: ticketResponse.category,
                    propertyId: ticketResponse.property?.id || '',
                    status: ticketResponse.status
                });

            } catch (err) {
                console.error('Error fetching ticket:', err);
                setError('Talep verisi yüklenirken hata oluştu.');
            } finally {
                setLoading(false);
            }
        };

        fetchTicketData();
    }, [ticketId, reset]);

    // Form submit handler
    const onSubmit = async (data: EditTicketFormData) => {
        if (!ticket) return;

        try {
            setSaving(true);
            setError(null);

            const updateData: UpdateTicketRequest = {
                title: data.title,
                description: data.description,
                type: data.type,
                priority: data.priority,
                category: data.category,
                propertyId: data.propertyId,
                status: data.status
            };

            await ticketService.updateTicket(ticket.id, updateData);

            // Navigate back to requests list
            router.push('/dashboard/requests');

        } catch (err) {
            console.error('Error updating ticket:', err);
            setError('Talep güncellenirken hata oluştu. Lütfen tekrar deneyin.');
        } finally {
            setSaving(false);
        }
    };

    // Handle cancel
    const handleCancel = () => {
        if (isDirty) {
            const isConfirmed = window.confirm(
                'Değişiklikleriniz kaydedilmedi. Çıkmak istediğinizden emin misiniz?'
            );
            if (!isConfirmed) return;
        }
        router.back();
    };

    if (loading) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader
                            title="Talep Düzenle"
                            breadcrumbItems={breadcrumbItems}
                        />
                        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="p-6">
                                <div className="space-y-6">
                                    <Skeleton className="h-8 w-1/3" />
                                    <Skeleton className="h-10 w-full" />
                                    <Skeleton className="h-32 w-full" />
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <Skeleton className="h-10 w-full" />
                                        <Skeleton className="h-10 w-full" />
                                        <Skeleton className="h-10 w-full" />
                                    </div>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    if (error && !ticket) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader
                            title="Talep Düzenle"
                            breadcrumbItems={breadcrumbItems}
                        />
                        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="p-6">
                                <div className="text-center">
                                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                                    <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">
                                        Hata Oluştu
                                    </h3>
                                    <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                                        {error}
                                    </p>
                                    <div className="mt-6">
                                        <Button
                                            variant="primary"
                                            onClick={() => router.back()}
                                        >
                                            Geri Dön
                                        </Button>
                                    </div>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                
                <div className="lg:ml-72">
                    <DashboardHeader
                        title={`Talep Düzenle: ${ticket?.title || ''}`}
                        breadcrumbItems={breadcrumbItems}
                    />

                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        <form onSubmit={handleSubmit(onSubmit)}>
                            <Card className="p-6">
                                <div className="space-y-6">
                                    {/* Form Header */}
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark">
                                                Talep Bilgileri
                                            </h2>
                                            <p className="text-text-light-secondary dark:text-text-secondary">
                                                Talep detaylarını düzenleyin
                                            </p>
                                        </div>
                                        <div className="flex gap-3">
                                            <Button
                                                type="button"
                                                variant="ghost"
                                                icon={ArrowLeft}
                                                onClick={handleCancel}
                                                disabled={saving}
                                            >
                                                İptal
                                            </Button>
                                            <Button
                                                type="submit"
                                                variant="primary"
                                                icon={Save}
                                                isLoading={saving}
                                                disabled={saving || !isDirty}
                                            >
                                                {saving ? 'Kaydediliyor...' : 'Kaydet'}
                                            </Button>
                                        </div>
                                    </div>

                                    {/* Error Message */}
                                    {error && (
                                        <div className="rounded-md bg-red-50 dark:bg-red-900/20 p-4">
                                            <div className="flex">
                                                <AlertCircle className="h-5 w-5 text-red-400" />
                                                <div className="ml-3">
                                                    <p className="text-sm text-red-800 dark:text-red-200">
                                                        {error}
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    {/* Basic Information */}
                                    <div className="grid grid-cols-1 gap-6">
                                        <Input
                                            label="Talep Başlığı"
                                            placeholder="Talep başlığını girin"
                                            {...register('title', {
                                                required: 'Talep başlığı zorunludur',
                                                minLength: {
                                                    value: 3,
                                                    message: 'Başlık en az 3 karakter olmalıdır'
                                                }
                                            })}
                                            error={errors.title?.message}
                                            icon={FileText}
                                        />

                                        <TextArea
                                            label="Açıklama"
                                            placeholder="Talep açıklamasını girin"
                                            rows={4}
                                            value={watch('description')}
                                            onChange={(e: any) => setValue('description', e.target.value)}
                                            error={errors.description?.message}
                                        />
                                    </div>

                                    {/* Categories and Priority */}
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <Select
                                            label="Talep Tipi"
                                            options={ticketTypes}
                                            placeholder="Tip seçin"
                                            {...register('type', {
                                                required: 'Talep tipi seçmelisiniz'
                                            })}
                                            error={errors.type?.message}
                                        />

                                        <Select
                                            label="Öncelik"
                                            options={priorities}
                                            placeholder="Öncelik seçin"
                                            {...register('priority', {
                                                required: 'Öncelik seçmelisiniz'
                                            })}
                                            error={errors.priority?.message}
                                        />

                                        <Select
                                            label="Kategori"
                                            options={categories}
                                            placeholder="Kategori seçin"
                                            {...register('category', {
                                                required: 'Kategori seçmelisiniz'
                                            })}
                                            error={errors.category?.message}
                                        />
                                    </div>

                                    {/* Property and Status */}
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <Select
                                            label="Emlak"
                                            options={properties.map(p => ({
                                                value: String(p.id),
                                                label: `${p.name || p.propertyNumber}${p.blockNumber ? ` - Blok ${p.blockNumber}` : ''}${p.floor ? ` - Kat ${p.floor}` : ''}`
                                            }))}
                                            placeholder="Emlak seçin"
                                            {...register('propertyId', {
                                                required: 'Emlak seçmelisiniz'
                                            })}
                                            error={errors.propertyId?.message}
                                        />

                                        <Select
                                            label="Durum"
                                            options={statuses}
                                            placeholder="Durum seçin"
                                            {...register('status', {
                                                required: 'Durum seçmelisiniz'
                                            })}
                                            error={errors.status?.message}
                                        />
                                    </div>

                                    {/* Ticket Info */}
                                    {ticket && (
                                        <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
                                            <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-2">
                                                Talep Bilgileri
                                            </h3>
                                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                                <div>
                                                    <span className="font-medium">Talep No:</span> {ticket.ticketNumber}
                                                </div>
                                                <div>
                                                    <span className="font-medium">Oluşturan:</span> {ticket.creator?.firstName} {ticket.creator?.lastName}
                                                </div>
                                                <div>
                                                    <span className="font-medium">Oluşturma:</span> {new Date(ticket.createdAt).toLocaleString('tr-TR')}
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </Card>
                        </form>
                    </main>
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/requests/resolved/page.tsx">
'use client';

import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import {
    Wrench,
    Plus,
    RefreshCw,
    Filter,
    List,
    Grid3X3,
    AlertCircle,
    CheckCircle,
    RotateCcw,
    Calendar,
    MoreVertical,
    User,
    Edit,
    Trash2
} from 'lucide-react';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import FilterPanel from '@/app/components/ui/FilterPanel';
import StatsCard from '@/app/components/ui/StatsCard';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import BulkActionsBar from '@/app/components/ui/BulkActionsBar';
import TablePagination from '@/app/components/ui/TablePagination';
import Checkbox from '@/app/components/ui/Checkbox';
import Link from 'next/link';
import { ticketService, Ticket, TicketPaginationResponse, TicketFilters } from '@/services/ticket.service';
import GenericListView from '@/app/components/templates/GenericListView';
import GenericGridView from '@/app/components/templates/GenericGridView';
import RequestDetailModal from '../RequestDetailModal';
import Portal from '@/app/components/ui/Portal';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';
import { ApiResponse } from '@/services';
import { 
    createTicketFilterGroups, 
    STATUS_CONFIG, 
    TYPE_COLOR_MAP, 
    FilterStateManager,
    TicketFilters as RequestFilters 
} from '../constants';
import { useRequestsActions } from '../hooks/useRequestsActions';

export default function ResolvedRequestsPage() {
    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [searchInput, setSearchInput] = useState("");
    const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
    const [showFilters, setShowFilters] = useState(false);
    const [selectedRequests, setSelectedRequests] = useState<any[]>([]);
    
    // Filter State Management - SOLID: Single Responsibility
    const [filterManager] = useState(() => new FilterStateManager());
    const [activeFilters, setActiveFilters] = useState<RequestFilters>({});
    
    // Data State
    const [requests, setRequests] = useState<Ticket[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [pagination, setPagination] = useState({
        total: 0,
        page: 1,
        limit: 20,
        totalPages: 0
    });
    
    // Detay modalı state
    const [detailModal, setDetailModal] = useState<{ open: boolean, item: Ticket | null }>({ open: false, item: null });

    // Memoize current filters to prevent unnecessary re-renders
    const currentFilters = useMemo(() => {
        const filters = filterManager.getFilters();
        // Always filter for resolved status tickets
        return { ...filters, status: 'RESOLVED' };
    }, [filterManager, activeFilters]);

    // Fetch resolved tickets from API with pagination and filters
    const fetchRequests = useCallback(async (customFilters: RequestFilters = {}) => {
        setLoading(true);
        setError(null);
        
        const finalFilters: TicketFilters = {
            page: pagination.page,
            limit: pagination.limit,
            orderColumn: 'createdAt',
            orderBy: 'DESC',
            ...currentFilters,
            ...customFilters,
            status: 'RESOLVED', // Always filter for resolved tickets - override any other status
        };

        console.log(`🚀 Resolved Tickets API Call with filters:`, finalFilters);
        
        try {
            const response: ApiResponse<TicketPaginationResponse> = await ticketService.getTickets(finalFilters);
            setRequests(response.data as unknown as Ticket[]);
            setPagination(prev => ({
                ...prev,
                total: response.pagination.total,
                totalPages: response.pagination.totalPages,
                page: response.pagination.page,
                limit: response.pagination.limit
            }));
        } catch (err) {
            setError('Çözümlenen talepler alınamadı.');
            console.error('API Error:', err);
        } finally {
            setLoading(false);
        }
    }, [pagination.page, pagination.limit, currentFilters]);

    // Initialize request actions hook
    const {
        handleViewRequest,
        handleEditRequest,
        handleDeleteRequest,
        handleUpdateRequestStatus,
        handleSendNotification,
        isDeleting,
        confirmationDialog,
        showDeleteConfirmation,
        hideConfirmation,
        confirmDelete
    } = useRequestsActions({
        refreshData: fetchRequests,
        setSelectedRequests,
        setRequests
    });

    // Initial data fetch
    useEffect(() => {
        fetchRequests();
    }, [pagination.page, pagination.limit, currentFilters]);

    // Breadcrumb
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Hizmet Talepleri', href: '/dashboard/requests' },
        { label: 'Çözümlenen Talepler', active: true }
    ];

    // Icon mapping for status configuration  
    const iconMap = {
        AlertCircle,
        RotateCcw,
        CheckCircle,
        Calendar
    };

    // Get status info with proper icon mapping - SOLID: Open/Closed Principle
    const getStatusInfo = (status: string) => {
        const config = STATUS_CONFIG[status as keyof typeof STATUS_CONFIG] || STATUS_CONFIG.RESOLVED;
        const IconComponent = iconMap[config.icon as keyof typeof iconMap] || CheckCircle;
        return {
            ...config,
            iconComponent: IconComponent
        };
    };

    // Table columns (API'den gelen Ticket yapısına göre)
    const getTableColumns = () => [
        {
            key: 'request',
            header: 'Talep',
            render: (_value: any, req: Ticket) => (
                <div>
                    <div className="font-medium text-text-on-dark">
                        {req?.title || 'Talep Başlığı'}
                    </div>
                    <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                        {req?.property?.name || req?.property?.propertyNumber || '--'}
                    </div>
                </div>
            ),
        },
        {
            key: 'type',
            header: 'Tip',
            render: (_value: any, req: Ticket) => (
                <Badge variant="soft" color={TYPE_COLOR_MAP[req?.type as string] || 'secondary'}>
                    {req?.type || 'Tip Yok'}
                </Badge>
            ),
        },
        {
            key: 'resident',
            header: 'Sakin',
            render: (_value: any, req: Ticket) => (
                <div>
                    <div className="font-medium text-text-on-dark">
                        {req?.creator?.firstName || ''} {req?.creator?.lastName || ''}
                    </div>
                    <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                        {req?.creator?.property?.ownershipType || '--'}
                    </div>
                </div>
            ),
        },
        {
            key: 'status',
            header: 'Durum',
            render: (_value: any, req: Ticket) => {
                const statusInfo = getStatusInfo(req?.status || 'RESOLVED');
                const StatusIcon = statusInfo.iconComponent;
                return (
                    <div className="flex items-center gap-2">
                        <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
                        <Badge variant="soft" color={statusInfo.color as any}>
                            {statusInfo.label}
                        </Badge>
                    </div>
                );
            },
        },
        {
            key: 'createdAt',
            header: 'Oluşturulma',
            render: (_value: any, req: Ticket) => req?.createdAt ? new Date(req.createdAt).toLocaleString('tr-TR') : '--',
        },
    ];

    // Action menu (placeholder)
    const RequestActionMenu: React.FC<{ req: any; onAction: (action: string, req: any) => void }> = ({ req, onAction }) => {
        const [isOpen, setIsOpen] = React.useState(false);
        const buttonRef = React.useRef<HTMLButtonElement>(null);
        const [menuStyle, setMenuStyle] = React.useState<React.CSSProperties>({});

        React.useEffect(() => {
            if (isOpen && buttonRef.current) {
                const rect = buttonRef.current.getBoundingClientRect();
                const menuHeight = 160; // tahmini yükseklik
                const menuWidth = 180;
                const padding = 8;
                let top = rect.bottom + window.scrollY + padding;
                let left = rect.right + window.scrollX - menuWidth;
                if (top + menuHeight > window.innerHeight + window.scrollY) {
                    top = rect.top + window.scrollY - menuHeight - padding;
                }
                if (left < 0) {
                    left = padding;
                }
                setMenuStyle({
                    position: 'absolute',
                    top,
                    left,
                    zIndex: 9999,
                    minWidth: menuWidth,
                });
            }
        }, [isOpen]);

        React.useEffect(() => {
            if (!isOpen) return;
            const handleClick = (e: MouseEvent) => {
                if (
                    buttonRef.current &&
                    !buttonRef.current.contains(e.target as Node)
                ) {
                    setIsOpen(false);
                }
            };
            document.addEventListener('click', handleClick); // mousedown -> click
            return () => document.removeEventListener('click', handleClick);
        }, [isOpen]);

        const handleDropdownToggle = (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(!isOpen);
        };

        const handleAction = (action: string) => (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(false);
            onAction(action, req);
        };

        return (
            <div className="flex items-center justify-center">
                <button
                    ref={buttonRef}
                    className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
                    onClick={handleDropdownToggle}
                    type="button"
                >
                    <MoreVertical className="w-5 h-5" />
                </button>
                {isOpen && (
                    <Portal>
                        <div
                            style={menuStyle}
                            className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 py-1 max-h-72 overflow-auto"
                        >
                            <button onClick={handleAction('view')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <User className="w-5 h-5" /> Detay
                            </button>
                            <button onClick={handleAction('edit')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <Edit className="w-5 h-5" /> Düzenle
                            </button>
                            <hr className="border-gray-200 dark:border-gray-600 my-1" />
                            <button onClick={handleAction('delete')} className="w-full px-4 py-2 text-left text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 flex items-center gap-3">
                                <Trash2 className="w-5 h-5" /> Sil
                            </button>
                        </div>
                    </Portal>
                )}
            </div>
        );
    };

    // Detay açma fonksiyonu
    const handleViewDetail = (req: Ticket) => {
        setDetailModal({ open: true, item: req });
    };

    // Unified action handler for request actions
    const handleRequestAction = useCallback(async (action: string, request: Ticket) => {
        switch (action) {
            case 'view':
                handleViewDetail(request);
                break;
            case 'edit':
                handleEditRequest(request);
                break;
            case 'delete':
                handleDeleteRequest(request);
                break;
            case 'start-progress':
                await handleUpdateRequestStatus(request, 'start-progress');
                break;
            case 'resolve':
                await handleUpdateRequestStatus(request, 'resolve');
                break;
            case 'close':
                await handleUpdateRequestStatus(request, 'close');
                break;
            case 'cancel':
                await handleUpdateRequestStatus(request, 'cancel');
                break;
            default:
                console.warn('Unknown action:', action);
        }
    }, [handleViewDetail, handleEditRequest, handleDeleteRequest, handleUpdateRequestStatus]);

    const RequestActionMenuWrapper: React.FC<{ row: any }> = ({ row }) => (
        <RequestActionMenu req={row} onAction={(action, req) => {
            handleRequestAction(action, req);
        }} />
    );

    // Card renderer for grid view (API'den gelen Ticket yapısına göre)
    const renderRequestCard = (req: Ticket, selectedItems: Array<string | number>, onSelect: (id: string | number) => void, ui: any, ActionMenu?: React.ComponentType<{ row: any }>) => {
        const statusInfo = getStatusInfo(req?.status || 'RESOLVED');
        const StatusIcon = statusInfo.iconComponent;
        return (
            <ui.Card key={req.id} className="p-4 rounded-2xl shadow-md bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 transition-transform hover:scale-[1.01] hover:shadow-lg">
                <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                        <ui.Checkbox
                            checked={selectedItems.includes(req.id)}
                            onChange={(e: any) => onSelect(req.id)}
                            className="focus:ring-2 focus:ring-primary-gold/30"
                        />
                        <div>
                            <h4 className="font-semibold text-text-on-light dark:text-text-on-dark">
                                {req?.title || 'Talep Başlığı'}
                            </h4>
                            {statusInfo && (
                                <div className="flex items-center">
                                    <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
                                    <ui.Badge variant="soft" color={statusInfo.color as any}>
                                        {statusInfo.label}
                                    </ui.Badge>
                                </div>
                            )}
                        </div>
                    </div>
                    {ActionMenu && <ActionMenu row={req} />}
                </div>
                <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                        <Wrench className="h-4 w-4" />
                        <ui.Badge variant="soft" color={TYPE_COLOR_MAP[req?.type as string] || 'secondary'}>
                            {req?.type || 'Tip Yok'}
                        </ui.Badge>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                        <User className="h-4 w-4" />
                        <span>{req?.creator?.firstName || ''} {req?.creator?.lastName || ''}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                        <span>{req?.property?.name || req?.property?.propertyNumber || '--'}</span>
                    </div>
                </div>
            </ui.Card>
        );
    };

    // Filter groups using SOLID factory pattern - Focus on resolved-related statuses
    const requestFilterGroups = useMemo(() => createTicketFilterGroups(true), []);

    // Selection handler for grid view
    const handleGridSelectionChange = (selectedIds: Array<string | number>) => {
        setSelectedRequests(requests.filter(r => selectedIds.includes(r.id)));
    };

    // Selection handler for list view
    const handleListSelectionChange = (selected: Ticket[]) => {
        setSelectedRequests(selected);
    };

    // Filter handlers with proper state management
    const handleFilterChange = useCallback((filterKey: string, value: any) => {
        console.log(`🎯 handleFilterChange: key=${filterKey}, value=${value}, type=${typeof value}`);
        filterManager.setFilter(filterKey as keyof RequestFilters, value);
        const newActiveFilters = filterManager.getFilters();
        console.log(`📋 Active filters after update:`, newActiveFilters);
        setActiveFilters(newActiveFilters);
        // Reset pagination to first page
        setPagination(prev => ({ ...prev, page: 1 }));
    }, [filterManager]);

    const handleResetFilters = useCallback(() => {
        filterManager.resetFilters();
        setActiveFilters({});
        setSearchInput('');
        setPagination(prev => ({ ...prev, page: 1 }));
    }, [filterManager]);

    // Search handlers - FIXED: Proper API integration
    const handleSearchInputChange = useCallback((value: string) => {
        setSearchInput(value);
    }, []);
    
    const handleSearchSubmit = useCallback((value: string) => {
        console.log(`🔍 Resolved Tickets Search submitted: "${value}"`);
        setSearchInput(value);
        filterManager.setFilter('search', value);
        
        // Batch state updates to prevent multiple re-renders
        React.startTransition(() => {
            setActiveFilters(filterManager.getFilters());
            setPagination(prev => ({ ...prev, page: 1 }));
        });
    }, [filterManager]);

    // Refresh handler
    const handleRefresh = useCallback(() => {
        fetchRequests();
    }, [fetchRequests]);

    // Table columns (API'den gelen Ticket yapısına göre)
    const tableColumns = useMemo(() => getTableColumns(), []);

    // GridView UI Adapter
    const gridViewUI = useMemo(() => ({
        Card,
        Button,
        Checkbox,
        TablePagination,
        Badge,
        EmptyState,
        Skeleton,
        BulkActionsBar,
    }), []);

    // GridView getItemId
    const getRequestId = useCallback((req: Ticket) => req.id, []);

    // Page change handlers
    const handlePageChange = useCallback((page: number) => {
        setPagination(prev => ({ ...prev, page }));
    }, []);

    const handleRecordsPerPageChange = useCallback((limit: number) => {
        setPagination(prev => ({ ...prev, limit, page: 1 }));
    }, []);

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title="Çözümlenen Hizmet Talepleri"
                        breadcrumbItems={breadcrumbItems}
                    />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Summary */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                                    Çözümlenen Talepler <span className="text-primary-gold">({requests.length} Talep)</span>
                                </h2>
                                <p className="text-text-light-secondary dark:text-text-secondary">
                                    Çözümlenen: {requests.length}
                                </p>
                            </div>
                            <div className="flex gap-3">
                                <Button variant="ghost" size="md" icon={RefreshCw} onClick={handleRefresh}>
                                    Yenile
                                </Button>
                            </div>
                        </div>

                        {/* Search and Filters */}
                        <Card className="mb-6">
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    {/* Search Bar */}
                                    <div className="flex-1">
                                        <SearchBar
                                            placeholder="Talep başlığı, sakin adı, daire veya tip ile ara..."
                                            value={searchInput}
                                            onChange={handleSearchInputChange}
                                            onSearch={handleSearchSubmit}
                                            debounceMs={500}
                                        />
                                    </div>
                                    {/* Filter and View Toggle */}
                                    <div className="flex gap-2 items-center">
                                        <Button
                                            variant={showFilters ? "primary" : "secondary"}
                                            size="md"
                                            icon={Filter}
                                            onClick={() => setShowFilters(true)}
                                        >
                                            Filtreler
                                        </Button>
                                        <ViewToggle
                                            options={[
                                                { id: 'table', label: 'Tablo', icon: List },
                                                { id: 'grid', label: 'Kart', icon: Grid3X3 },
                                            ]}
                                            activeView={viewMode}
                                            onViewChange={(viewId) => setViewMode(viewId as typeof viewMode)}
                                            size="sm"
                                        />
                                    </div>
                                </div>
                            </div>
                        </Card>
                        
                        {/* Filter Sidebar (Drawer) */}
                        <div className={`fixed inset-0 z-50 ${showFilters ? 'pointer-events-auto' : 'pointer-events-none'}`}>
                            {/* Backdrop */}
                            <div
                                className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${showFilters ? 'opacity-50' : 'opacity-0'}`}
                                onClick={() => setShowFilters(false)}
                            />
                            {/* Drawer */}
                            <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-background-light-card dark:bg-background-card shadow-2xl transform transition-transform duration-300 ease-in-out ${showFilters ? 'translate-x-0' : 'translate-x-full'}`}>
                                <FilterPanel
                                    filterGroups={requestFilterGroups}
                                    onApplyFilters={(filters) => {
                                        Object.entries(filters).forEach(([key, value]) => {
                                            handleFilterChange(key, value);
                                        });
                                        setShowFilters(false);
                                    }}
                                    onResetFilters={handleResetFilters}
                                    onClose={() => setShowFilters(false)}
                                    variant="sidebar"
                                />
                            </div>
                        </div>

                        {/* Quick Stats Cards */}
                        <div className="mb-8">
                            <div className="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-4">
                                <StatsCard
                                    title="Çözümlenen Talepler"
                                    value={requests.length}
                                    icon={CheckCircle}
                                    color="success"
                                    loading={loading}
                                    size="md"
                                />
                            </div>
                        </div>
                        
                        {/* Content Area */}
                        <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
                            {/* Main Content */}
                            <div className="lg:col-span-1">
                                {viewMode === 'table' && (
                                    <GenericListView
                                        data={requests}
                                        loading={loading}
                                        error={error}
                                        columns={tableColumns}
                                        onSelectionChange={handleListSelectionChange}
                                        pagination={{
                                            currentPage: pagination.page,
                                            totalPages: pagination.totalPages,
                                            totalRecords: pagination.total,
                                            recordsPerPage: pagination.limit,
                                            onPageChange: handlePageChange,
                                            onRecordsPerPageChange: handleRecordsPerPageChange,
                                        }}
                                        ActionMenuComponent={RequestActionMenuWrapper}
                                        selectable={true}
                                        showPagination={true}
                                        emptyStateMessage="Henüz çözümlenen talep bulunmuyor."
                                    />
                                )}
                                {viewMode === 'grid' && (
                                    <GenericGridView
                                        data={requests}
                                        loading={loading}
                                        error={error}
                                        onSelectionChange={handleGridSelectionChange}
                                        selectedItems={selectedRequests.map(r => r.id)}
                                        pagination={{
                                            currentPage: pagination.page,
                                            totalPages: pagination.totalPages,
                                            totalRecords: pagination.total,
                                            recordsPerPage: pagination.limit,
                                            onPageChange: handlePageChange,
                                            onRecordsPerPageChange: handleRecordsPerPageChange,
                                        }}
                                        emptyStateMessage="Henüz çözümlenen talep bulunmuyor."
                                        ui={gridViewUI}
                                        ActionMenu={RequestActionMenuWrapper}
                                        renderCard={renderRequestCard}
                                        getItemId={getRequestId}
                                        selectable={true}
                                        showBulkActions={false}
                                        showPagination={true}
                                        showSelectAll={true}
                                        loadingCardCount={6}
                                        gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
                                    />
                                )}
                            </div>
                        </div>
                    </main>
                    {/* Detay Modalı */}
                    <RequestDetailModal
                        open={detailModal.open}
                        onClose={() => setDetailModal({ open: false, item: null })}
                        item={detailModal.item}
                        onActionComplete={() => {
                            setDetailModal({ open: false, item: null });
                            fetchRequests();
                        }}
                    />
                    {/* Delete Confirmation Modal */}
                    <ConfirmationModal
                        isOpen={confirmationDialog.isOpen}
                        onClose={hideConfirmation}
                        onConfirm={confirmDelete}
                        title="Talebi Sil"
                        description={
                            confirmationDialog.ticket 
                                ? `"${confirmationDialog.ticket.title}" adlı talep kalıcı olarak silinecektir. Bu işlem geri alınamaz.`
                                : "Bu talebi silmek istediğinizden emin misiniz?"
                        }
                        confirmText="Sil"
                        cancelText="İptal"
                        variant="danger"
                        loading={isDeleting}
                        itemName={confirmationDialog.ticket?.title}
                        itemType="talep"
                    />
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/requests/waiting/page.tsx">
'use client';

import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import {
    Wrench,
    Plus,
    RefreshCw,
    Filter,
    List,
    Grid3X3,
    AlertCircle,
    CheckCircle,
    RotateCcw,
    Calendar,
    MoreVertical,
    User,
    Edit,
    Trash2,
    PauseCircle
} from 'lucide-react';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import FilterPanel from '@/app/components/ui/FilterPanel';
import StatsCard from '@/app/components/ui/StatsCard';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import BulkActionsBar from '@/app/components/ui/BulkActionsBar';
import TablePagination from '@/app/components/ui/TablePagination';
import Checkbox from '@/app/components/ui/Checkbox';
import Link from 'next/link';
import { ticketService, Ticket, TicketPaginationResponse, TicketFilters } from '@/services/ticket.service';
import GenericListView from '@/app/components/templates/GenericListView';
import GenericGridView from '@/app/components/templates/GenericGridView';
import RequestDetailModal from '../RequestDetailModal';
import Portal from '@/app/components/ui/Portal';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';
import { ApiResponse } from '@/services';
import { 
    createTicketFilterGroups, 
    STATUS_CONFIG, 
    TYPE_COLOR_MAP, 
    FilterStateManager,
    TicketFilters as RequestFilters 
} from '../constants';
import { useRequestsActions } from '../hooks/useRequestsActions';

export default function WaitingRequestsPage() {
    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [searchInput, setSearchInput] = useState("");
    const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
    const [showFilters, setShowFilters] = useState(false);
    const [selectedRequests, setSelectedRequests] = useState<any[]>([]);
    
    // Filter State Management - SOLID: Single Responsibility
    const [filterManager] = useState(() => new FilterStateManager());
    const [activeFilters, setActiveFilters] = useState<RequestFilters>({});
    
    // Data State
    const [requests, setRequests] = useState<Ticket[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [pagination, setPagination] = useState({
        total: 0,
        page: 1,
        limit: 20,
        totalPages: 0
    });
    
    // Detay modalı state
    const [detailModal, setDetailModal] = useState<{ open: boolean, item: Ticket | null }>({ open: false, item: null });

    // Memoize current filters to prevent unnecessary re-renders
    const currentFilters = useMemo(() => {
        const filters = filterManager.getFilters();
        // Always filter for waiting status tickets
        return { ...filters, status: 'WAITING' };
    }, [filterManager, activeFilters]);

    // Fetch waiting tickets from API with pagination and filters
    const fetchRequests = useCallback(async (customFilters: RequestFilters = {}) => {
        setLoading(true);
        setError(null);
        
        const finalFilters: TicketFilters = {
            page: pagination.page,
            limit: pagination.limit,
            orderColumn: 'createdAt',
            orderBy: 'DESC',
            ...currentFilters,
            ...customFilters,
            status: 'WAITING', // Always filter for waiting tickets - override any other status
        };

        console.log(`🚀 Waiting Tickets API Call with filters:`, finalFilters);
        
        try {
            const response: ApiResponse<TicketPaginationResponse> = await ticketService.getTickets(finalFilters);
            setRequests(response.data as unknown as Ticket[]);
            setPagination(prev => ({
                ...prev,
                total: response.pagination.total,
                totalPages: response.pagination.totalPages,
                page: response.pagination.page,
                limit: response.pagination.limit
            }));
        } catch (err) {
            setError('Bekleyen talepler alınamadı.');
            console.error('API Error:', err);
        } finally {
            setLoading(false);
        }
    }, [pagination.page, pagination.limit, currentFilters]);

    // Initialize request actions hook
    const {
        handleViewRequest,
        handleEditRequest,
        handleDeleteRequest,
        handleUpdateRequestStatus,
        handleSendNotification,
        isDeleting,
        confirmationDialog,
        showDeleteConfirmation,
        hideConfirmation,
        confirmDelete
    } = useRequestsActions({
        refreshData: fetchRequests,
        setSelectedRequests,
        setRequests
    });

    // Initial data fetch
    useEffect(() => {
        fetchRequests();
    }, [pagination.page, pagination.limit, currentFilters]);

    // Breadcrumb
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Hizmet Talepleri', href: '/dashboard/requests' },
        { label: 'Bekleyen Talepler', active: true }
    ];

    // Icon mapping for status configuration
    const iconMap = {
        AlertCircle,
        RotateCcw,
        PauseCircle,
        CheckCircle,
        Calendar
    };

    // Get status info with proper icon mapping - SOLID: Open/Closed Principle
    const getStatusInfo = (status: string) => {
        const config = STATUS_CONFIG[status as keyof typeof STATUS_CONFIG] || STATUS_CONFIG.WAITING;
        const IconComponent = iconMap[config.icon as keyof typeof iconMap] || PauseCircle;
        return {
            ...config,
            iconComponent: IconComponent
        };
    };

    // Table columns (API'den gelen Ticket yapısına göre)
    const getTableColumns = () => [
        {
            key: 'request',
            header: 'Talep',
            render: (_value: any, req: Ticket) => (
                <div>
                    <div className="font-medium text-text-on-dark">
                        {req?.title || 'Talep Başlığı'}
                    </div>
                    <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                        {req?.property?.name || req?.property?.propertyNumber || '--'}
                    </div>
                </div>
            ),
        },
        {
            key: 'type',
            header: 'Tip',
            render: (_value: any, req: Ticket) => (
                <Badge variant="soft" color={TYPE_COLOR_MAP[req?.type as string] || 'secondary'}>
                    {req?.type || 'Tip Yok'}
                </Badge>
            ),
        },
        {
            key: 'resident',
            header: 'Sakin',
            render: (_value: any, req: Ticket) => (
                <div>
                    <div className="font-medium text-text-on-dark">
                        {req?.creator?.firstName || ''} {req?.creator?.lastName || ''}
                    </div>
                    <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                        {req?.creator?.property?.ownershipType || '--'}
                    </div>
                </div>
            ),
        },
        {
            key: 'status',
            header: 'Durum',
            render: (_value: any, req: Ticket) => {
                const statusInfo = getStatusInfo(req?.status || 'WAITING');
                const StatusIcon = statusInfo.iconComponent;
                return (
                    <div className="flex items-center gap-2">
                        <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
                        <Badge variant="soft" color={statusInfo.color as any}>
                            {statusInfo.label}
                        </Badge>
                    </div>
                );
            },
        },
        {
            key: 'createdAt',
            header: 'Oluşturulma',
            render: (_value: any, req: Ticket) => req?.createdAt ? new Date(req.createdAt).toLocaleString('tr-TR') : '--',
        },
    ];

    // Action menu (placeholder)
    const RequestActionMenu: React.FC<{ req: any; onAction: (action: string, req: any) => void }> = ({ req, onAction }) => {
        const [isOpen, setIsOpen] = React.useState(false);
        const buttonRef = React.useRef<HTMLButtonElement>(null);
        const [menuStyle, setMenuStyle] = React.useState<React.CSSProperties>({});

        React.useEffect(() => {
            if (isOpen && buttonRef.current) {
                const rect = buttonRef.current.getBoundingClientRect();
                const menuHeight = 160; // tahmini yükseklik
                const menuWidth = 180;
                const padding = 8;
                let top = rect.bottom + window.scrollY + padding;
                let left = rect.right + window.scrollX - menuWidth;
                if (top + menuHeight > window.innerHeight + window.scrollY) {
                    top = rect.top + window.scrollY - menuHeight - padding;
                }
                if (left < 0) {
                    left = padding;
                }
                setMenuStyle({
                    position: 'absolute',
                    top,
                    left,
                    zIndex: 9999,
                    minWidth: menuWidth,
                });
            }
        }, [isOpen]);

        React.useEffect(() => {
            if (!isOpen) return;
            const handleClick = (e: MouseEvent) => {
                if (
                    buttonRef.current &&
                    !buttonRef.current.contains(e.target as Node)
                ) {
                    setIsOpen(false);
                }
            };
            document.addEventListener('click', handleClick); // mousedown -> click
            return () => document.removeEventListener('click', handleClick);
        }, [isOpen]);

        const handleDropdownToggle = (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(!isOpen);
        };

        const handleAction = (action: string) => (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(false);
            onAction(action, req);
        };

        return (
            <div className="flex items-center justify-center">
                <button
                    ref={buttonRef}
                    className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
                    onClick={handleDropdownToggle}
                    type="button"
                >
                    <MoreVertical className="w-5 h-5" />
                </button>
                {isOpen && (
                    <Portal>
                        <div
                            style={menuStyle}
                            className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 py-1 max-h-72 overflow-auto"
                        >
                            <button onClick={handleAction('view')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <User className="w-5 h-5" /> Detay
                            </button>
                            <button onClick={handleAction('edit')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <Edit className="w-5 h-5" /> Düzenle
                            </button>
                            <hr className="border-gray-200 dark:border-gray-600 my-1" />
                            <button onClick={handleAction('delete')} className="w-full px-4 py-2 text-left text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 flex items-center gap-3">
                                <Trash2 className="w-5 h-5" /> Sil
                            </button>
                        </div>
                    </Portal>
                )}
            </div>
        );
    };

    // Detay açma fonksiyonu
    const handleViewDetail = (req: Ticket) => {
        setDetailModal({ open: true, item: req });
    };

    // Unified action handler for request actions
    const handleRequestAction = useCallback(async (action: string, request: Ticket) => {
        switch (action) {
            case 'view':
                handleViewDetail(request);
                break;
            case 'edit':
                handleEditRequest(request);
                break;
            case 'delete':
                handleDeleteRequest(request);
                break;
            case 'start-progress':
                await handleUpdateRequestStatus(request, 'start-progress');
                break;
            case 'resolve':
                await handleUpdateRequestStatus(request, 'resolve');
                break;
            case 'close':
                await handleUpdateRequestStatus(request, 'close');
                break;
            case 'cancel':
                await handleUpdateRequestStatus(request, 'cancel');
                break;
            default:
                console.warn('Unknown action:', action);
        }
    }, [handleViewDetail, handleEditRequest, handleDeleteRequest, handleUpdateRequestStatus]);

    const RequestActionMenuWrapper: React.FC<{ row: any }> = ({ row }) => (
        <RequestActionMenu req={row} onAction={(action, req) => {
            handleRequestAction(action, req);
        }} />
    );

    // Card renderer for grid view (API'den gelen Ticket yapısına göre)
    const renderRequestCard = (req: Ticket, selectedItems: Array<string | number>, onSelect: (id: string | number) => void, ui: any, ActionMenu?: React.ComponentType<{ row: any }>) => {
        const statusInfo = getStatusInfo(req?.status || 'WAITING');
        const StatusIcon = statusInfo.iconComponent;
        return (
            <ui.Card key={req.id} className="p-4 rounded-2xl shadow-md bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 transition-transform hover:scale-[1.01] hover:shadow-lg">
                <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                        <ui.Checkbox
                            checked={selectedItems.includes(req.id)}
                            onChange={(e: any) => onSelect(req.id)}
                            className="focus:ring-2 focus:ring-primary-gold/30"
                        />
                        <div>
                            <h4 className="font-semibold text-text-on-light dark:text-text-on-dark">
                                {req?.title || 'Talep Başlığı'}
                            </h4>
                            {statusInfo && (
                                <div className="flex items-center">
                                    <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
                                    <ui.Badge variant="soft" color={statusInfo.color as any}>
                                        {statusInfo.label}
                                    </ui.Badge>
                                </div>
                            )}
                        </div>
                    </div>
                    {ActionMenu && <ActionMenu row={req} />}
                </div>
                <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                        <Wrench className="h-4 w-4" />
                        <ui.Badge variant="soft" color={TYPE_COLOR_MAP[req?.type as string] || 'secondary'}>
                            {req?.type || 'Tip Yok'}
                        </ui.Badge>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                        <User className="h-4 w-4" />
                        <span>{req?.creator?.firstName || ''} {req?.creator?.lastName || ''}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                        <span>{req?.property?.name || req?.property?.propertyNumber || '--'}</span>
                    </div>
                </div>
            </ui.Card>
        );
    };

    // Filter groups using SOLID factory pattern - Focus on waiting-related statuses
    const requestFilterGroups = useMemo(() => createTicketFilterGroups(true), []);

    // Selection handler for grid view
    const handleGridSelectionChange = (selectedIds: Array<string | number>) => {
        setSelectedRequests(requests.filter(r => selectedIds.includes(r.id)));
    };

    // Selection handler for list view
    const handleListSelectionChange = (selected: Ticket[]) => {
        setSelectedRequests(selected);
    };

    // Filter handlers with proper state management
    const handleFilterChange = useCallback((filterKey: string, value: any) => {
        console.log(`🎯 handleFilterChange: key=${filterKey}, value=${value}, type=${typeof value}`);
        filterManager.setFilter(filterKey as keyof RequestFilters, value);
        const newActiveFilters = filterManager.getFilters();
        console.log(`📋 Active filters after update:`, newActiveFilters);
        setActiveFilters(newActiveFilters);
        // Reset pagination to first page
        setPagination(prev => ({ ...prev, page: 1 }));
    }, [filterManager]);

    const handleResetFilters = useCallback(() => {
        filterManager.resetFilters();
        setActiveFilters({});
        setSearchInput('');
        setPagination(prev => ({ ...prev, page: 1 }));
    }, [filterManager]);

    // Search handlers - FIXED: Proper API integration
    const handleSearchInputChange = useCallback((value: string) => {
        setSearchInput(value);
    }, []);
    
    const handleSearchSubmit = useCallback((value: string) => {
        console.log(`🔍 Waiting Tickets Search submitted: "${value}"`);
        setSearchInput(value);
        filterManager.setFilter('search', value);
        
        // Batch state updates to prevent multiple re-renders
        React.startTransition(() => {
            setActiveFilters(filterManager.getFilters());
            setPagination(prev => ({ ...prev, page: 1 }));
        });
    }, [filterManager]);

    // Refresh handler
    const handleRefresh = useCallback(() => {
        fetchRequests();
    }, [fetchRequests]);

    // Table columns (API'den gelen Ticket yapısına göre)
    const tableColumns = useMemo(() => getTableColumns(), []);

    // GridView UI Adapter
    const gridViewUI = useMemo(() => ({
        Card,
        Button,
        Checkbox,
        TablePagination,
        Badge,
        EmptyState,
        Skeleton,
        BulkActionsBar,
    }), []);

    // GridView getItemId
    const getRequestId = useCallback((req: Ticket) => req.id, []);

    // Page change handlers
    const handlePageChange = useCallback((page: number) => {
        setPagination(prev => ({ ...prev, page }));
    }, []);

    const handleRecordsPerPageChange = useCallback((limit: number) => {
        setPagination(prev => ({ ...prev, limit, page: 1 }));
    }, []);

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title="Bekleyen Hizmet Talepleri"
                        breadcrumbItems={breadcrumbItems}
                    />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Summary */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                                    Bekleyen Talepler <span className="text-primary-gold">({requests.length} Talep)</span>
                                </h2>
                                <p className="text-text-light-secondary dark:text-text-secondary">
                                    Bekleyen: {requests.length}
                                </p>
                            </div>
                            <div className="flex gap-3">
                                <Button variant="ghost" size="md" icon={RefreshCw} onClick={handleRefresh}>
                                    Yenile
                                </Button>
                            </div>
                        </div>

                        {/* Search and Filters */}
                        <Card className="mb-6">
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    {/* Search Bar */}
                                    <div className="flex-1">
                                        <SearchBar
                                            placeholder="Talep başlığı, sakin adı, daire veya tip ile ara..."
                                            value={searchInput}
                                            onChange={handleSearchInputChange}
                                            onSearch={handleSearchSubmit}
                                            debounceMs={500}
                                        />
                                    </div>
                                    {/* Filter and View Toggle */}
                                    <div className="flex gap-2 items-center">
                                        <Button
                                            variant={showFilters ? "primary" : "secondary"}
                                            size="md"
                                            icon={Filter}
                                            onClick={() => setShowFilters(true)}
                                        >
                                            Filtreler
                                        </Button>
                                        <ViewToggle
                                            options={[
                                                { id: 'table', label: 'Tablo', icon: List },
                                                { id: 'grid', label: 'Kart', icon: Grid3X3 },
                                            ]}
                                            activeView={viewMode}
                                            onViewChange={(viewId) => setViewMode(viewId as typeof viewMode)}
                                            size="sm"
                                        />
                                    </div>
                                </div>
                            </div>
                        </Card>
                        
                        {/* Filter Sidebar (Drawer) */}
                        <div className={`fixed inset-0 z-50 ${showFilters ? 'pointer-events-auto' : 'pointer-events-none'}`}>
                            {/* Backdrop */}
                            <div
                                className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${showFilters ? 'opacity-50' : 'opacity-0'}`}
                                onClick={() => setShowFilters(false)}
                            />
                            {/* Drawer */}
                            <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-background-light-card dark:bg-background-card shadow-2xl transform transition-transform duration-300 ease-in-out ${showFilters ? 'translate-x-0' : 'translate-x-full'}`}>
                                <FilterPanel
                                    filterGroups={requestFilterGroups}
                                    onApplyFilters={(filters) => {
                                        Object.entries(filters).forEach(([key, value]) => {
                                            handleFilterChange(key, value);
                                        });
                                        setShowFilters(false);
                                    }}
                                    onResetFilters={handleResetFilters}
                                    onClose={() => setShowFilters(false)}
                                    variant="sidebar"
                                />
                            </div>
                        </div>

                        {/* Quick Stats Cards */}
                        <div className="mb-8">
                            <div className="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-4">
                                <StatsCard
                                    title="Bekleyen Talepler"
                                    value={requests.length}
                                    icon={PauseCircle}
                                    color="warning"
                                    loading={loading}
                                    size="md"
                                />
                            </div>
                        </div>
                        
                        {/* Content Area */}
                        <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
                            {/* Main Content */}
                            <div className="lg:col-span-1">
                                {viewMode === 'table' && (
                                    <GenericListView
                                        data={requests}
                                        loading={loading}
                                        error={error}
                                        columns={tableColumns}
                                        onSelectionChange={handleListSelectionChange}
                                        pagination={{
                                            currentPage: pagination.page,
                                            totalPages: pagination.totalPages,
                                            totalRecords: pagination.total,
                                            recordsPerPage: pagination.limit,
                                            onPageChange: handlePageChange,
                                            onRecordsPerPageChange: handleRecordsPerPageChange,
                                        }}
                                        ActionMenuComponent={RequestActionMenuWrapper}
                                        selectable={true}
                                        showPagination={true}
                                        emptyStateMessage="Henüz bekleyen hizmet talebi bulunmuyor."
                                    />
                                )}
                                {viewMode === 'grid' && (
                                    <GenericGridView
                                        data={requests}
                                        loading={loading}
                                        error={error}
                                        onSelectionChange={handleGridSelectionChange}
                                        selectedItems={selectedRequests.map(r => r.id)}
                                        pagination={{
                                            currentPage: pagination.page,
                                            totalPages: pagination.totalPages,
                                            totalRecords: pagination.total,
                                            recordsPerPage: pagination.limit,
                                            onPageChange: handlePageChange,
                                            onRecordsPerPageChange: handleRecordsPerPageChange,
                                        }}
                                        emptyStateMessage="Henüz bekleyen hizmet talebi bulunmuyor."
                                        ui={gridViewUI}
                                        ActionMenu={RequestActionMenuWrapper}
                                        renderCard={renderRequestCard}
                                        getItemId={getRequestId}
                                        selectable={true}
                                        showBulkActions={false}
                                        showPagination={true}
                                        showSelectAll={true}
                                        loadingCardCount={6}
                                        gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
                                    />
                                )}
                            </div>
                        </div>
                    </main>
                    {/* Detay Modalı */}
                    <RequestDetailModal
                        open={detailModal.open}
                        onClose={() => setDetailModal({ open: false, item: null })}
                        item={detailModal.item}
                        onActionComplete={() => {
                            setDetailModal({ open: false, item: null });
                            fetchRequests();
                        }}
                    />
                    {/* Confirmation Modal */}
                    <ConfirmationModal
                        isOpen={confirmationDialog.isOpen}
                        onClose={hideConfirmation}
                        onConfirm={confirmDelete}
                        title="Talep Silme"
                        description={
                            confirmationDialog.ticket 
                                ? `"${confirmationDialog.ticket.title}" adlı talep kalıcı olarak silinecektir. Bu işlem geri alınamaz.`
                                : "Bu talebi silmek istediğinizden emin misiniz?"
                        }
                        variant="danger"
                        loading={isDeleting}
                        itemName={confirmationDialog.ticket?.title}
                        itemType="talep"
                        confirmText="Sil"
                        cancelText="İptal"
                    />
                </div>
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/residents/pending/page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Checkbox from '@/app/components/ui/Checkbox';
import Modal from '@/app/components/ui/Modal';
import SearchBar from '@/app/components/ui/SearchBar';
import BulkActionsBar from '@/app/components/ui/BulkActionsBar';
import ResidentGridTemplate from '@/app/components/templates/GridList';
import TablePagination from '@/app/components/ui/TablePagination';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import { DocumentViewer } from '@/app/components/ui/DocumentViewer';
import {
    RefreshCw,
    AlertTriangle,
    Search,
    Check,
    X,
    MessageSquare,
    Mail,
    Eye,
    Clock,
    AlertCircle,
    User,
    Phone,
    Home,
    Calendar,
    Download,
    TrendingDown,
    FileX,
    MoreVertical
} from 'lucide-react';
import { usePendingResidents } from '@/hooks/usePendingResidents';
import type { Resident as ApiResident } from '@/services/types/resident.types';
import { adminResidentService } from '@/services/admin-resident.service';
import { useToast } from '@/hooks/useToast';

// UI Resident tipi
interface ResidentCardData {
    id: string | number;
    firstName: string;
    lastName: string;
    address?: {
        block?: string;
        apartment?: string;
    };
    contact?: {
        phone?: string;
        email?: string;
    };
    phone?: string;
    email?: string;
    block?: string;
    apartment?: string;
    residentType?: any;
    createdAt?: string;
    status?: any;
    membershipTier?: string; // Yeni eklenen alan
}

function mapApiResidentToGridData(resident: ApiResident) {
    return {
        id: resident.id,
        firstName: resident.firstName,
        lastName: resident.lastName,
        address: {
            block: resident.property?.block,
            apartment: resident.property?.apartment,
        },
        contact: {
            phone: resident.phone,
            email: resident.email,
        },
        residentType: resident.property?.ownershipType
            ? { label: resident.property.ownershipType === 'owner' ? 'Malik' : resident.property.ownershipType === 'tenant' ? 'Kiracı' : 'Diğer', value: resident.property.ownershipType }
            : { label: 'Diğer', value: 'other' },
        status: resident.status
            ? { label: String(resident.status), value: resident.status }
            : { label: 'Bekliyor', value: 'pending' },
        createdAt: resident.createdAt,
        membershipTier: resident.membershipTier, // Yeni eklenen alan
    };
}

export default function PendingApprovalsPage() {
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [selectedApplications, setSelectedApplications] = useState<(string | number)[]>([]);
    const [filterType, setFilterType] = useState<'all' | 'today'>('all');
    const [searchTerm, setSearchTerm] = useState('');
    const [showApprovalModal, setShowApprovalModal] = useState(false);
    const [selectedApplication, setSelectedApplication] = useState<ResidentCardData | null>(null);
    const [showInfoModal, setShowInfoModal] = useState(false);
    const [showDetailModal, setShowDetailModal] = useState(false);
    const [approvalLoading, setApprovalLoading] = useState(false);
    const [approvalError, setApprovalError] = useState<string | null>(null);
    const [showRejectModal, setShowRejectModal] = useState(false);
    
    // Document states
    const [nationalIdImage, setNationalIdImage] = useState<string | null>(null);
    const [ownershipImage, setOwnershipImage] = useState<string | null>(null);
    const [documentsLoading, setDocumentsLoading] = useState(false);
    const [documentsError, setDocumentsError] = useState<string | null>(null);

    // API'den veri çek
    const { residents, loading, error, refresh } = usePendingResidents();
    const gridResidents = residents.map(mapApiResidentToGridData);
    console.log("residents", residents);
    const { success: showSuccessToast, error: showErrorToast } = useToast();
    // Breadcrumb
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Sakinler', href: '/dashboard/residents' },
        { label: 'Onay Bekleyenler', active: true }
    ];

    // Filtreleme
    const filteredApplications = gridResidents.filter(app => {
        const matchesSearch = searchTerm === '' ||
            app.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            app.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            app.contact?.phone?.includes(searchTerm);
        // "today" filtresi için başvuru tarihi bugüne ait mi?
        const isToday = (() => {
            if (!app.createdAt) return false;
            const today = new Date();
            const created = new Date(app.createdAt);
            return today.toDateString() === created.toDateString();
        })();
        const matchesFilter = filterType === 'all' || (filterType === 'today' && isToday);
        return matchesSearch && matchesFilter;
    });
    // Sayaçlar
    const todayCount = gridResidents.filter(app => {
        if (!app.createdAt) return false;
        const today = new Date();
        const created = new Date(app.createdAt);
        return today.toDateString() === created.toDateString();
    }).length;
    // Bulk actions örnek (isteğe göre düzenlenebilir)
    const bulkActions = [
        {
            id: 'approve',
            label: 'Toplu Onayla',
            icon: Check,
            onClick: (selected: any[]) => {
                // Toplu onay işlemi
            },
            variant: 'success' as const,
        },
        {
            id: 'reject',
            label: 'Toplu Reddet',
            icon: X,
            onClick: (selected: any[]) => {
                // Toplu reddet işlemi
            },
            variant: 'danger' as const,
        },
    ];
    // Approve handler
    const handleApprove = async () => {
        if (!selectedApplication) return;
        setApprovalLoading(true);
        setApprovalError(null);
        try {
            await adminResidentService.approveResident(String(selectedApplication.id), {
                decision: 'approved',
                reason: 'All documents verified successfully',
                assignedRole: 'resident',
                initialMembershipTier: 'SILVER',
            });
            showSuccessToast('Başvuru onaylandı', `${selectedApplication.firstName} ${selectedApplication.lastName} başarıyla onaylandı.`);
            setShowApprovalModal(false);
            refresh();
        } catch (err: any) {
            setApprovalError(err?.message || 'Onaylama işlemi başarısız oldu.');
            showErrorToast('Onaylama Hatası', err?.message || 'Onaylama işlemi başarısız oldu.');
        } finally {
            setApprovalLoading(false);
        }
    };
    // Reject handler
    const handleReject = async () => {
        if (!selectedApplication) return;
        setApprovalLoading(true);
        setApprovalError(null);
        try {
            await adminResidentService.approveResident(String(selectedApplication.id), {
                decision: 'rejected',
                reason: 'Eksik veya hatalı bilgi',
                assignedRole: 'resident',
                initialMembershipTier: 'SILVER',
            });
            showSuccessToast('Başvuru reddedildi', `${selectedApplication.firstName} ${selectedApplication.lastName} başvurusu reddedildi.`);
            setShowRejectModal(false);
            refresh();
        } catch (err: any) {
            setApprovalError(err?.message || 'Reddetme işlemi başarısız oldu.');
            showErrorToast('Reddetme Hatası', err?.message || 'Reddetme işlemi başarısız oldu.');
        } finally {
            setApprovalLoading(false);
        }
    };
    // Load documents for selected resident
    const loadDocuments = async (residentId: string) => {
        setDocumentsLoading(true);
        setDocumentsError(null);
        setNationalIdImage(null);
        setOwnershipImage(null);
        
        try {
            // Load both documents in parallel
            const [nationalIdResponse, ownershipResponse] = await Promise.allSettled([
                adminResidentService.getNationalIdDocument(residentId),
                adminResidentService.getOwnershipDocument(residentId)
            ]);
            
            // Handle national ID document
            if (
                nationalIdResponse.status === 'fulfilled' &&
                nationalIdResponse.value?.data &&
                nationalIdResponse.value.data.staticUrl
            ) {
                setNationalIdImage(nationalIdResponse.value.data.staticUrl);
            }
            
            // Handle ownership document
            if (
                ownershipResponse.status === 'fulfilled' &&
                ownershipResponse.value?.data &&
                ownershipResponse.value.data.staticUrl
            ) {
                setOwnershipImage(ownershipResponse.value.data.staticUrl);
            }
            
        } catch (error: any) {
            setDocumentsError(error?.message || 'Belgeler yüklenirken hata oluştu');
            showErrorToast('Belge Yükleme Hatası', error?.message || 'Belgeler yüklenirken hata oluştu');
        } finally {
            setDocumentsLoading(false);
        }
    };

    // Action handler
    const handleGridAction = (action: string, resident: any) => {
        if (action === 'approve') {
            setSelectedApplication(resident);
            setShowApprovalModal(true);
        } else if (action === 'reject') {
            setSelectedApplication(resident);
            setShowRejectModal(true);
        } else if (action === 'message') {
            // Bilgi iste
        } else if (action === 'view') {
            setSelectedApplication(resident);
            setShowDetailModal(true);
            // Load documents when modal opens
            loadDocuments(String(resident.id));
        }
    };
    // Pagination dummy (isteğe göre gerçek pagination eklenebilir)
    const pagination = {
        currentPage: 1,
        totalPages: 1,
        totalRecords: filteredApplications.length,
        recordsPerPage: filteredApplications.length,
        onPageChange: () => { },
        onRecordsPerPageChange: () => { },
    };

    // ActionMenu: üç nokta ile açılan menü
    const PendingActionMenu: React.FC<{ row: any }> = ({ row }) => {
        const [open, setOpen] = useState(false);
        const menuRef = React.useRef<HTMLDivElement>(null);
        const buttonRef = React.useRef<HTMLButtonElement>(null);
        
        React.useEffect(() => {
            const handleClickOutside = (event: MouseEvent) => {
                if (
                    menuRef.current &&
                    buttonRef.current &&
                    !menuRef.current.contains(event.target as Node) &&
                    !buttonRef.current.contains(event.target as Node)
                ) {
                    setOpen(false);
                }
            };
            document.addEventListener('mousedown', handleClickOutside);
            return () => document.removeEventListener('mousedown', handleClickOutside);
        }, []);
        
        return (
            <div className="relative flex items-center justify-center">
                <button
                    ref={buttonRef}
                    className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
                    onClick={() => setOpen((v) => !v)}
                    type="button"
                >
                    <MoreVertical className="w-5 h-5" />
                </button>
                <div
                    ref={menuRef}
                    className={`absolute right-0 top-full mt-1 w-40 bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 ${open ? '' : 'hidden'}`}
                >
                    {/* <button
                        onClick={() => {
                            setOpen(false);
                            setShowInfoModal(true);
                            setSelectedApplication(row);
                        }}
                        className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
                    >
                        <Mail className="w-5 h-5" /> Bilgi İste
                    </button> */}
                    <button
                        onClick={() => {
                            setOpen(false);
                            setShowDetailModal(true);
                            setSelectedApplication(row);
                        }}
                        className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
                    >
                        <Eye className="w-5 h-5" /> İncele
                    </button>
                </div>
            </div>
        );
    };
    // Kart altı custom butonlar
    const renderCardActions = (resident: any) => (
        <div className="mt-6 flex gap-3">
            <Button
                variant="primary"
                size="sm"
                icon={Check}
                className="rounded-lg font-medium shadow-sm hover:bg-primary-gold/10 dark:hover:bg-primary-gold/20 focus:ring-2 focus:ring-primary-gold/30"
                onClick={() => handleGridAction('approve', resident)}
            >
                Onayla
            </Button>
            <Button
                variant="danger"
                size="sm"
                icon={X}
                className="rounded-lg font-medium shadow-sm hover:bg-primary-red/10 dark:hover:bg-primary-red/20 focus:ring-2 focus:ring-primary-red/30"
                onClick={() => handleGridAction('reject', resident)}
            >
                Reddet
            </Button>
        </div>
    );

    // Load documents when detail modal opens or selectedApplication changes
    useEffect(() => {
        if (showDetailModal && selectedApplication?.id) {
            loadDocuments(String(selectedApplication.id));
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [showDetailModal, selectedApplication?.id]);

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                <div className="lg:ml-72">
                    <DashboardHeader
                        title=""
                        breadcrumbItems={breadcrumbItems}
                    />
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Actions */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                                    Onay Bekleyen Sakinler <span className="text-primary-gold">
                                        ({gridResidents.length})
                                    </span>
                                </h2>
                                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    Son 24 saat: {todayCount}
                                </p>
                            </div>
                            <div className="flex gap-3">
                                <Button variant="ghost" size="md" icon={RefreshCw} onClick={refresh} disabled={loading}>
                                    {loading ? 'Yükleniyor...' : 'Yenile'}
                                </Button>
                            </div>
                        </div>
                        {/* Search and Filters */}
                        <Card className="mb-6">
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    {/* Search Bar */}
                                    <div className="flex-1">
                                        <SearchBar
                                            placeholder="İsim, telefon veya daire no ile ara..."
                                            value={searchTerm}
                                            onChange={setSearchTerm}
                                        />
                                    </div>
                                    {/* Filter Buttons */}
                                    <div className="flex gap-2 items-center">
                                        <Button
                                            variant={filterType === 'all' ? 'primary' : 'secondary'}
                                            size="sm"
                                            onClick={() => setFilterType('all')}
                                        >
                                            Tümü ({gridResidents.length})
                                        </Button>
                                        <Button
                                            variant={filterType === 'today' ? 'primary' : 'secondary'}
                                            size="sm"
                                            onClick={() => setFilterType('today')}
                                        >
                                            Bugün ({todayCount})
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </Card>
                        {/* Error Message */}
                        {error && (
                            <Card className="mb-6 border-l-4 border-l-red-500">
                                <div className="p-4">
                                    <div className="flex items-start gap-3">
                                        <AlertTriangle className="h-5 w-5 text-red-500 mt-0.5" />
                                        <div>
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                                                Hata: {error}
                                            </h3>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        )}
                        {/* Applications List (Grid) */}
                        <div className="space-y-4">
                            <ResidentGridTemplate
                                residents={filteredApplications}
                                loading={loading}
                                onSelectionChange={setSelectedApplications}
                                bulkActions={bulkActions}
                                onAction={handleGridAction}
                                selectedResidents={selectedApplications}
                                pagination={pagination}
                                emptyStateMessage={
                                    error ? 'Veri yüklenirken hata oluştu.' :
                                        searchTerm ? `"${searchTerm}" araması için sonuç bulunamadı.` :
                                            'Henüz başvuru bulunmuyor.'
                                }
                                ui={{
                                    Card,
                                    Button,
                                    Checkbox,
                                    TablePagination,
                                    Badge,
                                    EmptyState,
                                    Skeleton,
                                    BulkActionsBar,
                                }}
                                ActionMenu={PendingActionMenu}
                                renderCardActions={renderCardActions}
                                getStatusColor={() => 'gold'}
                            />
                        </div>
                    </main>
                </div>
            </div>
            {/* Approval Modal */}
            <Modal
                isOpen={showApprovalModal}
                onClose={() => { setShowApprovalModal(false); setApprovalError(null); }}
                title="Başvuru Onaylama"
                size="md"
            >
                {selectedApplication && (
                    <div className="space-y-6">
                        <div>
                            <h3 className="text-lg font-medium">
                                {selectedApplication.firstName} {selectedApplication.lastName} - {selectedApplication.address?.block || selectedApplication.block} Blok, Daire {selectedApplication.address?.apartment || selectedApplication.apartment}
                            </h3>
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-3">Onay Seçenekleri:</label>
                            <div className="space-y-2">
                                <label className="flex items-center">
                                    <input type="radio" name="approval-type" defaultChecked className="mr-2" />
                                    <span className="text-sm">Tam onay - Tüm haklara sahip</span>
                                </label>
                                <label className="flex items-center">
                                    <input type="radio" name="approval-type" className="mr-2" />
                                    <span className="text-sm">Şartlı onay - Kısıtlı erişim</span>
                                </label>
                            </div>
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-3">Otomatik İşlemler:</label>
                            <div className="space-y-2">
                                <Checkbox label="QR kod oluştur ve aktifleştir" defaultChecked />
                                <Checkbox label="Mobil uygulama erişimi ver" defaultChecked />
                                <Checkbox label="Hoşgeldin mesajı gönder" defaultChecked />
                            </div>
                        </div>
                        <div className="flex justify-end gap-3">
                            <Button variant="secondary" onClick={() => { setShowApprovalModal(false); setApprovalError(null); }} disabled={approvalLoading}>
                                İptal
                            </Button>
                            <Button variant="primary" icon={Check} onClick={handleApprove} disabled={approvalLoading}>
                                {approvalLoading ? 'Onaylanıyor...' : 'Onayla ve Bilgilendir'}
                            </Button>
                        </div>
                        {approvalError && (
                            <div className="text-primary-red text-sm mt-2">{approvalError}</div>
                        )}
                    </div>
                )}
            </Modal>
            {/* Bilgi İste Modal */}
            <Modal
                isOpen={showInfoModal}
                onClose={() => setShowInfoModal(false)}
                title="Bilgi İste"
                size="md"
            >
                {selectedApplication && (
                    <div className="space-y-6">
                        <div>
                            <h3 className="text-lg font-medium">
                                {selectedApplication.firstName} {selectedApplication.lastName} - {selectedApplication.address?.block || selectedApplication.block} Blok, Daire {selectedApplication.address?.apartment || selectedApplication.apartment}
                            </h3>
                        </div>
                        <div>
                            <p>Burada bilgi iste modal içeriği olacak.</p>
                        </div>
                        <div className="flex justify-end gap-3">
                            <Button variant="secondary" onClick={() => setShowInfoModal(false)}>
                                Kapat
                            </Button>
                        </div>
                    </div>
                )}
            </Modal>
            {/* İncele Modal */}
            <Modal
                isOpen={showDetailModal}
                onClose={() => {
                    setShowDetailModal(false);
                    setNationalIdImage(null);
                    setOwnershipImage(null);
                    setDocumentsError(null);
                }}
                title="Başvuru İncele"
                size="xl"
            >
                {selectedApplication && (
                    <div className="relative">
                        {/* Scrollable Content */}
                        <div className="overflow-y-auto max-h-[60vh] pr-2 pb-32 space-y-8">
                            {/* Header: İsim ve Membership Tier */}
                            <div className="flex items-center gap-4 pb-6 border-b border-gray-200 dark:border-gray-700">
                                <div className="flex-shrink-0 bg-primary-gold-light/30 dark:bg-primary-gold/20 rounded-xl p-3">
                                    <User className="w-8 h-8 text-primary-gold" />
                                </div>
                                <div>
                                    <h3 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark mb-1">
                                        {selectedApplication.firstName} {selectedApplication.lastName}
                                    </h3>
                                    {/* Membership Tier Badge */}
                                    {selectedApplication.membershipTier && (
                                        <Badge variant="soft" color="gold" className="text-xs font-medium">
                                            {selectedApplication.membershipTier}
                                        </Badge>
                                    )}
                                </div>
                            </div>

                            {/* Bilgi Grid */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                {/* Sol Sütun */}
                                <div className="space-y-4">
                                    {/* Bina Bilgisi */}
                                    <div className="flex items-center gap-3">
                                        <Home className="w-5 h-5 text-primary-gold" />
                                        <span className="text-sm text-text-on-light dark:text-text-on-dark">
                                            {selectedApplication.address?.block || selectedApplication.block} Blok, Daire {selectedApplication.address?.apartment || selectedApplication.apartment}
                                        </span>
                                    </div>
                                    {/* Başvuru Tarihi */}
                                    {selectedApplication.createdAt && (
                                        <div className="flex items-center gap-3">
                                            <Calendar className="w-5 h-5 text-primary-gold" />
                                            <span className="text-sm text-text-on-light dark:text-text-on-dark">
                                                {new Date(selectedApplication.createdAt).toLocaleDateString('tr-TR', { year: 'numeric', month: 'long', day: 'numeric' })}
                                            </span>
                                        </div>
                                    )}
                                </div>
                                {/* Sağ Sütun */}
                                <div className="space-y-4">
                                    {/* Telefon */}
                                    {(selectedApplication.contact?.phone || selectedApplication.phone) && (
                                        <div className="flex items-center gap-3">
                                            <Phone className="w-5 h-5 text-primary-gold" />
                                            <span className="text-sm text-text-on-light dark:text-text-on-dark">
                                                {selectedApplication.contact?.phone || selectedApplication.phone}
                                            </span>
                                        </div>
                                    )}
                                    {/* E-posta */}
                                    {(selectedApplication.contact?.email || selectedApplication.email) && (
                                        <div className="flex items-center gap-3">
                                            <Mail className="w-5 h-5 text-primary-gold" />
                                            <span className="text-sm text-text-on-light dark:text-text-on-dark">
                                                {selectedApplication.contact?.email || selectedApplication.email}
                                            </span>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Belgeler Bölümü */}
                            <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                                <h4 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                                    Başvuru Belgeleri
                                </h4>
                                
                                {documentsError && (
                                    <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                                        <div className="flex items-center gap-2">
                                            <AlertTriangle className="w-5 h-5 text-red-500" />
                                            <span className="text-red-700 dark:text-red-300 text-sm">{documentsError}</span>
                                        </div>
                                    </div>
                                )}

                                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                    {/* Kimlik Belgesi */}
                                    <DocumentViewer
                                        title="Kimlik Belgesi"
                                        imageUrl={nationalIdImage || undefined}
                                        alt="Kimlik belgesi"
                                        loading={documentsLoading}
                                        error={!nationalIdImage && !documentsLoading}
                                        onRetry={() => loadDocuments(String(selectedApplication.id))}
                                    />

                                    {/* Tapu Belgesi */}
                                    <DocumentViewer
                                        title="Tapu/Mülkiyet Belgesi"
                                        imageUrl={ownershipImage || undefined}
                                        alt="Tapu belgesi"
                                        loading={documentsLoading}
                                        error={!ownershipImage && !documentsLoading}
                                        onRetry={() => loadDocuments(String(selectedApplication.id))}
                                    />
                                </div>
                            </div>
                        </div>
                        {/* Sticky Modal Actions */}
                        <div className="absolute left-0 bottom-0 w-full bg-background-light-card dark:bg-background-card border-t border-gray-200 dark:border-gray-700 py-4 px-6 flex justify-between items-center z-10">
                            <div className="flex gap-3">
                                <Button 
                                    variant="primary" 
                                    icon={Check}
                                    onClick={() => {
                                        setShowDetailModal(false);
                                        setShowApprovalModal(true);
                                    }}
                                >
                                    Onayla
                                </Button>
                                <Button 
                                    variant="danger" 
                                    icon={X}
                                    onClick={() => {
                                        setShowDetailModal(false);
                                        setShowRejectModal(true);
                                    }}
                                >
                                    Reddet
                                </Button>
                            </div>
                            <Button variant="secondary" onClick={() => {
                                setShowDetailModal(false);
                                setNationalIdImage(null);
                                setOwnershipImage(null);
                                setDocumentsError(null);
                            }}>
                                Kapat
                            </Button>
                        </div>
                    </div>
                )}
            </Modal>
            {/* Reject Modal */}
            <Modal
                isOpen={showRejectModal}
                onClose={() => { setShowRejectModal(false); setApprovalError(null); }}
                title="Başvuru Reddet"
                size="md"
            >
                {selectedApplication && (
                    <div className="space-y-6">
                        <div>
                            <h3 className="text-lg font-medium">
                                {selectedApplication.firstName} {selectedApplication.lastName} - {selectedApplication.address?.block || selectedApplication.block} Blok, Daire {selectedApplication.address?.apartment || selectedApplication.apartment}
                            </h3>
                        </div>
                        <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                            Bu başvuru <span className="text-primary-red font-semibold">reddedilecektir</span>. Varsayılan neden: <span className="italic">Eksik veya hatalı bilgi</span>
                        </div>
                        <div className="flex justify-end gap-3">
                            <Button variant="secondary" onClick={() => { setShowRejectModal(false); setApprovalError(null); }} disabled={approvalLoading}>
                                İptal
                            </Button>
                            <Button variant="danger" icon={X} onClick={handleReject} disabled={approvalLoading}>
                                {approvalLoading ? 'Reddediliyor...' : 'Reddet'}
                            </Button>
                        </div>
                        {approvalError && (
                            <div className="text-primary-red text-sm mt-2">{approvalError}</div>
                        )}
                    </div>
                )}
            </Modal>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/dashboard/units/[id]/components/OwnerInfoSection.tsx">
import React, { useState, useEffect } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Modal from '@/app/components/ui/Modal';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import DatePicker from '@/app/components/ui/DatePicker';
import { OwnerInfo, UpdateOwnerInfoDto } from '@/services/types/unit-detail.types';
import { User, Phone, Mail, Edit, Save, X, IdCard, UserPlus } from 'lucide-react';
import { useToast } from '@/hooks/useToast';
import { residentService } from '@/services/resident.service';

interface OwnerInfoSectionProps {
  ownerInfo: OwnerInfo;
  onUpdate?: (data: UpdateOwnerInfoDto) => Promise<void>;
  onRemove?: () => Promise<void>;
  loading?: boolean;
  canEdit?: boolean;
}

interface Resident {
  id: string;
  firstName: string;
  lastName: string;
  fullName: string;
  phone?: string;
  email?: string;
}

export default function OwnerInfoSection({ 
  ownerInfo, 
  onUpdate, 
  onRemove,
  loading = false,
  canEdit = true 
}: OwnerInfoSectionProps) {
  const [showEditModal, setShowEditModal] = useState(false);
  const [showAddNewResident, setShowAddNewResident] = useState(false);
  const [formData, setFormData] = useState({
    fullName: ownerInfo.data.fullName.value,
    phone: ownerInfo.data.phone.value,
    email: ownerInfo.data.email.value,
    nationalId: ownerInfo.data.nationalId.value,
    ownershipType: ownerInfo.data.ownershipType.value
  });
  const [newResidentData, setNewResidentData] = useState({
    identityNumber: '',
    firstName: '',
    lastName: '',
    phone: '',
    relationship: '',
    gender: '',
    birthDate: '',
    birthPlace: '',
    bloodType: ''
  });
  const [selectedResident, setSelectedResident] = useState('');
  const [residents, setResidents] = useState<Resident[]>([]);
  const [loadingResidents, setLoadingResidents] = useState(false);
  const [saving, setSaving] = useState(false);
  const toast = useToast();

  const handleEdit = () => {
    setShowEditModal(true);
    setShowAddNewResident(false); // Yeni sakin ekleme formunu kapat
    setFormData({
      fullName: ownerInfo.data.fullName.value,
      phone: ownerInfo.data.phone.value,
      email: ownerInfo.data.email.value,
      nationalId: ownerInfo.data.nationalId.value,
      ownershipType: ownerInfo.data.ownershipType.value
    });
    loadResidents();
  };

  const loadResidents = async () => {
    setLoadingResidents(true);
    try {
      const response = await residentService.getAllResidents({ limit: 1000 });
      const residentsList = response.data.map((resident: any) => ({
        id: resident.id,
        firstName: resident.firstName,
        lastName: resident.lastName,
        fullName: `${resident.firstName} ${resident.lastName}`,
        phone: resident.phone,
        email: resident.email
      }));
      setResidents(residentsList);
    } catch (error) {
      console.error('Failed to load residents:', error);
      toast.error('Sakinler yüklenirken hata oluştu');
    } finally {
      setLoadingResidents(false);
    }
  };

  const handleSave = async () => {
    if (!onUpdate) return;

    setSaving(true);
    try {
      await onUpdate({
        fullName: formData.fullName,
        phone: formData.phone,
        email: formData.email,
        nationalId: formData.nationalId,
        ownershipType: formData.ownershipType as 'owner' | 'investor' | 'inherited'
      });
      setShowEditModal(false);
      toast.success('Malik bilgileri güncellendi');
    } catch (error) {
      toast.error('Güncelleme başarısız oldu');
    } finally {
      setSaving(false);
    }
  };

  const handleResidentSelect = (residentId: string) => {
    if (!residentId) return;
    
    const selectedResidentData = residents.find(r => r.id === residentId);
    if (selectedResidentData) {
      setFormData({
        fullName: selectedResidentData.fullName,
        phone: selectedResidentData.phone || '',
        email: selectedResidentData.email || '',
        nationalId: formData.nationalId,
        ownershipType: formData.ownershipType
      });
      setSelectedResident(residentId);
    }
  };

  const handleAddNewResident = () => {
    setShowAddNewResident(true);
  };

  const handleNewResidentInputChange = (field: string, value: string) => {
    setNewResidentData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCreateNewResident = async () => {
    if (!newResidentData.identityNumber || !newResidentData.firstName || !newResidentData.lastName || !newResidentData.phone || !newResidentData.relationship) {
      toast.error('Lütfen tüm zorunlu alanları doldurun');
      return;
    }

    setSaving(true);
    try {
      // Burada yeni sakin oluşturma API'si çağrılacak
      // Şimdilik sadece form verilerini kullanıyoruz
      setFormData({
        fullName: `${newResidentData.firstName} ${newResidentData.lastName}`,
        phone: newResidentData.phone,
        email: '',
        nationalId: newResidentData.identityNumber,
        ownershipType: 'owner'
      });
      
      setShowAddNewResident(false);
      setNewResidentData({
        identityNumber: '',
        firstName: '',
        lastName: '',
        phone: '',
        relationship: '',
        gender: '',
        birthDate: '',
        birthPlace: '',
        bloodType: ''
      });
      toast.success('Yeni sakin bilgileri eklendi');
    } catch (error) {
      toast.error('Sakin eklenirken hata oluştu');
    } finally {
      setSaving(false);
    }
  };

  const getInitials = (name: string) => {
    const parts = name.split(' ');
    return parts.map(part => part.charAt(0)).join('').toUpperCase().slice(0, 2);
  };

  const getOwnershipTypeColor = (type: string): 'primary' | 'secondary' | 'gold' => {
    const option = ownerInfo.data.ownershipType.options.find(opt => 
      typeof opt === 'object' && opt.value === type
    );
    if (typeof option === 'object') {
      switch (option.color) {
        case 'blue': return 'primary';
        case 'purple': return 'secondary';
        case 'green': return 'primary';
        default: return 'secondary';
      }
    }
    return 'secondary';
  };

  const getOwnershipTypeLabel = (type: string): string => {
    const option = ownerInfo.data.ownershipType.options.find(opt => 
      typeof opt === 'object' && opt.value === type
    );
    return typeof option === 'object' ? option.label : type;
  };

  const hasOwnerInfo = ownerInfo.data.fullName.value;

  if (!hasOwnerInfo) {
    return (
      <Card>
        <div className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark flex items-center gap-2">
              <User className="h-5 w-5 text-primary-gold" />
              {ownerInfo.title}
            </h3>
            {canEdit && (
              <Button variant="primary" size="sm" icon={Edit} onClick={handleEdit}>
                Malik Ekle
              </Button>
            )}
          </div>
          <div className="text-center py-8">
            <User className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
            <p className="text-text-light-muted dark:text-text-muted">
              Henüz malik bilgisi eklenmemiş
            </p>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <>
      <Card>
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark flex items-center gap-2">
              <User className="h-5 w-5 text-primary-gold" />
              {ownerInfo.title}
            </h3>
            {canEdit && (
              <Button
                variant="ghost"
                size="sm"
                icon={Edit}
                onClick={handleEdit}
                disabled={loading}
              >
                Düzenle
              </Button>
            )}
          </div>

          <div className="flex items-start gap-4">
            {/* Avatar */}
            <div className="flex-shrink-0">
              <div className="w-16 h-16 rounded-full bg-primary-gold/10 flex items-center justify-center">
                <span className="text-lg font-bold text-primary-gold">
                  {getInitials(ownerInfo.data.fullName.value)}
                </span>
              </div>
            </div>

            {/* Info */}
            <div className="flex-1 space-y-4">
              <div>
                <h4 className="text-lg font-medium text-text-on-light dark:text-text-on-dark">
                  {ownerInfo.data.fullName.value}
                </h4>
                <Badge 
                  variant="soft" 
                  color={getOwnershipTypeColor(ownerInfo.data.ownershipType.value)}
                  className="mt-1"
                >
                  {getOwnershipTypeLabel(ownerInfo.data.ownershipType.value)}
                </Badge>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                {/* Phone */}
                {ownerInfo.data.phone.value && (
                  <div className="flex items-center gap-2">
                    <Phone className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                    <a 
                      href={`tel:${ownerInfo.data.phone.value}`}
                      className="text-text-on-light dark:text-text-on-dark hover:text-primary-gold transition-colors"
                    >
                      {ownerInfo.data.phone.value}
                    </a>
                  </div>
                )}

                {/* Email */}
                {ownerInfo.data.email.value && (
                  <div className="flex items-center gap-2">
                    <Mail className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                    <a 
                      href={`mailto:${ownerInfo.data.email.value}`}
                      className="text-text-on-light dark:text-text-on-dark hover:text-primary-gold transition-colors"
                    >
                      {ownerInfo.data.email.value}
                    </a>
                  </div>
                )}

                {/* National ID */}
                {ownerInfo.data.nationalId.value && (
                  <div className="flex items-center gap-2">
                    <IdCard className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                    <span className="text-text-on-light dark:text-text-on-dark">
                      {ownerInfo.data.nationalId.value}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </Card>

      {/* Edit Modal */}
      <Modal
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        title="Malik Bilgilerini Düzenle"
        icon={User}
        size="lg"
      >
        <div className="space-y-6 max-h-[80vh] overflow-y-auto">
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
              {ownerInfo.data.fullName.label}
              {ownerInfo.data.fullName.required && <span className="text-primary-red ml-1">*</span>}
            </label>
            <Input
              value={formData.fullName}
              onChange={(e: any) => setFormData({ ...formData, fullName: e.target.value })}
              placeholder="Ad Soyad"
              disabled={saving}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                {ownerInfo.data.phone.label}
                {ownerInfo.data.phone.required && <span className="text-primary-red ml-1">*</span>}
              </label>
              <Input
                type="tel"
                value={formData.phone}
                onChange={(e: any) => setFormData({ ...formData, phone: e.target.value })}
                placeholder={ownerInfo.data.phone.format}
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                {ownerInfo.data.email.label}
                {ownerInfo.data.email.required && <span className="text-primary-red ml-1">*</span>}
              </label>
              <Input
                type="email"
                value={formData.email}
                onChange={(e: any) => setFormData({ ...formData, email: e.target.value })}
                placeholder="ornek@email.com"
                disabled={saving}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                {ownerInfo.data.nationalId.label}
                {ownerInfo.data.nationalId.required && <span className="text-primary-red ml-1">*</span>}
              </label>
              <Input
                value={formData.nationalId}
                onChange={(e: any) => setFormData({ ...formData, nationalId: e.target.value })}
                placeholder="12345678901"
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                {ownerInfo.data.ownershipType.label}
                {ownerInfo.data.ownershipType.required && <span className="text-primary-red ml-1">*</span>}
              </label>
              <Select
                value={formData.ownershipType}
                onChange={(e: any) => setFormData({ ...formData, ownershipType: e.target.value })}
                options={ownerInfo.data.ownershipType.options}
                disabled={saving}
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Button 
              variant="secondary" 
              onClick={() => setShowEditModal(false)}
              disabled={saving}
            >
              İptal
            </Button>
            <Button 
              variant="primary" 
              icon={Save}
              onClick={handleSave}
              isLoading={saving}
              disabled={!formData.fullName || !formData.phone}
            >
              Kaydet
            </Button>
          </div>

          {/* Sakin Seçimi - Divider altında */}
          <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                Sakin Seçin
              </label>
              <Select
                value={selectedResident}
                onChange={(e: any) => handleResidentSelect(e.target.value)}
                options={[
                  { value: '', label: 'Sakin seçiniz' },
                  ...residents.map(resident => ({
                    value: resident.id,
                    label: `${resident.fullName}${resident.phone ? ` (${resident.phone})` : ''}`
                  }))
                ]}
                disabled={loadingResidents || saving}
              />
            </div>

            {/* Yeni Sakin Ekle Butonu */}
            <div className="mt-4">
              <Button
                variant="secondary"
                size="sm"
                icon={UserPlus}
                onClick={handleAddNewResident}
                disabled={saving}
                className="w-full"
              >
                Yeni Sakin Ekle
              </Button>
            </div>

            {/* Yeni Sakin Ekleme Formu */}
            {showAddNewResident && (
              <div className="mt-6 space-y-6 border-t border-gray-200 dark:border-gray-700 pt-6">
                {/* Ulusal kimlik numarası - En üstte tek başına */}
                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Ulusal kimlik numarası / Pasaport numarası *
                  </label>
                  <Input
                    placeholder="12345678901 veya AA1234567"
                    value={newResidentData.identityNumber}
                    onChange={(e: any) => handleNewResidentInputChange('identityNumber', e.target.value)}
                    disabled={saving}
                  />
                </div>

                {/* Name and Surname */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Ad *
                    </label>
                    <Input
                      placeholder="Ad"
                      value={newResidentData.firstName}
                      onChange={(e: any) => handleNewResidentInputChange('firstName', e.target.value)}
                      disabled={saving}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Soyad *
                    </label>
                    <Input
                      placeholder="Soyad"
                      value={newResidentData.lastName}
                      onChange={(e: any) => handleNewResidentInputChange('lastName', e.target.value)}
                      disabled={saving}
                    />
                  </div>
                </div>

                {/* Phone and Relationship */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Telefon *
                    </label>
                    <Input
                      type="tel"
                      placeholder="+90 555 123 45 67"
                      value={newResidentData.phone}
                      onChange={(e: any) => handleNewResidentInputChange('phone', e.target.value)}
                      disabled={saving}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Yakınlık derecesi *
                    </label>
                    <Select
                      value={newResidentData.relationship}
                      onChange={(e: any) => handleNewResidentInputChange('relationship', e.target.value)}
                      options={[
                        { value: '', label: 'Seçiniz' },
                        { value: 'Eş', label: 'Eş' },
                        { value: 'Çocuk', label: 'Çocuk' },
                        { value: 'Anne', label: 'Anne' },
                        { value: 'Baba', label: 'Baba' },
                        { value: 'Kardeş', label: 'Kardeş' },
                        { value: 'Diğer', label: 'Diğer' }
                      ]}
                      disabled={saving}
                    />
                  </div>
                </div>

                {/* Divider */}
                <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Cinsiyet
                      </label>
                      <Select
                        value={newResidentData.gender}
                        onChange={(e: any) => handleNewResidentInputChange('gender', e.target.value)}
                        options={[
                          { value: '', label: 'Seçiniz' },
                          { value: 'Erkek', label: 'Erkek' },
                          { value: 'Kadın', label: 'Kadın' },
                          { value: 'Diğer', label: 'Diğer' }
                        ]}
                        disabled={saving}
                      />
                    </div>
                    <div>
                      <DatePicker
                        label="Doğum Tarihi"
                        value={newResidentData.birthDate}
                        onChange={(e: any) => handleNewResidentInputChange('birthDate', e.target.value)}
                        maxDate={new Date().toISOString().split('T')[0]}
                        variant="default"
                        showIcon={true}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Doğum Yeri
                      </label>
                      <Input
                        placeholder="İstanbul, Türkiye"
                        value={newResidentData.birthPlace}
                        onChange={(e: any) => handleNewResidentInputChange('birthPlace', e.target.value)}
                        disabled={saving}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Kan Grubu
                      </label>
                      <Select
                        value={newResidentData.bloodType}
                        onChange={(e: any) => handleNewResidentInputChange('bloodType', e.target.value)}
                        options={[
                          { value: '', label: 'Seçiniz' },
                          { value: 'A+', label: 'A+' },
                          { value: 'A-', label: 'A-' },
                          { value: 'B+', label: 'B+' },
                          { value: 'B-', label: 'B-' },
                          { value: 'AB+', label: 'AB+' },
                          { value: 'AB-', label: 'AB-' },
                          { value: 'O+', label: 'O+' },
                          { value: 'O-', label: 'O-' }
                        ]}
                        disabled={saving}
                      />
                    </div>
                  </div>
                </div>

                {/* New Resident Action Buttons */}
                <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <Button 
                    variant="secondary" 
                    onClick={() => setShowAddNewResident(false)}
                    disabled={saving}
                  >
                    İptal
                  </Button>
                  <Button 
                    variant="primary" 
                    icon={Save}
                    onClick={handleCreateNewResident}
                    isLoading={saving}
                    disabled={!newResidentData.identityNumber || !newResidentData.firstName || !newResidentData.lastName || !newResidentData.phone || !newResidentData.relationship}
                  >
                    Ekle
                  </Button>
                </div>
              </div>
            )}
          </div>
        </div>
      </Modal>
    </>
  );
}
</file>

<file path="src/app/dashboard/units/[id]/components/TenantInfoSection.tsx">
import React, { useState, useEffect } from 'react';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import Modal from '@/app/components/ui/Modal';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import DatePicker from '@/app/components/ui/DatePicker';
import { TenantInfo, UpdateTenantInfoDto } from '@/services/types/unit-detail.types';
import { 
  Home, 
  Phone, 
  Mail, 
  Calendar, 
  DollarSign, 
  Edit, 
  UserX, 
  Save, 
  X,
  Clock,
  User,
  UserPlus,
  IdCard
} from 'lucide-react';
import { useToast } from '@/hooks/useToast';
import { residentService } from '@/services/resident.service';

interface TenantInfoSectionProps {
  tenantInfo?: TenantInfo;
  onUpdate?: (data: UpdateTenantInfoDto) => Promise<void>;
  onRemove?: () => Promise<void>;
  loading?: boolean;
  canEdit?: boolean;
}

interface Resident {
  id: string;
  firstName: string;
  lastName: string;
  fullName: string;
  phone?: string;
  email?: string;
}

export default function TenantInfoSection({ 
  tenantInfo, 
  onUpdate, 
  onRemove,
  loading = false,
  canEdit = true 
}: TenantInfoSectionProps) {
  const [showEditModal, setShowEditModal] = useState(false);
  const [showAddNewResident, setShowAddNewResident] = useState(false);
  const [formData, setFormData] = useState({
    tenantName: tenantInfo?.data.tenantName?.value || '',
    tenantPhone: tenantInfo?.data.tenantPhone?.value || '',
    tenantEmail: tenantInfo?.data.tenantEmail?.value || ''
  });
  const [newResidentData, setNewResidentData] = useState({
    identityNumber: '',
    firstName: '',
    lastName: '',
    phone: '',
    relationship: '',
    gender: '',
    birthDate: '',
    birthPlace: '',
    bloodType: ''
  });
  const [selectedResident, setSelectedResident] = useState('');
  const [residents, setResidents] = useState<Resident[]>([]);
  const [loadingResidents, setLoadingResidents] = useState(false);
  const [saving, setSaving] = useState(false);
  const toast = useToast();

  const handleEdit = () => {
    setShowEditModal(true);
    setShowAddNewResident(false); // Yeni sakin ekleme formunu kapat
    setFormData({
      tenantName: tenantInfo?.data.tenantName?.value || '',
      tenantPhone: tenantInfo?.data.tenantPhone?.value || '',
      tenantEmail: tenantInfo?.data.tenantEmail?.value || ''
    });
    loadResidents();
  };

  const loadResidents = async () => {
    setLoadingResidents(true);
    try {
      const response = await residentService.getAllResidents({ limit: 1000 });
      const residentsList = response.data.map((resident: any) => ({
        id: resident.id,
        firstName: resident.firstName,
        lastName: resident.lastName,
        fullName: `${resident.firstName} ${resident.lastName}`,
        phone: resident.phone,
        email: resident.email
      }));
      setResidents(residentsList);
    } catch (error) {
      console.error('Failed to load residents:', error);
      toast.error('Sakinler yüklenirken hata oluştu');
    } finally {
      setLoadingResidents(false);
    }
  };

  const handleSave = async () => {
    if (!onUpdate) return;

    setSaving(true);
    try {
      await onUpdate({
        tenantName: formData.tenantName,
        tenantPhone: formData.tenantPhone,
        tenantEmail: formData.tenantEmail
      });
      setShowEditModal(false);
      toast.success('Kiracı bilgileri güncellendi');
    } catch (error) {
      toast.error('Güncelleme başarısız oldu');
    } finally {
      setSaving(false);
    }
  };

  const handleResidentSelect = (residentId: string) => {
    if (!residentId) return;
    
    const selectedResidentData = residents.find(r => r.id === residentId);
    if (selectedResidentData) {
      setFormData({
        tenantName: selectedResidentData.fullName,
        tenantPhone: selectedResidentData.phone || '',
        tenantEmail: selectedResidentData.email || ''
      });
      setSelectedResident(residentId);
    }
  };

  const handleAddNewResident = () => {
    setShowAddNewResident(true);
  };

  const handleNewResidentInputChange = (field: string, value: string) => {
    setNewResidentData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCreateNewResident = async () => {
    if (!newResidentData.identityNumber || !newResidentData.firstName || !newResidentData.lastName || !newResidentData.phone || !newResidentData.relationship) {
      toast.error('Lütfen tüm zorunlu alanları doldurun');
      return;
    }

    setSaving(true);
    try {
      // Burada yeni sakin oluşturma API'si çağrılacak
      // Şimdilik sadece form verilerini kullanıyoruz
      setFormData({
        tenantName: `${newResidentData.firstName} ${newResidentData.lastName}`,
        tenantPhone: newResidentData.phone,
        tenantEmail: ''
      });
      
      setShowAddNewResident(false);
      setNewResidentData({
        identityNumber: '',
        firstName: '',
        lastName: '',
        phone: '',
        relationship: '',
        gender: '',
        birthDate: '',
        birthPlace: '',
        bloodType: ''
      });
      toast.success('Yeni sakin bilgileri eklendi');
    } catch (error) {
      toast.error('Sakin eklenirken hata oluştu');
    } finally {
      setSaving(false);
    }
  };

  const handleRemoveTenant = async () => {
    if (!onRemove) return;

    if (window.confirm('Kiracı kaydını kaldırmak istediğinizden emin misiniz?')) {
      try {
        await onRemove();
        toast.success('Kiracı kaydı kaldırıldı');
      } catch (error) {
        toast.error('Kiracı kaldırma işlemi başarısız');
      }
    }
  };

  const getInitials = (name: string) => {
    const parts = name.split(' ');
    return parts.map(part => part.charAt(0)).join('').toUpperCase().slice(0, 2);
  };

  const formatCurrency = (amount: number, currency: string = 'IQD') => {
    return new Intl.NumberFormat('tr-TR').format(amount) + ' ' + currency;
  };

  const getLeaseStatusBadge = () => {
    if (!tenantInfo?.data.leaseEndDate?.value) return null;
    
    const endDate = new Date(tenantInfo.data.leaseEndDate.value);
    const today = new Date();
    const diffTime = endDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays < 0) {
      return <Badge variant="soft" color="red">Süresi Dolmuş</Badge>;
    } else if (diffDays <= 30) {
      return <Badge variant="soft" color="gold">Süresi Yakında Doluyor</Badge>;
    } else {
      return <Badge variant="soft" color="primary">Aktif</Badge>;
    }
  };

  // If not rented or no tenant info
  if (!tenantInfo?.isRented) {
    return (
      <Card>
        <div className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark flex items-center gap-2">
              <Home className="h-5 w-5 text-primary-gold" />
              Kiracı Bilgileri
            </h3>
            {canEdit && (
              <Button variant="primary" size="sm" icon={Edit} onClick={handleEdit}>
                Kiracı Ekle
              </Button>
            )}
          </div>
          <div className="text-center py-8">
            <Home className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
            <p className="text-text-light-muted dark:text-text-muted">
              Bu konut şu anda kiralık değil
            </p>
            <p className="text-sm text-text-light-muted dark:text-text-muted mt-1">
              Kiracı eklemek için yukarıdaki butona tıklayın
            </p>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <>
      <Card>
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark flex items-center gap-2">
                <Home className="h-5 w-5 text-primary-gold" />
                {tenantInfo.title}
              </h3>
            </div>
            {canEdit && (
              <div className="flex gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  icon={UserX}
                  onClick={handleRemoveTenant}
                  disabled={loading}
                >
                  Kaldır
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  icon={Edit}
                  onClick={handleEdit}
                  disabled={loading}
                >
                  Düzenle
                </Button>
              </div>
            )}
          </div>

          <div className="flex items-start gap-4">
            {/* Avatar */}
            <div className="flex-shrink-0">
              <div className="w-16 h-16 rounded-full bg-primary-gold/10 flex items-center justify-center">
                <span className="text-lg font-bold text-primary-gold">
                  {getInitials(tenantInfo.data.tenantName?.value || 'KR')}
                </span>
              </div>
            </div>

            {/* Info */}
            <div className="flex-1 space-y-4">
              <div>
                <h4 className="text-lg font-medium text-text-on-light dark:text-text-on-dark">
                  {tenantInfo.data.tenantName?.value}
                </h4>
                <Badge variant="soft" color="primary" className="mt-1">
                  Kiracı
                </Badge>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                {/* Phone */}
                {tenantInfo.data.tenantPhone?.value && (
                  <div className="flex items-center gap-2">
                    <Phone className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                    <a 
                      href={`tel:${tenantInfo.data.tenantPhone.value}`}
                      className="text-text-on-light dark:text-text-on-dark hover:text-primary-gold transition-colors"
                    >
                      {tenantInfo.data.tenantPhone.value}
                    </a>
                  </div>
                )}

                {/* Email */}
                {tenantInfo.data.tenantEmail?.value && (
                  <div className="flex items-center gap-2">
                    <Mail className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                    <a 
                      href={`mailto:${tenantInfo.data.tenantEmail.value}`}
                      className="text-text-on-light dark:text-text-on-dark hover:text-primary-gold transition-colors"
                    >
                      {tenantInfo.data.tenantEmail.value}
                    </a>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </Card>

      {/* Edit Modal */}
      <Modal
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        title="Kiracı Bilgilerini Düzenle"
        icon={Home}
        size="lg"
      >
        <div className="space-y-6 max-h-[80vh] overflow-y-auto">
          <div>
            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
              Kiracı Adı *
            </label>
            <Input
              value={formData.tenantName}
              onChange={(e: any) => setFormData({ ...formData, tenantName: e.target.value })}
              placeholder="Ad Soyad"
              disabled={saving}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                Telefon *
              </label>
              <Input
                type="tel"
                value={formData.tenantPhone}
                onChange={(e: any) => setFormData({ ...formData, tenantPhone: e.target.value })}
                placeholder="+964 XXX XXX XXXX"
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                E-posta
              </label>
              <Input
                type="email"
                value={formData.tenantEmail}
                onChange={(e: any) => setFormData({ ...formData, tenantEmail: e.target.value })}
                placeholder="ornek@email.com"
                disabled={saving}
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Button 
              variant="secondary" 
              onClick={() => setShowEditModal(false)}
              disabled={saving}
            >
              İptal
            </Button>
            <Button 
              variant="primary" 
              icon={Save}
              onClick={handleSave}
              isLoading={saving}
              disabled={!formData.tenantName || !formData.tenantPhone}
            >
              Kaydet
            </Button>
          </div>

          {/* Kiracı Seçimi - Divider altında */}
          <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
            <div>
              <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                Kiracı Seçin
              </label>
              <Select
                value={selectedResident}
                onChange={(e: any) => handleResidentSelect(e.target.value)}
                options={[
                  { value: '', label: 'Kiracı seçiniz' },
                  ...residents.map(resident => ({
                    value: resident.id,
                    label: `${resident.fullName}${resident.phone ? ` (${resident.phone})` : ''}`
                  }))
                ]}
                disabled={loadingResidents || saving}
              />
            </div>

            {/* Yeni Kiracı Ekle Butonu */}
            <div className="mt-4">
              <Button
                variant="secondary"
                size="sm"
                icon={UserPlus}
                onClick={handleAddNewResident}
                disabled={saving}
                className="w-full"
              >
                Yeni Kiracı Ekle
              </Button>
            </div>

            {/* Yeni Kiracı Ekleme Formu */}
            {showAddNewResident && (
              <div className="mt-6 space-y-6 border-t border-gray-200 dark:border-gray-700 pt-6">
                {/* Ulusal kimlik numarası - En üstte tek başına */}
                <div>
                  <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                    Ulusal kimlik numarası / Pasaport numarası *
                  </label>
                  <Input
                    placeholder="12345678901 veya AA1234567"
                    value={newResidentData.identityNumber}
                    onChange={(e: any) => handleNewResidentInputChange('identityNumber', e.target.value)}
                    disabled={saving}
                  />
                </div>

                {/* Name and Surname */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Ad *
                    </label>
                    <Input
                      placeholder="Ad"
                      value={newResidentData.firstName}
                      onChange={(e: any) => handleNewResidentInputChange('firstName', e.target.value)}
                      disabled={saving}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Soyad *
                    </label>
                    <Input
                      placeholder="Soyad"
                      value={newResidentData.lastName}
                      onChange={(e: any) => handleNewResidentInputChange('lastName', e.target.value)}
                      disabled={saving}
                    />
                  </div>
                </div>

                {/* Phone and Relationship */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Telefon *
                    </label>
                    <Input
                      type="tel"
                      placeholder="+964 XXX XXX XXXX"
                      value={newResidentData.phone}
                      onChange={(e: any) => handleNewResidentInputChange('phone', e.target.value)}
                      disabled={saving}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Yakınlık derecesi *
                    </label>
                    <Select
                      value={newResidentData.relationship}
                      onChange={(e: any) => handleNewResidentInputChange('relationship', e.target.value)}
                      options={[
                        { value: '', label: 'Seçiniz' },
                        { value: 'Eş', label: 'Eş' },
                        { value: 'Çocuk', label: 'Çocuk' },
                        { value: 'Anne', label: 'Anne' },
                        { value: 'Baba', label: 'Baba' },
                        { value: 'Kardeş', label: 'Kardeş' },
                        { value: 'Diğer', label: 'Diğer' }
                      ]}
                      disabled={saving}
                    />
                  </div>
                </div>

                {/* Divider */}
                <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Cinsiyet
                      </label>
                      <Select
                        value={newResidentData.gender}
                        onChange={(e: any) => handleNewResidentInputChange('gender', e.target.value)}
                        options={[
                          { value: '', label: 'Seçiniz' },
                          { value: 'Erkek', label: 'Erkek' },
                          { value: 'Kadın', label: 'Kadın' },
                          { value: 'Diğer', label: 'Diğer' }
                        ]}
                        disabled={saving}
                      />
                    </div>
                    <div>
                      <DatePicker
                        label="Doğum Tarihi"
                        value={newResidentData.birthDate}
                        onChange={(e: any) => handleNewResidentInputChange('birthDate', e.target.value)}
                        maxDate={new Date().toISOString().split('T')[0]}
                        variant="default"
                        showIcon={true}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Doğum Yeri
                      </label>
                      <Input
                        placeholder="İstanbul, Türkiye"
                        value={newResidentData.birthPlace}
                        onChange={(e: any) => handleNewResidentInputChange('birthPlace', e.target.value)}
                        disabled={saving}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Kan Grubu
                      </label>
                      <Select
                        value={newResidentData.bloodType}
                        onChange={(e: any) => handleNewResidentInputChange('bloodType', e.target.value)}
                        options={[
                          { value: '', label: 'Seçiniz' },
                          { value: 'A+', label: 'A+' },
                          { value: 'A-', label: 'A-' },
                          { value: 'B+', label: 'B+' },
                          { value: 'B-', label: 'B-' },
                          { value: 'AB+', label: 'AB+' },
                          { value: 'AB-', label: 'AB-' },
                          { value: 'O+', label: 'O+' },
                          { value: 'O-', label: 'O-' }
                        ]}
                        disabled={saving}
                      />
                    </div>
                  </div>
                </div>

                {/* New Resident Action Buttons */}
                <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <Button 
                    variant="secondary" 
                    onClick={() => setShowAddNewResident(false)}
                    disabled={saving}
                  >
                    İptal
                  </Button>
                  <Button 
                    variant="primary" 
                    icon={Save}
                    onClick={handleCreateNewResident}
                    isLoading={saving}
                    disabled={!newResidentData.identityNumber || !newResidentData.firstName || !newResidentData.lastName || !newResidentData.phone || !newResidentData.relationship}
                  >
                    Ekle
                  </Button>
                </div>
              </div>
            )}
          </div>
        </div>
      </Modal>
    </>
  );
}
</file>

<file path="src/app/settings/system-parameters/page.tsx">
'use client';

import { useState } from 'react';
import { 
  Settings, 
  CreditCard, 
  Bell, 
  Shield, 
  Wrench, 
  BarChart3,
  Save,
  RotateCcw,
  Eye,
  Download,
  Upload
} from 'lucide-react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Tabs from '@/app/components/ui/Tabs';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';

// Breadcrumb Items
const BREADCRUMB_ITEMS = [
  { label: 'Ana Sayfa', href: '/dashboard' },
  { label: 'Ayarlar', href: '/settings' },
  { label: 'Sistem Parametreleri', active: true }
];

// Tab Configuration
const TAB_ITEMS = [
  {
    id: 'general',
    label: 'Genel',
    icon: Settings,
    badge: undefined,
    content: <GeneralTab />
  },
  {
    id: 'financial',
    label: 'Finansal',
    icon: CreditCard,
    badge: undefined,
    content: <FinancialTab />
  },
  {
    id: 'notification',
    label: 'Bildirim',
    icon: Bell,
    badge: undefined,
    content: <NotificationTab />
  },
  {
    id: 'security',
    label: 'Güvenlik',
    icon: Shield,
    badge: undefined,
    content: <SecurityTab />
  },
  {
    id: 'operational',
    label: 'Operasyonel',
    icon: Wrench,
    badge: undefined,
    content: <OperationalTab />
  },
  {
    id: 'reporting',
    label: 'Raporlama',
    icon: BarChart3,
    badge: undefined,
    content: <ReportingTab />
  }
];

// Tab Components
function GeneralTab() {
  return (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            Site Bilgileri
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Temel site ayarları ve görünüm tercihleri
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Input
            label="Site Adı"
            placeholder="NinetyNine Property Management"
          />
          <Input
            label="Site Sloganı"
            placeholder="Akıllı Apartman Yönetimi"
          />
          <Select
            label="Varsayılan Dil"
            options={[
              { value: 'tr', label: 'Türkçe' },
              { value: 'en', label: 'English' }
            ]}
          />
          <Select
            label="Zaman Dilimi"
            options={[
              { value: 'Europe/Istanbul', label: 'İstanbul (UTC+3)' },
              { value: 'Europe/London', label: 'Londra (UTC+0)' }
            ]}
          />
        </div>
      </Card>

      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            Tema & Görünüm
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Kullanıcı arayüzü ve renk şeması ayarları
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Input
            label="Birincil Renk"
            type="color"
            defaultValue="#AC8D6A"
          />
          <Select
            label="Varsayılan Tema"
            options={[
              { value: 'light', label: 'Açık Tema' },
              { value: 'dark', label: 'Koyu Tema' },
              { value: 'auto', label: 'Sistem Tercihine Göre' }
            ]}
          />
        </div>
      </Card>
    </div>
  );
}

function FinancialTab() {
  return (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            Aidat Tutarları
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Daire türlerine göre aylık aidat miktarları
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Input
            label="Apartman Dairesi"
            type="number"
            placeholder="450.00"
          />
          <Input
            label="Villa"
            type="number"
            placeholder="850.00"
          />
          <Input
            label="Ticari Alan"
            type="number"
            placeholder="1200.00"
          />
          <Input
            label="Otopark"
            type="number"
            placeholder="75.00"
          />
        </div>
      </Card>

      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            Ödeme Koşulları
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Gecikme faizi ve ödeme süreleri
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Input
            label="Gecikme Faiz Oranı"
            type="number"
            placeholder="2.5"
          />
          <Input
            label="Ödeme Vadesi"
            type="number"
            placeholder="10"
          />
          <Input
            label="Borç Uyarı Eşiği"
            type="number"
            placeholder="1000.00"
          />
        </div>
      </Card>
    </div>
  );
}

function NotificationTab() {
  return (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            E-posta Bildirimleri
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Otomatik e-posta gönderimi ayarları
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                  Aidat Hatırlatması
                </label>
                <p className="text-xs text-text-light-muted dark:text-text-muted">
                  Ödeme vadesi yaklaştığında gönderilir
                </p>
              </div>
              <input
                type="checkbox"
                defaultChecked
                className="w-4 h-4 rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
              />
            </div>
            
            <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                  Bakım Talebi Bildirimi
                </label>
                <p className="text-xs text-text-light-muted dark:text-text-muted">
                  Yeni talep oluşturulduğunda gönderilir
                </p>
              </div>
              <input
                type="checkbox"
                defaultChecked
                className="w-4 h-4 rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
              />
            </div>
          </div>
          
          <div className="space-y-4">
            <Input
              label="Hatırlatma Günleri"
              placeholder="7,3,1"
            />
            <Select
              label="E-posta Şablonu"
              options={[
                { value: 'professional', label: 'Profesyonel' },
                { value: 'friendly', label: 'Samimi' },
                { value: 'formal', label: 'Resmi' }
              ]}
            />
          </div>
        </div>
      </Card>
    </div>
  );
}

function SecurityTab() {
  return (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            Şifre Politikası
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Güvenli şifre gereksinimleri
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Input
            label="Minimum Karakter Sayısı"
            type="number"
            placeholder="8"
          />
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                  Büyük Harf Zorunlu
                </label>
                <p className="text-xs text-text-light-muted dark:text-text-muted">
                  En az bir büyük harf içermeli
                </p>
              </div>
              <input
                type="checkbox"
                defaultChecked
                className="w-4 h-4 rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
              />
            </div>
            
            <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                  Rakam Zorunlu
                </label>
                <p className="text-xs text-text-light-muted dark:text-text-muted">
                  En az bir rakam içermeli
                </p>
              </div>
              <input
                type="checkbox"
                defaultChecked
                className="w-4 h-4 rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
              />
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}

function OperationalTab() {
  return (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            Bakım ve Talep Yönetimi
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Operasyonel süreçler ve SLA ayarları
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Input
            label="Yanıtlama Süresi"
            type="number"
            placeholder="2"
          />
          <Input
            label="Çözüm Süresi"
            type="number"
            placeholder="24"
          />
          <Input
            label="Çalışma Başlangıcı"
            type="time"
            defaultValue="09:00"
          />
          <Input
            label="Çalışma Bitişi"
            type="time"
            defaultValue="18:00"
          />
        </div>
      </Card>
    </div>
  );
}

function ReportingTab() {
  return (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-2">
            Rapor Ayarları
          </h3>
          <p className="text-sm text-text-light-secondary dark:text-text-secondary">
            Otomatik raporlama ve saklama süreleri
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Select
            label="Varsayılan Rapor Formatı"
            options={[
              { value: 'pdf', label: 'PDF' },
              { value: 'excel', label: 'Excel' },
              { value: 'csv', label: 'CSV' }
            ]}
          />
          <Input
            label="Data Saklama Süresi"
            type="number"
            placeholder="12"
          />
          <Input
            label="Export Limiti"
            type="number"
            placeholder="1000"
          />
          <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <div>
              <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                Otomatik Aylık Rapor
              </label>
              <p className="text-xs text-text-light-muted dark:text-text-muted">
                Her ayın 1'inde otomatik rapor gönder
              </p>
            </div>
            <input
              type="checkbox"
              defaultChecked
              className="w-4 h-4 rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
            />
          </div>
        </div>
      </Card>
    </div>
  );
}

export default function SystemParametersPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  const handleSave = () => {
    console.log('Saving system parameters...');
    setHasChanges(false);
  };

  const handleReset = () => {
    console.log('Resetting to defaults...');
    setHasChanges(false);
  };

  const handlePreview = () => {
    console.log('Previewing changes...');
  };

  const handleExport = () => {
    console.log('Exporting parameters...');
  };

  const handleImport = () => {
    console.log('Importing parameters...');
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        {/* Sidebar */}
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        {/* Main Content Area */}
        <div className="lg:ml-72">
          {/* Header */}
          <DashboardHeader 
            title="Sistem Parametreleri" 
            breadcrumbItems={BREADCRUMB_ITEMS}
          />
          
          {/* Main Content */}
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header with Actions */}
            <div className="flex flex-col xl:flex-row justify-between items-start xl:items-center gap-4 mb-8">
              <div>
                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                  Sistem Parametreleri
                </h2>
                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                  Sistem genelindeki parametreleri kategoriler halinde yönetin
                </p>
              </div>
              
              <div className="flex flex-wrap gap-3">
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={handleImport}
                  icon={Upload}
                >
                  İçe Aktar
                </Button>
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={handleExport}
                  icon={Download}
                >
                  Dışa Aktar
                </Button>
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={handlePreview}
                  icon={Eye}
                  disabled={!hasChanges}
                >
                  Önizle
                </Button>
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={handleReset}
                  icon={RotateCcw}
                >
                  Varsayılanlara Dön
                </Button>
                <Button
                  variant="primary"
                  size="sm"
                  onClick={handleSave}
                  icon={Save}
                  className={hasChanges ? 'animate-pulse' : ''}
                >
                  Kaydet
                </Button>
              </div>
            </div>

            {/* Tab Navigation & Content */}
            <Tabs
              items={TAB_ITEMS}
              variant="cards"
              size="md"
              fullWidth={false}
              defaultValue="general"
              className="bg-white dark:bg-gray-800 rounded-lg shadow-sm"
            />
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/settings/user-management/page.tsx">
'use client';

import { useState, useEffect } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import { userService } from '@/services';
import { User } from '@/services/types/user.types';

// Admin Staff API response interface
interface AdminStaffUser {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phone?: string;
  status: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED';
  verificationStatus?: string;
  role: {
    id: string;
    name: string;
    slug: string;
    description?: string;
  };
  createdAt: string;
  updatedAt: string;
}

// API Response wrapper
interface AdminStaffResponse {
  data: AdminStaffUser[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

// Breadcrumb Items
const BREADCRUMB_ITEMS = [
  { label: 'Ana Sayfa', href: '/dashboard' },
  { label: 'Ayarlar', href: '/settings' },
  { label: 'Kullanıcı Yönetimi', active: true }
];

export default function UserManagementPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [userSettings, setUserSettings] = useState({
    defaultRole: 'resident',
    registrationApproval: true,
    passwordResetEmail: true,
    userAccountLocking: true
  });

  const [teamSettings, setTeamSettings] = useState({
    maxAdminUsers: '5',
    roleBasedAccess: true,
    auditLogging: true,
    sessionTracking: true
  });

  const [showAddUserModal, setShowAddUserModal] = useState(false);
  const [newUserName, setNewUserName] = useState('');
  const [newUserEmail, setNewUserEmail] = useState('');
  
  // Admin Staff State
  const [adminStaff, setAdminStaff] = useState<AdminStaffUser[]>([]);
  const [pagination, setPagination] = useState<any>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(5); // Sayfa başına 5 item
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Total User Count State
  const [totalUserCount, setTotalUserCount] = useState<number>(0);
  const [userCountLoading, setUserCountLoading] = useState(true);

  // Debug state changes
  console.log('Current component state:', { adminStaff, pagination, loading, error });

  // Fetch admin staff function
  const fetchAdminStaff = async (page: number = 1) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await userService.getAdminStaff(page, pageSize);
      console.log('Admin staff response:', response);
      console.log('Response type:', typeof response);
      console.log('Is array:', Array.isArray(response));
      
      if (response && response.data) {
        // Response'da data array'i var
        console.log('Staff data from response.data:', response.data);
        console.log('Pagination info:', response.pagination);
        setAdminStaff(response.data);
        setPagination(response.pagination);
        setCurrentPage(page);
        setError(null); // Clear any previous error
      } else if (response) {
        // Fallback: direkt response
        const staffData = Array.isArray(response) ? response : [response];
        console.log('Staff data after processing (fallback):', staffData);
        setAdminStaff(staffData);
        setError(null);
      } else {
        console.log('No response received');
        setError('Admin staff verisi alınamadı');
      }
    } catch (err: any) {
      console.error('Error fetching admin staff:', err);
      setError(err.message || 'Bir hata oluştu');
    } finally {
      setLoading(false);
    }
  };

  // Fetch total user count function
  const fetchTotalUserCount = async () => {
    try {
      setUserCountLoading(true);
      const response = await userService.getAdminStaffCount();
      console.log('Total user count response:', response);
      console.log('Response type:', typeof response);
      console.log('Response keys:', Object.keys(response || {}));
      console.log('Response.data:', response?.data);
      console.log('Response.data type:', typeof response?.data);
      
      // API'den gelen response'u kontrol et
      let count = 0;
      if (response && typeof response === 'object') {
        // Eğer response.data sayı ise
        if (typeof response.data === 'number') {
          count = response.data;
        }
        // Eğer response.data object ise ve count property'si varsa
        else if (response.data && typeof response.data === 'object' && 'count' in response.data) {
          count = response.data.count;
        }
        // Eğer response direkt sayı ise
        else if (typeof response === 'number') {
          count = response;
        }
        // Eğer response'da count property'si varsa
        else if ('count' in response) {
          count = response.count;
        }
      }
      
      console.log('Final count value:', count);
      setTotalUserCount(count);
    } catch (error) {
      console.error('Failed to fetch total user count:', error);
      setTotalUserCount(0);
    } finally {
      setUserCountLoading(false);
    }
  };

  // Fetch admin staff on component mount
  useEffect(() => {
    fetchAdminStaff(currentPage);
    fetchTotalUserCount();
  }, []);

  const handleSave = () => {
    console.log('Saving user management settings...');
  };

  const handleAddUser = () => {
    console.log('Adding user:', { name: newUserName, email: newUserEmail });
    setShowAddUserModal(false);
    setNewUserName('');
    setNewUserEmail('');
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        {/* Sidebar */}
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        
        {/* Main Content Area */}
        <div className="lg:ml-72">
          {/* Header */}
          <DashboardHeader 
            title="Kullanıcı Yönetimi" 
            breadcrumbItems={BREADCRUMB_ITEMS}
          />
          
          {/* Main Content */}
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header with Actions */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                  Kullanıcı Yönetimi
                </h2>
                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                  Takım üyelerini, rollerini ve erişim izinlerini yönetin
                </p>
              </div>
              
              <div className="flex gap-3">
                <button
                  onClick={() => setShowAddUserModal(true)}
                  className="px-4 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90"
                >
                  Yeni Kullanıcı Ekle
                </button>
              </div>
            </div>

            {/* İstatistikler */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <h3 className="text-sm font-medium text-text-light-muted dark:text-text-muted">Toplam Kullanıcı</h3>
                {userCountLoading ? (
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-gold"></div>
                ) : (
                  <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                    {Number(totalUserCount || 0).toLocaleString()}
                  </p>
                )}
              </div>
              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <h3 className="text-sm font-medium text-text-light-muted dark:text-text-muted">Aktif Kullanıcılar</h3>
                <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">1,189</p>
                <p className="text-xs text-text-light-muted dark:text-text-muted">%95.3 aktiflik oranı</p>
              </div>
              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <h3 className="text-sm font-medium text-text-light-muted dark:text-text-muted">Yönetici Kullanıcılar</h3>
                <p className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">5</p>
                <p className="text-xs text-text-light-muted dark:text-text-muted">Maksimum limit: 10</p>
              </div>
            </div>

            {/* Kullanıcı Hesap Ayarları */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                Kullanıcı Hesap Ayarları
              </h2>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Yeni Kullanıcılar İçin Varsayılan Rol
                    </label>
                    <select 
                      value={userSettings.defaultRole}
                      onChange={(e: any) => setUserSettings({...userSettings, defaultRole: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                    >
                      <option value="resident">Sakin</option>
                      <option value="manager">Emlak Uzmanı</option>
                      <option value="maintenance">Bakım Personeli</option>
                      <option value="admin">Yönetici</option>
                    </select>
                  </div>

                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        Manuel Onay Gereksinimi
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Yeni kayıtlar yönetici onayı gerektirir
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={userSettings.registrationApproval}
                      onChange={(e: any) => setUserSettings({...userSettings, registrationApproval: e.target.checked})}
                      className="rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        Şifre Sıfırlama E-postası
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Şifre değişiklikleri için e-posta bildirimi gönder
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={userSettings.passwordResetEmail}
                      onChange={(e: any) => setUserSettings({...userSettings, passwordResetEmail: e.target.checked})}
                      className="rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>

                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        Hesap Kilitleme
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Başarısız giriş denemelerinden sonra hesapları kilitle
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={userSettings.userAccountLocking}
                      onChange={(e: any) => setUserSettings({...userSettings, userAccountLocking: e.target.checked})}
                      className="rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Takım Yönetimi Ayarları */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                Takım Yönetimi Ayarları
              </h2>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                      Maksimum Yönetici Kullanıcı Sayısı
                    </label>
                    <select 
                      value={teamSettings.maxAdminUsers}
                      onChange={(e: any) => setTeamSettings({...teamSettings, maxAdminUsers: e.target.value})}
                      className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                    >
                      <option value="3">3 kullanıcı</option>
                      <option value="5">5 kullanıcı</option>
                      <option value="10">10 kullanıcı</option>
                      <option value="unlimited">Sınırsız</option>
                    </select>
                  </div>

                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        Rol Tabanlı Erişim Kontrolü
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Ayrıntılı izin sistemini etkinleştir
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={teamSettings.roleBasedAccess}
                      onChange={(e: any) => setTeamSettings({...teamSettings, roleBasedAccess: e.target.checked})}
                      className="rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        Denetim Günlükleri
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Tüm kullanıcı eylemlerini ve değişiklikleri takip et
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={teamSettings.auditLogging}
                      onChange={(e: any) => setTeamSettings({...teamSettings, auditLogging: e.target.checked})}
                      className="rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>

                  <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                        Oturum İzleme
                      </label>
                      <p className="text-xs text-text-light-muted dark:text-text-muted">
                        Aktif kullanıcı oturumlarını izle
                      </p>
                    </div>
                    <input
                      type="checkbox"
                      checked={teamSettings.sessionTracking}
                      onChange={(e: any) => setTeamSettings({...teamSettings, sessionTracking: e.target.checked})}
                      className="rounded border-gray-300 text-primary-gold focus:ring-primary-gold"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Mevcut Takım Üyeleri */}
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-6">
                Mevcut Takım Üyeleri
              </h2>

              {/* Loading State */}
              {loading && (
                <div className="flex justify-center items-center py-8">
                  <div className="flex items-center space-x-2 text-text-light-secondary dark:text-text-secondary">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-gold"></div>
                    <span>Admin staff verileri yükleniyor...</span>
                  </div>
                </div>
              )}

              {/* Error State */}
              {error && (
                <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-4 mb-4">
                  <div className="text-red-800 dark:text-red-200 text-sm">
                    <strong>Hata:</strong> {error}
                  </div>
                </div>
              )}

              {/* Table with API Data */}
              {!loading && !error && (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                    <thead className="bg-gray-50 dark:bg-gray-700">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wider">Ad</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wider">E-posta</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wider">Rol</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wider">Durum</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wider">Telefon</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wider">İşlemler</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">
                      {(() => {
                        console.log('Rendering table with adminStaff:', adminStaff);
                        console.log('adminStaff length:', adminStaff.length);
                        return null;
                      })()}
                      {adminStaff.length === 0 ? (
                        <tr>
                          <td colSpan={6} className="px-6 py-4 text-center text-text-light-secondary dark:text-text-secondary">
                            Henüz admin staff üyesi bulunmuyor.
                          </td>
                        </tr>
                      ) : (
                        adminStaff.map((user) => {
                          console.log('Rendering user:', user);
                          return (
                          <tr key={user.id}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-text-on-light dark:text-text-on-dark">
                              {user.firstName} {user.lastName}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-text-light-secondary dark:text-text-secondary">
                              {user.email}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                                user.role?.slug === 'admin' 
                                  ? 'bg-primary-gold-light text-primary-gold'
                                  : user.role?.slug === 'super_admin'
                                  ? 'bg-purple-100 text-purple-800'
                                  : 'bg-blue-100 text-blue-800'
                              }`}>
                                {user.role?.name || 'Belirtilmemiş'}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                                user.status === 'ACTIVE' 
                                  ? 'bg-green-100 text-green-800'
                                  : user.status === 'INACTIVE'
                                  ? 'bg-yellow-100 text-yellow-800'
                                  : user.status === 'BANNED'
                                  ? 'bg-red-100 text-red-800'
                                  : 'bg-gray-100 text-gray-800'
                              }`}>
                                {user.status === 'ACTIVE' ? 'Aktif' :
                                 user.status === 'INACTIVE' ? 'Pasif' :
                                 user.status === 'BANNED' ? 'Engellenmiş' :
                                 user.status === 'PENDING' ? 'Beklemede' :
                                 user.status}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-text-light-secondary dark:text-text-secondary">
                              {user.phone || 'Belirtilmemiş'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              <button className="text-primary-gold hover:text-primary-gold/80 mr-4">
                                Düzenle
                              </button>
                              <button className="text-primary-red hover:text-primary-red/80">
                                Kaldır
                              </button>
                            </td>
                          </tr>
                          );
                        })
                      )}
                    </tbody>
                  </table>
                </div>
              )}

              {/* Pagination Controls */}
              {pagination && (
                <div className="mt-6 flex items-center justify-between border-t border-gray-200 dark:border-gray-600 pt-4">
                  {/* Pagination Info */}
                  <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                    <span>Toplam </span>
                    <span className="font-medium text-text-on-light dark:text-text-on-dark">{pagination.total}</span>
                    <span> takım üyesi</span>
                  </div>

                  {/* Pagination Buttons - Her zaman göster */}
                  <div className="flex items-center space-x-2">
                    {/* Previous Button */}
                    <button
                      onClick={() => fetchAdminStaff(currentPage - 1)}
                      disabled={currentPage <= 1 || loading || (pagination?.total || 0) <= 5}
                      className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                        currentPage <= 1 || loading || (pagination?.total || 0) <= 5
                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed dark:bg-gray-700 dark:text-gray-500'
                          : 'bg-white text-text-on-light border border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-text-on-dark dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}
                    >
                      ← Önceki
                    </button>

                    {/* Page Numbers - Sadece birden fazla sayfa varsa */}
                    {pagination?.totalPages > 1 && (
                      <div className="flex items-center space-x-1">
                        {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map((pageNum) => (
                          <button
                            key={pageNum}
                            onClick={() => fetchAdminStaff(pageNum)}
                            disabled={loading}
                            className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                              currentPage === pageNum
                                ? 'bg-primary-gold text-white shadow-sm'
                                : loading
                                ? 'bg-gray-100 text-gray-400 cursor-not-allowed dark:bg-gray-700 dark:text-gray-500'
                                : 'bg-white text-text-on-light border border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-text-on-dark dark:border-gray-600 dark:hover:bg-gray-700'
                            }`}
                          >
                            {pageNum}
                          </button>
                        ))}
                      </div>
                    )}

                    {/* Next Button */}
                    <button
                      onClick={() => fetchAdminStaff(currentPage + 1)}
                      disabled={currentPage >= (pagination?.totalPages || 1) || loading || (pagination?.total || 0) <= 5}
                      className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                        currentPage >= (pagination?.totalPages || 1) || loading || (pagination?.total || 0) <= 5
                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed dark:bg-gray-700 dark:text-gray-500'
                          : 'bg-white text-text-on-light border border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-text-on-dark dark:border-gray-600 dark:hover:bg-gray-700'
                      }`}
                    >
                      Sonraki →
                    </button>
                  </div>
                </div>
              )}

              {/* Simple Info for Single Page - Removed, artık yukarıda her zaman gösteriyoruz */}
            </div>

            {/* Kaydetme İşlemleri */}
            <div className="flex justify-end space-x-4">
              <button className="px-6 py-2 border border-gray-300 dark:border-gray-600 text-text-light-secondary dark:text-text-secondary rounded-md hover:bg-gray-50 dark:hover:bg-gray-700">
                Varsayılanlara Dön
              </button>
              <button 
                onClick={handleSave}
                className="px-6 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90"
              >
                Değişiklikleri Kaydet
              </button>
            </div>

            {/* Kullanıcı Ekleme Modal'ı */}
            {showAddUserModal && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4">
                  <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4">Yeni Kullanıcı Ekle</h3>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        Ad Soyad
                      </label>
                      <input
                        type="text"
                        value={newUserName}
                        onChange={(e: any) => setNewUserName(e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                        placeholder="Ad ve soyadı girin"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                        E-posta Adresi
                      </label>
                      <input
                        type="email"
                        value={newUserEmail}
                        onChange={(e: any) => setNewUserEmail(e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-text-on-light dark:text-text-on-dark"
                        placeholder="E-posta adresini girin"
                      />
                    </div>
                  </div>
                  
                  <div className="flex justify-end space-x-3 mt-6">
                    <button
                      onClick={() => setShowAddUserModal(false)}
                      className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-text-light-secondary dark:text-text-secondary rounded-md hover:bg-gray-50 dark:hover:bg-gray-700"
                    >
                      İptal
                    </button>
                    <button
                      onClick={handleAddUser}
                      className="px-4 py-2 bg-primary-gold text-white rounded-md hover:bg-primary-gold/90"
                    >
                      Kullanıcı Ekle
                    </button>
                  </div>
                </div>
              </div>
            )}
          </main>
        </div>
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/services/index.ts">
// Services Index - Main Export File
// Bu dosya tüm services ve utilities'leri tek noktadan export eder

// Core Types & Interfaces
export * from './core/types';
export * from './core/base.service';

// Configuration
export * from './config/api.config';

// API Client
export { default as apiClient } from './api/client';

// Utilities
export * from './utils/token-manager';
export * from './utils/logger';

// Domain Types
export * from './types/auth.types';
export * from './types/family-member.types';
export * from './types/announcement.types';


// Services
export { default as authService, authService as AuthService } from './auth.service';
export { default as userService, userService as UserService } from './user.service';
export { default as adminResidentService, adminResidentService as AdminResidentService } from './admin-resident.service';
export { default as residentService, residentService as ResidentService } from './resident.service';
export { default as propertyService, PropertyService } from './property.service';
export { unitsService, UnitsService } from './units.service';
export { residentsStatsService } from './residents-stats.service';
export { fileUploadService } from './file-upload.service';
export { familyMemberService } from './family-member.service';
export { default as billingService } from './billing.service';
export { default as paymentService } from './payment.service';
export { default as announcementService } from './announcement.service';
export { default as qrCodeService } from './qr-code.service';

// Re-export commonly used types for convenience
export type {
    // Export specific types from user.types to avoid Permission conflict
    User,
    CreateUserDto,
    UpdateUserDto,
    UserRole,
    UserFilterParams,
    UserListResponse,
    UserStatsResponse,
    Permission as UserPermission,
} from './types/user.types';
export type {
    // Export specific types from resident.types to avoid Permission conflict
    Resident,
    CreateResidentDto,
    UpdateResidentDto,
    ResidentApprovalDto,
    BulkActionDto,
    ResidentFilterParams,
    ResidentListResponse,
    ResidentStatsResponse,
    ResidentProperty,
    ResidentRole,
    ResidentDocument,
    AvatarUploadResponse,
    Permission as ResidentPermission,
    BulkActionResult as ResidentBulkActionResult,
} from './types/resident.types';
export type {
    // Export specific types from property.types to avoid BulkActionResult conflict  
    Property,
    PropertyUser,
    PropertyBill,
    CreatePropertyDto,
    UpdatePropertyDto,
    PropertyFilterParams,
    PropertySearchParams,
    PropertyListResponse,
    PropertyStatistics,
    OccupancyStats,
    QuickStats,
    PropertyActivity,
    BlockResponse,
    FilterOptions,
    BulkUpdateDto,
    BulkAssignmentDto,
    BulkActionResponse,
    MaintenanceRecord,
    CreateMaintenanceDto,
    CompleteMaintenanceDto,
    ExportParams,
    ImportResult,
    BulkActionResult as PropertyBulkActionResult,
} from './types/property.types';
export type {
    // Export specific types from announcement.types
    Announcement,
    CreateAnnouncementDto,
    UpdateAnnouncementDto,
    AnnouncementFilterParams,
    AnnouncementListResponse,
    AnnouncementStats,
    AnnouncementBulkActionDto,
    AnnouncementBulkActionResponse,
    AnnouncementImageUploadResponse,
    AnnouncementType,
    AnnouncementStatus,
    AnnouncementFormData,
    AnnouncementDisplayData,
    AnnouncementSortConfig,
} from './types/announcement.types';



// Re-export commonly used types for convenience
export type {
    ApiResponse,
    PaginatedResponse,
    ApiError,
    FilterParams,
    LoadingState,
} from './core/types';

// Re-export types are already handled above with specific exports

// Service factory for custom implementations
export class ServiceFactory {
    /**
     * Custom service instances oluşturmak için factory method
     */
    static createCustomService<T>(serviceClass: new (...args: any[]) => T, ...args: any[]): T {
        return new serviceClass(...args);
    }
}

// Global service configuration
export const configureServices = (config: {
    baseURL?: string;
    timeout?: number;
    enableDebugLogs?: boolean;
}) => {
    // Bu method gelecekte global service configuration için kullanılabilir
    console.info('Services configured with:', config);
};
</file>

<file path="src/services/user.service.ts">
// User Service - Application Layer
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';
import {
    User,
    CreateUserDto,
    UpdateUserDto,
    UpdateUserPasswordDto,
    UserProfileDto,
    UserFilterParams,
    UserListResponse,
    UserStatsResponse,
    UserRole,
} from './types/user.types';
import { ApiResponse, PaginatedResponse } from './core/types';

class UserService extends BaseService<User, CreateUserDto, UpdateUserDto> {
    protected baseEndpoint = apiConfig.endpoints.user.base;

    constructor() {
        super('UserService');
    }

    // Profile Management
    async getProfile(): Promise<ApiResponse<User>> {
        try {
            this.logger.info('Fetching user profile');

            const response = await apiClient.get<User>(apiConfig.endpoints.user.profile);

            this.logger.info('User profile fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch user profile', error);
            throw error;
        }
    }

    async updateProfile(data: UserProfileDto): Promise<ApiResponse<User>> {
        try {
            this.logger.info('Updating user profile', data);

            const response = await apiClient.put<User>(
                apiConfig.endpoints.user.profile,
                data
            );

            this.logger.info('User profile updated successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to update user profile', error);
            throw error;
        }
    }

    async updatePassword(data: UpdateUserPasswordDto): Promise<ApiResponse<void>> {
        try {
            this.logger.info('Updating user password');

            const response = await apiClient.put<void>(
                apiConfig.endpoints.user.password,
                data
            );

            this.logger.info('User password updated successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to update user password', error);
            throw error;
        }
    }

    // Avatar Management
    async uploadAvatar(file: File, onProgress?: (progress: number) => void): Promise<ApiResponse<User>> {
        try {
            this.logger.info('Uploading user avatar');

            const response = await apiClient.uploadFile<User>(
                apiConfig.endpoints.user.avatar,
                file,
                onProgress
            );

            this.logger.info('User avatar uploaded successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to upload user avatar', error);
            throw error;
        }
    }

    async deleteAvatar(): Promise<ApiResponse<User>> {
        try {
            this.logger.info('Deleting user avatar');

            const response = await apiClient.delete<User>(apiConfig.endpoints.user.avatar);

            this.logger.info('User avatar deleted successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to delete user avatar', error);
            throw error;
        }
    }

    // User Management (Admin)
    async getAllUsers(params?: UserFilterParams): Promise<PaginatedResponse<User>> {
        try {
            this.logger.info('Fetching all users with filters', params);

            return await this.getAll(params);
        } catch (error) {
            this.logger.error('Failed to fetch users', error);
            throw error;
        }
    }

    async getAdminStaff(page: number = 1, limit: number = 5): Promise<any> {
        try {
            this.logger.info('Fetching admin staff members', { page, limit });
            this.logger.info('Using endpoint:', apiConfig.endpoints.admin.adminStaff);
            this.logger.info('Full baseURL:', apiConfig.baseURL);

            // Query parametrelerini ekle
            const queryParams = `?page=${page}&limit=${limit}`;
            const fullEndpoint = `${apiConfig.endpoints.admin.adminStaff}${queryParams}`;
            
            this.logger.info('Requesting URL:', fullEndpoint);
            const response = await apiClient.get(fullEndpoint);
            this.logger.info('Admin staff fetched successfully', {
                dataCount: response?.data?.length || 0,
                pagination: response?.pagination
            });
            
            // apiClient.get zaten response.data döndürüyor
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch admin staff', error);
            
            // Type-safe error handling
            const errorDetails: any = {};
            if (error instanceof Error) {
                errorDetails.message = error.message;
            }
            if (error && typeof error === 'object' && 'response' in error) {
                const axiosError = error as any;
                errorDetails.status = axiosError.response?.status;
                errorDetails.data = axiosError.response?.data;
                errorDetails.url = axiosError.config?.url;
            }
            
            this.logger.error('Error details:', errorDetails);
            throw error;
        }
    }

    async getAdminStaffCount(): Promise<any> {
        try {
            this.logger.info('Fetching admin staff count');
            const response = await apiClient.get(apiConfig.endpoints.admin.adminStaffCount);
            this.logger.info('Admin staff count fetched successfully', {
                count: response?.data || 0
            });
            return response; // apiClient.get already returns response.data
        } catch (error) {
            this.logger.error('Failed to fetch admin staff count', error);
            
            // Type-safe error handling
            const errorDetails: any = {};
            if (error instanceof Error) {
                errorDetails.message = error.message;
            }
            if (error && typeof error === 'object' && 'response' in error) {
                const axiosError = error as any;
                errorDetails.status = axiosError.response?.status;
                errorDetails.data = axiosError.response?.data;
                errorDetails.url = axiosError.config?.url;
            }
            
            this.logger.error('Error details:', errorDetails);
            throw error;
        }
    }

    async getUserById(id: string | number): Promise<ApiResponse<User>> {
        try {
            this.logger.info(`Fetching user with ID: ${id}`);

            return await this.getById(id);
        } catch (error) {
            this.logger.error(`Failed to fetch user with ID: ${id}`, error);
            throw error;
        }
    }

    async createUser(data: CreateUserDto): Promise<ApiResponse<User>> {
        try {
            this.logger.info('Creating new user', { email: data.email });

            return await this.create(data);
        } catch (error) {
            this.logger.error('Failed to create user', error);
            throw error;
        }
    }

    async updateUser(id: string | number, data: UpdateUserDto): Promise<ApiResponse<User>> {
        try {
            this.logger.info(`Updating user with ID: ${id}`, data);

            return await this.update(id, data);
        } catch (error) {
            this.logger.error(`Failed to update user with ID: ${id}`, error);
            throw error;
        }
    }

    async deleteUser(id: string | number): Promise<ApiResponse<void>> {
        try {
            this.logger.info(`Deleting user with ID: ${id}`);

            return await this.delete(id);
        } catch (error) {
            this.logger.error(`Failed to delete user with ID: ${id}`, error);
            throw error;
        }
    }

    // User Activation/Deactivation
    async activateUser(id: string | number): Promise<ApiResponse<User>> {
        try {
            this.logger.info(`Activating user with ID: ${id}`);

            const response = await apiClient.patch<User>(
                `${this.baseEndpoint}/${id}/activate`
            );

            this.logger.info('User activated successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to activate user', error);
            throw error;
        }
    }

    async deactivateUser(id: string | number): Promise<ApiResponse<User>> {
        try {
            this.logger.info(`Deactivating user with ID: ${id}`);

            const response = await apiClient.patch<User>(
                `${this.baseEndpoint}/${id}/deactivate`
            );

            this.logger.info('User deactivated successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to deactivate user', error);
            throw error;
        }
    }

    // Role Management
    async assignRole(userId: string | number, roleId: string): Promise<ApiResponse<User>> {
        try {
            this.logger.info(`Assigning role ${roleId} to user ${userId}`);

            const response = await apiClient.patch<User>(
                `${this.baseEndpoint}/${userId}/role`,
                { roleId }
            );

            this.logger.info('Role assigned successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to assign role', error);
            throw error;
        }
    }

    async removeRole(userId: string | number): Promise<ApiResponse<User>> {
        try {
            this.logger.info(`Removing role from user ${userId}`);

            const response = await apiClient.delete<User>(
                `${this.baseEndpoint}/${userId}/role`
            );

            this.logger.info('Role removed successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to remove role', error);
            throw error;
        }
    }

    // Search & Filter
    async searchUsers(query: string, filters?: UserFilterParams): Promise<PaginatedResponse<User>> {
        try {
            this.logger.info(`Searching users with query: ${query}`, filters);

            return await this.search(query, filters);
        } catch (error) {
            this.logger.error('User search failed', error);
            throw error;
        }
    }

    async filterUsers(filters: UserFilterParams): Promise<PaginatedResponse<User>> {
        try {
            this.logger.info('Filtering users', filters);

            return await this.getAll(filters);
        } catch (error) {
            this.logger.error('User filtering failed', error);
            throw error;
        }
    }

    // Statistics & Analytics
    async getUserStats(): Promise<ApiResponse<UserStatsResponse>> {
        try {
            this.logger.info('Fetching user statistics');

            const response = await apiClient.get<UserStatsResponse>(`${this.baseEndpoint}/stats`);

            this.logger.info('User statistics fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch user statistics', error);
            throw error;
        }
    }

    async getUsersCountByRole(): Promise<ApiResponse<Record<string, number>>> {
        try {
            this.logger.info('Fetching users count by role');

            const response = await apiClient.get<Record<string, number>>(
                `${this.baseEndpoint}/stats/by-role`
            );

            this.logger.info('Users count by role fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch users count by role', error);
            throw error;
        }
    }

    async getActiveUsersCount(): Promise<ApiResponse<number>> {
        try {
            this.logger.info('Fetching active users count');

            const response = await apiClient.get<number>(`${this.baseEndpoint}/stats/active-count`);

            this.logger.info('Active users count fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch active users count', error);
            throw error;
        }
    }

    // Bulk Operations
    async bulkActivateUsers(userIds: (string | number)[]): Promise<ApiResponse<User[]>> {
        try {
            this.logger.info(`Bulk activating ${userIds.length} users`);

            const response = await apiClient.patch<User[]>(
                `${this.baseEndpoint}/bulk/activate`,
                { userIds }
            );

            this.logger.info('Bulk user activation completed');
            return response;
        } catch (error) {
            this.logger.error('Bulk user activation failed', error);
            throw error;
        }
    }

    async bulkDeactivateUsers(userIds: (string | number)[]): Promise<ApiResponse<User[]>> {
        try {
            this.logger.info(`Bulk deactivating ${userIds.length} users`);

            const response = await apiClient.patch<User[]>(
                `${this.baseEndpoint}/bulk/deactivate`,
                { userIds }
            );

            this.logger.info('Bulk user deactivation completed');
            return response;
        } catch (error) {
            this.logger.error('Bulk user deactivation failed', error);
            throw error;
        }
    }

    async bulkAssignRole(userIds: (string | number)[], roleId: string): Promise<ApiResponse<User[]>> {
        try {
            this.logger.info(`Bulk assigning role ${roleId} to ${userIds.length} users`);

            const response = await apiClient.patch<User[]>(
                `${this.baseEndpoint}/bulk/assign-role`,
                { userIds, roleId }
            );

            this.logger.info('Bulk role assignment completed');
            return response;
        } catch (error) {
            this.logger.error('Bulk role assignment failed', error);
            throw error;
        }
    }

    // Export/Import
    async exportUsers(filters?: UserFilterParams): Promise<Blob> {
        try {
            this.logger.info('Exporting users', filters);

            const queryParams = this.buildQueryParams(filters);
            const response = await apiClient.get(`${this.baseEndpoint}/export${queryParams}`, {
                responseType: 'blob'
            } as any);

            this.logger.info('Users export completed');
            return response.data;
        } catch (error) {
            this.logger.error('Users export failed', error);
            throw error;
        }
    }

    async importUsers(file: File, onProgress?: (progress: number) => void): Promise<ApiResponse<{ success: number; errors: any[] }>> {
        try {
            this.logger.info('Importing users from file');

            const response = await apiClient.uploadFile<{ success: number; errors: any[] }>(
                `${this.baseEndpoint}/import`,
                file,
                onProgress
            );

            this.logger.info('Users import completed', response.data);
            return response;
        } catch (error) {
            this.logger.error('Users import failed', error);
            throw error;
        }
    }

    /**
     * Fetch all roles (for admin user management)
     * GET /admin/roles
     */
    async getAllRoles(): Promise<ApiResponse<UserRole[]>> {
        try {
            this.logger.info('Fetching all roles');
            const response = await apiClient.get<UserRole[]>(apiConfig.endpoints.admin.roles);
            this.logger.info('Roles fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch roles', error);
            throw error;
        }
    }
}

// Export singleton instance
export const userService = new UserService();
export default userService;
</file>

<file path="src/app/dashboard/residents/page.tsx">
'use client';

import React, { useCallback, useEffect, useState, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import SearchBar from '@/app/components/ui/SearchBar';
import StatsCard from '@/app/components/ui/StatsCard';
import ViewToggle from '@/app/components/ui/ViewToggle';
import DataTable from '@/app/components/ui/DataTable';
import FilterPanel from '@/app/components/ui/FilterPanel';
import ExportDropdown from '@/app/components/ui/ExportDropdown';
import { ToastContainer } from '@/app/components/ui/Toast';
import BulkMessageModal from '@/app/components/ui/BulkMessageModal';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';
import { useToast } from '@/hooks/useToast';
import { useResidentsData } from '@/hooks/useResidentsData';
import { useResidentsFilters } from '@/hooks/useResidentsFilters';
import { useResidentsActions } from '@/hooks/useResidentsActions';
import { useResidentsUI } from '@/hooks/useResidentsUI';
import { useResidentsStats } from '@/hooks/useResidentsStats';
import { generateStatsCardsDataFromCounts } from './utils/stats';
import {
    Filter, Download, Plus, RefreshCw,
    ChevronRight, Eye, Edit, Phone, MessageSquare, QrCode, StickyNote, History, CreditCard, Trash2, UserCheck, UserX, CheckCircle, Users, Home, DollarSign, Calendar
} from 'lucide-react';
import { Resident } from '@/app/components/ui/ResidentRow';

// Import view components
import GenericListView from '@/app/components/templates/GenericListView';
import GenericGridView from '@/app/components/templates/GenericGridView';
import Checkbox from '@/app/components/ui/Checkbox';
import TablePagination from '@/app/components/ui/TablePagination';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import BulkActionsBar from '@/app/components/ui/BulkActionsBar';
import PaymentHistoryModal from '@/app/components/ui/PaymentHistoryModal';
import { Bill } from '@/services/billing.service';

// Import our extracted utilities and configurations
import {
    VIEW_OPTIONS,
    BREADCRUMB_ITEMS,
    DEFAULT_VALUES
} from './constants';
import { createBulkActionHandlers } from './actions/bulk-actions';
import { createResidentActionHandlers } from './actions/resident-actions';
import { createExportActionHandlers } from './actions/export-actions';
import { getTableColumns } from './components/table-columns';
import Portal from '@/app/components/ui/Portal';

const residentFilterGroups = [
    {
        id: 'status',
        label: 'Durum',
        type: 'multiselect' as const,
        icon: CheckCircle,
        options: [
            { id: 'active', label: 'Aktif', value: 'active' },
            { id: 'pending', label: 'Beklemede', value: 'pending' },
            { id: 'inactive', label: 'Pasif', value: 'inactive' },
            { id: 'suspended', label: 'Askıya Alınmış', value: 'suspended' },
        ],
    },
    {
        id: 'type',
        label: 'Sakin Tipi',
        type: 'multiselect' as const,
        icon: Users,
        options: [
            { id: 'owner', label: 'Malik', value: 'resident' },
            { id: 'tenant', label: 'Kiracı', value: 'tenant' },
            { id: 'guest', label: 'Misafir', value: 'guest' },
        ],
    },
];

/**
 * Main Residents Page Component
 * 
 * This component follows SOLID principles:
 * - Single Responsibility: Only handles orchestration of the residents page
 * - Open/Closed: Extensible through configuration and dependency injection
 * - Dependency Inversion: Depends on abstractions (hooks, services) not concrete implementations
 */
export default function ResidentsPage() {
    const router = useRouter();
    const { toasts, removeToast } = useToast();

    // Add message modal state
    const [messageState, setMessageState] = useState<{
        isOpen: boolean;
        type: 'email' | 'sms' | null;
        recipients: Resident[];
    }>({
        isOpen: false,
        type: null,
        recipients: []
    });

    // Add confirmation modal state
    const [confirmationState, setConfirmationState] = useState<{
        isOpen: boolean;
        resident: Resident | null;
        loading: boolean;
    }>({
        isOpen: false,
        resident: null,
        loading: false
    });

    // Add bulk delete modal state
    const [bulkDeleteState, setBulkDeleteState] = useState<{
        isOpen: boolean;
        residents: Resident[];
        loading: boolean;
    }>({
        isOpen: false,
        residents: [],
        loading: false
    });

    // Ödeme geçmişi modalı için state
    const [paymentHistoryModal, setPaymentHistoryModal] = useState<{
        isOpen: boolean;
        resident: Resident | null;
        bills: Bill[];
        loading: boolean;
        error: string | null;
    }>({
        isOpen: false,
        resident: null,
        bills: [],
        loading: false,
        error: null,
    });

    // Initialize all hooks for data management
    const filtersHook = useResidentsFilters();
    const dataHook = useResidentsData({
        currentPage: filtersHook.currentPage,
        recordsPerPage: filtersHook.recordsPerPage,
        searchQuery: filtersHook.searchQuery,
        sortConfig: filtersHook.sortConfig,
        filters: filtersHook.filters
    });
    const actionsHook = useResidentsActions({
        refreshData: dataHook.refreshData,
        setSelectedResidents: filtersHook.setSelectedResidents,
        setResidents: dataHook.setResidents
    });
    const uiHook = useResidentsUI({
        refreshData: dataHook.refreshData
    });

    // NEW: Use the new stats hook
    const stats = useResidentsStats();
    const statsData = generateStatsCardsDataFromCounts(stats);

    // Create action handlers with dependency injection
    const toastFunctions = {
        success: useCallback((title: string, message: string) => {
            console.log(`✓ ${title}: ${message}`);
        }, []),
        info: useCallback((title: string, message: string) => {
            console.info(`${title}: ${message}`);
        }, []),
        error: useCallback((title: string, message: string) => {
            console.error(`✗ ${title}: ${message}`);
        }, [])
    };

    const dataUpdateFunctions = {
        setResidents: dataHook.setResidents,
        refreshData: dataHook.refreshData
    };

    // Initialize action handlers
    const bulkActionHandlers = createBulkActionHandlers(
        toastFunctions,
        messageState,
        setMessageState,
        dataUpdateFunctions,
        bulkDeleteState,
        setBulkDeleteState
    );
    const residentActionHandlers = createResidentActionHandlers(
        toastFunctions,
        dataUpdateFunctions,
        dataHook.residents
    );
    const exportActionHandlers = createExportActionHandlers(toastFunctions);

    // Generate configuration data - regenerate when selected residents change
    const bulkActions = useMemo(() => 
        bulkActionHandlers.getBulkActions(filtersHook.selectedResidents),
        [filtersHook.selectedResidents, bulkActionHandlers]
    );

    // Create wrapper for table actions - only need view action for detail navigation
    const tableActionHandlers = {
        handleViewResident: residentActionHandlers.handleViewResident,
    };

    const tableColumns = getTableColumns(tableActionHandlers);

    // Handle delete confirmation
    const handleDeleteConfirmation = useCallback(async () => {
        if (!confirmationState.resident) return;

        setConfirmationState(prev => ({ ...prev, loading: true }));

        try {
            await residentActionHandlers.handleDeleteResident(confirmationState.resident);
            setConfirmationState({ isOpen: false, resident: null, loading: false });
        } catch (error) {
            setConfirmationState(prev => ({ ...prev, loading: false }));
        }
    }, [confirmationState.resident, residentActionHandlers]);

    // Handle bulk delete confirmation
    const handleBulkDeleteConfirmation = useCallback(async () => {
        await bulkActionHandlers.executeBulkDelete();
    }, [bulkActionHandlers]);

    // Create unified action handler for view components
    const handleResidentAction = useCallback(async (action: string, resident: Resident) => {
        switch (action) {
            case 'view':
                residentActionHandlers.handleViewResident(resident);
                break;
            case 'edit':
                residentActionHandlers.handleEditResident(resident);
                break;
            case 'delete':
                // Open confirmation modal instead of direct deletion
                setConfirmationState({
                    isOpen: true,
                    resident: resident,
                    loading: false
                });
                break;
            case 'call':
                residentActionHandlers.handleCallResident(resident);
                break;
            case 'message':
                residentActionHandlers.handleMessageResident(resident);
                break;
            case 'more':
                // Handle more actions menu
                console.log('More actions for resident:', resident.fullName);
                break;
            case 'deactivate':
                residentActionHandlers.handleUpdateResidentStatus &&
                    residentActionHandlers.handleUpdateResidentStatus(resident, 'INACTIVE');
                break;
            case 'activate':
                residentActionHandlers.handleUpdateResidentStatus &&
                    residentActionHandlers.handleUpdateResidentStatus(resident, 'ACTIVE');
                break;
            case 'payment-history': {
                setPaymentHistoryModal({
                    isOpen: true,
                    resident,
                    bills: [],
                    loading: true,
                    error: null,
                });
                try {
                    const { bills, error } = await actionsHook.handleViewPaymentHistory(resident);
                    setPaymentHistoryModal(prev => ({
                        ...prev,
                        bills,
                        loading: false,
                        error: error || null,
                    }));
                } catch (err: any) {
                    setPaymentHistoryModal(prev => ({
                        ...prev,
                        loading: false,
                        error: err?.message || 'Ödeme geçmişi alınamadı.',
                    }));
                }
                break;
            }
            default:
                console.warn('Unknown action:', action);
        }
    }, [residentActionHandlers, actionsHook]);

    // Filter groups configuration
    const filterGroups = residentFilterGroups;

    // Event handlers (orchestration only)
    const handleAddNewResident = useCallback(() => {
        router.push('/dashboard/residents/add');
    }, [router]);

    const handleRefresh = useCallback(() => {
        uiHook.handleRefresh();
    }, [uiHook]);

    // 1. Local search input state
    const [searchInput, setSearchInput] = useState(filtersHook.searchQuery || "");

    // 2. Input değişimini yöneten handler
    const handleSearchInputChange = useCallback((value: string) => {
        setSearchInput(value);
    }, []);

    // 3. Debounce sonrası API çağrısını tetikleyen handler
    const handleSearchSubmit = useCallback((value: string) => {
        filtersHook.handleSearch(value); // Sadece burada API çağrısı yapılmalı
    }, [filtersHook]);

    // Lifecycle effects
    useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && filtersHook.showFilterPanel) {
                filtersHook.handleCloseDrawer();
            }
        };

        document.addEventListener('keydown', handleEscape);
        return () => document.removeEventListener('keydown', handleEscape);
    }, [filtersHook.showFilterPanel, filtersHook.handleCloseDrawer]);

    useEffect(() => {
        if (filtersHook.showFilterPanel) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = 'unset';
        }

        return () => {
            document.body.style.overflow = 'unset';
        };
    }, [filtersHook.showFilterPanel]);

    // Resident card renderer for grid view
    const renderResidentCard = (resident: Resident, selectedItems: Array<string | number>, onSelect: (id: string | number) => void, ui: any, ActionMenu?: React.ComponentType<{ row: Resident }>) => {
        return (
            <ui.Card
                key={resident.id}
                className="p-6 rounded-2xl shadow-md bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 transition-transform hover:scale-[1.01] hover:shadow-lg group"
            >
                {/* Header: Checkbox + Name + Menu */}
                <div className="flex items-start justify-between gap-2">
                    <div className="flex items-center gap-4">
                        <ui.Checkbox
                            checked={selectedItems.includes(resident.id)}
                            onChange={() => onSelect(resident.id)}
                            className="focus:ring-2 focus:ring-primary-gold/30"
                        />
                        <div>
                            <h3 className="text-xl font-semibold text-on-dark tracking-tight">
                                {resident.firstName} {resident.lastName}
                            </h3>
                            <p className="text-sm text-text-light-secondary dark:text-text-secondary font-medium mt-1">
                                {resident.address?.apartment}
                            </p>
                            {/* Membership Tier Badge */}
                            {(() => {
                                const membershipTier = resident.membershipTier || 'Standart';
                                if (membershipTier === 'Altın') {
                                    return (
                                        <ui.Badge
                                            variant="soft"
                                            color="gold"
                                            className="min-w-[88px] text-center justify-center text-xs px-3 py-1 rounded-full font-medium mt-2"
                                        >
                                            {membershipTier}
                                        </ui.Badge>
                                    );
                                } else if (membershipTier === 'Gümüş') {
                                    return (
                                        <ui.Badge
                                            variant="soft"
                                            color="secondary"
                                            className="min-w-[88px] text-center justify-center text-xs px-3 py-1 rounded-full font-medium mt-2"
                                        >
                                            {membershipTier}
                                        </ui.Badge>
                                    );
                                } else {
                                    return (
                                        <ui.Badge className="min-w-[88px] text-center justify-center text-xs px-3 py-1 rounded-full font-medium mt-2">
                                            {membershipTier}
                                        </ui.Badge>
                                    );
                                }
                            })()}
                        </div>
                    </div>
                    {ActionMenu && <ActionMenu row={resident} />}
                </div>
                
                {/* Status and Type Badges */}
                <div className="mt-4 flex flex-wrap gap-2 items-center">
                    <ui.Badge variant="soft" color={getStatusColor(resident.status)} className="text-xs px-3 py-1 rounded-full font-medium flex items-center gap-1">
                        <span
                            className="w-2 h-2 rounded-full inline-block border border-gray-300 dark:border-gray-700 mr-1"
                            style={{
                                backgroundColor:
                                    getStatusColor(resident.status) === 'primary' ? '#22C55E' :
                                    getStatusColor(resident.status) === 'gold' ? '#AC8D6A' :
                                    getStatusColor(resident.status) === 'red' ? '#E53E3E' :
                                    getStatusColor(resident.status) === 'accent' ? '#718096' :
                                    '#A8A29E',
                            }}
                            title={resident.status?.label}
                        />
                        {resident.status?.label}
                    </ui.Badge>
                    
                    {resident.verificationStatus && (
                        <ui.Badge
                            variant="outline"
                            color={
                                resident.verificationStatus.color === 'green' ? 'primary' :
                                resident.verificationStatus.color === 'yellow' ? 'gold' :
                                resident.verificationStatus.color === 'red' ? 'red' :
                                'secondary'
                            }
                            className="text-xs px-3 py-1 rounded-full font-medium flex items-center gap-1"
                        >
                            {resident.verificationStatus.label}
                        </ui.Badge>
                    )}
                    
                    <ui.Badge
                        variant="soft"
                        className={
                            `text-xs px-3 py-1 rounded-full font-medium text-black ` +
                            (resident.residentType?.label === "Malik"
                                ? "bg-green-100"
                                : resident.residentType?.label === "Kiracı"
                                ? "bg-blue-100"
                                : "")
                        }
                    >
                        {resident.residentType?.label}
                    </ui.Badge>
                </div>
                
                {/* Contact Information */}
                <div className="mt-4 flex flex-col gap-1 text-sm text-text-light-secondary dark:text-text-secondary">
                    {resident.contact?.phone && (
                        <div className="flex items-center gap-2">
                            <span>{resident.contact.phone}</span>
                        </div>
                    )}
                    {resident.contact?.email && (
                        <div className="flex items-center gap-2">
                            <span>{resident.contact.email}</span>
                        </div>
                    )}
                </div>
                
                {/* Action Buttons */}
                {/* <div className="mt-6 flex gap-3">
                    {resident.contact?.phone && (
                        <ui.Button
                            variant="primary"
                            size="sm"
                            onClick={() => handleResidentAction('call', resident)}
                            className="rounded-lg font-medium shadow-sm hover:bg-primary-gold/10 dark:hover:bg-primary-gold/20 focus:ring-2 focus:ring-primary-gold/30"
                        >
                            Ara
                        </ui.Button>
                    )}
                    <ui.Button
                        variant="secondary"
                        size="sm"
                        onClick={() => handleResidentAction('message', resident)}
                        className="rounded-lg font-medium shadow-sm hover:bg-primary-gold/10 dark:hover:bg-primary-gold/20 focus:ring-2 focus:ring-primary-gold/30"
                    >
                        Mesaj
                    </ui.Button>
                </div> */}
            </ui.Card>
        );
    };
    const getStatusColor = (status: any) => {
        switch (status?.color) {
            case 'green': return 'primary';
            case 'yellow': return 'gold';
            case 'red': return 'red';
            case 'blue': return 'accent';
            default: return 'secondary';
        }
    };
    const getTypeColor = (type: any) => {
        switch (type?.color) {
            case 'blue': return 'primary';
            case 'green': return 'accent';
            case 'purple': return 'accent';
            default: return 'secondary';
        }
    };

    // Resident Action Menu Component - Simplified to only show detail view
    const ResidentActionMenu: React.FC<{ resident: Resident; onAction: (action: string, resident: Resident) => void }> = ({ resident, onAction }) => {
        const handleDetailView = (e: React.MouseEvent) => {
            e.stopPropagation();
            onAction('view', resident);
        };

        return (
            <div className="flex items-center justify-center">
                <button
                    className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
                    onClick={handleDetailView}
                    type="button"
                >
                    <ChevronRight className="w-5 h-5" />
                </button>
            </div>
        );
    };

    // Wrapper: ActionMenuComponent tipi { row: Resident }
    const ResidentActionMenuWrapper: React.FC<{ row: Resident }> = ({ row }) => (
        <ResidentActionMenu resident={row} onAction={handleResidentAction} />
    );

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={uiHook.sidebarOpen}
                    onClose={() => uiHook.setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title="Sakin Listesi"
                        breadcrumbItems={BREADCRUMB_ITEMS}
                    />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Actions */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                                    Sakinler <span className="text-primary-gold">
                                        ({dataHook.totalRecords.toLocaleString()} {filtersHook.searchQuery ? 'filtrelenmiş' : 'aktif'})
                                    </span>
                                </h2>
                                <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                    Son güncelleme: {dataHook.lastUpdated.toLocaleTimeString('tr-TR')}
                                </p>
                            </div>

                            <div className="flex gap-3">
                                <Button variant="ghost" size="md" icon={RefreshCw} onClick={handleRefresh}>
                                    Yenile
                                </Button>
                                <ExportDropdown
                                    onExportExcel={() => exportActionHandlers.handleExportExcel({
                                        ...filtersHook.filters,
                                        search: filtersHook.searchQuery,
                                        orderColumn: !filtersHook.searchQuery ? 'firstName' : filtersHook.sortConfig.key,
                                        orderBy: filtersHook.sortConfig.direction ? filtersHook.sortConfig.direction.toUpperCase() as 'ASC' | 'DESC' : undefined,
                                        // page ve limit gönderme
                                    })}
                                    onExportCSV={() => exportActionHandlers.handleExportCSV({
                                        ...filtersHook.filters,
                                        search: filtersHook.searchQuery,
                                        orderColumn: !filtersHook.searchQuery ? 'firstName' : filtersHook.sortConfig.key,
                                        orderBy: filtersHook.sortConfig.direction ? filtersHook.sortConfig.direction.toUpperCase() as 'ASC' | 'DESC' : undefined,
                                        // page ve limit gönderme
                                    })}
                                    variant="secondary"
                                    size="md"
                                />
                                <Button variant="primary" size="md" icon={Plus} onClick={handleAddNewResident}>
                                    Yeni Sakin
                                </Button>
                            </div>
                        </div>

                        {/* Search and Filters */}
                        <Card className="mb-6">
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    {/* Search Bar */}
                                    <div className="flex-1">
                                        <SearchBar
                                            placeholder="Ad, soyad, pasaport, telefon, daire no ile ara..."
                                            value={searchInput}
                                            onChange={handleSearchInputChange}
                                            onSearch={handleSearchSubmit}
                                            showAdvancedFilter={true}
                                            onAdvancedFilterClick={filtersHook.handleOpenDrawer}
                                            debounceMs={500}
                                        />
                                    </div>

                                    {/* Filter and View Toggle */}
                                    <div className="flex gap-2 items-center">
                                        <div className="relative">
                                            <Button
                                                variant="secondary"
                                                size="md"
                                                icon={Filter}
                                                onClick={filtersHook.handleOpenDrawer}
                                            >
                                                Filtreler
                                            </Button>
                                            {Object.keys(filtersHook.filters).length > 0 && (
                                                <span className="absolute -top-2 -right-2 bg-primary-gold text-primary-dark-gray text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium">
                                                    {Object.keys(filtersHook.filters).length}
                                                </span>
                                            )}
                                        </div>
                                        <ViewToggle
                                            options={VIEW_OPTIONS}
                                            activeView={filtersHook.selectedView}
                                            onViewChange={filtersHook.handleViewChange}
                                            size="sm"
                                        />
                                    </div>
                                </div>
                            </div>
                        </Card>

                        {/* Stats Cards */}
                        <div className="grid grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
                            {statsData.map((stat) => (
                                <StatsCard
                                    key={stat.title}
                                    title={stat.title}
                                    value={stat.value}
                                    subtitle={stat.subtitle}
                                    color={stat.color}
                                    icon={stat.icon}
                                    size="md"
                                    loading={stats.loading}
                                />
                            ))}
                        </div>

                        {/* Error Message */}
                        {dataHook.apiError && (
                            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                                <p className="text-red-800 text-sm">{dataHook.apiError}</p>
                            </div>
                        )}

                        {/* Residents Views */}
                        {filtersHook.selectedView === 'table' && (
                            <GenericListView
                                data={dataHook.residents}
                                loading={dataHook.loading}
                                error={dataHook.apiError}
                                onSelectionChange={filtersHook.handleSelectionChange}
                                bulkActions={bulkActions}
                                columns={getTableColumns(tableActionHandlers, ResidentActionMenuWrapper)}
                                sortConfig={filtersHook.sortConfig}
                                onSortChange={filtersHook.handleSort}
                                pagination={{
                                    currentPage: filtersHook.currentPage,
                                    totalPages: dataHook.totalPages,
                                    totalRecords: dataHook.totalRecords,
                                    recordsPerPage: filtersHook.recordsPerPage,
                                    onPageChange: filtersHook.handlePageChange,
                                    onRecordsPerPageChange: filtersHook.handleRecordsPerPageChange,
                                }}
                                emptyStateMessage={
                                    filtersHook.searchQuery ?
                                        `"${filtersHook.searchQuery}" araması için sonuç bulunamadı.` :
                                        'Henüz sakin kaydı bulunmuyor.'
                                }
                                ActionMenuComponent={ResidentActionMenuWrapper}
                            />
                        )}

                        {filtersHook.selectedView === 'grid' && (
                            <GenericGridView
                                data={dataHook.residents}
                                loading={dataHook.loading}
                                error={dataHook.apiError}
                                onSelectionChange={(selectedIds) => {
                                    const selectedResidents = dataHook.residents.filter(r => selectedIds.includes(r.id));
                                    filtersHook.handleSelectionChange(selectedResidents);
                                }}
                                bulkActions={bulkActions}
                                onAction={handleResidentAction}
                                selectedItems={filtersHook.selectedResidents.map(r => r.id)}
                                pagination={{
                                    currentPage: filtersHook.currentPage,
                                    totalPages: dataHook.totalPages,
                                    totalRecords: dataHook.totalRecords,
                                    recordsPerPage: filtersHook.recordsPerPage,
                                    onPageChange: filtersHook.handlePageChange,
                                    onRecordsPerPageChange: filtersHook.handleRecordsPerPageChange,
                                }}
                                emptyStateMessage={
                                    filtersHook.searchQuery ?
                                        `"${filtersHook.searchQuery}" araması için sonuç bulunamadı.` :
                                        'Henüz sakin kaydı bulunmuyor.'
                                }
                                ui={{
                                    Card,
                                    Button,
                                    Checkbox,
                                    TablePagination,
                                    Badge,
                                    EmptyState,
                                    Skeleton,
                                    BulkActionsBar,
                                }}
                                ActionMenu={ResidentActionMenuWrapper}
                                renderCard={renderResidentCard}
                                getItemId={(resident) => resident.id}
                            />
                        )}
                    </main>
                </div>

                {/* Filter Panel Drawer */}
                <div className={`fixed inset-0 z-50 ${filtersHook.showFilterPanel ? 'pointer-events-auto' : 'pointer-events-none'}`}>
                    {/* Backdrop */}
                    <div
                        className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${filtersHook.showFilterPanel && !filtersHook.drawerClosing ? 'opacity-50' : 'opacity-0'
                            }`}
                        onClick={filtersHook.handleCloseDrawer}
                    />

                    {/* Drawer */}
                    <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-background-light-card dark:bg-background-card shadow-2xl transform transition-transform duration-300 ease-in-out ${filtersHook.showFilterPanel && !filtersHook.drawerClosing ? 'translate-x-0' : 'translate-x-full'
                        }`}>
                        <FilterPanel
                            filterGroups={filterGroups}
                            onApplyFilters={filtersHook.handleFiltersApply}
                            onResetFilters={filtersHook.handleFiltersReset}
                            onClose={filtersHook.handleCloseDrawer}
                            variant="sidebar"
                        />
                    </div>
                </div>

                {/* Bulk Message Modal */}
                <BulkMessageModal
                    isOpen={messageState.isOpen}
                    onClose={() => setMessageState(prev => ({ ...prev, isOpen: false }))}
                    onSend={bulkActionHandlers.handleSendMessage}
                    type={messageState.type || 'email'}
                    recipientCount={messageState.recipients.length}
                />

                {/* Confirmation Modal */}
                <ConfirmationModal
                    isOpen={confirmationState.isOpen}
                    onClose={() => setConfirmationState({ isOpen: false, resident: null, loading: false })}
                    onConfirm={handleDeleteConfirmation}
                    title="Sakin Silme"
                    variant="danger"
                    loading={confirmationState.loading}
                    itemName={confirmationState.resident?.fullName}
                    itemType="sakin"
                />

                {/* Bulk Delete Confirmation Modal */}
                <ConfirmationModal
                    isOpen={bulkDeleteState.isOpen}
                    onClose={() => setBulkDeleteState({ isOpen: false, residents: [], loading: false })}
                    onConfirm={handleBulkDeleteConfirmation}
                    title="Toplu Silme İşlemi"
                    description={`${bulkDeleteState.residents.length} sakin kalıcı olarak silinecektir. Bu işlem geri alınamaz.`}
                    confirmText="Hepsini Sil"
                    variant="danger"
                    loading={bulkDeleteState.loading}
                    itemType="sakinler"
                />

                {/* Payment History Modal */}
                <PaymentHistoryModal
                    isOpen={paymentHistoryModal.isOpen}
                    onClose={() => setPaymentHistoryModal(prev => ({ ...prev, isOpen: false }))}
                    bills={paymentHistoryModal.bills}
                    residentName={paymentHistoryModal.resident?.fullName || ''}
                    loading={paymentHistoryModal.loading}
                    error={paymentHistoryModal.error}
                />

                {/* Toast Container */}
                <ToastContainer toasts={toasts} onRemove={removeToast} />
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/app/components/ui/ApprovalModal.tsx">
'use client';

import React, { useState } from 'react';
import Modal from './Modal';
import Button from './Button';
import Select from './Select';
import { CheckCircle, UserX, AlertCircle, X, Save } from 'lucide-react';

export interface ApprovalFormData {
    decision: 'approved' | 'rejected';
    reason: string;
    assignedRole: 'resident' | 'tenant';
    initialMembershipTier: 'GOLD' | 'SILVER' | 'STANDARD';
}

interface ApprovalModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (data: ApprovalFormData) => Promise<void>;
    loading?: boolean;
    userName?: string;
}

const ApprovalModal: React.FC<ApprovalModalProps> = ({
    isOpen,
    onClose,
    onSubmit,
    loading = false,
    userName = 'Kullanıcı'
}) => {
    const [formData, setFormData] = useState<ApprovalFormData>({
        decision: 'approved',
        reason: '',
        assignedRole: 'resident',
        initialMembershipTier: 'STANDARD'
    });

    const [errors, setErrors] = useState<Record<string, string>>({});

    const handleInputChange = (field: keyof ApprovalFormData, value: string) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }
    };

    const validateForm = (): boolean => {
        const newErrors: Record<string, string> = {};

        if (formData.decision === 'rejected' && !formData.reason.trim()) {
            newErrors.reason = 'Red nedeni gereklidir';
        }

        if (formData.decision === 'approved') {
            if (!formData.assignedRole) {
                newErrors.assignedRole = 'Rol seçimi gereklidir';
            }
            if (!formData.initialMembershipTier) {
                newErrors.initialMembershipTier = 'Üyelik seviyesi gereklidir';
            }
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async () => {
        if (!validateForm()) return;

        try {
            await onSubmit(formData);
            setFormData({
                decision: 'approved',
                reason: '',
                assignedRole: 'resident',
                initialMembershipTier: 'STANDARD'
            });
            setErrors({});
        } catch (error) {
            console.error('Approval submission failed:', error);
        }
    };

    const roleOptions = [
        { value: 'resident', label: 'Sakin' },
        { value: 'tenant', label: 'Kiracı' }
    ];

    const membershipTierOptions = [
        { value: 'GOLD', label: 'Altın Üyelik' },
        { value: 'SILVER', label: 'Gümüş Üyelik' },
        { value: 'STANDARD', label: 'Standart Üyelik' }
    ];

    return (
        <Modal isOpen={isOpen} onClose={onClose} size="md">
            <div className="p-6">
                <div className="mb-6">
                    <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                        Kullanıcı Onayı
                    </h2>
                    <p className="text-text-light-secondary dark:text-text-secondary">
                        <strong>{userName}</strong> kullanıcısının başvurusunu değerlendirin
                    </p>
                </div>

                {/* Decision Radio Buttons */}
                <div className="mb-6">
                    <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-3">
                        Karar *
                    </label>
                    <div className="space-y-3">
                        <label className="flex items-center gap-3 cursor-pointer">
                            <input
                                type="radio"
                                name="decision"
                                value="approved"
                                checked={formData.decision === 'approved'}
                                onChange={(e: any) => handleInputChange('decision', e.target.value)}
                                className="w-4 h-4 text-primary-gold border-gray-300 focus:ring-primary-gold"
                            />
                            <div className="flex items-center gap-2">
                                <CheckCircle className="h-4 w-4 text-semantic-success-500" />
                                <span className="text-text-on-light dark:text-text-on-dark font-medium">
                                    Onayla
                                </span>
                            </div>
                        </label>
                        <label className="flex items-center gap-3 cursor-pointer">
                            <input
                                type="radio"
                                name="decision"
                                value="rejected"
                                checked={formData.decision === 'rejected'}
                                onChange={(e: any) => handleInputChange('decision', e.target.value)}
                                className="w-4 h-4 text-primary-gold border-gray-300 focus:ring-primary-gold"
                            />
                            <div className="flex items-center gap-2">
                                <UserX className="h-4 w-4 text-primary-red" />
                                <span className="text-text-on-light dark:text-text-on-dark font-medium">
                                    Reddet
                                </span>
                            </div>
                        </label>
                    </div>
                </div>

                {/* Conditional Content Based on Decision */}
                {formData.decision === 'rejected' ? (
                    /* Rejection Form - Only Reason Textarea */
                    <div>
                        <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Açıklama *
                        </label>
                        <textarea
                            value={formData.reason}
                            onChange={(e: any) => handleInputChange('reason', e.target.value)}
                            placeholder="Red nedeninizi açıklayın..."
                            rows={3}
                            disabled={loading}
                            className={`
                                w-full px-3 py-2 border rounded-lg resize-none
                                focus:ring-2 focus:ring-primary-gold/30 focus:border-primary-gold
                                disabled:opacity-50 disabled:cursor-not-allowed
                                bg-background-light-card dark:bg-background-card
                                text-text-on-light dark:text-text-on-dark
                                ${errors.reason ? 'border-primary-red' : 'border-gray-200 dark:border-gray-700'}
                            `}
                        />
                        {errors.reason && (
                            <div className="flex items-center gap-1 mt-1">
                                <AlertCircle className="h-4 w-4 text-primary-red" />
                                <span className="text-sm text-primary-red">{errors.reason}</span>
                            </div>
                        )}
                    </div>
                ) : (
                    /* Approval Form - Role and Membership Tier */
                    <div className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                                Atanacak Rol *
                            </label>
                            <Select
                                value={formData.assignedRole}
                                onChange={(e: any) => handleInputChange('assignedRole', e.target.value)}
                                options={roleOptions}
                                placeholder="Rol seçin"
                                disabled={loading}
                                error={errors.assignedRole}
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                                Üyelik Seviyesi *
                            </label>
                            <Select
                                value={formData.initialMembershipTier}
                                onChange={(e: any) => handleInputChange('initialMembershipTier', e.target.value)}
                                options={membershipTierOptions}
                                placeholder="Üyelik seviyesi seçin"
                                disabled={loading}
                                error={errors.initialMembershipTier}
                            />
                        </div>
                    </div>
                )}

                {/* Action Buttons */}
                <div className="flex gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <Button
                        variant="secondary"
                        onClick={onClose}
                        disabled={loading}
                        icon={X}
                        className="flex-1"
                    >
                        Vazgeç
                    </Button>
                    <Button
                        variant="primary"
                        onClick={handleSubmit}
                        disabled={loading}
                        isLoading={loading}
                        icon={Save}
                        className="flex-1"
                    >
                        Kaydet
                    </Button>
                </div>
            </div>
        </Modal>
    );
};

export default ApprovalModal;
</file>

<file path="src/app/dashboard/components/CreateTicketModal.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { FileText, AlertCircle, Plus, Upload } from 'lucide-react';
import Modal from '@/app/components/ui/Modal';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import TextArea from '@/app/components/ui/TextArea';
import Button from '@/app/components/ui/Button';

import Checkbox from '@/app/components/ui/Checkbox';
import FileUpload from '@/app/components/ui/FileUpload';
import { useAuth } from '@/app/components/auth/AuthProvider';
import { useToast } from '@/hooks/useToast';

interface CreateTicketModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSuccess?: () => void;
    defaultAssigneeId?: string; // Varsayılan atanacak kişi ID'si
    defaultAssigneeName?: string; // Varsayılan atanacak kişi adı
}

interface CreateTicketFormData {
    title: string;
    description: string;
    type: string;
    priority: string;
    status: string;
    category: string;
    creatorId: string;
    assigneeId: string;
    propertyId: string;
    initialComment: string;
    isInternalComment: boolean;
}

// Enum değerleri dokümantasyona göre
const ticketTypes = [
    { value: '', label: 'Seçiniz' },
    { value: 'REQUEST', label: 'İstek' },
    { value: 'COMPLAINT', label: 'Şikayet' },
    { value: 'FAULT_REPAIR', label: 'Arıza/Tamir' },
    { value: 'MAINTENANCE', label: 'Bakım' },
    { value: 'CLEANING', label: 'Temizlik' },
    { value: 'SUGGESTION', label: 'Öneri' },
    { value: 'OTHER', label: 'Diğer' }
];

const priorities = [
    { value: '', label: 'Seçiniz' },
    { value: 'LOW', label: 'Düşük' },
    { value: 'MEDIUM', label: 'Orta' },
    { value: 'HIGH', label: 'Yüksek' },
    { value: 'URGENT', label: 'Acil' }
];

const statuses = [
    { value: '', label: 'Seçiniz' },
    { value: 'OPEN', label: 'Açık' },
    { value: 'IN_PROGRESS', label: 'İşlemde' },
    { value: 'WAITING', label: 'Beklemede' },
    { value: 'RESOLVED', label: 'Çözüldü' },
    { value: 'CLOSED', label: 'Kapatıldı' },
    { value: 'CANCELLED', label: 'İptal Edildi' }
];

const categories = [
    { value: '', label: 'Seçiniz' },
    { value: 'Tesisat', label: 'Tesisat' },
    { value: 'Elektrik', label: 'Elektrik' },
    { value: 'Isıtma', label: 'Isıtma' },
    { value: 'Soğutma', label: 'Soğutma' },
    { value: 'Temizlik', label: 'Temizlik' },
    { value: 'Güvenlik', label: 'Güvenlik' },
    { value: 'Bahçe', label: 'Bahçe' },
    { value: 'Asansör', label: 'Asansör' },
    { value: 'İnternet', label: 'İnternet' },
    { value: 'Diğer', label: 'Diğer' }
];

export default function CreateTicketModal({ 
    isOpen, 
    onClose, 
    onSuccess, 
    defaultAssigneeId, 
    defaultAssigneeName 
}: CreateTicketModalProps) {
    const { user } = useAuth();
    const toast = useToast();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [properties, setProperties] = useState<{ value: string; label: string }[]>([]);
    const [users, setUsers] = useState<{ value: string; label: string }[]>([]);
    const [loadingProperties, setLoadingProperties] = useState(false);
    const [loadingUsers, setLoadingUsers] = useState(false);
    const [selectedFiles, setSelectedFiles] = useState<File[]>([]);

    const {
        register,
        handleSubmit,
        formState: { errors, isValid },
        reset,
        watch,
        setValue
    } = useForm<CreateTicketFormData>({
        mode: 'onChange',
        defaultValues: {
            title: '',
            description: '',
            type: '',
            priority: 'MEDIUM',
            status: 'OPEN',
            category: '',

            creatorId: '',
            assigneeId: '',
            propertyId: '',
            initialComment: '',
            isInternalComment: false
        }
    });

    // Load properties and users when modal opens
    useEffect(() => {
        if (isOpen) {
            loadProperties();
            loadUsers();
            // Set current user as creator
            if (user?.id) {
                setValue('creatorId', typeof user.id === 'string' ? user.id : String(user.id));
            }
            // Set default assignee if provided
            if (defaultAssigneeId) {
                setValue('assigneeId', defaultAssigneeId);
            }
        }
    }, [isOpen, user, defaultAssigneeId]);

    const loadProperties = async () => {
        setLoadingProperties(true);
        try {
            const response = await fetch('/api/proxy/admin/properties', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                const propertyOptions = (data.data || []).map((property: any) => ({
                    value: property.id,
                    label: `${property.name || 'Konut'} - ${property.address || property.id}`
                }));
                setProperties(propertyOptions);
            }
        } catch (error) {
            console.error('Properties loading failed:', error);
        } finally {
            setLoadingProperties(false);
        }
    };

    const loadUsers = async () => {
        setLoadingUsers(true);
        try {
            const response = await fetch('/api/proxy/admin/users', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                const userOptions = (data.data || []).map((user: any) => ({
                    value: user.id,
                    label: `${user.firstName} ${user.lastName}`
                }));
                setUsers(userOptions);
            }
        } catch (error) {
            console.error('Users loading failed:', error);
        } finally {
            setLoadingUsers(false);
        }
    };

    const handleFilesChange = (files: FileList | null) => {
        if (files) {
            const fileArray = Array.from(files);
            
            // Validate each file
            const validFiles: File[] = [];
            const errors: string[] = [];
            
            fileArray.forEach(file => {
                // File size limit: 10MB
                if (file.size > 10 * 1024 * 1024) {
                    errors.push(`${file.name}: Dosya boyutu 10MB'dan büyük olamaz`);
                    return;
                }
                
                // File type validation
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];
                if (!allowedTypes.includes(file.type)) {
                    errors.push(`${file.name}: Desteklenmeyen dosya türü`);
                    return;
                }
                
                validFiles.push(file);
            });
            
            if (errors.length > 0) {
                setError(errors.join(', '));
            } else {
                setError(null);
            }
            
            setSelectedFiles(prev => [...prev, ...validFiles]);
        }
    };

    const removeFile = (index: number) => {
        setSelectedFiles(prev => prev.filter((_, i) => i !== index));
    };

    const uploadAttachments = async (ticketId: string) => {
        if (selectedFiles.length === 0) return;

        const formData = new FormData();
        selectedFiles.forEach((file, index) => {
            formData.append('attachments', file);
        });

        try {
            const response = await fetch(`/api/proxy/admin/tickets/${ticketId}/attachments`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: formData
            });

            if (!response.ok) {
                throw new Error('Dosya yükleme başarısız');
            }

            console.log('Attachments uploaded successfully');
        } catch (error) {
            console.error('Error uploading attachments:', error);
            throw error;
        }
    };

    const onSubmit = async (data: CreateTicketFormData) => {
        setIsLoading(true);
        setError(null);

        try {
            // Create ticket payload
            const ticketPayload: any = {
                title: data.title,
                description: data.description
            };

            // Add optional fields only if they have values
            if (data.type) ticketPayload.type = data.type;
            if (data.priority) ticketPayload.priority = data.priority;
            if (data.status) ticketPayload.status = data.status;
            if (data.category) ticketPayload.category = data.category;

            if (data.creatorId) ticketPayload.creatorId = data.creatorId;
            if (data.assigneeId) ticketPayload.assigneeId = data.assigneeId;
            if (data.propertyId) ticketPayload.propertyId = data.propertyId;
            if (data.initialComment) ticketPayload.initialComment = data.initialComment;
            if (data.isInternalComment !== undefined) ticketPayload.isInternalComment = data.isInternalComment;

            console.log('Creating ticket with payload:', ticketPayload);

            // Create ticket
            const response = await fetch('/api/proxy/admin/tickets', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: JSON.stringify(ticketPayload)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Talep oluşturma başarısız');
            }

            const result = await response.json();
            console.log('Ticket created successfully:', result);

            // Upload attachments if any
            if (result.data?.id && selectedFiles.length > 0) {
                try {
                    await uploadAttachments(result.data.id);
                } catch (uploadError) {
                    console.error('Attachment upload failed:', uploadError);
                    // Don't fail the whole process for attachment upload failure
                    toast.warning('Talep oluşturuldu ancak bazı dosyalar yüklenemedi.');
                }
            }

            // Success
            toast.success('Talep başarıyla oluşturuldu!');
            reset();
            setSelectedFiles([]);
            onSuccess?.();
            onClose();

        } catch (error: any) {
            console.error('Error creating ticket:', error);
            setError(error.message || 'Talep oluşturulurken bir hata oluştu');
        } finally {
            setIsLoading(false);
        }
    };

    const handleClose = () => {
        if (!isLoading) {
            reset();
            setSelectedFiles([]);
            setError(null);
            onClose();
        }
    };

    return (
        <Modal
            isOpen={isOpen}
            onClose={handleClose}
            title="Yeni Talep Oluştur"
            subtitle="Talep detaylarını doldurun"
            icon={FileText}
            size="xl"
            closable={!isLoading}
        >
            <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col h-full">
                {/* Scrollable Content Area */}
                <div className="flex-1 max-h-[70vh] overflow-y-auto px-1">
                    {/* Error Display */}
                    {error && (
                        <div className="p-4 bg-red-50 border border-red-200 rounded-lg mb-6">
                            <div className="flex items-start space-x-3">
                                <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" />
                                <div>
                                    <p className="text-sm text-red-600 font-medium">Hata</p>
                                    <p className="text-sm text-red-500 mt-1">{error}</p>
                                </div>
                            </div>
                        </div>
                    )}

                    <div className="space-y-6">
                        {/* Zorunlu Alanlar */}
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark border-b border-gray-200 dark:border-gray-700 pb-2">
                                Zorunlu Bilgiler
                            </h3>
                            
                            {/* Title */}
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Talep Başlığı *
                                </label>
                                <Input
                                    {...register('title', { 
                                        required: 'Talep başlığı zorunludur',
                                        minLength: { value: 3, message: 'En az 3 karakter olmalıdır' }
                                    })}
                                    placeholder="Örn: Su tesisatı arızası"
                                    error={errors.title?.message}
                                />
                            </div>

                            {/* Description */}
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Açıklama *
                                </label>
                                <textarea
                                    {...register('description', { 
                                        required: 'Açıklama zorunludur',
                                        minLength: { value: 10, message: 'En az 10 karakter olmalıdır' }
                                    })}
                                    placeholder="Talep detaylarını açıklayın..."
                                    rows={4}
                                    className={`w-full px-3 py-2 text-sm rounded-lg border transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50 min-h-[100px] border-primary-gold/30 bg-background-secondary text-text-primary hover:border-primary-gold/50 focus:border-primary-gold placeholder:text-text-secondary resize-vertical ${
                                        errors.description ? 'border-primary-red focus:ring-primary-red/50 focus:border-primary-red' : ''
                                    }`}
                                />
                                {errors.description && (
                                    <p className="text-sm text-primary-red mt-1">{errors.description.message}</p>
                                )}
                            </div>
                        </div>

                        {/* Opsiyonel Alanlar */}
                        <div className="space-y-4">

                            {/* Type, Priority, Status - Grid */}
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                        Talep Türü
                                    </label>
                                    <Select
                                        {...register('type')}
                                        options={ticketTypes}
                                        error={errors.type?.message}
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                        Öncelik
                                    </label>
                                    <Select
                                        {...register('priority')}
                                        options={priorities}
                                        error={errors.priority?.message}
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                        Durum
                                    </label>
                                    <Select
                                        {...register('status')}
                                        options={statuses}
                                        error={errors.status?.message}
                                    />
                                </div>
                            </div>

                            {/* Category */}
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Kategori
                                </label>
                                <Select
                                    {...register('category')}
                                    options={categories}
                                    error={errors.category?.message}
                                />
                            </div>

                            {/* Property */}
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Konut
                                </label>
                                <Select
                                    {...register('propertyId')}
                                    options={[{ value: '', label: loadingProperties ? 'Yükleniyor...' : 'Seçiniz' }, ...properties]}
                                    disabled={loadingProperties}
                                    error={errors.propertyId?.message}
                                />
                            </div>

                            {/* Assignee */}
                            {defaultAssigneeId && defaultAssigneeName ? (
                                <div>
                                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                        Atanacak Kişi
                                    </label>
                                    <div className="p-3 bg-primary-gold-light/20 border border-primary-gold/30 rounded-lg">
                                        <div className="flex items-center gap-2">
                                            <div className="w-8 h-8 bg-primary-gold/20 rounded-full flex items-center justify-center">
                                                <span className="text-sm font-medium text-primary-gold">
                                                    {defaultAssigneeName.split(' ').map(n => n[0]).join('')}
                                                </span>
                                            </div>
                                            <span className="font-medium text-text-on-light dark:text-text-on-dark">
                                                {defaultAssigneeName}
                                            </span>
                                        </div>
                                    </div>
                                    <input type="hidden" {...register('assigneeId')} value={defaultAssigneeId} />
                                </div>
                            ) : (
                                <div>
                                    <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                        Atanacak Kişi
                                    </label>
                                    <Select
                                        {...register('assigneeId')}
                                        options={[{ value: '', label: loadingUsers ? 'Yükleniyor...' : 'Seçiniz' }, ...users]}
                                        disabled={loadingUsers}
                                        error={errors.assigneeId?.message}
                                    />
                                </div>
                            )}

                            {/* Initial Comment */}
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    İlk Yorum
                                </label>
                                <textarea
                                    {...register('initialComment')}
                                    placeholder="İlk yorumunuzu yazın..."
                                    rows={3}
                                    className={`w-full px-3 py-2 text-sm rounded-lg border transition-colors focus:outline-none focus:ring-2 focus:ring-primary-gold/50 min-h-[75px] border-primary-gold/30 bg-background-secondary text-text-primary hover:border-primary-gold/50 focus:border-primary-gold placeholder:text-text-secondary resize-vertical ${
                                        errors.initialComment ? 'border-primary-red focus:ring-primary-red/50 focus:border-primary-red' : ''
                                    }`}
                                />
                                {errors.initialComment && (
                                    <p className="text-sm text-primary-red mt-1">{errors.initialComment.message}</p>
                                )}
                            </div>

                            {/* Internal Comment Checkbox */}
                            <div>
                                <Checkbox
                                    {...register('isInternalComment')}
                                    label="Dahili yorum (sadece yöneticiler görebilir)"
                                />
                            </div>

                            {/* File Upload */}
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Dosya Ekleri
                                </label>
                                <FileUpload
                                    onFilesChange={handleFilesChange}
                                    accept=".jpg,.jpeg,.png,.gif,.pdf,.txt"
                                    multiple
                                    maxSize={10 * 1024 * 1024} // 10MB
                                />
                                
                                {/* Selected Files Display */}
                                {selectedFiles.length > 0 && (
                                    <div className="mt-3 space-y-2">
                                        <p className="text-sm font-medium text-text-light-secondary dark:text-text-secondary">
                                            Seçilen Dosyalar:
                                        </p>
                                        {selectedFiles.map((file, index) => (
                                            <div key={index} className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded">
                                                <span className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                    {file.name} ({(file.size / 1024 / 1024).toFixed(2)} MB)
                                                </span>
                                                <Button
                                                    type="button"
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => removeFile(index)}
                                                >
                                                    Kaldır
                                                </Button>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>

                {/* Fixed Form Actions */}
                <div className="flex-shrink-0 flex items-center justify-end space-x-3 pt-4 border-t border-primary-gold/20 bg-background-light-card dark:bg-background-card">
                    <Button
                        type="button"
                        variant="ghost"
                        onClick={handleClose}
                        disabled={isLoading}
                    >
                        İptal
                    </Button>
                    <Button
                        type="submit"
                        variant="primary"
                        isLoading={isLoading}
                        disabled={isLoading || !watch('title') || !watch('description')}
                        icon={Plus}
                    >
                        {isLoading ? 'Talep Oluşturuluyor...' : 'Talep Oluştur'}
                    </Button>
                </div>
            </form>
        </Modal>
    );
}
</file>

<file path="src/services/admin-resident.service.ts">
// Admin Resident Service - Application Layer
import { BaseService } from './core/base.service';
import { apiClient } from './api/client';
import { apiConfig } from './config/api.config';
import {
    Resident,
    CreateResidentDto,
    UpdateResidentDto,
    ResidentApprovalDto,
    BulkActionDto,
    ResidentFilterParams,
    ResidentListResponse,
    PendingResidentsResponse,
    ResidentApprovalResponse,
    BulkActionResponse,
    ResidentStatsResponse,
    ResidentSearchParams,
    ResidentSearchResponse,
} from './types/resident.types';
import { ApiResponse, PaginatedResponse } from './core/types';

class AdminResidentService extends BaseService<Resident, CreateResidentDto, UpdateResidentDto> {
    protected baseEndpoint = apiConfig.endpoints.residents.admin.base;

    constructor() {
        super('AdminResidentService');
    }

    // === RESIDENT LISTING & FILTERING === //

    /**
     * Get all residents with pagination and filtering
     * GET /admin/users
     */
    async getAllResidents(params?: ResidentFilterParams): Promise<PaginatedResponse<Resident>> {
        try {
            this.logger.info('Fetching all residents', params);

            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<ResidentListResponse>(
                `${this.baseEndpoint}${queryParams}`
            );

            this.logger.info(`Fetched ${response.data.users.length} residents`);
            return {
                data: response.data.users,
                total: response.pagination.total,
                page: response.pagination.page,
                limit: response.pagination.limit,
                totalPages: response.pagination.totalPages,
                pagination: response.pagination,
            };
        } catch (error) {
            this.logger.error('Failed to fetch residents', error);
            throw error;
        }
    }

    /**
     * Get pending verification residents
     * GET /admin/users/pending-verification
     */
    async getPendingResidents(params?: Pick<ResidentFilterParams, 'page' | 'limit' | 'orderColumn' | 'orderBy'>): Promise<PaginatedResponse<Resident>> {
        try {
            this.logger.info('Fetching pending residents', params);

            const queryParams = this.buildQueryParams(params);
            const response = await apiClient.get<PendingResidentsResponse>(
                `${apiConfig.endpoints.residents.admin.pendingVerification}${queryParams}`
            );

            return {
                data: response.data, // <-- düzeltildi
                total: response.pagination.total,
                page: response.pagination.page,
                limit: response.pagination.limit,
                totalPages: response.pagination.totalPages,
                pagination: response.pagination,
            };
        } catch (error) {
            this.logger.error('Failed to fetch pending residents', error);
            throw error;
        }
    }

    /**
     * Search residents with advanced filters
     * GET /admin/users (with search parameters)
     */
    async searchResidents(params: ResidentSearchParams): Promise<PaginatedResponse<Resident>> {
        try {
            this.logger.info('Searching residents', params);

            const searchParams = {
                search: params.query,
                ...params.filters,
            };

            return await this.getAllResidents(searchParams);
        } catch (error) {
            this.logger.error('Failed to search residents', error);
            throw error;
        }
    }

    // === RESIDENT MANAGEMENT === //

    /**
     * Create new resident
     * POST /admin/users
     */
    async createResident(data: CreateResidentDto): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info('Creating new resident', { email: data.email });

            return await this.create(data);
        } catch (error) {
            this.logger.error('Failed to create resident', error);
            throw error;
        }
    }

    /**
     * Get resident by ID
     * GET /admin/users/{id}
     */
    async getResidentById(id: string): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Fetching resident with ID: ${id}`);

            return await this.getById(id);
        } catch (error) {
            this.logger.error(`Failed to fetch resident with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Update resident
     * PUT /admin/users/{id}
     */
    async updateResident(id: string, data: UpdateResidentDto): Promise<ApiResponse<Resident>> {
        try {
            this.logger.info(`Updating resident with ID: ${id}`, data);

            return await this.update(id, data);
        } catch (error) {
            this.logger.error(`Failed to update resident with ID: ${id}`, error);
            throw error;
        }
    }

    /**
     * Delete resident
     * DELETE /admin/users/{id}
     */
    async deleteResident(id: string): Promise<ApiResponse<void>> {
        try {
            this.logger.info(`Deleting resident with ID: ${id}`);

            return await this.delete(id);
        } catch (error) {
            this.logger.error(`Failed to delete resident with ID: ${id}`, error);
            throw error;
        }
    }

    // === APPROVAL MANAGEMENT === //



    /**
     * Bulk approve residents
     */
    async bulkApproveResidents(
        residentIds: string[],
        data: {
            reason?: string;
            assignedRole?: string;
            initialMembershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
        }
    ): Promise<ApiResponse<BulkActionResponse>> {
        try {
            this.logger.info(`Bulk approving ${residentIds.length} residents`);

            const bulkData: BulkActionDto = {
                action: 'approve',
                userIds: residentIds,
                reason: data.reason,
                assignedRole: data.assignedRole as 'admin' | 'resident' | 'tenant',
                membershipTier: data.initialMembershipTier,
            };

            return await this.bulkAction(bulkData);
        } catch (error) {
            this.logger.error('Failed to bulk approve residents', error);
            throw error;
        }
    }

    /**
     * Bulk reject residents
     */
    async bulkRejectResidents(residentIds: string[], reason?: string): Promise<ApiResponse<BulkActionResponse>> {
        try {
            this.logger.info(`Bulk rejecting ${residentIds.length} residents`);

            const bulkData: BulkActionDto = {
                action: 'reject',
                userIds: residentIds,
                reason,
            };

            return await this.bulkAction(bulkData);
        } catch (error) {
            this.logger.error('Failed to bulk reject residents', error);
            throw error;
        }
    }

    // === BULK OPERATIONS === //

    /**
     * Perform bulk action on residents
     * POST /admin/users/bulk-action
     */
    async bulkAction(data: BulkActionDto): Promise<ApiResponse<BulkActionResponse>> {
        try {
            this.logger.info(`Performing bulk action: ${data.action} on ${data.userIds.length} residents`);

            const response = await apiClient.post<BulkActionResponse>(
                apiConfig.endpoints.residents.admin.bulkAction,
                data
            );

            this.logger.info(`Bulk action completed. Success: ${response.data.successCount}, Errors: ${response.data.errorCount}`);
            return response;
        } catch (error) {
            this.logger.error('Failed to perform bulk action', error);
            throw error;
        }
    }

    /**
     * Bulk activate residents
     */
    async bulkActivateResidents(residentIds: string[]): Promise<ApiResponse<BulkActionResponse>> {
        return await this.bulkAction({
            action: 'activate',
            userIds: residentIds,
        });
    }

    /**
     * Bulk deactivate residents
     */
    async bulkDeactivateResidents(residentIds: string[]): Promise<ApiResponse<BulkActionResponse>> {
        return await this.bulkAction({
            action: 'suspend',
            userIds: residentIds,
        });
    }

    /**
     * Bulk delete residents
     */
    async bulkDeleteResidents(residentIds: string[]): Promise<ApiResponse<BulkActionResponse>> {
        // Note: DELETE action is not supported in BulkActionDto, using suspend instead
        return await this.bulkAction({
            action: 'suspend',
            userIds: residentIds,
        });
    }

    /**
     * Bulk assign role to residents
     */
    async bulkAssignRole(residentIds: string[], roleId: string): Promise<ApiResponse<BulkActionResponse>> {
        // Note: ASSIGN_ROLE action is not supported in BulkActionDto
        // This method is kept for API compatibility but will not work with current backend
        throw new Error('Bulk assign role is not supported in current API version');
    }

    /**
     * Bulk update membership tier
     */
    async bulkUpdateMembershipTier(residentIds: string[], membershipTier: 'GOLD' | 'SILVER' | 'STANDARD'): Promise<ApiResponse<BulkActionResponse>> {
        return await this.bulkAction({
            action: 'update_membership',
            userIds: residentIds,
            membershipTier,
        });
    }

    // === STATISTICS & ANALYTICS === //

    /**
     * Get resident statistics
     */
    async getResidentStats(): Promise<ApiResponse<ResidentStatsResponse>> {
        try {
            this.logger.info('Fetching resident statistics');

            const response = await apiClient.get<ResidentStatsResponse>(apiConfig.endpoints.residents.admin.stats);

            this.logger.info('Resident statistics fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch resident statistics', error);
            throw error;
        }
    }

    // === DOCUMENT MANAGEMENT === //

    /**
     * Get resident's national ID document
     * GET /admin/users/{id}/documents/national_id
     */
    async getNationalIdDocument(id: string): Promise<ApiResponse<any>> {
        try {
            this.logger.info(`Fetching national ID document for resident ID: ${id}`);

            const response = await apiClient.get<any>(
                apiConfig.endpoints.residents.admin.nationalIdDocument(id)
            );

            this.logger.info('National ID document fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch national ID document', error);
            throw error;
        }
    }

    /**
     * Get resident's ownership document
     * GET /admin/users/{id}/documents/ownership_document
     */
    async getOwnershipDocument(id: string): Promise<ApiResponse<any>> {
        try {
            this.logger.info(`Fetching ownership document for resident ID: ${id}`);

            const response = await apiClient.get<any>(
                apiConfig.endpoints.residents.admin.ownershipDocument(id)
            );

            this.logger.info('Ownership document fetched successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to fetch ownership document', error);
            throw error;
        }
    }

    /**
     * Upload resident's national ID document
     * POST /admin/users/{id}/documents/national_id/upload
     */
    async uploadNationalIdDocument(
        id: string,
        file: File,
        onProgress?: (progress: number) => void
    ): Promise<ApiResponse<any>> {
        try {
            this.logger.info(`Uploading national ID document for resident ID: ${id}`);

            const formData = new FormData();
            formData.append('document', file);

            const response = await apiClient.uploadFile<any>(
                apiConfig.endpoints.residents.admin.uploadNationalId(id),
                file,
                onProgress
            );

            this.logger.info('National ID document uploaded successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to upload national ID document', error);
            throw error;
        }
    }

    /**
     * Upload resident's ownership document
     * POST /admin/users/{id}/documents/ownership_document/upload
     */
    async uploadOwnershipDocument(
        id: string,
        file: File,
        onProgress?: (progress: number) => void
    ): Promise<ApiResponse<any>> {
        try {
            this.logger.info(`Uploading ownership document for resident ID: ${id}`);

            const formData = new FormData();
            formData.append('document', file);

            const response = await apiClient.uploadFile<any>(
                apiConfig.endpoints.residents.admin.uploadOwnershipDocument(id),
                file,
                onProgress
            );

            this.logger.info('Ownership document uploaded successfully');
            return response;
        } catch (error) {
            this.logger.error('Failed to upload ownership document', error);
            throw error;
        }
    }

    // === FILTERING HELPERS === //

    /**
     * Get residents by status
     */
    async getResidentsByStatus(status: 'ACTIVE' | 'INACTIVE' | 'PENDING' | 'BANNED' | 'SUSPENDED', params?: Omit<ResidentFilterParams, 'status'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, status });
    }

    /**
     * Get residents by membership tier
     */
    async getResidentsByMembershipTier(membershipTier: 'GOLD' | 'SILVER' | 'STANDARD', params?: Omit<ResidentFilterParams, 'membershipTier'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, membershipTier });
    }

    /**
     * Get residents by role
     */
    async getResidentsByRole(role: 'admin' | 'resident' | 'tenant', params?: Omit<ResidentFilterParams, 'role'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, role });
    }

    /**
     * Get residents by property (block/apartment)
     */
    async getResidentsByProperty(block?: string, apartment?: string, params?: Omit<ResidentFilterParams, 'block' | 'apartment'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, block, apartment });
    }

    /**
     * Get residents by ownership type
     */
    async getResidentsByOwnershipType(ownershipType: 'owner' | 'tenant', params?: Omit<ResidentFilterParams, 'ownershipType'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, ownershipType });
    }

    /**
     * Get residents by verification status
     */
    async getResidentsByVerificationStatus(verificationStatus: 'PENDING' | 'APPROVED' | 'REJECTED', params?: Omit<ResidentFilterParams, 'verificationStatus'>): Promise<PaginatedResponse<Resident>> {
        return await this.getAllResidents({ ...params, verificationStatus });
    }

    // === RESIDENT APPROVAL === //

    /**
     * Approve or reject a resident
     * PUT /admin/users/:id/approve
     */
    async approveResident(id: string, data: ResidentApprovalDto): Promise<ApiResponse<ResidentApprovalResponse>> {
        try {
            this.logger.info('Approving/rejecting resident', { id, decision: data.decision });

            const response = await apiClient.put<ResidentApprovalResponse>(
                apiConfig.endpoints.residents.admin.approve(id),
                data
            );

            this.logger.info(`Resident ${data.decision} successfully`, { id });
            return response;
        } catch (error) {
            this.logger.error('Failed to approve/reject resident', error);
            throw error;
        }
    }
}

// Export singleton instance
export const adminResidentService = new AdminResidentService();
export default adminResidentService;
</file>

<file path="src/app/dashboard/units/page.tsx">
'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import {
    unitsService,
    Property,
    PropertyFilterParams,
    PropertyStatistics,
    QuickStats,
    PropertyActivity,
} from '@/services';
import {
    Building,
    Map,
    Plus,
    Download,
    RefreshCw,
    Filter,
    List,
    Grid3X3,
    Home,
    Store,
    Car,
    CheckCircle,
    AlertCircle,
    RotateCcw,
    Calendar,
    Eye,
    MoreVertical,
    User,
    Edit,
    Trash2
} from 'lucide-react';
import { UnitsQuickStats } from './components/UnitsQuickStats';
import { UnitsFilters } from './components/UnitsFilters';
import { UnitsAnalytics } from './components/UnitsAnalytics';
import GenericListView from '@/app/components/templates/GenericListView';
import GenericGridView from '@/app/components/templates/GenericGridView';
import { ExportDropdown } from '@/app/components/ui';
import SearchBar from '@/app/components/ui/SearchBar';
import ViewToggle from '@/app/components/ui/ViewToggle';
import FilterPanel from '@/app/components/ui/FilterPanel';
import StatsCard from '@/app/components/ui/StatsCard';
import Badge from '@/app/components/ui/Badge';
import EmptyState from '@/app/components/ui/EmptyState';
import Skeleton from '@/app/components/ui/Skeleton';
import BulkActionsBar from '@/app/components/ui/BulkActionsBar';
import TablePagination from '@/app/components/ui/TablePagination';
import Checkbox from '@/app/components/ui/Checkbox';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import Portal from '@/app/components/ui/Portal';
import { useUnitCounts } from '@/hooks/useUnitsData';
import { useUnitsActions } from '@/hooks/useUnitsActions';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';

export default function UnitsListPage() {
    // UI State
    const [sidebarOpen, setSidebarOpen] = useState(false);
    // 1. Local search input state
    const [searchInput, setSearchInput] = useState("");
    const [viewMode, setViewMode] = useState<'table' | 'grid' | 'block' | 'map'>('table');
    const [showFilters, setShowFilters] = useState(false);
    const [selectedUnits, setSelectedUnits] = useState<Property[]>([]);
    const [filters, setFilters] = useState<PropertyFilterParams>({
        type: undefined,
        status: undefined,
        page: 1,
        limit: 10,
        orderColumn: 'name',
        orderBy: 'ASC'
    });

    // API Data State
    const [properties, setProperties] = useState<Property[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    // recentActivities kaldırıldı
    const [pagination, setPagination] = useState({
        total: 0,
        page: 1,
        limit: 10,
        totalPages: 0
    });

    // Add this inside the component
    const { residentCount, villaCount, availableCount, loading: countsLoading, error: countsError } = useUnitCounts();

    // Units actions hook
    const {
        isDeleting,
        confirmationDialog,
        showDeleteConfirmation,
        hideConfirmation,
        confirmDelete
    } = useUnitsActions({
        onDeleteSuccess: () => {
            // Refresh the list after successful delete
            loadProperties();
        },
        onRefreshNeeded: () => {
            loadProperties();
        }
    });

    // Filter processing utility - NEW
    // This function removes empty values from filters to prevent sending unnecessary parameters to API
    // When "Tümü" is selected (empty string), the filter is excluded entirely
    const processFilters = useCallback((filterParams: PropertyFilterParams) => {
        const processed = { ...filterParams };

        // Remove empty, undefined, or null values
        Object.keys(processed).forEach(key => {
            const value = processed[key as keyof PropertyFilterParams];
            if (value === '' || value === undefined || value === null) {
                delete processed[key as keyof PropertyFilterParams];
            }
        });

        // Always keep pagination and ordering parameters
        if (!processed.page) processed.page = 1;
        if (!processed.limit) processed.limit = 10;
        if (!processed.orderColumn) processed.orderColumn = 'name';
        if (!processed.orderBy) processed.orderBy = 'ASC';

        return processed;
    }, []);

    // Memoize current filters to prevent unnecessary re-renders
    const currentFilters = useMemo(() => {
        console.log('🔄 Filters memoization updated:', filters);
        return filters;
    }, [filters]);

    // FIXED: Proper async/await and dependencies
    const loadProperties = useCallback(async () => {
        try {
            console.log('🔄 loadProperties BAŞLADI');
            setLoading(true);
            setError(null);

            // Process filters before API call - NEW
            const processedFilters = processFilters(currentFilters);
            console.log('🚀 Loading properties with processed filters:', processedFilters);

            console.log('📞 API çağrısı yapılıyor...');
            const response = await unitsService.getAllUnits(processedFilters);
            console.log('✅ API Response BAŞARILI:', response);
            console.log('📊 API Response - Pagination:', response.pagination);
            console.log('📊 API Response - Data count:', response.data.length);
            
            console.log('💾 setProperties çağrılıyor...');
            setProperties(response.data);
            
            console.log('💾 setPagination çağrılıyor...', response.pagination);
            setPagination(response.pagination);
            
            console.log('✅ loadProperties TAMAMLANDI');
        } catch (err: any) {
            console.error('❌ Failed to load properties:', err);
            setError('Konutlar yüklenirken bir hata oluştu');
            setProperties([]);
        } finally {
            setLoading(false);
        }
    }, [currentFilters, processFilters]);

    // FIXED: Proper dependency management
    useEffect(() => {
        console.log('⚡ useEffect triggered - loadProperties dependency changed');
        loadProperties();
    }, [loadProperties]);

    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Konutlar', href: '/dashboard/units' },
        { label: 'Daire/Villa Listesi', active: true }
    ];

    // Statistics calculations from API data - MEMOIZED
    const unitStats = useMemo(() => {
        const totalUnits = properties.length;
        const occupiedUnits = properties.filter(p => p.status === 'OCCUPIED').length;
        const vacantUnits = properties.filter(p => p.status === 'AVAILABLE').length;
        const maintenanceUnits = properties.filter(p => p.status === 'UNDER_MAINTENANCE').length;
        const occupancyRate = totalUnits > 0 ? Math.round((occupiedUnits / totalUnits) * 100) : 0;
        const apartmentUnits = properties.filter(p => p.type === 'RESIDENCE').length;
        const villaUnits = properties.filter(p => p.type === 'VILLA').length;
        const commercialUnits = properties.filter(p => p.type === 'COMMERCIAL').length;

        return {
            totalUnits,
            occupiedUnits,
            vacantUnits,
            maintenanceUnits,
            occupancyRate,
            apartmentUnits,
            villaUnits,
            commercialUnits
        };
    }, [properties]);

    const router = useRouter();

    const handleUnitAction = useCallback((action: string, unit: Property) => {
        switch (action) {
            case 'view':
                router.push(`/dashboard/units/${unit.id}`);
                break;
            case 'edit':
                // Navigate to edit page - we'll create this page next
                router.push(`/dashboard/units/${unit.id}/edit`);
                break;
            case 'delete':
                showDeleteConfirmation(unit);
                break;
            default:
                console.log('Unknown unit action:', action, unit);
        }
    }, [router, showDeleteConfirmation]);

    const handleQuickAction = useCallback((action: string) => {
        console.log('Quick action:', action);
        // Handle quick actions here
    }, []);

    // Status configuration - MEMOIZED
    const statusConfig = useMemo(() => ({
        AVAILABLE: { label: 'Boş', color: 'info', icon: AlertCircle },
        OCCUPIED: { label: 'Dolu', color: 'success', icon: CheckCircle },
        UNDER_MAINTENANCE: { label: 'Bakımda', color: 'warning', icon: RotateCcw },
        RESERVED: { label: 'Rezerve', color: 'primary', icon: Calendar }
    }), []);

    // Table columns configuration - MEMOIZED
    const tableColumns = useMemo(() => [
        {
            key: 'property',
            header: 'Konut',
            render: (_value: any, unit: Property) => (
                <div>
                    <div className="font-medium text-text-on-light dark:text-text-on-dark">
                        {unit?.propertyNumber || unit?.name || 'N/A'}
                    </div>
                    <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                        {unit?.blockNumber && `Blok ${unit.blockNumber}`}
                        {unit?.floor && ` • ${unit.floor}. kat`}
                    </div>
                </div>
            ),
        },
        {
            key: 'type',
            header: 'Tip',
            render: (_value: any, unit: Property) => (
                <Badge variant="soft" color="secondary">
                    {unit?.type ? unitsService.getTypeInfo(unit.type).label : 'N/A'}
                </Badge>
            ),
        },
        {
            key: 'area',
            header: 'm²',
            render: (_value: any, unit: Property) => unit?.area || '--',
        },
        {
            key: 'resident',
            header: 'Sakin',
            render: (_value: any, unit: Property) => {
                const currentResident = unit?.tenant || unit?.owner;
                if (currentResident) {
                    return (
                        <div>
                            <div className="font-medium text-text-on-light dark:text-text-on-dark">
                                {currentResident.firstName} {currentResident.lastName}
                            </div>
                            <div className="text-sm text-text-light-secondary dark:text-text-secondary">
                                {unit?.tenant ? 'Kiracı' : 'Malik'}
                            </div>
                        </div>
                    );
                }
                return (
                    <span className="text-text-light-muted dark:text-text-muted">
                        Boş
                    </span>
                );
            },
        },
        {
            key: 'status',
            header: 'Durum',
            render: (_value: any, unit: Property) => {
                const statusInfo = statusConfig[unit?.status as keyof typeof statusConfig];
                if (!statusInfo) {
                    return <span className="text-text-light-muted dark:text-text-muted">N/A</span>;
                }
                const StatusIcon = statusInfo.icon;
                return (
                    <div className="flex items-center gap-2">
                        <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
                        <Badge variant="soft" color={statusInfo.color as any}>
                            {statusInfo.label}
                        </Badge>
                    </div>
                );
            },
        },
        {
            key: 'debt',
            header: 'Borç',
            render: (_value: any, unit: Property) => (
                unit?.bills && unit.bills.length > 0 ? (
                    <span className="text-primary-red font-medium">
                        Var
                    </span>
                ) : (
                    <span className="text-semantic-success-500">
                        Temiz
                    </span>
                )
            ),
        },
        {
            key: 'lastPayment',
            header: 'Son Ödeme',
            render: (_value: any, _unit: Property) => '--',
        },
    ], [statusConfig]);

    // UnitActionMenu - MEMOIZED
    const UnitActionMenu: React.FC<{ unit: Property; onAction: (action: string, unit: Property) => void }> = React.memo(({ unit, onAction }) => {
        const [isOpen, setIsOpen] = React.useState(false);
        const buttonRef = React.useRef<HTMLButtonElement>(null);
        const [menuStyle, setMenuStyle] = React.useState<React.CSSProperties>({});

        React.useEffect(() => {
            if (isOpen && buttonRef.current) {
                const rect = buttonRef.current.getBoundingClientRect();
                const menuHeight = 180; // tahmini yükseklik
                const menuWidth = 200;
                const padding = 8;
                let top = rect.bottom + window.scrollY + padding;
                let left = rect.right + window.scrollX - menuWidth;
                if (top + menuHeight > window.innerHeight + window.scrollY) {
                    top = rect.top + window.scrollY - menuHeight - padding;
                }
                if (left < 0) {
                    left = padding;
                }
                setMenuStyle({
                    position: 'absolute',
                    top,
                    left,
                    zIndex: 9999,
                    minWidth: menuWidth,
                });
            }
        }, [isOpen]);

        React.useEffect(() => {
            if (!isOpen) return;
            const handleClick = (e: MouseEvent) => {
                if (
                    buttonRef.current &&
                    !buttonRef.current.contains(e.target as Node)
                ) {
                    setIsOpen(false);
                }
            };
            document.addEventListener('click', handleClick); // mousedown -> click
            return () => document.removeEventListener('click', handleClick);
        }, [isOpen]);

        const handleDropdownToggle = (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(!isOpen);
        };

        const handleAction = (action: string) => (e: React.MouseEvent) => {
            e.stopPropagation();
            setIsOpen(false);
            onAction(action, unit);
        };

        return (
            <div className="flex items-center justify-center">
                <button
                    ref={buttonRef}
                    className="h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 rounded flex items-center justify-center"
                    onClick={handleDropdownToggle}
                    type="button"
                >
                    <MoreVertical className="w-5 h-5" />
                </button>
                {isOpen && (
                    <Portal>
                        <div
                            style={menuStyle}
                            className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 py-1 max-h-72 overflow-auto"
                        >
                            <button onClick={handleAction('view')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <Eye className="w-5 h-5" /> Detay
                            </button>
                            <button onClick={handleAction('edit')} className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3">
                                <Edit className="w-5 h-5" /> Düzenle
                            </button>
                            <hr className="border-gray-200 dark:border-gray-600 my-1" />
                            <button onClick={handleAction('delete')} className="w-full px-4 py-2 text-left text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 flex items-center gap-3">
                                <Trash2 className="w-5 h-5" /> Sil
                            </button>
                        </div>
                    </Portal>
                )}
            </div>
        );
    });

    const UnitActionMenuWrapper: React.FC<{ row: Property }> = useMemo(() =>
        ({ row }) => <UnitActionMenu unit={row} onAction={handleUnitAction} />
        , [handleUnitAction]);

    // Unit card renderer for grid view - MEMOIZED
    const renderUnitCard = useCallback((unit: Property, selectedItems: Array<string | number>, onSelect: (id: string | number) => void, ui: any, ActionMenu?: React.ComponentType<{ row: Property }>) => {
        if (!unit) return null;

        const statusInfo = statusConfig[unit?.status as keyof typeof statusConfig];
        if (!statusInfo) return null;

        const StatusIcon = statusInfo.icon;
        const typeInfo = unit?.type ? unitsService.getTypeInfo(unit.type) : { label: 'N/A' };
        const currentResident = unit?.tenant || unit?.owner;

        return (
            <ui.Card key={unit.id} className="p-4 rounded-2xl shadow-md bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 transition-transform hover:scale-[1.01] hover:shadow-lg">
                <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                        <ui.Checkbox
                            checked={selectedItems.includes(unit.id)}
                            onChange={(e: any) => onSelect(unit.id)}
                            className="focus:ring-2 focus:ring-primary-gold/30"
                        />
                        <div>
                            <h4 className="font-semibold text-text-on-light dark:text-text-on-dark">
                                {unit?.propertyNumber || unit?.name || 'N/A'}
                            </h4>
                            {/* Durum satırı: Daire isminin hemen altında */}
                            {statusInfo && (
                                <div className="flex items-center">
                                    <StatusIcon className={`h-4 w-4 text-semantic-${statusInfo.color}-500`} />
                                    <ui.Badge variant="soft" color={statusInfo.color as any}>
                                        {statusInfo.label}
                                    </ui.Badge>
                                </div>
                            )}
                        </div>
                    </div>
                    {ActionMenu && <ActionMenu row={unit} />}
                </div>

                <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                        <Home className="h-4 w-4" />
                        <span>{typeInfo.label}</span>
                    </div>
                    {unit?.area && (
                        <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                            <Map className="h-4 w-4" />
                            <span>{unit.area} m²</span>
                        </div>
                    )}
                    {unit?.blockNumber && (
                        <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                            <Building className="h-4 w-4" />
                            <span>Blok {unit.blockNumber}</span>
                        </div>
                    )}
                    {currentResident && (
                        <div className="flex items-center gap-2 text-sm text-text-light-secondary dark:text-text-secondary">
                            <User className="h-4 w-4" />
                            <span>{currentResident.firstName} {currentResident.lastName}</span>
                        </div>
                    )}
                </div>

                {unit?.bills && unit.bills.length > 0 && (
                    <div className="mb-4 p-2 bg-primary-red/10 dark:bg-primary-red/20 rounded-lg">
                        <div className="text-sm text-primary-red font-medium">
                            Ödenmemiş Faturalar Var
                        </div>
                    </div>
                )}
            </ui.Card>
        );
    }, [statusConfig]);

    const handleExport = useCallback(() => {
        console.log('Export triggered');
        // Handle export here
    }, []);

    // Refresh handler - FIXED
    const handleRefresh = useCallback(() => {
        loadProperties();
    }, [loadProperties]);

    // Search handlers - FIXED: Prevent duplicate API calls
    const handleSearchInputChange = useCallback((value: string) => {
        setSearchInput(value);
    }, []);

    const handleSearchSubmit = useCallback((value: string) => {
        console.log(`🔍 Search submitted: "${value}"`);
        setSearchInput(value);

        // Batch state updates to prevent multiple re-renders
        React.startTransition(() => {
            setFilters(prev => ({ ...prev, search: value, page: 1 }));
        });
    }, []);

    // Export action handlers - MEMOIZED
    const exportActionHandlers = useMemo(() => ({
        handleExportPDF: () => { console.log('Export PDF'); },
        handleExportExcel: () => { console.log('Export Excel'); },
        handleExportCSV: () => { console.log('Export CSV'); },
        handleExportJSON: () => { console.log('Export JSON'); },
    }), []);

    // Selection handlers - FIXED
    const handleSelectionChange = useCallback((selected: Property[]) => {
        setSelectedUnits(selected);
    }, []);

    const handleGridSelectionChange = useCallback((selectedIds: Array<string | number>) => {
        const selectedProperties = properties.filter(p => selectedIds.includes(p.id));
        setSelectedUnits(selectedProperties);
    }, [properties]);

    // Page change handlers - MEMOIZED
    const handlePageChange = useCallback((page: number) => {
        setFilters(prev => ({ ...prev, page }));
    }, []);

    const handleRecordsPerPageChange = useCallback((limit: number) => {
        console.log('🔄 Records per page changed:', limit);
        setFilters(prev => ({ ...prev, limit, page: 1 }));
    }, []);

    // Filter handlers - FIXED
    const handleApplyFilters = useCallback((newFilters: any) => {
        React.startTransition(() => {
            // Process new filters to remove empty values - NEW
            // This ensures "Tümü" selections (empty strings) are excluded from filter state
            const processedNewFilters = Object.keys(newFilters).reduce((acc, key) => {
                const value = newFilters[key];
                if (value !== '' && value !== undefined && value !== null) {
                    acc[key] = value;
                }
                return acc;
            }, {} as any);

            setFilters(prev => ({ ...prev, ...processedNewFilters, page: 1 }));
            setShowFilters(false);
        });
    }, []);

    const handleResetFilters = useCallback(() => {
        React.startTransition(() => {
            setFilters({
                type: undefined,
                status: undefined,
                page: 1,
                limit: 20,
                orderColumn: 'name',
                orderBy: 'ASC',
            });
            setSearchInput('');
        });
    }, []);

    // Define filter groups for units - MEMOIZED
    const unitFilterGroups = useMemo(() => [
        {
            id: 'type',
            label: 'Konut Tipi',
            type: 'select' as const,
            options: [

                { id: 'RESIDENCE', label: 'Daire', value: 'RESIDENCE' },
                { id: 'VILLA', label: 'Villa', value: 'VILLA' },
                { id: 'COMMERCIAL', label: 'Ticari', value: 'COMMERCIAL' },
            ],
        },
        {
            id: 'status',
            label: 'Durum',
            type: 'select' as const,
            options: [

                { id: 'OCCUPIED', label: 'Dolu', value: 'OCCUPIED' },
                { id: 'AVAILABLE', label: 'Boş', value: 'AVAILABLE' },
                { id: 'UNDER_MAINTENANCE', label: 'Bakımda', value: 'UNDER_MAINTENANCE' },
                { id: 'RESERVED', label: 'Rezerve', value: 'RESERVED' },
            ],
        },
        // {
        //     id: 'blockNumber',
        //     label: 'Blok',
        //     type: 'select' as const,
        //     options: [

        //         { id: 'A', label: 'A Blok', value: 'A' },
        //         { id: 'B', label: 'B Blok', value: 'B' },
        //         { id: 'C', label: 'C Blok', value: 'C' },
        //         { id: 'D', label: 'D Blok', value: 'D' },
        //         { id: 'Villa', label: 'Villa', value: 'Villa' },
        //     ],
        // },
        // {
        //     id: 'rooms',
        //     label: 'Oda Sayısı',
        //     type: 'select' as const,
        //     options: [

        //         { id: '1+1', label: '1+1', value: '1+1' },
        //         { id: '2+1', label: '2+1', value: '2+1' },
        //         { id: '3+1', label: '3+1', value: '3+1' },
        //         { id: '4+1', label: '4+1', value: '4+1' },
        //     ],
        // },
        // {
        //     id: 'debtStatus',
        //     label: 'Borç Durumu',
        //     type: 'select' as const,
        //     options: [

        //         { id: 'clean', label: 'Temiz Hesap', value: 'clean' },
        //         { id: 'indebted', label: 'Borçlu', value: 'indebted' },
        //     ],
        // },
    ], []);

    // Grid UI - MEMOIZED
    const gridUI = useMemo(() => ({
        Card,
        Button,
        Checkbox,
        TablePagination,
        Badge,
        EmptyState,
        Skeleton,
        BulkActionsBar,
    }), []);

    // Get item ID - MEMOIZED
    const getItemId = useCallback((unit: Property) => unit.id, []);

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title="Daire/Villa Listesi"
                        breadcrumbItems={breadcrumbItems}
                    />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Summary */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div>
                                <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-1">
                                    Konut Listesi <span className="text-primary-gold">({unitStats.totalUnits.toLocaleString()} Konut)
                                    </span>
                                </h2>
                                <p className="text-text-light-secondary dark:text-text-secondary">
                                    Dolu: {unitStats.occupiedUnits} ({unitStats.occupancyRate}%) | Boş: {unitStats.vacantUnits} | Bakımda: {unitStats.maintenanceUnits}
                                </p>
                            </div>
                            <div className="flex gap-3">
                                <Button variant="ghost" size="md" icon={RefreshCw} onClick={handleRefresh}>
                                    Yenile
                                </Button>
                                {/*
                                <ExportDropdown
                                    onExportPDF={exportActionHandlers.handleExportPDF}
                                    onExportExcel={exportActionHandlers.handleExportExcel}
                                    onExportCSV={exportActionHandlers.handleExportCSV}
                                    onExportJSON={exportActionHandlers.handleExportJSON}
                                    variant="secondary"
                                    size="md"
                                />
                                */}
                                <Link href="/dashboard/units/add">
                                    <Button variant="primary" size="md" icon={Plus}>
                                        Yeni Konut
                                    </Button>
                                </Link>
                            </div>
                        </div>

                        {/* Search and Filters */}
                        <Card className="mb-6">
                            <div className="p-6">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    {/* Search Bar */}
                                    <div className="flex-1">
                                        <SearchBar
                                            placeholder="Blok, daire no, sakin adı, telefon veya özellik ile ara..."
                                            value={searchInput}
                                            onChange={handleSearchInputChange}
                                            onSearch={handleSearchSubmit}
                                            debounceMs={500}
                                        />
                                    </div>
                                    {/* Filter and View Toggle */}
                                    <div className="flex gap-2 items-center">
                                        <Button
                                            variant={showFilters ? "primary" : "secondary"}
                                            size="md"
                                            icon={Filter}
                                            onClick={() => setShowFilters(true)}
                                        >
                                            Filtreler
                                        </Button>
                                        <ViewToggle
                                            options={[
                                                { id: 'table', label: 'Tablo', icon: List },
                                                { id: 'grid', label: 'Kart', icon: Grid3X3 },
                                                { id: 'block', label: 'Blok', icon: Building },
                                                { id: 'map', label: 'Harita', icon: Map }
                                            ]}
                                            activeView={viewMode}
                                            onViewChange={(viewId) => setViewMode(viewId as typeof viewMode)}
                                            size="sm"
                                        />
                                    </div>
                                </div>
                            </div>
                        </Card>

                        {/* Filter Sidebar (Drawer) */}
                        <div className={`fixed inset-0 z-50 ${showFilters ? 'pointer-events-auto' : 'pointer-events-none'}`}>
                            {/* Backdrop */}
                            <div
                                className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${showFilters ? 'opacity-50' : 'opacity-0'}`}
                                onClick={() => setShowFilters(false)}
                            />
                            {/* Drawer */}
                            <div className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] bg-background-light-card dark:bg-background-card shadow-2xl transform transition-transform duration-300 ease-in-out ${showFilters ? 'translate-x-0' : 'translate-x-full'}`}>
                                <FilterPanel
                                    filterGroups={unitFilterGroups}
                                    onApplyFilters={handleApplyFilters}
                                    onResetFilters={handleResetFilters}
                                    onClose={() => setShowFilters(false)}
                                    variant="sidebar"
                                />
                            </div>
                        </div>

                        {/* Quick Stats Cards */}
                        {countsError && (
                            <Card className="mb-4">
                                <div className="p-4 text-primary-red text-center font-medium">
                                    {countsError}
                                </div>
                            </Card>
                        )}
                        <div className="mb-8">
                            <div className="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-3 gap-4">
                                <StatsCard
                                    title="Apartman Dairesi"
                                    value={residentCount ?? 0}
                                    icon={Building}
                                    color="primary"
                                    loading={countsLoading}
                                    size="md"
                                />
                                <StatsCard
                                    title="Villa"
                                    value={villaCount ?? 0}
                                    icon={Home}
                                    color="success"
                                    loading={countsLoading}
                                    size="md"
                                />
                                <StatsCard
                                    title="Müsait Konut"
                                    value={availableCount ?? 0}
                                    icon={Store}
                                    color="info"
                                    loading={countsLoading}
                                    size="md"
                                />
                            </div>
                        </div>
                        {/* Content Area */}
                        <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
                            {/* Main Content */}
                            <div className="lg:col-span-1">
                                {viewMode === 'table' && (
                                    <>
                                        {console.log('🔍 TABLE VIEW - Pagination props:', {
                                            currentPage: pagination.page,
                                            totalPages: pagination.totalPages,
                                            totalRecords: pagination.total,
                                            recordsPerPage: pagination.limit || 10,
                                            pagination: pagination
                                        })}
                                        <GenericListView
                                            data={properties}
                                            loading={loading}
                                            error={error}
                                            onSelectionChange={handleSelectionChange}
                                            bulkActions={[]}
                                            columns={tableColumns}
                                            pagination={{
                                                currentPage: pagination.page,
                                                totalPages: pagination.totalPages,
                                                totalRecords: pagination.total,
                                                recordsPerPage: pagination.limit || 10,
                                                onPageChange: handlePageChange,
                                                onRecordsPerPageChange: handleRecordsPerPageChange,
                                            }}
                                            emptyStateMessage="Henüz konut kaydı bulunmuyor."
                                            selectable={true}
                                            showPagination={true}
                                            ActionMenuComponent={UnitActionMenuWrapper}
                                        />
                                    </>
                                )}
                                {viewMode === 'grid' && (
                                    <>
                                        {console.log('🔍 GRID VIEW - Pagination props:', {
                                            currentPage: pagination.page,
                                            totalPages: pagination.totalPages,
                                            totalRecords: pagination.total,
                                            recordsPerPage: pagination.limit || 10,
                                            pagination: pagination
                                        })}
                                        <GenericGridView
                                            data={properties}
                                            loading={loading}
                                            error={error}
                                            onSelectionChange={handleGridSelectionChange}
                                            bulkActions={[]}
                                            onAction={handleUnitAction}
                                            selectedItems={selectedUnits.map(u => u.id)}
                                            pagination={{
                                                currentPage: pagination.page,
                                                totalPages: pagination.totalPages,
                                                totalRecords: pagination.total,
                                                recordsPerPage: pagination.limit || 10,
                                                onPageChange: handlePageChange,
                                                onRecordsPerPageChange: handleRecordsPerPageChange,
                                            }}
                                            emptyStateMessage="Henüz konut kaydı bulunmuyor."
                                            ui={gridUI}
                                            ActionMenu={UnitActionMenuWrapper}
                                            renderCard={renderUnitCard}
                                            getItemId={getItemId}
                                            gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
                                        />
                                    </>
                                )}
                                {viewMode === 'block' && (
                                    <Card>
                                        <div className="p-6 text-center">
                                            <Building className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                                            <p className="text-text-light-secondary dark:text-text-secondary">
                                                Blok görünümü yakında gelecek
                                            </p>
                                        </div>
                                    </Card>
                                )}
                                {viewMode === 'map' && (
                                    <Card>
                                        <div className="p-6 text-center">
                                            <Map className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                                            <p className="text-text-light-secondary dark:text-text-secondary">
                                                Harita görünümü yakında gelecek
                                            </p>
                                        </div>
                                    </Card>
                                )}
                            </div>
                        </div>
                    </main>
                </div>

                {/* Delete Confirmation Modal */}
                <ConfirmationModal
                    isOpen={confirmationDialog.isOpen}
                    onClose={hideConfirmation}
                    onConfirm={confirmDelete}
                    title="Konutu Sil"
                    description={
                        confirmationDialog.unit 
                            ? `"${confirmationDialog.unit.propertyNumber || confirmationDialog.unit.name || 'Konut'}" kalıcı olarak silinecektir. Bu işlem geri alınamaz.`
                            : "Bu konutu silmek istediğinizden emin misiniz?"
                    }
                    confirmText="Sil"
                    cancelText="İptal"
                    variant="danger"
                    loading={isDeleting}
                    itemName={confirmationDialog.unit?.propertyNumber || confirmationDialog.unit?.name}
                    itemType="konut"
                />
            </div>
        </ProtectedRoute>
    );
}
</file>

<file path="src/services/config/api.config.ts">
// API Configuration - Infrastructure Layer
export const apiConfig = {
    // Base URLs - Next.js proxy kullanıyoruz (CORS bypass için)
    baseURL: '/api/proxy',
    version: '', // API-99CLUB'da version yok

    // Timeout settings
    timeout: parseInt(process.env.NEXT_PUBLIC_API_TIMEOUT || '30000'),

    // Retry settings
    maxRetries: parseInt(process.env.NEXT_PUBLIC_API_MAX_RETRIES || '3'),
    retryDelay: parseInt(process.env.NEXT_PUBLIC_API_RETRY_DELAY || '1000'),

    // Authentication
    authTokenKey: 'auth_token',
    refreshTokenKey: 'refresh_token',

    // Cache settings
    defaultCacheTime: 5 * 60 * 1000, // 5 minutes

    // Headers
    defaultHeaders: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
    },

    // Endpoints - API-99CLUB Compatible
    endpoints: {
        auth: {
            login: '/auth/login-v2',
            logout: '/auth/logout',
            refresh: '/auth/refresh-token',
            register: '/auth/register',
            me: '/auth/me-v2',
        },
        admin: {
            users: '/admin/users',
            adminStaff: '/admin/users/admin-staff',
            adminStaffCount: '/admin/users/admin-staff-count',
            goldResidentsCount: '/admin/users/gold-residents/count',
            activeResidentsCount: '/admin/users/active-residents/count',
            activeUsersCount: '/admin/users/active-users/count',
            tenantsCount: '/admin/users/tenants/count',
            ownersCount: '/admin/users/owners/count',
            roles: '/admin/roles',
            permissions: '/admin/permissions',
            configs: '/admin/configs',
            auditLogs: '/admin/logging/audit-logs',
        },
        mobile: {
            users: '/mobile/users',
            profile: '/mobile/users/profile',
        },
        user: {
            // User Profile Management
            base: '/admin/users',
            profile: '/users/me',
            avatar: '/users/me/avatar',
            password: '/users/me/password',
            settings: '/users/me/settings',
        },
        i18n: {
            locales: '/admin/i18n/locales',
            translations: '/admin/i18n/translations',
        },
        residents: {
            // Admin Panel - Resident Management
            admin: {
                base: '/admin/users',
                pendingVerification: '/admin/users/pending-verification',
                approve: (id: string) => `/admin/users/${id}/approve`,
                bulkAction: '/admin/users/bulk-action',
                byId: (id: string) => `/admin/users/${id}`,
                stats: '/admin/users/stats',
                // Document endpoints
                nationalIdDocument: (id: string) => `/admin/users/${id}/documents/national_id`,
                ownershipDocument: (id: string) => `/admin/users/${id}/documents/ownership_document`,
                uploadNationalId: (id: string) => `/admin/users/${id}/documents/national_id/upload`,
                uploadOwnershipDocument: (id: string) => `/admin/users/${id}/documents/ownership_document/upload`,
            },
            // Mobile/Resident Panel - Resident Operations
            mobile: {
                base: '/users',
                me: '/users/me',
                uploadAvatar: (id: string) => `/users/${id}/upload-avatar`,
                deleteAvatar: (id: string) => `/users/${id}/avatar`,
                byId: (id: string) => `/users/${id}`,
                documents: (id: string) => `/users/${id}/documents`,
                uploadDocuments: (id: string) => `/users/${id}/upload-documents`,
                deleteDocument: (id: string, docId: string) => `/users/${id}/documents/${docId}`,
                properties: (id: string) => `/users/${id}/properties`,
                updateProperty: (id: string) => `/users/${id}/property`,
            },
        },
        properties: {
            // Admin Panel - Property Management (API-99CLUB Compatible)
            admin: {
                base: '/admin/properties',
                search: '/admin/properties/search',
                byStatus: '/admin/properties/by-status',
                byOwner: (ownerId: string) => `/admin/properties/owner/${ownerId}`,
                byTenant: '/admin/properties/by-tenant',
                byId: (id: string) => `/admin/properties/${id}`,

                // Future Endpoints (to be implemented)
                statistics: '/admin/properties/statistics',
                occupancyStats: '/admin/properties/occupancy-stats',
                quickStats: '/admin/properties/quick-stats',
                recentActivities: '/admin/properties/recent-activities',
                byBlock: (blockNumber: string) => `/admin/properties/by-block/${blockNumber}`,
                filterOptions: '/admin/properties/filter-options',
                bulkUpdate: '/admin/properties/bulk-update',
                bulkAssignTenants: '/admin/properties/bulk-assign-tenants',
                export: '/admin/properties/export',
                import: '/admin/properties/import',
                setMaintenance: (id: string) => `/admin/properties/${id}/maintenance`,
                completeMaintenance: (id: string) => `/admin/properties/${id}/maintenance`,
                // Added endpoints for counts
                residentCount: '/admin/properties/residence/count',
                villaCount: '/admin/properties/villa/count',
                availableCount: '/admin/properties/available/count',
                totalCount: '/admin/properties/count',
                assignedCount: '/admin/properties/assigned/count',
            },
        },
        billing: {
            // Admin Panel - Billing Management (API-99CLUB Compatible)
            admin: {
                base: '/admin/billing',
                pending: '/admin/billing/pending',
                overdue: '/admin/billing/overdue',
                debtSummary: '/admin/billing/debt-summary',
                byProperty: (propertyId: string) => `/admin/billing/property/${propertyId}`,
            },
            payments: {
                base: '/admin/payments',
                pending: '/admin/payments/pending',
            },
        },
        files: {
            upload: '/admin/files/upload',
        },
        tickets: {
            base: '/admin/tickets',
            attachments: (ticketId: string) => `/admin/tickets/${ticketId}/attachments`,
        },
        announcements: {
            // Admin Panel - Announcement Management (API-99CLUB Compatible)
            admin: {
                base: '/admin/announcements',
                active: '/admin/announcements/active',
                expired: '/admin/announcements/expired',
                emergency: '/admin/announcements/emergency',
                byStatus: (status: string) => `/admin/announcements/status/${status}`,
                byProperty: (propertyId: string) => `/admin/announcements/property/${propertyId}`,
                byUser: (userId: string) => `/admin/announcements/user/${userId}`,
                byId: (id: string) => `/admin/announcements/${id}`,
                publish: (id: string) => `/admin/announcements/${id}/publish`,
                archive: (id: string) => `/admin/announcements/${id}/archive`,
                bulkAction: '/admin/announcements/bulk-action',
                uploadImage: (id: string) => `/admin/announcements/${id}/upload-image`,
                stats: '/admin/announcements/stats',
                search: '/admin/announcements/search',
            },
            // Mobile/Tenant Panel - Announcement Reading (Future Implementation)
            mobile: {
                base: '/mobile/announcements',
                active: '/mobile/announcements/active',
                emergency: '/mobile/announcements/emergency',
                byProperty: (propertyId: string) => `/mobile/announcements/property/${propertyId}`,
                byId: (id: string) => `/mobile/announcements/${id}`,
            },
        },
    },
} as const;

export type ApiEndpoints = typeof apiConfig.endpoints;

// Environment check
export const isDevelopment = process.env.NODE_ENV === 'development';
export const isProduction = process.env.NODE_ENV === 'production';

// Feature flags
export const features = {
    enableCache: process.env.NEXT_PUBLIC_ENABLE_CACHE === 'true',
    enableMocking: process.env.NEXT_PUBLIC_ENABLE_MOCKING === 'true',
    enableDebugLogs: isDevelopment,
} as const;
</file>

<file path="src/app/components/ui/EditModal.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import Modal from './Modal';
import Button from './Button';
import Input from './Input';
import Select from './Select';
import DatePicker from './DatePicker';
import { Edit, Save } from 'lucide-react';
import { adminResidentService } from '@/services/admin-resident.service';
import { userService } from '@/services/user.service';

export interface EditFormData {
    id?: string;
    firstName: string;
    lastName: string;
    phone: string;
    email: string;
    role: 'resident' | 'tenant';
    membershipTier?: 'GOLD' | 'SILVER' | 'STANDARD';
    identityNumber?: string;
    gender?: string;
    birthDate?: string;
    birthPlace?: string;
    bloodType?: string;
}

interface EditModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (data: EditFormData) => Promise<void>;
    loading?: boolean;
    initialData?: EditFormData;
    userName?: string;
}

const EditModal: React.FC<EditModalProps> = ({
    isOpen,
    onClose,
    onSubmit,
    loading = false,
    initialData,
    userName = 'Kullanıcı'
}) => {
    const [formData, setFormData] = useState<EditFormData>({
        firstName: initialData?.firstName || '',
        lastName: initialData?.lastName || '',
        phone: initialData?.phone || '',
        email: initialData?.email || '',
        role: initialData?.role || 'resident',
        identityNumber: initialData?.identityNumber || '',
        gender: initialData?.gender || '',
        birthDate: initialData?.birthDate || '',
        birthPlace: initialData?.birthPlace || '',
        bloodType: initialData?.bloodType || ''
    });

    const [errors, setErrors] = useState<Partial<EditFormData>>({});
    const [roles, setRoles] = useState<{ label: string; value: string }[]>([]);
    const [rolesLoading, setRolesLoading] = useState(false);

    useEffect(() => {
        if (isOpen) {
            setFormData(initialData || {
                firstName: '',
                lastName: '',
                phone: '',
                email: '',
                role: 'resident',
                identityNumber: '',
                gender: '',
                birthDate: '',
                birthPlace: '',
                bloodType: ''
            });
            setErrors({});
        }
        if (!isOpen) {
            setFormData({
                firstName: '',
                lastName: '',
                phone: '',
                email: '',
                role: 'resident',
                identityNumber: '',
                gender: '',
                birthDate: '',
                birthPlace: '',
                bloodType: ''
            });
            setErrors({});
        }
    }, [isOpen, initialData]);

    useEffect(() => {
        setRolesLoading(true);
        userService.getAllRoles()
            .then(res => {
                setRoles(
                    (res.data || [])
                        .filter(role => ['resident', 'tenant'].includes(role.slug))
                        .map(role => ({ label: role.name, value: role.id }))
                );
            })
            .catch(() => setRoles([]))
            .finally(() => setRolesLoading(false));
    }, []);

    const handleInputChange = (field: keyof EditFormData, value: string) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: undefined }));
        }
    };

    const validateForm = (): boolean => {
        // No required fields, only validate if identityNumber is present and not numeric
        const newErrors: Partial<EditFormData> = {};
        if (formData.identityNumber && !/^[0-9]+$/.test(formData.identityNumber)) {
            newErrors.identityNumber = 'Ulusal kimlik numarası sadece rakamlardan oluşmalıdır';
        }
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async () => {
        if (!validateForm()) {
            return;
        }
        if (!initialData?.id) {
            console.error('Kullanıcı ID bulunamadı, güncelleme yapılamaz.');
            setErrors(prev => ({ ...prev, form: 'Kullanıcı ID bulunamadı, güncelleme yapılamaz.' }));
            return;
        }
        try {
            // Only include changed fields in the payload, and skip empty strings
            const payload: any = {};
            if (formData.firstName !== initialData?.firstName && formData.firstName) payload.firstName = formData.firstName;
            if (formData.lastName !== initialData?.lastName && formData.lastName) payload.lastName = formData.lastName;
            if (formData.phone !== initialData?.phone && formData.phone) payload.phone = formData.phone;
            if (formData.gender && formData.gender !== initialData?.gender) payload.gender = formData.gender === 'Erkek' ? 'MALE' : formData.gender === 'Kadın' ? 'FEMALE' : 'OTHER';
            if (formData.birthPlace && formData.birthPlace !== initialData?.birthPlace) payload.placeOfBirth = formData.birthPlace;
            if (formData.bloodType && formData.bloodType !== initialData?.bloodType) payload.bloodType = formData.bloodType;
            if (formData.birthDate && formData.birthDate !== initialData?.birthDate) {
                payload.dateOfBirth = formData.birthDate;
            }
            if (formData.role !== initialData?.role && formData.role) payload.roleId = formData.role;
            if (formData.identityNumber && formData.identityNumber !== initialData?.identityNumber) payload.identityNumber = formData.identityNumber;
            await adminResidentService.updateResident(initialData.id, payload);
            onClose();
        } catch (error) {
            console.error('Edit submission failed:', error);
        }
    };

    const genderOptions = [
        { value: '', label: 'Seçiniz' },
        { value: 'Erkek', label: 'Erkek' },
        { value: 'Kadın', label: 'Kadın' },
        { value: 'Diğer', label: 'Diğer' }
    ];

    const bloodTypeOptions = [
        { value: '', label: 'Seçiniz' },
        { value: 'A+', label: 'A+' },
        { value: 'A-', label: 'A-' },
        { value: 'B+', label: 'B+' },
        { value: 'B-', label: 'B-' },
        { value: 'AB+', label: 'AB+' },
        { value: 'AB-', label: 'AB-' },
        { value: 'O+', label: 'O+' },
        { value: 'O-', label: 'O-' }
    ];

    return (
        <Modal
            isOpen={isOpen}
            onClose={onClose}
            title={`${userName} - Bilgileri Düzenle`}
            subtitle="Kullanıcı bilgilerini güncelleyin"
            icon={Edit}
            size="lg"
            closable={!loading}
        >
            <div className="space-y-6">
                {/* Ulusal kimlik numarası - En üstte tek başına */}
                <div>
                    <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                        Ulusal kimlik numarası / Pasaport numarası *
                    </label>
                    <Input
                        placeholder="12345678901"
                        value={formData.identityNumber || ''}
                        onChange={(e: any) => handleInputChange('identityNumber', e.target.value.replace(/[^0-9]/g, ''))}
                        error={errors.identityNumber}
                        disabled={loading}
                    />
                </div>

                {/* Name and Surname */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Ad *
                        </label>
                        <Input
                            value={formData.firstName}
                            onChange={(e: any) => handleInputChange('firstName', e.target.value)}
                            placeholder="Ad"
                            error={errors.firstName}
                            disabled={loading}
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Soyad *
                        </label>
                        <Input
                            value={formData.lastName}
                            onChange={(e: any) => handleInputChange('lastName', e.target.value)}
                            placeholder="Soyad"
                            error={errors.lastName}
                            disabled={loading}
                        />
                    </div>
                </div>

                {/* Contact Information */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            Telefon *
                        </label>
                        <Input
                            value={formData.phone}
                            onChange={(e: any) => handleInputChange('phone', e.target.value)}
                            placeholder="0555 123 4567"
                            error={errors.phone}
                            disabled={loading}
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                            E-posta *
                        </label>
                        <Input
                            value={formData.email}
                            onChange={(e: any) => handleInputChange('email', e.target.value)}
                            placeholder="ornek@email.com"
                            error={errors.email}
                            disabled={loading}
                            type="email"
                        />
                    </div>
                </div>

                {/* Role (remove Membership Tier) */}
                <div>
                    <label className="block text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                        Rol *
                    </label>
                    <Select
                        value={formData.role}
                        onChange={(e: any) => handleInputChange('role', e.target.value)}
                        options={roles}
                        disabled={loading || rolesLoading}
                    />
                </div>

                {/* Divider */}
                <div className="border-t border-gray-200 dark:border-gray-700 pt-6">

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                Cinsiyet
                            </label>
                            <Select
                                value={formData.gender || ''}
                                onChange={(e: any) => handleInputChange('gender', e.target.value)}
                                options={genderOptions}
                                disabled={loading}
                            />
                        </div>
                        <div>
                            <DatePicker
                                label="Doğum Tarihi"
                                value={formData.birthDate || ''}
                                onChange={(e: any) => {
                                    let value = e.target.value;
                                    if (value instanceof Date) {
                                        value = value.toISOString().split('T')[0];
                                    }
                                    setFormData({ ...formData, birthDate: value });
                                }}
                                maxDate={new Date().toISOString().split('T')[0]}
                                variant="default"
                                showIcon={true}
                                disabled={loading}
                            />
                        </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                Doğum Yeri
                            </label>
                            <Input
                                placeholder="İstanbul, Türkiye"
                                value={formData.birthPlace || ''}
                                onChange={(e: any) => handleInputChange('birthPlace', e.target.value)}
                                disabled={loading}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                Kan Grubu
                            </label>
                            <Select
                                value={formData.bloodType || ''}
                                onChange={(e: any) => handleInputChange('bloodType', e.target.value)}
                                options={bloodTypeOptions}
                                disabled={loading}
                            />
                        </div>
                    </div>
                </div>

                {/* Action Buttons */}
                <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <Button
                        variant="secondary"
                        onClick={onClose}
                        disabled={loading}
                    >
                        İptal
                    </Button>
                    <Button
                        variant="primary"
                        onClick={handleSubmit}
                        disabled={loading}
                        isLoading={loading}
                        icon={Save}
                    >
                        Kaydet
                    </Button>
                </div>
            </div>
        </Modal>
    );
};

export default EditModal;
</file>

<file path="src/app/dashboard/requests/page.tsx">
'use client';

import React, { useState } from 'react';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import { useToast } from '@/hooks/useToast';
import { ToastContainer } from '@/app/components/ui/Toast';

// New modular components
import RequestsPageHeader from './components/RequestsPageHeader';
import RequestsSummaryStats from './components/RequestsSummaryStats';
import RequestsQuickStats from './components/RequestsQuickStats';
import RequestsFiltersBar from './components/RequestsFiltersBar';
import RequestsFilterPanel from './components/RequestsFilterPanel';
import RequestsTableView from './components/RequestsTableView';
import RequestsGridView from './components/RequestsGridView';
import RequestsBulkActionsBar from './components/RequestsBulkActionsBar';

// Hooks and types
import { useRequestsList } from './hooks/useRequestsList';
import { ServiceRequest } from '@/services/types/request-list.types';

// Existing modals
import RequestDetailModal from './RequestDetailModal';
import CreateTicketModal from '@/app/dashboard/components/CreateTicketModal';
import ConfirmationModal from '@/app/components/ui/ConfirmationModal';

export default function RequestsListPage() {
  const toast = useToast();

  // UI State
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedRequests, setSelectedRequests] = useState<ServiceRequest[]>([]);
  const [searchValue, setSearchValue] = useState('');

  // Modal states
  const [detailModal, setDetailModal] = useState<{ open: boolean, item: ServiceRequest | null }>({
    open: false,
    item: null
  });
  const [createTicketModal, setCreateTicketModal] = useState(false);
  const [confirmationDialog, setConfirmationDialog] = useState({
    isOpen: false,
    request: null as ServiceRequest | null
  });

  // Main data hook
  const {
    data,
    loading,
    error,
    refetch,
    updateFilters,
    resetFilters
  } = useRequestsList();

  // Breadcrumb configuration
  const breadcrumbItems = [
    { label: 'Ana Sayfa', href: '/dashboard' },
    { label: 'Hizmet Talepleri', href: '/dashboard/requests' },
    { label: 'Aktif Talepler', active: true }
  ];

  // Event Handlers
  const handleRefresh = () => {
    refetch();
  };

  const handleCreateRequest = () => {
    setCreateTicketModal(true);
  };

  const handleSearchChange = (value: string) => {
    setSearchValue(value);
  };

  const handleSearchSubmit = (value: string) => {
    updateFilters({ search: value });
  };

  const handleApplyFilters = (filters: any) => {
    updateFilters(filters);
  };

  const handleResetFilters = () => {
    resetFilters();
    setSearchValue('');
  };

  const handleViewModeChange = (mode: 'table' | 'grid') => {
    setViewMode(mode);
  };

  const handleRequestAction = (action: string, request: ServiceRequest) => {
    switch (action) {
      case 'view':
        setDetailModal({ open: true, item: request });
        break;
      case 'edit':
        // Handle edit action
        console.log('Edit request:', request.id);
        break;
      case 'delete':
        setConfirmationDialog({ isOpen: true, request });
        break;
      default:
        console.log('Unknown action:', action);
    }
  };

  const handleBulkAction = (actionId: string) => {
    console.log('Bulk action:', actionId, 'for', selectedRequests.length, 'requests');
    // Handle bulk actions
    toast.success('Toplu işlem', `${actionId} işlemi ${selectedRequests.length} talep için gerçekleştirildi`);
    setSelectedRequests([]);
  };

  const handleConfirmDelete = () => {
    if (confirmationDialog.request) {
      console.log('Delete confirmed for:', confirmationDialog.request.id);
      toast.success('Talep silindi', 'Talep başarıyla silindi');
      setConfirmationDialog({ isOpen: false, request: null });
      refetch();
    }
  };

  const getActiveFiltersCount = () => {
    // This would be calculated based on actual active filters
    return 0;
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background-primary">
        {/* Sidebar */}
        <Sidebar
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
        />

        {/* Main Content Area */}
        <div className="lg:ml-72">
          {/* Header */}
          <DashboardHeader
            title="Hizmet Talepleri"
            breadcrumbItems={breadcrumbItems}
          />

          {/* Main Content */}
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {/* Page Header */}
            <RequestsPageHeader
              summary={data.summary}
              onRefresh={handleRefresh}
              onCreateRequest={handleCreateRequest}
              loading={loading}
            />

            {/* Summary Stats */}
            {/* <RequestsSummaryStats
              summary={data.summary}
              loading={loading}
            /> */}

            {/* Quick Stats */}
            <RequestsQuickStats
              quickStats={data.quickStats}
              loading={loading}
            />

            {/* Filters Bar */}
            <RequestsFiltersBar
              searchValue={searchValue}
              onSearchChange={handleSearchChange}
              onSearchSubmit={handleSearchSubmit}
              activeFiltersCount={getActiveFiltersCount()}
              onShowFilters={() => setShowFilters(true)}
              viewMode={viewMode}
              onViewModeChange={handleViewModeChange}
            />

            {/* Bulk Actions Bar */}
            {selectedRequests.length > 0 && (
              <RequestsBulkActionsBar
                selectedCount={selectedRequests.length}
                bulkActions={data.bulkActions.actions}
                onBulkAction={handleBulkAction}
                onClearSelection={() => setSelectedRequests([])}
                loading={loading}
              />
            )}

            {/* Content Area */}
            {error ? (
              <div className="text-center py-8">
                <p className="text-primary-red">{error}</p>
              </div>
            ) : (
              <>
                {viewMode === 'table' ? (
                  <RequestsTableView
                    requests={data.requests}
                    columns={data.tableColumns}
                    loading={loading}
                    selectedRequests={selectedRequests}
                    onSelectionChange={(e: any) => setSelectedRequests(e.target.value)}
                    onRequestAction={handleRequestAction}
                    sortOptions={data.sortOptions}
                    onSortChange={(sort) => console.log('Sort changed:', sort)}
                  />
                ) : (
                  <RequestsGridView
                    requests={data.requests}
                    loading={loading}
                    selectedRequests={selectedRequests}
                    onSelectionChange={(e: any) => setSelectedRequests(e.target.value)}
                    onRequestAction={handleRequestAction}
                    loadingCardCount={8}
                  />
                )}
              </>
            )}
          </main>
        </div>

        {/* Filter Panel Sidebar */}
        <div className={`fixed inset-0 z-50 ${showFilters ? 'pointer-events-auto' : 'pointer-events-none'}`}>
          {/* Backdrop */}
          <div
            className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out ${showFilters ? 'opacity-50' : 'opacity-0'
              }`}
            onClick={() => setShowFilters(false)}
          />
          {/* Drawer */}
          <div
            className={`fixed top-0 right-0 h-full w-96 max-w-[90vw] shadow-2xl transform transition-transform duration-300 ease-in-out ${showFilters ? 'translate-x-0' : 'translate-x-full'
              }`}
          >
            <RequestsFilterPanel
              filters={data.filters}
              activeFilters={{}}
              onApplyFilters={handleApplyFilters}
              onResetFilters={handleResetFilters}
              onClose={() => setShowFilters(false)}
              isOpen={showFilters}
            />
          </div>
        </div>

        {/* Modals */}

        {/* Detail Modal */}
        <RequestDetailModal
          open={detailModal.open}
          onClose={() => setDetailModal({ open: false, item: null })}
          item={detailModal.item as any}
          onActionComplete={() => {
            setDetailModal({ open: false, item: null });
            refetch();
          }}
          toast={toast}
        />

        {/* Create Ticket Modal */}
        <CreateTicketModal
          isOpen={createTicketModal}
          onClose={() => setCreateTicketModal(false)}
          onSuccess={() => {
            setCreateTicketModal(false);
            refetch();
          }}
        />

        {/* Delete Confirmation Modal */}
        <ConfirmationModal
          isOpen={confirmationDialog.isOpen}
          onClose={() => setConfirmationDialog({ isOpen: false, request: null })}
          onConfirm={handleConfirmDelete}
          title="Talebi Sil"
          description={
            confirmationDialog.request
              ? `"${confirmationDialog.request.title}" adlı talep kalıcı olarak silinecektir. Bu işlem geri alınamaz.`
              : "Bu talebi silmek istediğinizden emin misiniz?"
          }
          confirmText="Sil"
          cancelText="İptal"
          variant="danger"
          loading={false}
          itemName={confirmationDialog.request?.title}
          itemType="talep"
        />

        {/* Toast Container */}
        <ToastContainer toasts={toast.toasts} onRemove={toast.removeToast} />
      </div>
    </ProtectedRoute>
  );
}
</file>

<file path="src/app/dashboard/residents/[id]/page.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useParams } from 'next/navigation';
import { ProtectedRoute } from '@/app/components/auth/ProtectedRoute';
import DashboardHeader from '@/app/dashboard/components/DashboardHeader';
import Sidebar from '@/app/components/ui/Sidebar';
import Card from '@/app/components/ui/Card';
import Button from '@/app/components/ui/Button';
import Badge from '@/app/components/ui/Badge';
import { useResidentData } from '@/hooks/useResidentData';
import { ResidentsApiService } from '../services/residents-api.service';
import {
    ArrowLeft,
    Edit,
    Phone,
    MessageSquare,
    Building,
    User,
    Home,
    Calendar,
    CreditCard,
    QrCode,
    FileText,
    Settings,
    AlertCircle,
    CheckCircle,
    Clock,
    MapPin,
    Mail,
    IdCard,
    Plus,
    ChevronRight,
    Wrench,
    ExternalLink,
    Trash2,
    Upload,
    Tag
} from 'lucide-react';
import Modal from '@/app/components/ui/Modal';
import Input from '@/app/components/ui/Input';
import Select from '@/app/components/ui/Select';
import DatePicker from '@/app/components/ui/DatePicker';
import DocumentUploadModal from '@/app/components/ui/DocumentUploadModal';
import ApprovalModal, { ApprovalFormData } from '@/app/components/ui/ApprovalModal';
import EditModal, { EditFormData } from '@/app/components/ui/EditModal';
import { useResidentDocuments } from '@/hooks/useResidentDocuments';
import { useResidentTickets } from '@/hooks/useResidentTickets';
import { useToast } from '@/hooks/useToast';
import RequestDetailModal from '../../requests/RequestDetailModal';
import CreateTicketModal from '../../components/CreateTicketModal';
import { ToastContainer } from '@/app/components/ui/Toast';
import { Ticket } from '@/services/ticket.service';
import { useFamilyMembers } from '@/hooks/useFamilyMembers';
import { CreateFamilyMemberDto, FamilyMember } from '@/services/types/family-member.types';
import { useMyProperties } from '@/hooks/useMyProperties';
import { adminResidentService } from '@/services/admin-resident.service';
import qrCodeService, { GuestQrCode } from '@/services/qr-code.service';
import { useRouter } from 'next/navigation';
import { familyMemberService } from '@/services/family-member.service';


export default function ResidentViewPage() {
    const params = useParams();
    const residentId = params.id as string;
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [showDocumentsModal, setShowDocumentsModal] = useState(false);
    const [showAddFamilyModal, setShowAddFamilyModal] = useState(false);
    const [showDocumentUploadModal, setShowDocumentUploadModal] = useState(false);
    const [showUploadPopup, setShowUploadPopup] = useState(false);
    const [uploadDocumentType, setUploadDocumentType] = useState<'national_id' | 'ownership' | null>(null);
    const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0, arrowLeft: 0 });
    const [showCreateTicketModal, setShowCreateTicketModal] = useState(false);
    const [showTicketDetailModal, setShowTicketDetailModal] = useState(false);
    const [showApprovalModal, setShowApprovalModal] = useState(false);
    const [showEditModal, setShowEditModal] = useState(false);
    const [approvalLoading, setApprovalLoading] = useState(false);
    const [editLoading, setEditLoading] = useState(false);
    const [selectedTicket, setSelectedTicket] = useState<Ticket | null>(null);
    const [activeTab, setActiveTab] = useState<'family' | 'properties' | 'documents' | 'requests' | 'activity' | 'guestqrcodes'>('family');

    const [guestQRCodes, setGuestQRCodes] = useState<GuestQrCode[]>([]);
    const [qrLoading, setQrLoading] = useState(false);
    const [qrError, setQrError] = useState<string | null>(null);

    // QRCode Audit Logs State
    const [qrAuditLogs, setQrAuditLogs] = useState<any[]>([]);
    const [qrAuditLoading, setQrAuditLoading] = useState(false);
    const [qrAuditError, setQrAuditError] = useState<string | null>(null);

    // Toast system
    const toast = useToast();

    // Family member form data
    const [familyFormData, setFamilyFormData] = useState({
        firstName: '',
        lastName: '',
        relationship: '',
        age: '',
        phone: '',
        identityNumber: '',
        gender: '',
        birthDate: '',
        birthPlace: '',
        bloodType: ''
    });

    // Use document management hook
    const {
        nationalIdDoc,
        ownershipDoc,
        uploadStates,
        uploadNationalIdDocument,
        uploadOwnershipDocument,
        refreshDocuments
    } = useResidentDocuments({
        residentId,
        autoFetch: true
    });

    // Use resident tickets hook
    const {
        tickets: residentTickets,
        loading: ticketsLoading,
        error: ticketsError,
        refreshTickets
    } = useResidentTickets({
        residentId,
        autoFetch: true
    });

    const { resident, loading, error, refreshData } = useResidentData({
        residentId,
        autoFetch: true
    });

    // Use family members hook
    const {
        familyMembers,
        loading: familyMembersLoading,
        error: familyMembersError,
        saving: familyMembersSaving,
        saveError: familyMembersSaveError,
        createFamilyMember,
        refreshData: refreshFamilyMembers,
        clearSaveError: clearFamilyMembersSaveError
    } = useFamilyMembers({
        userId: residentId,
        autoFetch: true
    });

    // Use properties hook
    const {
        properties,
        loading: propertiesLoading,
        error: propertiesError,
        refreshData: refreshProperties
    } = useMyProperties({
        ownerId: residentId,
        autoFetch: true
    });

    // Property info state for sidebar
    const [propertyInfo, setPropertyInfo] = useState<any>(null);
    const [propertyLoading, setPropertyLoading] = useState(false);
    const [propertyError, setPropertyError] = useState<string | null>(null);

    // Add state for total debt
    const [totalDebt, setTotalDebt] = useState<number | null>(null);
    const [debtLoading, setDebtLoading] = useState(false);
    const [debtError, setDebtError] = useState<string | null>(null);

    useEffect(() => {
        if (residentId) {
            setPropertyLoading(true);
            setPropertyError(null);
            fetch(`/api/proxy/admin/properties/by-user/${residentId}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            })
                .then(async (res) => {
                    if (!res.ok) throw new Error('Konut bilgisi yüklenemedi');
                    const data = await res.json();
                    setPropertyInfo(data?.data || null);
                })
                .catch(() => setPropertyError('Konut bilgisi yüklenemedi'))
                .finally(() => setPropertyLoading(false));
        }
    }, [residentId]);

    // Update debt fetch to use propertyInfo.id
    useEffect(() => {
        if (propertyInfo?.id) {
            setDebtLoading(true);
            setDebtError(null);
            fetch(`/api/proxy/admin/billing/total-debt/${propertyInfo.id}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            })
                .then(async (res) => {
                    if (!res.ok) {
                        setTotalDebt(0);
                        return;
                    }
                    const data = await res.json();
                    setTotalDebt(typeof data?.data === 'number' ? data.data : 0);
                })
                .catch(() => setTotalDebt(0))
                .finally(() => setDebtLoading(false));
        }
    }, [propertyInfo?.id]);

    const router = useRouter();

    useEffect(() => {
        if (activeTab === 'guestqrcodes' && residentId) {
            setQrLoading(true);
            setQrError(null);
            qrCodeService.getGuestQRCodesByUser(residentId)
                .then(setGuestQRCodes)
                .catch(() => setQrError('QR kodlar yüklenemedi'))
                .finally(() => setQrLoading(false));
        }
    }, [activeTab, residentId]);

    useEffect(() => {
        if (activeTab === 'activity' && residentId) {
            setQrAuditLoading(true);
            setQrAuditError(null);
            fetch(`/api/proxy/admin/logging/audit-logs/user/${residentId}/qrcode?limit=10&page=1`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            })
                .then(async (res) => {
                    if (!res.ok) throw new Error('Loglar yüklenemedi');
                    const data = await res.json();
                    setQrAuditLogs(data?.data?.data || []);
                })
                .catch(() => setQrAuditError('Loglar yüklenemedi'))
                .finally(() => setQrAuditLoading(false));
        }
    }, [activeTab, residentId]);

    // Refresh resident data when edit modal closes
    const prevShowEditModal = React.useRef(showEditModal);
    useEffect(() => {
        if (prevShowEditModal.current && !showEditModal) {
            refreshData();
        }
        prevShowEditModal.current = showEditModal;
    }, [showEditModal]);

    // Breadcrumb for resident view page
    const breadcrumbItems = [
        { label: 'Ana Sayfa', href: '/dashboard' },
        { label: 'Sakinler', href: '/dashboard/residents' },
        { label: resident?.fullName || 'Sakin Detayı', active: true }
    ];

    // Yeni: Status ikonunu type'a göre göster
    const getStatusIcon = (type: string) => {
        switch (type) {
            case 'active':
                return <CheckCircle className="h-4 w-4 text-semantic-success-500" />;
            case 'pending':
                return <Clock className="h-4 w-4 text-semantic-warning-500" />;
            case 'inactive':
            case 'suspended':
                return null; // Remove icon for inactive/pasif status
            default:
                return <AlertCircle className="h-4 w-4 text-gray-500" />;
        }
    };

    // Yeni: Status badge rengini color'a göre göster
    const getStatusColor = (color: string) => {
        switch (color) {
            case 'green':
                return 'primary';
            case 'yellow':
                return 'secondary';
            case 'red':
                return 'red';
            default:
                return 'secondary';
        }
    };

    const getTypeColor = (type: string) => {
        switch (type) {
            case 'owner':
                return 'primary';
            case 'tenant':
                return 'primary';
            default:
                return 'secondary';
        }
    };

    const getInitials = (firstName: string, lastName: string) => {
        return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
    };

    const getFamilyMemberInitials = (member: FamilyMember) => {
        return `${member.firstName.charAt(0)}${member.lastName.charAt(0)}`.toUpperCase();
    };

    // Handle edit submission
    const handleEditSubmit = async (data: EditFormData) => {
        try {
            setEditLoading(true);
            // TODO: API call to update resident data
            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulating API call
            toast.success('Kullanıcı bilgileri başarıyla güncellendi!');
            await refreshData(); // Refresh resident data after update
        } catch (error: any) {
            console.error('Edit failed:', error);
            toast.error(
                error?.response?.data?.message ||
                'Güncelleme işlemi başarısız oldu. Lütfen tekrar deneyin.'
            );
        } finally {
            setEditLoading(false);
        }
    };

    // Handle approval submission
    const handleApprovalSubmit = async (data: ApprovalFormData) => {
        try {
            setApprovalLoading(true);

            const approvalData = {
                decision: data.decision,
                reason: data.reason,
                assignedRole: data.assignedRole,
                initialMembershipTier: data.initialMembershipTier
            };

            await adminResidentService.approveResident(residentId, approvalData);

            toast.success(
                data.decision === 'approved'
                    ? 'Kullanıcı başarıyla onaylandı!'
                    : 'Kullanıcı başarıyla reddedildi!'
            );

            // Refresh resident data to update verification status
            await refreshData();

        } catch (error: any) {
            console.error('Approval failed:', error);
            toast.error(
                error?.response?.data?.message ||
                'Onaylama işlemi başarısız oldu. Lütfen tekrar deneyin.'
            );
        } finally {
            setApprovalLoading(false);
        }
    };

    // Handle add family member
    const handleAddFamilyMember = async () => {
        // Debug form data
        console.log('Family Form Data:', familyFormData);
        
        if (
            familyFormData.firstName &&
            familyFormData.lastName &&
            familyFormData.relationship &&
            familyFormData.phone &&
            familyFormData.identityNumber &&
            familyFormData.gender &&
            familyFormData.birthDate &&
            familyFormData.birthPlace &&
            familyFormData.bloodType
        ) {
            try {
                const newMemberData = {
                    identityOrPassportNumber: familyFormData.identityNumber,
                    firstName: familyFormData.firstName,
                    lastName: familyFormData.lastName,
                    relationship: familyFormData.relationship, // Artık doğrudan backend değerleri kullanıyoruz
                    phone: familyFormData.phone,
                    gender: familyFormData.gender as 'MALE' | 'FEMALE' | 'OTHER', // Type assertion for strict enum
                    birthDate: familyFormData.birthDate,
                    birthPlace: familyFormData.birthPlace,
                    bloodType: familyFormData.bloodType,
                    notes: '' // opsiyonel, ekleyebilirsin
                };
                
                // Debug API payload
                console.log('API Payload:', newMemberData);
                
                await familyMemberService.createFamilyMemberAdmin(residentId, newMemberData);
                // Clear form data
                setFamilyFormData({
                    firstName: '',
                    lastName: '',
                    relationship: '',
                    age: '',
                    phone: '',
                    identityNumber: '',
                    gender: '',
                    birthDate: '',
                    birthPlace: '',
                    bloodType: ''
                });
                setShowAddFamilyModal(false);
                toast.success('Aile üyesi başarıyla eklendi!');
            } catch (error: any) {
                console.error('Family member creation error:', error);
                toast.error(error?.response?.data?.message || 'Aile üyesi eklenirken bir hata oluştu.');
            }
        } else {
            console.log('Validation failed. Missing fields:', {
                firstName: !familyFormData.firstName,
                lastName: !familyFormData.lastName,
                relationship: !familyFormData.relationship,
                phone: !familyFormData.phone,
                identityNumber: !familyFormData.identityNumber,
                gender: !familyFormData.gender,
                birthDate: !familyFormData.birthDate,
                birthPlace: !familyFormData.birthPlace,
                bloodType: !familyFormData.bloodType
            });
            toast.error('Lütfen tüm zorunlu alanları doldurun.');
        }
    };

    // Handle ticket detail view
    const handleViewTicketDetail = (ticket: Ticket) => {
        setSelectedTicket(ticket);
        setShowTicketDetailModal(true);
    };

    // Handle create ticket modal
    const handleCreateTicket = () => {
        setShowCreateTicketModal(true);
    };

    // Handle ticket creation success
    const handleTicketCreated = () => {
        setShowCreateTicketModal(false);
        refreshTickets(); // Refresh the tickets list
        toast.success('Talep başarıyla oluşturuldu!');
    };

    // Delete resident handler
    const handleDeleteResident = async () => {
        if (!residentId) return;
        if (!window.confirm('Bu kullanıcıyı silmek istediğinize emin misiniz?')) return;
        try {
            await adminResidentService.deleteResident(residentId);
            toast.success('Kullanıcı başarıyla silindi!');
            router.push('/dashboard/residents');
        } catch (error) {
            toast.error('Kullanıcı silinirken bir hata oluştu.');
        }
    };

    if (loading) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Sakin Detayı" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <div className="animate-pulse">
                                <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
                                <div className="space-y-6">
                                    <div className="h-64 bg-gray-200 rounded"></div>
                                    <div className="h-48 bg-gray-200 rounded"></div>
                                    <div className="h-32 bg-gray-200 rounded"></div>
                                </div>
                            </div>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    if (error) {
        return (
            <ProtectedRoute>
                <div className="min-h-screen bg-background-primary">
                    <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
                    <div className="lg:ml-72">
                        <DashboardHeader title="Hata" breadcrumbItems={breadcrumbItems} />
                        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                            <Card className="text-center">
                                <div className="p-8">
                                    <AlertCircle className="h-12 w-12 text-primary-red mx-auto mb-4" />
                                    <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark mb-2">
                                        Sakin bulunamadı
                                    </h2>
                                    <p className="text-text-light-secondary dark:text-text-secondary mb-6">
                                        {error}
                                    </p>
                                    <Link href="/dashboard/residents">
                                        <Button variant="primary">
                                            Sakin Listesine Dön
                                        </Button>
                                    </Link>
                                </div>
                            </Card>
                        </main>
                    </div>
                </div>
            </ProtectedRoute>
        );
    }

    if (!resident) {
        return null;
    }

    return (
        <ProtectedRoute>
            <div className="min-h-screen bg-background-primary">
                {/* Sidebar */}
                <Sidebar
                    isOpen={sidebarOpen}
                    onClose={() => setSidebarOpen(false)}
                />

                {/* Main Content Area */}
                <div className="lg:ml-72">
                    {/* Header */}
                    <DashboardHeader
                        title={resident?.fullName || 'Sakin Detayı'}
                        breadcrumbItems={breadcrumbItems}
                    />

                    {/* Main Content */}
                    <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                        {/* Page Header with Actions */}
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
                            <div className="flex items-center gap-4">
                                <Link href="/dashboard/residents">
                                    <Button variant="ghost" icon={ArrowLeft}>
                                        Geri Dön
                                    </Button>
                                </Link>
                                <div>
                                    <h1 className="text-2xl font-bold text-text-on-light dark:text-text-on-dark">
                                        {resident?.fullName || 'Yükleniyor...'}
                                    </h1>
                                    <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                        Sakin ID: #{resident?.id || residentId}
                                    </p>
                                </div>
                            </div>

                            <div className="flex gap-3">
                                <Button variant="primary" icon={Plus} onClick={() => setShowCreateTicketModal(true)}>
                                    Talep Oluştur
                                </Button>
                                <Button variant="secondary" icon={Phone}>
                                    Ara
                                </Button>
                                <Button variant="secondary" icon={MessageSquare}>
                                    Mesaj
                                </Button>
                                <Link href="#" onClick={e => { e.preventDefault(); handleDeleteResident(); }}>
                                    <Button variant="danger" icon={Trash2}>
                                        Kaldır
                                    </Button>
                                </Link>
                            </div>
                        </div>

                        {/* Main Content Grid */}
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            {/* Left Column - Main Info */}
                            <div className="lg:col-span-2 space-y-6">
                                {/* Profile Summary */}
                                <Card>
                                    <div className="p-6">
                                        <div className="flex items-start gap-6">
                                            {/* Avatar */}
                                            <div className="flex-shrink-0">
                                                {resident?.profileImage ? (
                                                    <img
                                                        src={resident.profileImage}
                                                        alt={resident.fullName}
                                                        className="w-24 h-24 rounded-full object-cover"
                                                    />
                                                ) : (
                                                    <div className="w-24 h-24 rounded-full bg-primary-gold flex items-center justify-center text-white text-xl font-bold">
                                                        {resident ? getInitials(resident.firstName, resident.lastName) : 'U'}
                                                    </div>
                                                )}
                                            </div>

                                            {/* Basic Info */}
                                            <div className="flex-1">
                                                <div className="flex items-center justify-between mb-2">
                                                    <div className="flex items-center gap-3">
                                                        <h2 className="text-xl font-semibold text-text-on-light dark:text-text-on-dark">
                                                            {resident?.fullName || 'Yükleniyor...'}
                                                        </h2>
                                                        {resident && (
                                                            <Badge
                                                                variant="soft"
                                                                color={getTypeColor(resident.residentType.type)}
                                                            >
                                                                {resident.residentType.label}
                                                            </Badge>
                                                        )}
                                                    </div>

                                                    {/* Edit Button - Same level as name */}
                                                    <Button
                                                        variant="secondary"
                                                        size="sm"
                                                        className="flex items-center gap-2"
                                                        onClick={() => setShowEditModal(true)}
                                                    >
                                                        <Edit className="h-4 w-4" />
                                                        Düzenle
                                                    </Button>
                                                </div>

                                                {resident && (
                                                    <>
                                                        <div className="flex items-center gap-2 mb-3">
                                                            {/* Hide status icon when user is pending */}
                                                            {resident.status.label !== 'Beklemede' && getStatusIcon(resident.status.type)}
                                                            {/* Hide "beklemede" text when user is pending */}
                                                            {resident.status.label !== 'Beklemede' && (
                                                                <Badge
                                                                    variant="soft"
                                                                    color={getStatusColor(resident.status.color)}
                                                                >
                                                                    {resident.status.label}
                                                                </Badge>
                                                            )}
                                                            {resident.verificationStatus && resident.verificationStatus.color === 'yellow' && (
                                                                <div className="flex items-center gap-2">
                                                                    <Button
                                                                        variant="primary"
                                                                        size="sm"
                                                                        onClick={() => setShowApprovalModal(true)}
                                                                        disabled={resident.status.label === 'Beklemede'}
                                                                    >
                                                                        Onayla
                                                                    </Button>
                                                                    {resident.status.label === 'Beklemede' && (
                                                                        <span className="text-sm text-text-light-muted dark:text-text-muted">
                                                                            Belgelerin yüklenmesi gerek
                                                                        </span>
                                                                    )}
                                                                </div>
                                                            )}
                                                        </div>

                                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                                            <div>
                                                                <p className="text-text-light-muted dark:text-text-muted">Üyelik Seviyesi</p>
                                                                <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                                                    {resident.membershipTier}
                                                                </p>
                                                            </div>
                                                            <div>
                                                                <p className="text-text-light-muted dark:text-text-muted">Kayıt Tarihi</p>
                                                                <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                                                    {new Date(resident.registrationDate).toLocaleDateString('tr-TR')}
                                                                </p>
                                                            </div>
                                                        </div>
                                                    </>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </Card>

                                {/* Tabbed Contact/Resident Info Section */}
                                <Card className="mt-6">
                                    <div className="p-0">
                                        <div className="border-b border-gray-200 dark:border-gray-700 px-6 pt-6">
                                            <nav className="flex space-x-4" aria-label="Tabs">
                                                {[
                                                    { label: `Aile Üyeleri (${familyMembers.length})`, key: "family" },
                                                    { label: `Belgeler (${[nationalIdDoc.url, ownershipDoc.url].filter(Boolean).length})`, key: "documents" },
                                                    { label: `Talepler (${residentTickets.length})`, key: "requests" },
                                                    { label: `Aktivite (${qrAuditLogs.length})`, key: "activity" }
                                                ].map((tab, idx) => (
                                                    <button
                                                        key={tab.key}
                                                        className={
                                                            (activeTab === tab.key
                                                                ? "text-primary-gold border-primary-gold"
                                                                : "text-text-light-secondary dark:text-text-secondary border-transparent hover:text-primary-gold hover:border-primary-gold/60") +
                                                            " px-3 py-2 text-sm font-medium border-b-2 transition-colors"
                                                        }
                                                        onClick={() => setActiveTab(tab.key as 'family' | 'documents' | 'requests' | 'activity')}
                                                        type="button"
                                                    >
                                                        {tab.label}
                                                    </button>
                                                ))}
                                            </nav>
                                        </div>
                                        <div className="px-6 py-6">
                                            {activeTab === "family" && (
                                                <div>
                                                    <div className="flex justify-between items-center mb-6">
                                                        <h4 className="text-base font-semibold text-text-on-light dark:text-text-on-dark">Aile Üyeleri</h4>
                                                        <Button
                                                            variant="primary"
                                                            icon={Plus}
                                                            onClick={() => setShowAddFamilyModal(true)}
                                                            disabled={familyMembersSaving}
                                                        >
                                                            Aile Üyesi Ekle
                                                        </Button>
                                                    </div>

                                                    {familyMembersLoading ? (
                                                        <div className="space-y-4">
                                                            {[1, 2, 3].map((i) => (
                                                                <div key={i} className="animate-pulse">
                                                                    <div className="flex items-center gap-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                                                                        <div className="w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
                                                                        <div className="flex-1">
                                                                            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-2"></div>
                                                                            <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    ) : familyMembersError ? (
                                                        <div className="text-center py-8">
                                                            <AlertCircle className="h-12 w-12 text-primary-red mx-auto mb-4" />
                                                            <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                                                                Aile üyeleri yüklenemedi
                                                            </h3>
                                                            <p className="text-sm text-text-light-muted dark:text-text-muted mb-4">
                                                                {familyMembersError}
                                                            </p>
                                                            <Button variant="secondary" size="sm" onClick={refreshFamilyMembers}>
                                                                Tekrar Dene
                                                            </Button>
                                                        </div>
                                                    ) : familyMembers.length > 0 ? (
                                                        <div className="overflow-x-auto">
                                                            <table className="w-full">
                                                                <thead>
                                                                    <tr className="border-b border-gray-200 dark:border-gray-700">
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">Foto</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">Ad Soyad</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">İlişki</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">Yaş</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">Telefon</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">İşlem</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    {familyMembers.map((member) => (
                                                                        <tr key={member.id} className="border-b border-background-light-soft dark:border-background-soft hover:bg-background-light-soft dark:hover:bg-background-soft transition-colors">
                                                                            <td className="py-4 px-4">
                                                                                <div className="w-10 h-10 rounded-full bg-primary-gold/10 flex items-center justify-center text-primary-gold font-medium">
                                                                                    {getFamilyMemberInitials(member)}
                                                                                </div>
                                                                            </td>
                                                                            <td className="py-4 px-4">
                                                                                <div className="font-medium text-text-on-light dark:text-text-on-dark">
                                                                                    {member.firstName} {member.lastName}
                                                                                </div>
                                                                            </td>
                                                                            <td className="py-4 px-4">
                                                                                <span className="text-text-light-secondary dark:text-text-secondary">
                                                                                    {member.relationship}
                                                                                </span>
                                                                            </td>
                                                                            <td className="py-4 px-4">
                                                                                <div className="flex items-center gap-2">
                                                                                    <span className="text-text-on-light dark:text-text-on-dark">
                                                                                        {member.age}
                                                                                    </span>
                                                                                    {member.isMinor && (
                                                                                        <Badge variant="soft" color="secondary" className="text-xs">
                                                                                            Reşit Değil
                                                                                        </Badge>
                                                                                    )}
                                                                                </div>
                                                                            </td>
                                                                            <td className="py-4 px-4">
                                                                                <span className="text-text-light-secondary dark:text-text-secondary">
                                                                                    {member.phone || '-'}
                                                                                </span>
                                                                            </td>
                                                                            <td className="py-4 px-4">
                                                                                <Link href={`/dashboard/residents/${member.id}`}>
                                                                                    <button className="p-2 hover:bg-background-light-soft dark:hover:bg-background-soft rounded-lg transition-colors">
                                                                                        <ChevronRight className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                                                                                    </button>
                                                                                </Link>
                                                                            </td>
                                                                        </tr>
                                                                    ))}
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    ) : (
                                                        <div className="text-center py-8">
                                                            <User className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                                                            <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                                                                Henüz aile üyesi eklenmemiş
                                                            </h3>
                                                            <p className="text-sm text-text-light-muted dark:text-text-muted">
                                                                Bu sakin için aile üyesi bilgilerini ekleyebilirsiniz.
                                                            </p>
                                                        </div>
                                                    )}
                                                </div>
                                            )}
                                            {activeTab === "documents" && (
                                                <div>
                                                    <div className="mb-6">
                                                        <h4 className="text-base font-semibold text-text-on-light dark:text-text-on-dark">Belgeler</h4>
                                                    </div>
                                                    <div className="space-y-6">
                                                        {/* National ID Document */}
                                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                                            <div className="flex items-center justify-between">
                                                                <div className="flex items-center gap-3">
                                                                    <IdCard className="h-5 w-5 text-primary-gold" />
                                                                    <h5 className="font-medium text-text-on-light dark:text-text-on-dark">Kimlik Belgesi</h5>
                                                                    {/* Status indicator */}
                                                                    {nationalIdDoc.url ? (
                                                                        <span className="ml-2 w-3 h-3 rounded-full bg-green-500 inline-block" title="Yüklü"></span>
                                                                    ) : (
                                                                        <span className="ml-2 w-3 h-3 rounded-full bg-red-500 inline-block" title="Eksik"></span>
                                                                    )}
                                                                </div>
                                                                <div className="flex items-center gap-2">
                                                                    {!nationalIdDoc.url && (
                                                                        <Button
                                                                            variant="primary"
                                                                            size="sm"
                                                                            icon={Upload}
                                                                            onClick={(e) => {
                                                                                const rect = e.currentTarget.getBoundingClientRect();
                                                                                const buttonCenter = rect.width / 2;
                                                                                setPopupPosition({
                                                                                    top: rect.top - 200,
                                                                                    left: rect.left,
                                                                                    arrowLeft: buttonCenter - 8
                                                                                });
                                                                                setUploadDocumentType('national_id');
                                                                                setShowUploadPopup(true);
                                                                            }}
                                                                            disabled={nationalIdDoc.loading}
                                                                        >
                                                                            Yükle
                                                                        </Button>
                                                                    )}
                                                                    <Button
                                                                        variant="secondary"
                                                                        size="sm"
                                                                        disabled={!nationalIdDoc.url}
                                                                        onClick={() => nationalIdDoc.url && window.open(nationalIdDoc.url, '_blank')}
                                                                    >
                                                                        Görüntüle
                                                                    </Button>
                                                                    {nationalIdDoc.loading && (
                                                                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-gold"></div>
                                                                    )}
                                                                </div>
                                                            </div>
                                                        </div>
                                                        {/* Ownership Document */}
                                                        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                                                            <div className="flex items-center justify-between">
                                                                <div className="flex items-center gap-3">
                                                                    <FileText className="h-5 w-5 text-primary-gold" />
                                                                    <h5 className="font-medium text-text-on-light dark:text-text-on-dark">Tapu / Mülkiyet Belgesi</h5>
                                                                    {/* Status indicator */}
                                                                    {ownershipDoc.url ? (
                                                                        <span className="ml-2 w-3 h-3 rounded-full bg-green-500 inline-block" title="Yüklü"></span>
                                                                    ) : (
                                                                        <span className="ml-2 w-3 h-3 rounded-full bg-red-500 inline-block" title="Eksik"></span>
                                                                    )}
                                                                </div>
                                                                <div className="flex items-center gap-2">
                                                                    {!ownershipDoc.url && (
                                                                        <Button
                                                                            variant="primary"
                                                                            size="sm"
                                                                            icon={Upload}
                                                                            onClick={(e) => {
                                                                                const rect = e.currentTarget.getBoundingClientRect();
                                                                                const buttonCenter = rect.width / 2;
                                                                                setPopupPosition({
                                                                                    top: rect.top - 200,
                                                                                    left: rect.left,
                                                                                    arrowLeft: buttonCenter - 8
                                                                                });
                                                                                setUploadDocumentType('ownership');
                                                                                setShowUploadPopup(true);
                                                                            }}
                                                                            disabled={ownershipDoc.loading}
                                                                        >
                                                                            Yükle
                                                                        </Button>
                                                                    )}
                                                                    <Button
                                                                        variant="secondary"
                                                                        size="sm"
                                                                        disabled={!ownershipDoc.url}
                                                                        onClick={() => ownershipDoc.url && window.open(ownershipDoc.url, '_blank')}
                                                                    >
                                                                        Görüntüle
                                                                    </Button>
                                                                    {ownershipDoc.loading && (
                                                                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-gold"></div>
                                                                    )}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            )}
                                            {activeTab === "requests" && (
                                                <div>
                                                    <div className="flex justify-between items-center mb-6">
                                                        <h4 className="text-base font-semibold text-text-on-light dark:text-text-on-dark">
                                                            Talep Listesi
                                                        </h4>
                                                        <Button
                                                            variant="primary"
                                                            size="md"
                                                            icon={Plus}
                                                            onClick={handleCreateTicket}
                                                        >
                                                            Yeni Talep
                                                        </Button>
                                                    </div>

                                                    {ticketsLoading ? (
                                                        <div className="space-y-4">
                                                            {[1, 2, 3].map((i) => (
                                                                <div key={i} className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg animate-pulse">
                                                                    <div className="flex items-center justify-between mb-3">
                                                                        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
                                                                        <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
                                                                    </div>
                                                                    <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-2/3 mb-2"></div>
                                                                    <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    ) : ticketsError ? (
                                                        <div className="text-center py-8">
                                                            <AlertCircle className="h-12 w-12 text-primary-red mx-auto mb-4" />
                                                            <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                                                                Talepler yüklenemedi
                                                            </h3>
                                                            <p className="text-sm text-text-light-muted dark:text-text-muted mb-4">
                                                                {ticketsError}
                                                            </p>
                                                            <Button variant="secondary" size="sm" onClick={refreshTickets}>
                                                                Tekrar Dene
                                                            </Button>
                                                        </div>
                                                    ) : residentTickets.length > 0 ? (
                                                        <div className="space-y-4">
                                                            {residentTickets.map((ticket) => (
                                                                <div
                                                                    key={ticket.id}
                                                                    className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:border-primary-gold/30 transition-colors cursor-pointer"
                                                                    onClick={() => handleViewTicketDetail(ticket)}
                                                                >
                                                                    <div className="flex items-center justify-between mb-3">
                                                                        <div className="flex items-center gap-3">
                                                                            <div className="w-8 h-8 bg-primary-gold/10 rounded-lg flex items-center justify-center">
                                                                                <Wrench className="h-4 w-4 text-primary-gold" />
                                                                            </div>
                                                                            <div>
                                                                                <h5 className="font-medium text-text-on-light dark:text-text-on-dark">
                                                                                    {ticket.title}
                                                                                </h5>
                                                                                <p className="text-xs text-text-light-muted dark:text-text-muted">
                                                                                    {ticket.ticketNumber}
                                                                                </p>
                                                                            </div>
                                                                        </div>
                                                                        <div className="flex items-center gap-2">
                                                                            <Badge
                                                                                variant="soft"
                                                                                color={
                                                                                    ticket.status === 'OPEN' ? 'gold' :
                                                                                        ticket.status === 'IN_PROGRESS' ? 'accent' :
                                                                                            ticket.status === 'RESOLVED' ? 'primary' :
                                                                                                ticket.status === 'CLOSED' ? 'primary' :
                                                                                                    'secondary'
                                                                                }
                                                                            >
                                                                                {ticket.status === 'OPEN' ? 'Açık' :
                                                                                    ticket.status === 'IN_PROGRESS' ? 'İşlemde' :
                                                                                        ticket.status === 'RESOLVED' ? 'Çözüldü' :
                                                                                            ticket.status === 'CLOSED' ? 'Kapatıldı' :
                                                                                                ticket.status}
                                                                            </Badge>
                                                                            <ExternalLink className="h-4 w-4 text-text-light-muted dark:text-text-muted" />
                                                                        </div>
                                                                    </div>

                                                                    <p className="text-sm text-text-light-secondary dark:text-text-secondary mb-3" style={{
                                                                        display: '-webkit-box',
                                                                        WebkitLineClamp: 2,
                                                                        WebkitBoxOrient: 'vertical',
                                                                        overflow: 'hidden'
                                                                    }}>
                                                                        {ticket.description}
                                                                    </p>

                                                                    <div className="flex items-center justify-between text-xs text-text-light-muted dark:text-text-muted">
                                                                        <div className="flex items-center gap-4">
                                                                            <span className="flex items-center gap-1">
                                                                                <Building className="h-3 w-3" />
                                                                                {ticket.property?.name || ticket.property?.propertyNumber || 'Konut Belirtilmemiş'}
                                                                            </span>
                                                                            <Badge variant="outline" color="secondary" className="text-xs">
                                                                                {ticket.type === 'FAULT_REPAIR' ? 'Arıza/Tamir' :
                                                                                    ticket.type === 'COMPLAINT' ? 'Şikayet' :
                                                                                        ticket.type === 'REQUEST' ? 'Talep' :
                                                                                            ticket.type === 'MAINTENANCE' ? 'Bakım' :
                                                                                                ticket.type}
                                                                            </Badge>
                                                                        </div>
                                                                        <span className="flex items-center gap-1">
                                                                            <Calendar className="h-3 w-3" />
                                                                            {new Date(ticket.createdAt).toLocaleDateString('tr-TR')}
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    ) : (
                                                        <div className="text-center py-8">
                                                            <Wrench className="h-12 w-12 text-text-light-muted dark:text-text-muted mx-auto mb-4" />
                                                            <h3 className="text-sm font-medium text-text-on-light dark:text-text-on-dark mb-2">
                                                                Henüz talep bulunmuyor
                                                            </h3>
                                                            <p className="text-sm text-text-light-muted dark:text-text-muted">
                                                                Bu sakin için henüz bir hizmet talebi oluşturulmamış.
                                                            </p>
                                                        </div>
                                                    )}
                                                </div>
                                            )}
                                            {activeTab === "activity" && (
                                                <div>
                                                    <div className="mb-6">
                                                        <h4 className="text-base font-semibold text-text-on-light dark:text-text-on-dark">QR Kod Aktivite Günlüğü</h4>
                                                    </div>
                                                    {qrAuditLoading ? (
                                                        <div className="text-center py-8">Yükleniyor...</div>
                                                    ) : qrAuditError ? (
                                                        <div className="text-center py-8 text-primary-red">{qrAuditError}</div>
                                                    ) : qrAuditLogs.length === 0 ? (
                                                        <div className="text-center py-8 text-text-light-muted dark:text-text-muted">Henüz QR kod aktivitesi yok.</div>
                                                    ) : (
                                                        <div className="overflow-x-auto">
                                                            <table className="w-full">
                                                                <thead>
                                                                    <tr className="border-b border-gray-200 dark:border-gray-700">
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">Tarih</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">Aksiyon</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">Tip</th>
                                                                        <th className="text-left py-3 px-4 text-xs font-medium text-text-light-muted dark:text-text-muted uppercase tracking-wide">QR Kod ID</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    {qrAuditLogs.map((log) => (
                                                                        <tr key={log.id} className="border-b border-background-light-soft dark:border-background-soft hover:bg-background-light-soft dark:hover:bg-background-soft transition-colors">
                                                                            <td className="py-4 px-4">{new Date(log.createdAt).toLocaleString('tr-TR')}</td>
                                                                            <td className="py-4 px-4">{log.action}</td>
                                                                            <td className="py-4 px-4">{log.metadata?.type || '-'}</td>
                                                                            <td className="py-4 px-4">{log.metadata?.qrcodeId || '-'}</td>
                                                                        </tr>
                                                                    ))}
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    )}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </Card>
                            </div>

                            {/* Right Column - Sidebar */}
                            <div className="space-y-6">
                                {/* Property Information */}
                                <Card>
                                    <div className="p-6">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                            <Home className="h-5 w-5 text-primary-gold" />
                                            Konut Bilgileri
                                        </h3>
                                        <div className="grid grid-cols-2 gap-4 mb-4">
                                            {/* Konut Adı Başlık + Kart */}
                                            <div>
                                                <div className="flex items-center gap-2 mb-1">
                                                    <Tag className="h-5 w-5 text-primary-gold" />
                                                    <span className="text-base font-semibold text-text-on-light dark:text-text-on-dark">Konut Adı</span>
                                                </div>
                                                <Card className="bg-background-light-soft dark:bg-background-soft rounded-2xl shadow-lg p-6 flex flex-col items-center justify-center min-h-[80px]">
                                                    {propertyLoading ? (
                                                        <div className="animate-pulse h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mb-2"></div>
                                                    ) : propertyError ? (
                                                        <div className="text-primary-red text-sm">{propertyError}</div>
                                                    ) : propertyInfo ? (
                                                        <span className="text-2xl font-bold text-primary-gold">{propertyInfo.name || '-'}</span>
                                                    ) : (
                                                        <span className="text-text-light-muted dark:text-text-muted text-sm">Konut bilgisi bulunamadı.</span>
                                                    )}
                                                </Card>
                                            </div>
                                            {/* Borç Başlık + Kart */}
                                            <div>
                                                <div className="flex items-center gap-2 mb-1">
                                                    <CreditCard className="h-5 w-5 text-primary-red" />
                                                    <span className="text-base font-semibold text-text-on-light dark:text-text-on-dark">Borç</span>
                                                </div>
                                                <Card className="bg-background-light-soft dark:bg-background-soft rounded-2xl shadow-lg p-6 flex flex-col items-center justify-center min-h-[80px]">
                                                    {debtLoading ? (
                                                        <div className="animate-pulse h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mb-2"></div>
                                                    ) : (
                                                        <span className={`text-2xl font-bold ${(totalDebt ?? 0) > 0 ? 'text-primary-red' : 'text-text-on-light dark:text-text-on-dark'}`}>{`${(totalDebt ?? 0)} ع.د`}</span>
                                                    )}
                                                </Card>
                                            </div>
                                        </div>
                                    </div>
                                </Card>

                                {/* Quick Actions */}
                                {/* <Card>
                                    <div className="p-6">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                            <Settings className="h-5 w-5 text-primary-gold" />
                                            Hızlı İşlemler
                                        </h3>
                                        
                                        <div className="space-y-3">
                                            <Link href={`/dashboard/residents/${resident.id}/edit`}>
                                                <Button variant="secondary" className="w-full justify-start" icon={Edit}>
                                                    Bilgileri Düzenle
                                                </Button>
                                            </Link>
                                            
                                            <Button variant="secondary" className="w-full justify-start" icon={QrCode}>
                                                QR Kod Oluştur
                                            </Button>
                                            
                                            <Button variant="secondary" className="w-full justify-start" icon={FileText}>
                                                Rapor Oluştur
                                            </Button>
                                            <Button variant="secondary" className="w-full justify-start" icon={FileText} onClick={() => setShowDocumentsModal(true)}>
                                                Belgeleri Görüntüle
                                            </Button>
                                        </div>
                                    </div>
                                </Card> */}
                                <Card>
                                    <div className="p-6">
                                        <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                            <Phone className="h-5 w-5 text-primary-gold" />
                                            İletişim Bilgileri
                                        </h3>

                                        <div className="grid grid-cols-1 gap-6">
                                            <div className="space-y-4">
                                                <div className="flex items-center gap-3">
                                                    <div className="w-10 h-10 bg-primary-gold/10 rounded-lg flex items-center justify-center">
                                                        <Phone className="h-5 w-5 text-primary-gold" />
                                                    </div>
                                                    <div>
                                                        <p className="text-sm text-text-light-muted dark:text-text-muted">Cep Telefonu</p>
                                                        <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                                            {resident?.contact.formattedPhone || 'Belirtilmemiş'}
                                                        </p>
                                                    </div>
                                                </div>

                                                {resident?.contact.email && (
                                                    <div className="flex items-center gap-3">
                                                        <div className="w-10 h-10 bg-primary-gold/10 rounded-lg flex items-center justify-center">
                                                            <Mail className="h-5 w-5 text-primary-gold" />
                                                        </div>
                                                        <div>
                                                            <p className="text-sm text-text-light-muted dark:text-text-muted">E-posta</p>
                                                            <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                                                {resident.contact.email}
                                                            </p>
                                                        </div>
                                                    </div>
                                                )}
                                            </div>

                                            <div className="space-y-6">


                                                {resident?.lastActivity && (
                                                    <div className="flex items-center gap-3">
                                                        <div className="w-10 h-10 bg-primary-gold/10 rounded-lg flex items-center justify-center">
                                                            <Calendar className="h-5 w-5 text-primary-gold" />
                                                        </div>
                                                        <div>
                                                            <p className="text-sm text-text-light-muted dark:text-text-muted">Son Aktivite</p>
                                                            <p className="font-medium text-text-on-light dark:text-text-on-dark">
                                                                {new Date(resident.lastActivity).toLocaleDateString('tr-TR')}
                                                            </p>
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </Card>
                                {/* Notes */}
                                {resident?.notes && (
                                    <Card>
                                        <div className="p-6">
                                            <h3 className="text-lg font-semibold text-text-on-light dark:text-text-on-dark mb-4 flex items-center gap-2">
                                                <FileText className="h-5 w-5 text-primary-gold" />
                                                Notlar
                                            </h3>
                                            <p className="text-sm text-text-light-secondary dark:text-text-secondary">
                                                {resident.notes}
                                            </p>
                                        </div>
                                    </Card>
                                )}
                            </div>
                        </div>
                    </main>
                </div>
            </div>

            {/* Add Family Member Modal */}
            <Modal
                isOpen={showAddFamilyModal}
                onClose={() => setShowAddFamilyModal(false)}
                title="Aile Üyesi Ekle"
                icon={User}
                size="lg"
            >
                <div className="space-y-6">
                    {/* Ulusal kimlik numarası - En üstte tek başına */}
                    <div>
                        <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                            Ulusal kimlik numarası / Pasaport numarası *
                        </label>
                        <Input
                            placeholder="12345678901 veya AA1234567"
                            value={familyFormData.identityNumber}
                            onChange={(e: any) => setFamilyFormData({ ...familyFormData, identityNumber: e.target.value })}
                        />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                Ad *
                            </label>
                            <Input
                                placeholder="Ayşe"
                                value={familyFormData.firstName}
                                onChange={(e: any) => setFamilyFormData({ ...familyFormData, firstName: e.target.value })}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                Soyad *
                            </label>
                            <Input
                                placeholder="Yılmaz"
                                value={familyFormData.lastName}
                                onChange={(e: any) => setFamilyFormData({ ...familyFormData, lastName: e.target.value })}
                            />
                        </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                Yakınlık derecesi *
                            </label>
                            <Select
                                value={familyFormData.relationship}
                                onChange={(e: any) => setFamilyFormData({ ...familyFormData, relationship: e.target.value })}
                                options={[
                                    { value: '', label: 'Seçiniz' },
                                    { value: 'SPOUSE', label: 'Eş' },
                                    { value: 'CHILD', label: 'Çocuk' },
                                    { value: 'MOTHER', label: 'Anne' },
                                    { value: 'FATHER', label: 'Baba' },
                                    { value: 'SIBLING', label: 'Kardeş' },
                                    { value: 'PARENT', label: 'Ebeveyn' },
                                    { value: 'GRANDPARENT', label: 'Büyükbaba/Büyükanne' },
                                    { value: 'GRANDCHILD', label: 'Torun' },
                                    { value: 'UNCLE_AUNT', label: 'Amca/Teyze/Dayı/Hala' },
                                    { value: 'NEPHEW_NIECE', label: 'Yeğen' },
                                    { value: 'COUSIN', label: 'Kuzen' },
                                    { value: 'OTHER', label: 'Diğer' }
                                ]}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                Telefon *
                            </label>
                            <Input
                                placeholder="0555 123 4567"
                                value={familyFormData.phone}
                                onChange={(e: any) => setFamilyFormData({ ...familyFormData, phone: e.target.value })}
                            />
                        </div>
                    </div>

                    {/* Divider */}
                    <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                        <h5 className="text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-4">
                            Ek Bilgiler (Opsiyonel)
                        </h5>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Cinsiyet
                                </label>
                                <Select
                                    value={familyFormData.gender}
                                    onChange={(e: any) => setFamilyFormData({ ...familyFormData, gender: e.target.value })}
                                    options={[
                                        { value: '', label: 'Seçiniz' },
                                        { value: 'MALE', label: 'Erkek' },
                                        { value: 'FEMALE', label: 'Kadın' },
                                        { value: 'OTHER', label: 'Diğer' }
                                    ]}
                                />
                            </div>
                            <div>
                                <DatePicker
                                    label="Doğum Tarihi"
                                    value={familyFormData.birthDate}
                                    onChange={(e: any) => setFamilyFormData({ ...familyFormData, birthDate: e.target.value })}
                                    maxDate={new Date().toISOString().split('T')[0]}
                                    variant="default"
                                    showIcon={true}
                                />
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Doğum Yeri
                                </label>
                                <Input
                                    placeholder="İstanbul, Türkiye"
                                    value={familyFormData.birthPlace}
                                    onChange={(e: any) => setFamilyFormData({ ...familyFormData, birthPlace: e.target.value })}
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-text-light-secondary dark:text-text-secondary mb-2">
                                    Kan Grubu
                                </label>
                                <Select
                                    value={familyFormData.bloodType}
                                    onChange={(e: any) => setFamilyFormData({ ...familyFormData, bloodType: e.target.value })}
                                    options={[
                                        { value: '', label: 'Seçiniz' },
                                        { value: 'A+', label: 'A+' },
                                        { value: 'A-', label: 'A-' },
                                        { value: 'B+', label: 'B+' },
                                        { value: 'B-', label: 'B-' },
                                        { value: 'AB+', label: 'AB+' },
                                        { value: 'AB-', label: 'AB-' },
                                        { value: 'O+', label: 'O+' },
                                        { value: 'O-', label: 'O-' }
                                    ]}
                                />
                            </div>
                        </div>
                    </div>

                    <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                        <Button
                            variant="secondary"
                            onClick={() => setShowAddFamilyModal(false)}
                        >
                            İptal
                        </Button>
                        <Button
                            variant="primary"
                            onClick={handleAddFamilyMember}
                            disabled={
                                !familyFormData.firstName ||
                                !familyFormData.lastName ||
                                !familyFormData.relationship ||
                                !familyFormData.phone ||
                                !familyFormData.identityNumber ||
                                familyFormData.gender === '' ||
                                !familyFormData.birthDate ||
                                !familyFormData.birthPlace ||
                                !familyFormData.bloodType ||
                                familyMembersSaving
                            }
                            isLoading={familyMembersSaving}
                        >
                            {familyMembersSaving ? 'Ekleniyor...' : 'Aile Üyesi Ekle'}
                        </Button>
                    </div>
                </div>
            </Modal>

            {/* Document Upload Modal */}
            <DocumentUploadModal
                isOpen={showDocumentUploadModal}
                onClose={() => setShowDocumentUploadModal(false)}
                onUploadNationalId={uploadNationalIdDocument}
                onUploadOwnership={uploadOwnershipDocument}
                uploadStates={uploadStates}
            />

            {/* Upload Popup */}
            {showUploadPopup && (
                <>
                    {/* Backdrop - clicking outside closes popup */}
                    <div
                        className="fixed inset-0 z-40"
                        onClick={() => {
                            setShowUploadPopup(false);
                            setUploadDocumentType(null);
                            setPopupPosition({ top: 0, left: 0, arrowLeft: 0 });
                        }}
                    />

                    {/* Popup Content */}
                    <div
                        className="fixed z-50 w-80 bg-background-light-card dark:bg-background-card border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl animate-in slide-in-from-bottom-2 duration-200"
                        style={{
                            top: `${popupPosition.top}px`,
                            left: `${popupPosition.left}px`,
                        }}
                    >
                        {/* Arrow pointing down to button */}
                        <div
                            className="absolute -bottom-2 w-4 h-4 bg-background-light-card dark:bg-background-card border-r border-b border-gray-200 dark:border-gray-700 transform rotate-45"
                            style={{ left: `${popupPosition.arrowLeft}px` }}
                        ></div>
                        <div className="p-4">
                            <div className="flex items-center justify-between mb-4">
                                <h4 className="text-sm font-semibold text-text-on-light dark:text-text-on-dark">
                                    {uploadDocumentType === 'national_id' ? 'Kimlik Belgesi' : 'Tapu / Mülkiyet Belgesi'}
                                </h4>
                                <button
                                    onClick={() => {
                                        setShowUploadPopup(false);
                                        setUploadDocumentType(null);
                                        setPopupPosition({ top: 0, left: 0, arrowLeft: 0 });
                                    }}
                                    className="text-text-light-muted dark:text-text-muted hover:text-text-on-light dark:hover:text-text-on-dark"
                                >
                                    ✕
                                </button>
                            </div>

                            <div className="space-y-2">
                                <div className="
                                    relative border-2 border-dashed rounded-lg p-4 text-center transition-colors
                                    border-primary-gold/30 hover:border-primary-gold/50
                                    bg-background-light-secondary dark:bg-background-secondary
                                ">
                                    <input
                                        accept="image/jpeg,image/png,image/jpg,application/pdf"
                                        className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                                        type="file"
                                        onChange={(e) => {
                                            const file = e.target.files?.[0];
                                            if (file) {
                                                console.log('Dosya seçildi:', file.name);
                                                // Burada dosya yükleme işlemi yapılacak
                                                setShowUploadPopup(false);
                                                setUploadDocumentType(null);
                                                setPopupPosition({ top: 0, left: 0, arrowLeft: 0 });
                                            }
                                        }}
                                    />
                                    <div className="space-y-2">
                                        <Upload className="mx-auto h-8 w-8 text-text-light-secondary dark:text-text-secondary" />
                                        <div className="text-xs text-text-on-light dark:text-text-on-dark">
                                            <span className="font-medium">Dosya seçin</span>
                                            <span className="text-text-light-secondary dark:text-text-secondary"> veya sürükleyin</span>
                                        </div>
                                        <p className="text-xs text-text-light-secondary dark:text-text-secondary">
                                            JPEG, PNG, PDF • Max 10MB
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </>
            )}

            {/* Create Ticket Modal */}
            <CreateTicketModal
                isOpen={showCreateTicketModal}
                onClose={() => setShowCreateTicketModal(false)}
                onSuccess={handleTicketCreated}
            />

            {/* Ticket Detail Modal */}
            <RequestDetailModal
                open={showTicketDetailModal}
                onClose={() => {
                    setShowTicketDetailModal(false);
                    setSelectedTicket(null);
                }}
                item={selectedTicket}
                onActionComplete={() => {
                    setShowTicketDetailModal(false);
                    setSelectedTicket(null);
                    refreshTickets();
                }}
                toast={toast}
            />

            {/* Approval Modal */}
            <ApprovalModal
                isOpen={showApprovalModal}
                onClose={() => setShowApprovalModal(false)}
                onSubmit={handleApprovalSubmit}
                loading={approvalLoading}
                userName={resident?.fullName || 'Kullanıcı'}
            />

            {/* Edit Modal */}
            <EditModal
                isOpen={showEditModal}
                onClose={() => setShowEditModal(false)}
                onSubmit={handleEditSubmit}
                loading={editLoading}
                userName={resident?.fullName}
                initialData={resident ? {
                    id: String(resident.id),
                    firstName: resident.firstName || '',
                    lastName: resident.lastName || '',
                    phone: resident.contact?.formattedPhone || '',
                    email: resident.contact?.email || '',
                    role: resident.residentType.type as 'resident' | 'tenant',
                    identityNumber: '',
                    gender: '',
                    birthDate: '',
                    birthPlace: '',
                    bloodType: ''
                } : undefined}
            />

            {/* Create Ticket Modal */}
            <CreateTicketModal
                isOpen={showCreateTicketModal}
                onClose={() => setShowCreateTicketModal(false)}
                onSuccess={() => {
                    toast.success('Talep başarıyla oluşturuldu!');
                    // Refresh tickets if needed
                    refreshTickets();
                }}
                defaultAssigneeId={resident?.id as string}
                defaultAssigneeName={resident?.fullName}
            />

            {/* Toast Container */}
            <ToastContainer toasts={toast.toasts} onRemove={toast.removeToast} />
        </ProtectedRoute>
    );
}
</file>

</files>
